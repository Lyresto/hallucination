{"trg_prediction": "# Solution\nTo find the closest point to each cluster centroid, we can iterate over each cluster, calculate the distances between all points in the cluster and the centroid, and select the point with the minimum distance.\n\nHere's one way to implement this:\n\n```python\nimport numpy as np\nfrom scipy.spatial import distance\n\n# Example data\ncentroids = np.random.rand(5, 3)\ndata = np.random.rand(100, 3)\n\nresult = []\nfor centroid in centroids:\n    cluster_points = data[np.argmin(distance.cdist(data, [centroid]), axis=0)]\n    result.append(cluster_points)\n\nresult = np.array(result)\n```\n\nThe `distance.cdist` function calculates the pairwise distances between `data` and `centroid`. `np.argmin` is used to find the index of the point with the minimum distance for each column (i.e., each point in `data`). Finally, we append the selected points to the `result` list.\n\nNote that the result will be a 2D array with shape `(n_clusters, 3)`, where `n_clusters` is the number of clusters.\n\nHope this helps!"}