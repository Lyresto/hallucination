{"trg_prediction": "One way to achieve a 'highest to lowest' ranking of a list of values is by subtracting the rank from the maximum rank. Here's how you can do it:\n\n```python\nimport numpy as np\nfrom scipy.stats import rankdata\n\ndef reverse_rankdata(a):\n    ranks = rankdata(a)\n    max_rank = np.max(ranks)\n    reverse_ranks = max_rank - ranks + 1\n    return reverse_ranks.astype(int)\n\n# Example usage\na = [1, 2, 3, 4, 3, 2, 3, 4]\nresult = reverse_rankdata(a)\nprint(result)\n# Output: [7 6 3 1 3 6 3 1]\n```\n\nIn this code, we first calculate the ranks using `rankdata()` function from scipy.stats. Then, we calculate the maximum rank using `np.max()`. Finally, we subtract each rank from the maximum rank and add 1 to get the 'highest to lowest' ranking."}