{"trg_prediction": "One way to solve this problem is to group the data by column 'a', calculate the mean and standard deviation of column 'b' for each group, and then create a new dataframe with the results. Here's one way to do it:\n\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'a':[1,1,1,2,2,2,3,3,3], 'b':[12,13,23,22,23,24,30,35,55]})\n\ngrouped = df.groupby('a')['b']  # Group the data by column 'a'\nmean_std = grouped.agg(['mean', 'std'])  # Calculate mean and standard deviation of column 'b' for each group\nmean_std.columns = ['mean', 'std']  # Rename the columns\nmean_std = mean_std.reset_index()  # Reset the index\n\nprint(mean_std)\n```\n\nOutput:\n```\n   a  mean        std\n0  1  16.0   6.082763\n1  2  23.0   1.000000\n2  3  40.0  13.228757\n```\n\nThe `groupby` function groups the data by column 'a'. The `agg` function is used to calculate the mean and standard deviation of column 'b' for each group. The resulting dataframe is then assigned column names 'mean' and 'std' using the `columns` attribute. Finally, the index is reset using the `reset_index` function to obtain the desired output format."}