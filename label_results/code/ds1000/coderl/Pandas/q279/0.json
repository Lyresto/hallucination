{"trg_prediction": "from datetime import datetime\nfrom collections import defaultdict\nimport pandas as pd\n\ndef days_from(start, end):\n\td = datetime.strptime(start, '%Y-%m-%d')\n\te = datetime.strptime(end, '%Y-%m-%d')\n\treturn len([x for x in d.diff(e).index if x.weekday() == 4])\n\n\ndef week_length(s):\n\treturn len([x for x in s.split('-') if x.isoweekday() == 4])\n\ndef to_milliseconds(s):\n\tn = 0\n\tfor x in s.split('-'):\n\t\tn += int(x[1])*1000\n\treturn n\n\n# df = pd.read_csv('data.csv')\n# print(days_from('2020-02-15 15:30:00', '2020-02-16 15:31:00'))\n# print(days_from('2020-02-17 15:30:00', '2020-02-18 15:30:00'))\n# print(days_from('2020-02-18 15:30:00', '2020-02-17 15:30:00'))\n# print(days_from('2020-02-18 15:30:00', '2020-02-17 21:59:00'))\n# print(days_from('2020-02-18 21:59:00', '2020-02-17 21:59:00'))\n# print(to_milliseconds('2020-02-15 15:30:00'))\n# print(to_milliseconds('2020-02-16 15:30:00'))\n# print(to_milliseconds('2020-02-17 15:30:00'))\n# print(to_milliseconds('2020-02-18 15:30:00'))\n# print(to_milliseconds('2020-02-18 21:59:00'))\n\n# df['Date'] = df['Date'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d'))\n# print(df.head())\n# print(df.tail())\n\n# print(days_"}