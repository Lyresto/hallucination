{"trg_prediction": "from xgboost import xgb\nfrom sklearn.model_selection import GridSearchCV\n\ndef search(x, y, param_grid, n_splits=3):\n\tparam_grid[\"eval_set\"] = [[x, y]]\n\tgrid = GridSearchCV(xgb.XGBRegressor(), param_grid, n_splits=n_splits, verbose=1)\n\tgrid.fit(x, y)\n\tprint(grid.best_params_)\n\treturn grid.best_params_[\"eval_metric\"]\n\ndef predict(x, y, param_grid):\n\treturn search(x, y, param_grid, 2)\n\ndef score(x, y, param_grid):\n\treturn search(x, y, param_grid, 1)[0]\n\ndef load_data():\n\ts = pd.DataFrame({\"x\": range(len(trainX)), \"y\": trainY})\n\tt = pd.DataFrame({\"x\": range(len(testX)), \"y\": testY})\n\tparam_grid = { \"x__range\": [0, 1],\n\t\t\t\t  \"y__in\": [0, 1]}\n\t\n\tprint(search(s, t, param_grid, 3))\n\treturn score(s, t, param_grid), predict(s, t, param_grid), search(s, t, param_grid, 3)\n"}