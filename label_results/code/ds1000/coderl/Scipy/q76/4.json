{"trg_prediction": "import scipy.optimize as scipy\nfrom numpy import dot\n\ndef residual(pars, a, y):\n\tvals = pars.valuesdict()\n\tx = vals['x']\n\tmodel = func(x,a)\n\treturn (y - model)**2\n\ndef myfunc():\n\ta = np.array([ [ 0, 0, 1, 1, 1 ],\n\t\t\t\t [ 1, 0, 1, 0, 1 ],\n\t\t\t\t [ 0, 1, 0, 1, 0 ] ])\n\t# true values of x\n\tx_true = np.array([10, 13, 5, 8, 40])\n\t# data without noise\n\ty = func(x_true,a)\n\t#************************************\n\t# Apriori x0\n\tx0 = np.array([2, 3, 1, 4, 20])\n\tfit_params = Parameters()\n\tfit_params.add('x', value=x0)\n\tout = scipy.optimize.minimize(residual, fit_params, args=(a, y))\n\tprint(out)\n\t# result should be optimal x array\n\tprint(out.x)\n\nmyfunc()\n"}