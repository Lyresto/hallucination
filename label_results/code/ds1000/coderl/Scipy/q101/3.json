{"trg_prediction": "import numpy as np\nimport scipy.optimize as sciopt\n\ndef fit_multinomial(df, weights):\n\tn = len(df)\n\tres = np.array([])\n\tfor i in range(n):\n\t\tres[i] = 0\n\t\tfor j in range(n):\n\t\t\tif df.loc[i,j] == j:\n\t\t\t\tres[i] += weights[j]\n\t\n\tm = np.array([])\n\tl = np.array([])\n\tfor i in range(n):\n\t\tm = np.maximum(m, (weights ** i) / (n - 1))\n\t\tl = np.minimum(l, (weights ** i) / (n - 1))\n\tres = m + l\n\treturn res\n\t\n\t\ndef multinomial_probability(df, x):\n\tn = len(df)\n\tres = 0\n\tfor i in range(n):\n\t\tres += df.loc[x,i] * (weights ** i)\n\treturn res / (n ** (res.shape[0] - 1))\n\t\ndef predict_max_likelihood(df, weights):\n\tn = len(df)\n\tres = np.array([])\n\tfor i in range(n):\n\t\tres[i] = 0\n\t\tfor j in range(n):\n\t\t\tif df.loc[i,j] == j:\n\t\t\t\tres[i] += weights[j]\n\t\n\tm = np.array([])\n\tl = np.array([])\n\tfor i in range(n):\n\t\tm = np.maximum(m, (weights ** i) / (n - 1))\n\t\tl = np.minimum(l, (weights ** i) / (n - 1))\n\t\n\treturn m + l\n"}