{"trg_prediction": "import numpy as np\ndef hypot(x1, x2):\n\treturn (x1 ** 2 + x2 ** 2) ** 0.5\n\ndef solve2d(x, y):\n\tf = lambda x: x ** 2 + x * y + x\n\txs = sorted([x, y])\n\tl = [0, f(xs[0])]\n\tfor i in range(1, len(xs) - 1):\n\t\tf = f(xs[i])\n\t\tt = xs[i + 1] - xs[i]\n\t\tk = f(t)\n\t\tif k < l[0]:\n\t\t\tl[0], l[1], l[2] = k, t, k\n\treturn l\n\ndef solve3d(x, y):\n\tf = lambda x: x ** 2 + x * y + x\n\txs = sorted([x, y])\n\tfor i in range(1, len(x) - 1):\n\t\tf = f(xs[i])\n\t\tt = xs[i + 1] - xs[i]\n\t\tk = f(t)\n\t\tif k < l[1]:\n\t\t\tl[1], l[2] = k, t, k\n\treturn l\n\ndef solve(x, y):\n\tres = solve3d(x, y)\n\tmn = res[0]\n\tmx = res[1]\n\tk = res[2]\n\tdiff = mx - mn\n\tfor i in range(3):\n\t\tif diff < k:\n\t\t\tmn = res[i]\n\t\t\tdiff = k - mn\n\treturn [mn, diff, mx]\n\ndef solve2(x, y):\n\tres = solve(x, y)\n\tmn = res[0]\n\tmx = res[1]\n\tk = res[2]\n\tdiff = mx - mn\n\tfor i in range(3):\n\t\tif diff < k:\n\t\t\tmn = res[i]\n\t\t\tdiff = k - mn\n\treturn [mn, diff, mx]\n\n\n\n\n\n\n#BEGIN SOLUTION\nimport numpy as np\nx = [-1, 2, 5, 100"}