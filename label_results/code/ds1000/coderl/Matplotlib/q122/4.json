{"trg_prediction": "# SOLUTION END\n\n# SOLUTION START\nfrom itertools import chain\n\n# Get x and y\nx, y = np.array(zip(*[iter(x)]*10))\n\n# Get the line by index\n# Line by index is a line plot of y values from 0 to 10.\nline, = plt.plot(y, x)\nlegend = ['Line']\n\n# Adjust the line width\ndef adjust_len(lh):\n\tlh.set_linewidth(0.3)\n\n# Add the line to the legend\ndef add_line(ax):\n\tax.lines.append(line)\n\n# Add a legend containing the line\ndef add_legend(ax):\n\tax.legend([lh.line, line], ['Line', 'Line'])\n\n# Add the legend to the current figure\ndef update_line(idx, val):\n\tax.lines[idx].set_ydata(val)\n\n# Update the y-data of the legend\ndef update_legend(idx, val):\n\tax.legend([ax.lines[idx], ax.lines[idx].get_ydata()], ['Line', 'Line'])\n\n# Update the x-data of the legend\ndef update_legend_x(idx, val):\n\tax.legend([ax.lines[idx], ax.lines[idx].get_xdata()], ['Line', 'Line'])\n\t\n# SOLUTION END\n\n# Add the line and legend to the current figure\ndef plot_multiple(xs, ys):\n\tfor idx, (x, y) in enumerate(zip(xs, ys)):\n\t\tadd_line(ax=ax[idx])\n\t\tadd_legend(ax=ax[idx])\n\t\tupdate_line(idx, y)\n\t\tupdate_legend(idx, y)\n\n# Plot the y-data over the x-data\ndef plot(xs, ys):\n\tplot_multiple(xs, ys)\n\treturn plt.gcf()\n\n# Plot the legend\ndef legend(ax):\n\tax.legend([line, line.get_ydata()], ['Line', 'Line'])\n\treturn ax.legend(['Line', line.get_xdata()], ['Line', line.get"}