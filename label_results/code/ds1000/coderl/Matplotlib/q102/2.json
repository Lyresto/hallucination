{"trg_prediction": "import numpy as np\nimport itertools as it\n\n\ndef plot(data, x_min, x_max, y_min, y_max, figsize):\n\t# Set the colors.\n\t# (1) Left edge is gray (0) and right edge is black\n\t# (2) Top edge is white (1) and bottom edge is grey (2)\n\t# (3) Bottom edge is black (3) and left edge is grey (4)\n\t# SOLUTION START\n\tcolors = np.ones((10, 10))\n\t# Draw the heatmap.\n\tfor i, j in it.product(range(0, 10), range(0, 10)):\n\t\t# Draw a rectangle.\n\t\tx, y = i * x_min, j * y_min\n\t\tcolors[i, j] = 0 if i == j else 4\n\t\tcolors[i, j] = 4 if i == j == 4 else 3\n\t\tcolors[i, j] = 3 if i == j == 3 else 2\n\t\t# Draw a vertical line.\n\t\tcolors[i, j] = 1 if i == j == 2 else 0\n\t\tcolors[i, j] = 1 if i == j == 0 else 2\n\t\t# Save the image.\n\t\tplt.imshow(colors, interpolation='nearest', extent=(x, y, x_max, y_max),\n\t\t\t\t\tcmap='YlGnBu_r')\n\t# Set the width and height of the plots.\n\tplt.suptitle(' heatmap'+ str(x_min) +'' + str(y_min) +'' + str(x_max) +'' + str(y_max),\n\t\t\t\tsize=figsize)\n\t# Show the plots.\n\tplt.show()\n"}