{"trg_prediction": "# # NOQA: E112\nfrom itertools import zip_longest\n\ndef plot(df):\n\tp = df.pivot_table(y=0, x=1)\n\treturn p.plot()\n\n# def pivot(df):\n#     index = 0\n#     for i in range(0, 10):\n#         df.loc[index, i] = df.loc[index, i-1] + 2 * df.loc[index, i]\n#         index += 1\n\n# plot(pivot(df))\n# p1 = pivot(df)\n# p2 = pivot(df, 'y')\n# p3 = pivot(df, 'x')\n\n# SOLUTION START\n# import numpy as np\n# from scipy import stats\n#\n# def plot(df):\n#     res = stats.linregress(df.x, df.y)\n#     x = res[0]\n#     y = res[1]\n#     plt.plot(x, y, 'ro')\n#     return\n#\n# def pivot(df):\n#     index = 0\n#     for i in range(0, 10):\n#         df.loc[index, i] = df.loc[index, i-1] + 2 * df.loc[index, i]\n#         index += 1\n#\n# plot(pivot(df))\n# p1 = pivot(df)\n# p2 = pivot(df, 'y')\n# p3 = pivot(df, 'x')\n\n# SOLUTION START\n# import numpy as np\n# from scipy import stats\n#\n# def plot(df):\n#     res = stats.linregress(df.x, df.y)\n#     x = res[0]\n#     y = res[1]\n#     plt.plot(x, y, 'b-')\n#     return\n#\n# def pivot(df):\n#     index = 0\n#     for i in range(0, 10):\n#         df.loc[index, i] = df.loc[index, i-1] + 2 * df.loc[index, i]\n#         index += 1\n#\n# plot(pivot(df))\n# p1 = pivot"}