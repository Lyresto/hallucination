{"task_id": "HumanEval/0", "completion": "for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "stack = []\nresult = []\ncurrent = ''\nfor char in paren_string:\n    if char == '(':\n        stack.append(char)\n        current += char\n    elif char == ')':\n        stack.pop()\n        current += char\n        if not stack:\n            result.append(current)\n            current = ''\n    else:\n        current += char.replace(' ', '')\nreturn result"}
{"task_id": "HumanEval/2", "completion": "integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "balance = 0\nfor operation in operations:\n    balance += operation\n    if balance < 0:\n        return True\nreturn False"}
{"task_id": "HumanEval/4", "completion": "if len(numbers) == 0:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "if not numbers:\n        return 0, 1\n    else:\n        s = sum(numbers)\n        p = 1\n        for n in numbers:\n            p *= n\n        return s, p"}
{"task_id": "HumanEval/9", "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "result = ''\nfor i in range(len(a)):\n    if a[i] == b[i]:\n        result += '0'\n    else:\n        result += '1'\nreturn result"}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "prefixes = []\nfor i in range(len(string)):\n    prefixes.append(string[:i+1])\nreturn prefixes"}
{"task_id": "HumanEval/15", "completion": "return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"}
{"task_id": "HumanEval/19", "completion": "# Create a dictionary to map number words to their corresponding integers\nnumber_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n# Split the input string into a list of number words\nnumber_words = numbers.split()\n\n# Convert the number words to integers using the dictionary\nnumbers_list = [number_dict[word] for word in number_words]\n\n# Sort the list of integers\nsorted_numbers = sorted(numbers_list)\n\n# Convert the sorted list of integers back to number words using the dictionary\nsorted_number_words = [key for value, key in sorted([(value, key) for key, value in number_dict.items() if value in sorted_numbers])]\n\n# Join the sorted number words into a string and return it\nreturn ' '.join(sorted_number_words)"}
{"task_id": "HumanEval/20", "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "min_num = min(numbers)\nmax_num = max(numbers)\nif min_num == max_num:\n    return [0.0] * len(numbers)\nelse:\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers"}
{"task_id": "HumanEval/23", "completion": "return len(string)"}
{"task_id": "HumanEval/24", "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "factors = []\nd = 2\nwhile n > 1:\n    while n % d == 0:\n        factors.append(d)\n        n //= d\n    d += 1\n    if d*d > n:\n        if n > 1: factors.append(n)\n        break\nreturn factors"}
{"task_id": "HumanEval/26", "completion": "result = []\nfor num in numbers:\n    if num not in result:\n        result.append(num)\nreturn result"}
{"task_id": "HumanEval/27", "completion": "flipped = \"\"\n    for char in string:\n        if char.islower():\n            flipped += char.upper()\n        elif char.isupper():\n            flipped += char.lower()\n        else:\n            flipped += char\n    return flipped"}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "if len(xs) % 2 != 0:\n        raise ValueError(\"List must have even number of coefficients.\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest coefficient must be non-zero.\")\n    # find upper bound for the root\n    upper_bound = 1\n    while poly(xs, upper_bound) < 0:\n        upper_bound *= 2\n    # find lower bound for the root\n    lower_bound = -1\n    while poly(xs, lower_bound) > 0:\n        lower_bound *= 2\n    # use bisection method to find root\n    while True:\n        mid = (upper_bound + lower_bound) / 2\n        if abs(poly(xs, mid)) < 0.0001:\n            return mid\n        elif poly(xs, mid) > 0:\n            upper_bound = mid\n        else:\n            lower_bound = mid"}
{"task_id": "HumanEval/33", "completion": "new_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(sorted(l[i:i+3]))\n        else:\n            new_list.append(l[i])\n    return [item for sublist in new_list for item in sublist]"}
{"task_id": "HumanEval/34", "completion": "return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "if len(l) == 0:\n        return None\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem"}
{"task_id": "HumanEval/36", "completion": "count = 0\nfor i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n        if '7' in str(i):\n            count += 1\nreturn count"}
{"task_id": "HumanEval/37", "completion": "even_indices = [i for i in range(len(l)) if i % 2 == 0]\neven_values = [l[i] for i in even_indices if l[i] % 2 == 0]\neven_values.sort()\nresult = l.copy()\nfor i in even_indices:\n    if l[i] % 2 == 0:\n        result[i] = even_values.pop(0)\nreturn result"}
{"task_id": "HumanEval/38", "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "# First, we need a function to check if a number is prime\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Now we can use this function to generate the n-th prime Fibonacci number\ndef prime_fib(n: int) -> int:\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib1 = 2\n        fib2 = 3\n        count = 2\n        while count < n:\n            fib3 = fib1 + fib2\n            if is_prime(fib3):\n                count += 1\n                if count == n:\n                    return fib3\n            fib1 = fib2\n            fib2 = fib3"}
{"task_id": "HumanEval/40", "completion": "if len(l) < 3:\n        return False\n\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "# Approach:\n# If we consider the cars moving from left to right as positive and cars moving from right to left as negative\n# then we can sort the array and check for the collisions.\n# If the car moving from left to right is at a position greater than the car moving from right to left\n# then there is a collision and we can increment the count of collisions.\n\n\ndef car_race_collision(n: int):\n    cars = []\n    for i in range(n):\n        cars.append(int(input()))\n    cars.sort()\n    collisions = 0\n    for i in range(n):\n        if cars[i] > 0:\n            break\n        for j in range(n-1, i, -1):\n            if cars[j] < 0:\n                break\n            if abs(cars[i]) > abs(cars[j]):\n                break\n            if cars[i] + cars[j] == 0:\n                collisions += 1\n    return collisions\n\n\n# Testing the function with some inputs\nprint(car_race_collision(4))  # Expected output: 2\n# Explanation: The cars are at positions [-4, -3, 1, 2]. The collisions happen at positions -3 and 1.\n\nprint(car_race_collision(5))  # Expected output: 4\n# Explanation: The cars are at positions [-5, -4, 1, 2, 3]. The collisions happen at positions -4, -3, 2 and 3."}
{"task_id": "HumanEval/42", "completion": "return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            d = a + b + c + d\n            a, b, c = b, c, d\n        return d"}
{"task_id": "HumanEval/47", "completion": "sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length//2 - 1] + sorted_list[length//2]) / 2\n    else:\n        return sorted_list[length//2]"}
{"task_id": "HumanEval/48", "completion": "return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n-1, p) % p"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "return x + y"}
{"task_id": "HumanEval/54", "completion": "# First, we need to check if the length of the two strings is the same\n    if len(s0) != len(s1):\n        return False\n    \n    # Then, we can create a dictionary to count the occurrences of each character in s0\n    char_count = {}\n    for char in s0:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Next, we can iterate through s1 and decrement the count of each character in the dictionary\n    for char in s1:\n        if char in char_count:\n            char_count[char] -= 1\n        else:\n            return False\n    \n    # Finally, we can check if all the counts in the dictionary are zero\n    for count in char_count.values():\n        if count != 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/55", "completion": "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "if len(l) <= 1:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "common_elements = []\nfor element in l1:\n    if element in l2 and element not in common_elements:\n        common_elements.append(element)\nreturn sorted(common_elements)"}
{"task_id": "HumanEval/59", "completion": "i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"task_id": "HumanEval/63", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "count = 0\n    s = s.lower()\n    if s[-1] == 'y':\n        vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    else:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n\n# Additional test cases\nassert vowels_count(\"hello\") == 2\nassert vowels_count(\"world\") == 1\nassert vowels_count(\"python\") == 1\nassert vowels_count(\"aeiouy\") == 6\nassert vowels_count(\"AEIOUY\") == 6\nassert vowels_count(\"sky\") == 1\nassert vowels_count(\"fly\") == 1\nassert vowels_count(\"try\") == 0\nassert vowels_count(\"why\") == 0\nassert vowels_count(\"rhythm\") == 0"}
{"task_id": "HumanEval/65", "completion": "x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str"}
{"task_id": "HumanEval/66", "completion": "sum = 0\nfor char in s:\n    if char.isupper():\n        sum += ord(char)\nreturn sum"}
{"task_id": "HumanEval/67", "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize variables for the number of apples and oranges\n    apples = 0\n    oranges = 0\n    # Loop through the words and count the number of apples and oranges\n    for word in words:\n        if word == \"apples\":\n            apples = int(words[words.index(word) - 1])\n        elif word == \"oranges\":\n            oranges = int(words[words.index(word) - 1])\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    # Return the number of mangoes\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even = min(even_values)\n    smallest_even_index = arr.index(smallest_even)\n    return [smallest_even, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    max_num = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            if num > max_num:\n                max_num = num\n    \n    return max_num"}
{"task_id": "HumanEval/70", "completion": "if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a is the multiplication of 3 prime numbers\"\"\"\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Testing the function\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(24))  # False\nprint(is_multiply_prime(2))   # False\nprint(is_multiply_prime(97))  # False\nprint(is_multiply_prime(91))  # True (7 * 13 * 1)"}
{"task_id": "HumanEval/76", "completion": "if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        power = 1\n        while power < x:\n            power *= n\n        return power == x"}
{"task_id": "HumanEval/77", "completion": "# Solution:\n# We can use the cube root function to check if a number is a cube of some integer number.\n# If the cube root of a number is an integer, then the number is a cube of that integer.\n\ndef iscube(a):\n    if a == 0:\n        return True\n    else:\n        cube_root = round(a**(1/3))\n        return cube_root**3 == a\n\n# Let's test the function with the examples from the prompt\n\nprint(iscube(1)) # True\nprint(iscube(2)) # False\nprint(iscube(-1)) # True\nprint(iscube(64)) # True\nprint(iscube(0)) # True\nprint(iscube(180)) # False"}
{"task_id": "HumanEval/78", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n        elif digit.isalpha() and digit.upper() in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "binary = bin(decimal)[2:]\nreturn \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "# First, we need a function to check if a number is prime\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)\n\n# Let's test the function\nprint(prime_length('Hello')) # True\nprint(prime_length('abcdcba')) # True\nprint(prime_length('kittens')) # True\nprint(prime_length('orange')) # False"}
{"task_id": "HumanEval/83", "completion": "count = 0\nfor i in range(10**(n-1), 10**n):\n    if str(i)[0] == '1' or str(i)[-1] == '1':\n        count += 1\nreturn count"}
{"task_id": "HumanEval/84", "completion": "# First, we need to convert the integer N to binary\nbinary_N = bin(N)[2:]\n\n# Then, we can iterate through each digit in the binary representation and add it to a running total\ntotal = 0\nfor digit in binary_N:\n    total += int(digit)\n\n# Finally, we convert the total back to binary and return it as a string\nreturn bin(total)[2:]"}
{"task_id": "HumanEval/85", "completion": "even_odd_indices = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\nreturn sum(even_odd_indices)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)\n\nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('Hello World!!!'))"}
{"task_id": "HumanEval/87", "completion": "if not lst:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result"}
{"task_id": "HumanEval/88", "completion": "if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef encrypt(s):\n    new_s = ''\n    for letter in s:\n        index = alphabet.index(letter)\n        new_index = (index + (2*2)) % 26\n        new_s += alphabet[new_index]\n    return new_s"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst = sorted(set(lst))\n        if len(lst) < 2:\n            return None\n        else:\n            return lst[1]"}
{"task_id": "HumanEval/91", "completion": "count = 0\nsentences = S.split('.')\nfor sentence in sentences:\n    if sentence.startswith('I'):\n        count += 1\n    else:\n        sub_sentences = sentence.split('?')\n        for sub_sentence in sub_sentences:\n            if sub_sentence.startswith('I'):\n                count += 1\n            else:\n                sub_sub_sentences = sub_sentence.split('!')\n                for sub_sub_sentence in sub_sub_sentences:\n                    if sub_sub_sentence.startswith('I'):\n                        count += 1\nreturn count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))"}
{"task_id": "HumanEval/93", "completion": "encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for letter in message:\n        if letter.isalpha():\n            if letter in vowels:\n                encoded_message += chr(ord(letter) + 2)\n            else:\n                if letter.isupper():\n                    encoded_message += letter.lower()\n                else:\n                    encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n    if max_prime is None:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    first_key = keys[0]\n    if first_key.islower():\n        for key in keys:\n            if not key.islower():\n                return False\n    elif first_key.isupper():\n        for key in keys:\n            if not key.isupper():\n                return False\n    else:\n        return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "if n < 2:\n        return []\n    primes = [2]\n    num = 3\n    while len(primes) < n and num < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a = abs(a) % 10\n    b = abs(b) % 10\n    return a * b"}
{"task_id": "HumanEval/98", "completion": "count = 0\nfor i in range(0, len(s), 2):\n    if s[i] in 'AEIOU':\n        count += 1\nreturn count"}
{"task_id": "HumanEval/99", "completion": "value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"task_id": "HumanEval/100", "completion": "pile = []\nfor i in range(n):\n    if i == 0:\n        pile.append(n)\n    elif n % 2 == 0:\n        pile.append(n + i*2)\n    else:\n        pile.append(n + (i*2 - 1))\nreturn pile"}
{"task_id": "HumanEval/101", "completion": "# One possible solution using regular expressions:\n\nimport re\n\ndef words_string(s):\n    # Split the string using commas or spaces as separators\n    words = re.split(r'[,\\s]+', s)\n    # Remove empty strings and return the result\n    return [w for w in words if w]"}
{"task_id": "HumanEval/102", "completion": "max_even = -1\nfor i in range(x, y+1):\n    if i % 2 == 0 and i > max_even:\n        max_even = i\nif max_even == -1:\n    return -1\nelse:\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1)) / (m-n+1))\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "if not arr:\n        return []\n    \n    # filter out strange numbers\n    arr = [num for num in arr if 1 <= num <= 9]\n    \n    # sort and reverse the array\n    arr = sorted(arr, reverse=True)\n    \n    # replace each digit by its corresponding name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[num-1] for num in arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "completion": "result = []\nfor i in range(1, n+1):\n    if i % 2 == 0:\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result.append(fact)\n    else:\n        result.append(sum(range(1, i+1)))\nreturn result"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if num < 0:\n            digits = [int(d) for d in str(num)[1:]]\n            digits[0] *= -1\n        else:\n            digits = [int(d) for d in str(num)]\n        if sum(digits) > 0:\n            count += 1\n    return count\n\nprint(count_nums([]))\nprint(count_nums([-1, 11, -11]))\nprint(count_nums([1, 1, 2]))"}
{"task_id": "HumanEval/109", "completion": "# Approach:\n# 1. Find the minimum element in the array.\n# 2. Check if the array is already sorted in non-decreasing order. If yes, return True.\n# 3. If the minimum element is at index 0, then we can perform right shift operation any number of times to get the sorted array.\n# 4. If the minimum element is at index N-1, then we can perform right shift operation N-1 times to get the sorted array.\n# 5. If the minimum element is at any other index i, then we can perform right shift operation N-i times followed by i right shift operations to get the sorted array.\n# 6. If we cannot get the sorted array using the above steps, then return False.\n\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    min_index = arr.index(min(arr))\n    \n    if arr == sorted(arr):\n        return True\n    \n    if min_index == 0 or min_index == n-1:\n        return True\n    \n    for i in range(n):\n        if arr[(min_index+i)%n] > arr[(min_index+i+1)%n]:\n            return False\n    \n    return True\n\n# Testing the function with some test cases\nprint(move_one_ball([3, 4, 5, 1, 2])) # True\nprint(move_one_ball([3, 5, 4, 1, 2])) # False\nprint(move_one_ball([1, 2, 3, 4, 5])) # True\nprint(move_one_ball([5, 4, 3, 2, 1])) # True\nprint(move_one_ball([2, 3, 4, 5, 1])) # True\nprint(move_one_ball([1])) # True\nprint(move_one_ball([])) # True"}
{"task_id": "HumanEval/110", "completion": "# First, we need to check if lst1 already contains only even numbers\n# If it does, we can return \"YES\" immediately\n# Otherwise, we need to check if there are odd numbers in lst2 that can be exchanged with even numbers in lst1\n# We can use two loops to iterate through lst1 and lst2 and check for possible exchanges\n\ndef exchange(lst1, lst2):\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            continue\n        for j in range(len(lst2)):\n            if lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if all(num % 2 == 0 for num in lst1):\n                    return \"YES\"\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n    return \"NO\"\n\n# Let's test the function with the examples from the prompt\n\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4])) # should return \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4])) # should return \"NO\""}
{"task_id": "HumanEval/111", "completion": "if not test:\n        return {}\n    else:\n        letters = test.split()\n        counts = {}\n        max_count = 0\n        for letter in letters:\n            if letter in counts:\n                counts[letter] += 1\n            else:\n                counts[letter] = 1\n            if counts[letter] > max_count:\n                max_count = counts[letter]\n        result = {}\n        for letter, count in counts.items():\n            if count == max_count:\n                result[letter] = count\n        return result"}
{"task_id": "HumanEval/112", "completion": "# First, we delete all characters in s that are equal to any character in c\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    \n    # Then, we check if the result string is palindrome\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)"}
{"task_id": "HumanEval/113", "completion": "result = []\n    for string in lst:\n        odd_count = 0\n        for digit in string:\n            if int(digit) % 2 != 0:\n                odd_count += 1\n        result.append(\"the number of odd elements in the string {} of the input.\".format(odd_count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "# Initialize variables\nmin_sum = float('inf')\ncurr_sum = 0\n\n# Loop through array\nfor num in nums:\n    # Add current number to current sum\n    curr_sum += num\n    # If current sum is less than minimum sum, update minimum sum\n    if curr_sum < min_sum:\n        min_sum = curr_sum\n    # If current sum is greater than or equal to zero, reset current sum\n    if curr_sum >= 0:\n        curr_sum = 0\n\n# Return minimum sum\nreturn min_sum"}
{"task_id": "HumanEval/115", "completion": "# First, we need to calculate the total amount of water in the wells\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n\n    # If there is no water, we don't need to do anything\n    if total_water == 0:\n        return 0\n\n    # Calculate the number of times we need to lower the buckets\n    num_buckets = math.ceil(total_water / capacity)\n    return num_buckets"}
{"task_id": "HumanEval/116", "completion": "# First, we need to define a function to count the number of ones in the binary representation of a number\ndef count_ones(num):\n    binary = bin(num)[2:] # convert the number to binary and remove the '0b' prefix\n    return binary.count('1') # count the number of ones in the binary representation\n\n# Now we can define the main function to sort the array\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Let's test the function with the given examples\nprint(sort_array([1, 5, 2, 3, 4])) # expected output: [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6])) # expected output: [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4])) # expected output: [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u'] and letter.isalpha():\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    word = word.lower()\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n        elif word[i] not in vowels and word[i+1] in vowels and word[i-1] not in vowels:\n            return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "# Approach:\n# We can use a stack to keep track of the opening brackets.\n# Whenever we encounter a closing bracket, we check if the top of the stack is an opening bracket of the same type.\n# If it is, we pop the opening bracket from the stack and continue.\n# If it isn't, we return 'No' as the string is not balanced.\n# At the end, if the stack is empty, we return 'Yes' as the string is balanced.\n\ndef match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack or stack[-1] != '(':\n                    return 'No'\n                stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Testing the function with the given examples\nprint(match_parens(['()(', ')'])) # Yes\nprint(match_parens([')', ')'])) # No"}
{"task_id": "HumanEval/120", "completion": "# Approach:\n# 1. Sort the array in descending order\n# 2. Return the first k elements of the sorted array\n\ndef maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "sum = 0\nfor i in range(1, len(lst), 2):\n    if lst[i] % 2 != 0:\n        sum += lst[i]\nreturn sum"}
{"task_id": "HumanEval/122", "completion": "sum = 0\nfor i in range(k):\n    if abs(arr[i]) < 100:\n        sum += arr[i]\nreturn sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted(list(set(filter(lambda x: x % 2 == 1, collatz_seq))))\n\nprint(get_odd_collatz(5)) # [1, 5]\nprint(get_odd_collatz(10)) # [1, 5, 13]\nprint(get_odd_collatz(1)) # [1]\nprint(get_odd_collatz(7)) # [1, 7, 11, 17, 25, 37, 55]"}
{"task_id": "HumanEval/124", "completion": "# First, we need to check if the date string is not empty\n    if not date:\n        return False\n    \n    # Then, we need to split the date string into month, day, and year\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    # Next, we need to check if the month is valid\n    month = int(date_parts[0])\n    if month < 1 or month > 12:\n        return False\n    \n    # Then, we need to check if the day is valid\n    day = int(date_parts[1])\n    year = int(date_parts[2])\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    # Finally, we need to check if the date is in the correct format\n    if len(date_parts[0]) != 2 or len(date_parts[1]) != 2 or len(date_parts[2]) != 4:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 == 1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True\n\nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 3, 2, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\" # intervals don't intersect\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n        else:\n            magnitude_sum += num\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "# Approach:\n# 1. Create a dictionary with key as the value in the cell and value as the tuple of row and column of the cell\n# 2. Sort the keys of the dictionary\n# 3. For each key, find the shortest path from that cell to all other cells using BFS\n# 4. If the length of the path is k, add it to the list of valid paths\n# 5. Sort the valid paths lexicographically and return the first one\n\nfrom collections import deque\n\ndef minPath(grid, k):\n    n = len(grid)\n    cell_dict = {}\n    for i in range(n):\n        for j in range(n):\n            cell_dict[grid[i][j]] = (i, j)\n    keys = sorted(cell_dict.keys())\n    valid_paths = []\n    for i in range(len(keys)):\n        start = cell_dict[keys[i]]\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        q = deque([(start, 0, [grid[start[0]][start[1]]])])\n        while q:\n            curr, length, path = q.popleft()\n            if length == k:\n                valid_paths.append(path)\n                break\n            visited[curr[0]][curr[1]] = True\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                x, y = curr[0] + dx, curr[1] + dy\n                if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n                    q.append(((x, y), length + 1, path + [grid[x][y]]))\n    valid_paths.sort()\n    return valid_paths[0]"}
{"task_id": "HumanEval/130", "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    else:\n        seq = [3, 2, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i // 2)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "product = 1\neven = True\nwhile n > 0:\n    digit = n % 10\n    if digit % 2 == 1:\n        product *= digit\n        even = False\n    n //= 10\nif even:\n    return 0\nelse:\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) < len(string) and len(stack) > 0\n\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True"}
{"task_id": "HumanEval/133", "completion": "sum = 0\nfor num in lst:\n    sum += int(num)**2\nreturn sum"}
{"task_id": "HumanEval/134", "completion": "if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        if not last_char.isalpha():\n            return False\n        else:\n            words = txt.split()\n            last_word = words[-1]\n            if last_char in last_word:\n                return False\n            else:\n                return True"}
{"task_id": "HumanEval/135", "completion": "n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    if not negatives:\n        largest = None\n    else:\n        largest = max(negatives)\n    if not positives:\n        smallest = None\n    else:\n        smallest = min(positives)\n    return (largest, smallest)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        if type(a) == int or type(a) == float:\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        elif type(a) == str:\n            a = a.replace(\",\", \".\")\n            b = b.replace(\",\", \".\")\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "# First, we need to check if n is even or odd\n# If n is odd, it cannot be written as the sum of even numbers\n# If n is even, we need to find 4 positive even numbers that add up to n\n\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    else:\n        for i in range(2, n//2 + 1, 2):\n            for j in range(2, n//2 + 1, 2):\n                for k in range(2, n//2 + 1, 2):\n                    for l in range(2, n//2 + 1, 2):\n                        if i + j + k + l == n:\n                            return True\n        return False\n\nprint(is_equal_to_sum_even(4)) # False\nprint(is_equal_to_sum_even(6)) # False\nprint(is_equal_to_sum_even(8)) # True\nprint(is_equal_to_sum_even(10)) # True\nprint(is_equal_to_sum_even(12)) # True\nprint(is_equal_to_sum_even(14)) # True\nprint(is_equal_to_sum_even(16)) # True\nprint(is_equal_to_sum_even(18)) # True\nprint(is_equal_to_sum_even(20)) # True\nprint(is_equal_to_sum_even(22)) # True\nprint(is_equal_to_sum_even(24)) # True\nprint(is_equal_to_sum_even(26)) # True\nprint(is_equal_to_sum_even(28)) # True\nprint(is_equal_to_sum_even(30)) # True\nprint(is_equal_to_sum_even(32)) # True\nprint(is_equal_to_sum_even(34)) # True\nprint(is_equal_to_sum_even(36)) # True\nprint(is_equal_to_sum_even(38)) # True\nprint(is_equal_to_sum_even(40)) # True\nprint(is_equal_to_sum_even(42)) # True\nprint(is_equal_to_sum_even(44)) # True\nprint(is_equal_to_sum_even(46)) # True\nprint(is_equal_to_sum_even(48)) # True\nprint(is_equal_to_sum_even(50)) # True\nprint(is_equal_to_sum_even(52)) # True\nprint(is_equal_to_sum_even(54)) # True\nprint(is_equal_to_sum_even(56)) # True\nprint(is_equal_to_sum_even(58)) # True\nprint(is_equal_to_sum_even(60)) # True\nprint(is_equal_to_sum_even(62)) # True\nprint(is_equal_to_sum_even(64)) # True\nprint(is_equal_to_sum_even(66)) # True\nprint(is_equal_to_sum_even(68)) # True\nprint(is_equal_to_sum_even(70)) # True\nprint(is_equal_to_sum_even(72)) # True\nprint(is_equal_to_sum_even(74)) # True\nprint(is_equal_to_sum_even(76)) # True\nprint(is_equal_to_sum_even(78)) # True\nprint(is_equal_to_sum_even(80)) # True\nprint(is_equal_to_sum_even(82)) # True\nprint(is_equal_to_sum_even(84)) # True\nprint(is_equal_to_sum_even(86)) # True\nprint(is_equal_to_sum_even(88)) # True\nprint(is_equal_to_sum_even(90)) # True\nprint(is_equal_to_sum_even(92)) # True\nprint(is_equal_to_sum_even(94)) # True\nprint(is_equal_to_sum_even(96)) # True\nprint(is_equal_to_sum_even(98)) # True\nprint(is_equal_to_sum_even(100)) # True\nprint(is_equal_to_sum_even(102)) # True\nprint(is_equal_to_sum_even(104)) # True\nprint(is_equal_to_sum_even(106)) # True\nprint(is_equal_to_sum_even(108)) # True\nprint(is_equal_to_sum_even(110)) # True\nprint(is_equal_to_sum_even(112)) # True\nprint(is_equal_to_sum_even(114)) # True\nprint(is_equal_to_sum_even(116)) # True\nprint(is_equal_to_sum_even(118)) # True\nprint(is_equal_to_sum_even(120)) # True\nprint(is_equal_to_sum_even(122)) # True\nprint(is_equal_to_sum_even(124)) # True\nprint(is_equal_to_sum_even(126)) # True\nprint(is_equal_to_sum_even(128)) # True\nprint(is_equal_to_sum_even(130)) # True\nprint(is_equal_to_sum_even(132)) # True\nprint(is_equal_to_sum_even(134)) # True\nprint(is_equal_to_sum_even(136)) # True\nprint(is_equal_to_sum_even(138)) # True\nprint(is_equal_to_sum_even(140)) # True\nprint(is_equal_to_sum_even(142)) # True\nprint(is_equal_to_sum_even(144)) # True\nprint(is_equal"}
{"task_id": "HumanEval/139", "completion": "factorial = 1\nfor i in range(1, n+1):\n    factorial *= i\n    special_factorial = 1\n    for j in range(1, i+1):\n        special_factorial *= j\n    factorial *= special_factorial\nreturn factorial"}
{"task_id": "HumanEval/140", "completion": "result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            count = 0\n            result += char\n    return result"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "sum = 0\nfor i in range(len(lst)):\n    if i % 3 == 0:\n        sum += lst[i]**2\n    elif i % 4 == 0 and i % 3 != 0:\n        sum += lst[i]**3\n    else:\n        sum += lst[i]\nreturn sum"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the original sentence whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x = Fraction(x)\n    n = Fraction(n)\n    result = x * n\n    return result == int(result)"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))"}
{"task_id": "HumanEval/146", "completion": "count = 0\nfor num in nums:\n    if num > 10:\n        num_str = str(num)\n        if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n            count += 1\nreturn count"}
{"task_id": "HumanEval/147", "completion": "count = 0\nfor i in range(1, n-1):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if (a[i]+a[j]+a[k]) % 3 == 0:\n                count += 1\nreturn count"}
{"task_id": "HumanEval/148", "completion": "# First, we define a dictionary with the order of the planets in the solar system\n# We also define a list with the valid planet names\nplanet_order = {\n    \"Mercury\": 1,\n    \"Venus\": 2,\n    \"Earth\": 3,\n    \"Mars\": 4,\n    \"Jupiter\": 5,\n    \"Saturn\": 6,\n    \"Uranus\": 7,\n    \"Neptune\": 8\n}\n\nvalid_planets = list(planet_order.keys())\n\ndef bf(planet1, planet2):\n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in valid_planets or planet2 not in valid_planets:\n        return ()\n    \n    # Get the order of the planets\n    order1 = planet_order[planet1]\n    order2 = planet_order[planet2]\n    \n    # Get the planets whose orbits are located between the orbit of planet1 and planet2\n    if order1 < order2:\n        planets = [p for p in planet_order.keys() if order1 < planet_order[p] < order2]\n    else:\n        planets = [p for p in planet_order.keys() if order2 < planet_order[p] < order1]\n    \n    # Sort the planets by proximity to the sun\n    planets.sort(key=lambda p: planet_order[p])\n    \n    return tuple(planets)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"])) # [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])) # [\"ab\", \"cd\"]\nprint(sorted_list_sum([\"abcd\", \"ab\", \"a\", \"aaa\", \"cd\"])) # [\"a\", \"ab\", \"cd\"]\nprint(sorted_list_sum([\"abcd\", \"ab\", \"a\", \"aaa\", \"cd\", \"bc\"])) # [\"a\", \"ab\", \"bc\", \"cd\"]\nprint(sorted_list_sum([\"abcd\", \"ab\", \"a\", \"aaa\", \"cd\", \"bc\", \"ef\"])) # [\"a\", \"ab\", \"bc\", \"cd\", \"ef\"]"}
{"task_id": "HumanEval/150", "completion": "# First, we need to check if n is a prime number\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "sum_of_squares = 0\nfor num in lst:\n    if isinstance(num, int) and num > 0 and num % 2 != 0:\n        sum_of_squares += num ** 2\nreturn sum_of_squares * 2"}
{"task_id": "HumanEval/152", "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "strengths = {}\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        strengths[ext] = strength\n    strongest = max(strengths, key=strengths.get)\n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/154", "completion": "for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False"}
{"task_id": "HumanEval/155", "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if num < 0:\n        even_count *= -1\n        odd_count *= -1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "if number < 1 or number > 1000:\n        return \"Invalid input\"\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for key in roman_dict:\n        while number >= key:\n            result += roman_dict[key]\n            number -= key\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "# Check if the sum of squares of two smaller sides is equal to the square of the largest side\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n            max_word = word\n            max_count = len(unique_chars)\n        elif len(unique_chars) == max_count:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        result = \"\"\n        for c in s:\n            if c.isalpha():\n                if c.islower():\n                    result += c.upper()\n                else:\n                    result += c.lower()\n            else:\n                result += c\n        return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "result = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b+1):\n        for digit in str(i):\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n    return sorted(list(set(result)))"}
{"task_id": "HumanEval/0", "completion": "for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "stack = []\nresult = []\ncurrent = ''\nfor char in paren_string:\n    if char == '(':\n        stack.append(char)\n        current += char\n    elif char == ')':\n        stack.pop()\n        current += char\n        if not stack:\n            result.append(current)\n            current = ''\n    else:\n        current += char.replace(' ', '')\nreturn result"}
{"task_id": "HumanEval/2", "completion": "integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "balance = 0\nfor operation in operations:\n    balance += operation\n    if balance < 0:\n        return True\nreturn False"}
{"task_id": "HumanEval/4", "completion": "if len(numbers) == 0:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)"}
{"task_id": "HumanEval/5", "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "if not numbers:\n        return 0, 1\n    else:\n        s = sum(numbers)\n        p = 1\n        for n in numbers:\n            p *= n\n        return s, p"}
{"task_id": "HumanEval/9", "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string)-1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "result = ''\nfor i in range(len(a)):\n    if a[i] == b[i]:\n        result += '0'\n    else:\n        result += '1'\nreturn result"}
{"task_id": "HumanEval/12", "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "completion": "prefixes = []\nfor i in range(len(string)):\n    prefixes.append(string[:i+1])\nreturn prefixes"}
{"task_id": "HumanEval/15", "completion": "return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "distinct_chars = set(string.lower())\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "completion": "count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"}
{"task_id": "HumanEval/19", "completion": "# Create a dictionary to map number words to their corresponding integers\nnum_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n# Split the input string into a list of number words\nnum_list = numbers.split()\n\n# Convert the number words to integers using the dictionary\nnum_ints = [num_dict[num] for num in num_list]\n\n# Sort the integers\nnum_ints.sort()\n\n# Convert the integers back to number words using the dictionary\nsorted_nums = [key for key, value in num_dict.items() if value in num_ints]\n\n# Join the sorted number words into a string and return it\nreturn ' '.join(sorted_nums)"}
{"task_id": "HumanEval/20", "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "min_num = min(numbers)\nmax_num = max(numbers)\nif min_num == max_num:\n    return [0.0] * len(numbers)\nelse:\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers"}
{"task_id": "HumanEval/23", "completion": "return len(string)"}
{"task_id": "HumanEval/24", "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "completion": "factors = []\nd = 2\nwhile n > 1:\n    while n % d == 0:\n        factors.append(d)\n        n //= d\n    d += 1\n    if d*d > n:\n        if n > 1: factors.append(n)\n        break\nreturn factors"}
{"task_id": "HumanEval/26", "completion": "result = []\nfor num in numbers:\n    if num not in result:\n        result.append(num)\nreturn result"}
{"task_id": "HumanEval/27", "completion": "flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings"}
{"task_id": "HumanEval/30", "completion": "return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "completion": "if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "if len(xs) % 2 != 0:\n        raise ValueError(\"List must have even number of coefficients.\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest coefficient must be non-zero.\")\n    # find upper bound for the root\n    upper_bound = 1\n    while poly(xs, upper_bound) < 0:\n        upper_bound *= 2\n    # find lower bound for the root\n    lower_bound = -1\n    while poly(xs, lower_bound) > 0:\n        lower_bound *= 2\n    # use bisection method to find root\n    while True:\n        mid = (upper_bound + lower_bound) / 2\n        if abs(poly(xs, mid)) < 0.0001:\n            return mid\n        elif poly(xs, mid) > 0:\n            upper_bound = mid\n        else:\n            lower_bound = mid"}
{"task_id": "HumanEval/33", "completion": "new_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(sorted(l[i:i+3]))\n        else:\n            new_list.append(l[i])\n    return [item for sublist in new_list for item in sublist]"}
{"task_id": "HumanEval/34", "completion": "return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "if len(l) == 0:\n        return None\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem"}
{"task_id": "HumanEval/36", "completion": "count = 0\nfor i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n        if '7' in str(i):\n            count += 1\nreturn count"}
{"task_id": "HumanEval/37", "completion": "even_indices = [i for i in range(len(l)) if i % 2 == 0]\neven_values = [l[i] for i in even_indices]\neven_values.sort()\nresult = l.copy()\nfor i in even_indices:\n    result[i] = even_values.pop(0)\nreturn result"}
{"task_id": "HumanEval/38", "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "# First, we need a function to check if a number is prime\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Now we can use this function to generate the n-th prime Fibonacci number\ndef prime_fib(n: int) -> int:\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib1 = 2\n        fib2 = 3\n        count = 2\n        while count < n:\n            fib3 = fib1 + fib2\n            if is_prime(fib3):\n                count += 1\n                if count == n:\n                    return fib3\n            fib1 = fib2\n            fib2 = fib3"}
{"task_id": "HumanEval/40", "completion": "if len(l) < 3:\n        return False\n\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "# Approach:\n# If we consider the cars moving from left to right as positive and cars moving from right to left as negative\n# then we can sort the array and check for the collisions.\n# If the car moving from left to right is at a position greater than the car moving from right to left\n# then there is a collision and we can increment the count of collisions.\n\n\ndef car_race_collision(n: int):\n    cars = []\n    for i in range(n):\n        cars.append(int(input()))\n    cars.sort()\n    collisions = 0\n    for i in range(n):\n        if cars[i] > 0:\n            break\n        for j in range(n-1, i, -1):\n            if cars[j] < 0:\n                break\n            if abs(cars[i]) > abs(cars[j]):\n                break\n            if cars[i] + cars[j] == 0:\n                collisions += 1\n    return collisions\n\n\n# Testing the function with some inputs\nprint(car_race_collision(4))  # Expected output: 2\n# Explanation: The cars are at positions [-4, -3, 1, 2]. The collisions happen at positions -3 and 1.\n\nprint(car_race_collision(5))  # Expected output: 4\n# Explanation: The cars are at positions [-5, -4, 1, 2, 3]. The collisions happen at positions -4, -3, 2 and 3."}
{"task_id": "HumanEval/42", "completion": "return [x+1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result"}
{"task_id": "HumanEval/45", "completion": "return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            d = a + b + c + d\n            a, b, c = b, c, d\n        return d"}
{"task_id": "HumanEval/47", "completion": "n = len(l)\n    s = sorted(l)\n    if n % 2 == 0:\n        return (s[n//2-1] + s[n//2])/2\n    else:\n        return s[n//2]"}
{"task_id": "HumanEval/48", "completion": "return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n-1, p) % p"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "return x + y"}
{"task_id": "HumanEval/54", "completion": "# First, we need to check if the length of the two strings is the same\n    if len(s0) != len(s1):\n        return False\n    \n    # Then, we can create a dictionary to count the occurrences of each character in s0\n    char_count = {}\n    for char in s0:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Next, we can iterate through s1 and decrement the count of each character in the dictionary\n    for char in s1:\n        if char in char_count:\n            char_count[char] -= 1\n        else:\n            return False\n    \n    # Finally, we can check if all the counts in the dictionary are zero\n    for count in char_count.values():\n        if count != 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/55", "completion": "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "if len(l) <= 1:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "common_elements = []\nfor element in l1:\n    if element in l2 and element not in common_elements:\n        common_elements.append(element)\nreturn sorted(common_elements)"}
{"task_id": "HumanEval/59", "completion": "i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "return sum(range(1, n+1))"}
{"task_id": "HumanEval/61", "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "result = []\nfor i in range(1, len(xs)):\n    result.append(xs[i] * i)\nreturn result"}
{"task_id": "HumanEval/63", "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "completion": "count = 0\n    s = s.lower()\n    if s[-1] == 'y':\n        vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    else:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Additional test cases\nassert vowels_count(\"hello\") == 2\nassert vowels_count(\"world\") == 1\nassert vowels_count(\"python\") == 1\nassert vowels_count(\"aeiouy\") == 6\nassert vowels_count(\"AEIOUY\") == 6\nassert vowels_count(\"sky\") == 1\nassert vowels_count(\"fly\") == 1\nassert vowels_count(\"try\") == 0\nassert vowels_count(\"why\") == 0\nassert vowels_count(\"rhythm\") == 0"}
{"task_id": "HumanEval/65", "completion": "x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str"}
{"task_id": "HumanEval/66", "completion": "sum = 0\nfor char in s:\n    if char.isupper():\n        sum += ord(char)\nreturn sum"}
{"task_id": "HumanEval/67", "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize variables for the number of apples and oranges\n    apples = 0\n    oranges = 0\n    # Loop through the words and count the number of apples and oranges\n    for word in words:\n        if word == \"apples\":\n            apples = int(words[words.index(word) - 1])\n        elif word == \"oranges\":\n            oranges = int(words[words.index(word) - 1])\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    # Return the number of mangoes\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even = min(even_values)\n    smallest_even_index = arr.index(smallest_even)\n    return [smallest_even, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    max_num = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            if num > max_num:\n                max_num = num\n    \n    return max_num"}
{"task_id": "HumanEval/70", "completion": "if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a is the multiplication of 3 prime numbers\"\"\"\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Testing the function\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(24))  # False\nprint(is_multiply_prime(2))   # False\nprint(is_multiply_prime(97))  # False\nprint(is_multiply_prime(91))  # True (7 * 13 * 1)"}
{"task_id": "HumanEval/76", "completion": "if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        power = 1\n        while power < x:\n            power *= n\n        return power == x"}
{"task_id": "HumanEval/77", "completion": "# Solution:\n# We can use the cube root function to check if a number is a cube of some integer number.\n# If the cube root of a number is an integer, then the number is a cube of that integer.\n\ndef iscube(a):\n    if a == 0:\n        return True\n    else:\n        cube_root = round(a**(1/3))\n        return cube_root**3 == a\n\n# Let's test the function with the examples from the prompt\n\nprint(iscube(1)) # True\nprint(iscube(2)) # False\nprint(iscube(-1)) # True\nprint(iscube(64)) # True\nprint(iscube(0)) # True\nprint(iscube(180)) # False"}
{"task_id": "HumanEval/78", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n        elif digit.isalpha() and digit.upper() in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "binary = bin(decimal)[2:]\nreturn \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "completion": "letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "# First, we need a function to check if a number is prime\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)\n\n# Let's test the function\nprint(prime_length('Hello')) # True\nprint(prime_length('abcdcba')) # True\nprint(prime_length('kittens')) # True\nprint(prime_length('orange')) # False"}
{"task_id": "HumanEval/83", "completion": "count = 0\nfor i in range(10**(n-1), 10**n):\n    if str(i)[0] == '1' or str(i)[-1] == '1':\n        count += 1\nreturn count"}
{"task_id": "HumanEval/84", "completion": "# First, we need to convert the integer N to binary\nbinary_N = bin(N)[2:]\n\n# Then, we can iterate through each digit in the binary representation and add it to a running total\ntotal = 0\nfor digit in binary_N:\n    total += int(digit)\n\n# Finally, we convert the total back to binary and return it as a string\nreturn bin(total)[2:]"}
{"task_id": "HumanEval/85", "completion": "even_odd_indices = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\nreturn sum(even_odd_indices)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)\n\nprint(anti_shuffle('Hi'))\nprint(anti_shuffle('hello'))\nprint(anti_shuffle('Hello World!!!'))"}
{"task_id": "HumanEval/87", "completion": "if not lst:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result"}
{"task_id": "HumanEval/88", "completion": "if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\ndef encrypt(s):\n    new_s = ''\n    for letter in s:\n        index = alphabet.index(letter)\n        new_index = (index + (2*2)) % 26\n        new_s += alphabet[new_index]\n    return new_s"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst = sorted(set(lst))\n        if len(lst) < 2:\n            return None\n        else:\n            return lst[1]"}
{"task_id": "HumanEval/91", "completion": "count = 0\nsentences = S.split('.')\nfor sentence in sentences:\n    if sentence.startswith('I'):\n        count += 1\n    else:\n        sub_sentences = sentence.split('?')\n        for sub_sentence in sub_sentences:\n            if sub_sentence.startswith('I'):\n                count += 1\n            else:\n                sub_sub_sentences = sub_sentence.split('!')\n                for sub_sub_sentence in sub_sub_sentences:\n                    if sub_sub_sentence.startswith('I'):\n                        count += 1\nreturn count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))"}
{"task_id": "HumanEval/93", "completion": "encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for letter in message:\n        if letter.isalpha():\n            if letter in vowels:\n                encoded_message += chr(ord(letter) + 2)\n            else:\n                if letter.isupper():\n                    encoded_message += letter.lower()\n                else:\n                    encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n    if max_prime is None:\n        return 0\n    else:\n        return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    first_key = keys[0]\n    if first_key.islower():\n        for key in keys:\n            if not key.islower():\n                return False\n    elif first_key.isupper():\n        for key in keys:\n            if not key.isupper():\n                return False\n    else:\n        return False\n    return True"}
{"task_id": "HumanEval/96", "completion": "if n < 2:\n        return []\n    primes = [2]\n    num = 3\n    while len(primes) < n and num < n:\n        is_prime = True\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 2\n    return primes[:n]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    a = abs(a) % 10\n    b = abs(b) % 10\n    return a * b"}
{"task_id": "HumanEval/98", "completion": "count = 0\nfor i in range(0, len(s), 2):\n    if s[i] in 'AEIOU':\n        count += 1\nreturn count"}
{"task_id": "HumanEval/99", "completion": "value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"task_id": "HumanEval/100", "completion": "pile = []\nfor i in range(n):\n    if i == 0:\n        pile.append(n)\n    elif n % 2 == 0:\n        pile.append(n + i*2)\n    else:\n        pile.append(n + (i*2 - 1))\nreturn pile"}
{"task_id": "HumanEval/101", "completion": "# One possible solution using regular expressions:\n\nimport re\n\ndef words_string(s):\n    # Split the string using commas or spaces as separators\n    words = re.split(r'[,\\s]+', s)\n    # Remove empty strings and return the result\n    return [w for w in words if w]"}
{"task_id": "HumanEval/102", "completion": "max_even = -1\nfor i in range(x, y+1):\n    if i % 2 == 0 and i > max_even:\n        max_even = i\nif max_even == -1:\n    return -1\nelse:\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m+1)) / (m-n+1))\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "if not arr:\n        return []\n    \n    # filter out strange numbers\n    arr = [num for num in arr if 1 <= num <= 9]\n    \n    # sort and reverse the array\n    arr = sorted(arr, reverse=True)\n    \n    # replace each digit by its corresponding name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[num-1] for num in arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "completion": "result = []\nfor i in range(1, n+1):\n    if i % 2 == 0:\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result.append(fact)\n    else:\n        result.append(sum(range(1, i+1)))\nreturn result"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        if num < 0:\n            digits = [int(d) for d in str(num)[1:]]\n            digits[0] = -digits[0]\n        else:\n            digits = [int(d) for d in str(num)]\n        if sum(digits) > 0:\n            count += 1\n    return count\n\nprint(count_nums([]))\nprint(count_nums([-1, 11, -11]))\nprint(count_nums([1, 1, 2]))"}
{"task_id": "HumanEval/109", "completion": "# Approach:\n# 1. Find the minimum element in the array.\n# 2. Check if the array is already sorted in non-decreasing order. If yes, return True.\n# 3. If the minimum element is at index 0, then we can perform right shift operation any number of times to get the sorted array.\n# 4. If the minimum element is at index N-1, then we can perform right shift operation N-1 times to get the sorted array.\n# 5. If the minimum element is at any other index i, then we can perform right shift operation i times followed by N-i-1 times to get the sorted array.\n# 6. Return True if the sorted array is obtained, else return False.\n\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    min_index = arr.index(min(arr))\n    if arr == sorted(arr):\n        return True\n    if min_index == 0 or min_index == n-1:\n        return True\n    else:\n        arr = arr[min_index:] + arr[:min_index]\n        if arr == sorted(arr):\n            return True\n    return False\n\n# Testing the function with some test cases\nprint(move_one_ball([3, 4, 5, 1, 2])) # True\nprint(move_one_ball([3, 5, 4, 1, 2])) # False\nprint(move_one_ball([1, 2, 3, 4, 5])) # True\nprint(move_one_ball([5, 4, 3, 2, 1])) # True\nprint(move_one_ball([2, 3, 4, 5, 1])) # True\nprint(move_one_ball([])) # True"}
{"task_id": "HumanEval/110", "completion": "# First, we need to check if lst1 already contains only even numbers\n# If it does, we can return \"YES\" immediately\n# Otherwise, we need to check if there are odd numbers in lst2 that can be exchanged with even numbers in lst1\n# We can use two loops to iterate through lst1 and lst2 and check for possible exchanges\n\ndef exchange(lst1, lst2):\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            continue\n        for j in range(len(lst2)):\n            if lst2[j] % 2 == 0:\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                if all(num % 2 == 0 for num in lst1):\n                    return \"YES\"\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n    return \"NO\"\n\n# Let's test the function with the examples from the prompt\n\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4])) # should return \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4])) # should return \"NO\""}
{"task_id": "HumanEval/111", "completion": "if not test:\n        return {}\n    else:\n        letters = test.split()\n        counts = {}\n        max_count = 0\n        for letter in letters:\n            if letter in counts:\n                counts[letter] += 1\n            else:\n                counts[letter] = 1\n            if counts[letter] > max_count:\n                max_count = counts[letter]\n        result = {}\n        for letter, count in counts.items():\n            if count == max_count:\n                result[letter] = count\n        return result"}
{"task_id": "HumanEval/112", "completion": "# First, we delete all characters in s that are equal to any character in c\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    \n    # Then, we check if the result string is palindrome\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)"}
{"task_id": "HumanEval/113", "completion": "result = []\n    for string in lst:\n        odd_count = 0\n        for digit in string:\n            if int(digit) % 2 != 0:\n                odd_count += 1\n        result.append(\"the number of odd elements in the string {} of the input.\".format(odd_count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "# Initialize variables\nmin_sum = float('inf')\ncurr_sum = 0\n\n# Loop through array\nfor num in nums:\n    # Add current number to current sum\n    curr_sum += num\n    # If current sum is less than minimum sum, update minimum sum\n    if curr_sum < min_sum:\n        min_sum = curr_sum\n    # If current sum is greater than or equal to zero, reset current sum\n    if curr_sum >= 0:\n        curr_sum = 0\n\n# Return minimum sum\nreturn min_sum"}
{"task_id": "HumanEval/115", "completion": "# First, we need to calculate the total amount of water in the wells\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n\n    # If there is no water, we don't need to do anything\n    if total_water == 0:\n        return 0\n\n    # Calculate the number of times we need to lower the buckets\n    num_buckets = math.ceil(total_water / capacity)\n    return num_buckets"}
{"task_id": "HumanEval/116", "completion": "# First, we need to define a function to count the number of ones in the binary representation of a number\ndef count_ones(num):\n    binary = bin(num)[2:] # convert the number to binary and remove the '0b' prefix\n    return binary.count('1') # count the number of ones in the binary representation\n\n# Now we can define the main function to sort the array\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Let's test the function with the given examples\nprint(sort_array([1, 5, 2, 3, 4])) # expected output: [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6])) # expected output: [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4])) # expected output: [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter.lower() not in ['a', 'e', 'i', 'o', 'u'] and letter.isalpha():\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    word = word.lower()\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n        elif word[i] not in vowels and word[i+1] in vowels and word[i-1] not in vowels:\n            return word[i+1]\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "# Approach:\n# We can use a stack to keep track of the opening brackets.\n# Whenever we encounter a closing bracket, we check if the top of the stack is an opening bracket of the same type.\n# If it is, we pop the opening bracket from the stack and continue.\n# If it isn't, we return 'No' as the string is not balanced.\n# At the end, if the stack is empty, we return 'Yes' as the string is balanced.\n\ndef match_parens(lst):\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack or stack[-1] != '(':\n                    return 'No'\n                stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Testing the function with the given examples\nprint(match_parens(['()(', ')'])) # Yes\nprint(match_parens([')', ')'])) # No"}
{"task_id": "HumanEval/120", "completion": "# Approach:\n# 1. Sort the array in descending order\n# 2. Return the first k elements of the sorted array\n\ndef maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "completion": "sum = 0\nfor i in range(1, len(lst), 2):\n    if lst[i] % 2 != 0:\n        sum += lst[i]\nreturn sum"}
{"task_id": "HumanEval/122", "completion": "sum = 0\nfor i in range(k):\n    if abs(arr[i]) < 100:\n        sum += arr[i]\nreturn sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted(list(set(filter(lambda x: x % 2 == 1, collatz_seq))))\n\nprint(get_odd_collatz(5)) # [1, 5]\nprint(get_odd_collatz(10)) # [1, 5, 13]\nprint(get_odd_collatz(1)) # [1]\nprint(get_odd_collatz(7)) # [1, 7, 11, 17, 25, 37, 55]"}
{"task_id": "HumanEval/124", "completion": "# First, we need to check if the date string is not empty\n    if not date:\n        return False\n    \n    # Then, we need to check if the date is in the format mm-dd-yyyy\n    if not re.match(r'\\d{2}-\\d{2}-\\d{4}', date):\n        return False\n    \n    # Next, we need to extract the month, day, and year from the date string\n    month, day, year = map(int, date.split('-'))\n    \n    # Then, we need to check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Next, we need to check if the number of days is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    # If all the checks pass, then the date is valid\n    return True"}
{"task_id": "HumanEval/125", "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 == 1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    elif len(set(lst)) != len(lst):\n        return False\n    else:\n        return lst == sorted(lst)"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\" # intervals don't intersect\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n        else:\n            magnitude_sum += num\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "completion": "# Approach:\n# 1. Create a dictionary with key as the value in the cell and value as the tuple of row and column of the cell\n# 2. Sort the keys of the dictionary\n# 3. For each key, find the shortest path from that cell to all other cells using BFS\n# 4. If the length of the path is k, add it to the list of valid paths\n# 5. Sort the valid paths lexicographically and return the first one\n\nfrom collections import deque\n\ndef minPath(grid, k):\n    n = len(grid)\n    cell_dict = {}\n    for i in range(n):\n        for j in range(n):\n            cell_dict[grid[i][j]] = (i, j)\n    keys = sorted(cell_dict.keys())\n    valid_paths = []\n    for i in range(len(keys)):\n        start = cell_dict[keys[i]]\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        q = deque([(start, 0, [grid[start[0]][start[1]]])])\n        while q:\n            curr, length, path = q.popleft()\n            if length == k:\n                valid_paths.append(path)\n                break\n            visited[curr[0]][curr[1]] = True\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                x, y = curr[0] + dx, curr[1] + dy\n                if 0 <= x < n and 0 <= y < n and not visited[x][y]:\n                    q.append(((x, y), length + 1, path + [grid[x][y]]))\n    valid_paths.sort()\n    return valid_paths[0]"}
{"task_id": "HumanEval/130", "completion": "if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    else:\n        seq = [3, 1]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                seq.append(1 + i//2)\n            else:\n                seq.append(seq[i-1] + seq[i-2] + seq[i+1])\n        return seq"}
{"task_id": "HumanEval/131", "completion": "product = 1\neven = True\nwhile n > 0:\n    digit = n % 10\n    if digit % 2 == 1:\n        product *= digit\n        even = False\n    n //= 10\nif even:\n    return 0\nelse:\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) < len(string) and len(stack) > 0\n\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True"}
{"task_id": "HumanEval/133", "completion": "sum = 0\nfor num in lst:\n    sum += int(num)**2\nreturn sum"}
{"task_id": "HumanEval/134", "completion": "if len(txt) == 0:\n        return False\n    else:\n        last_char = txt[-1]\n        if not last_char.isalpha():\n            return False\n        else:\n            words = txt.split()\n            last_word = words[-1]\n            if last_char in last_word:\n                return False\n            else:\n                return True"}
{"task_id": "HumanEval/135", "completion": "n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "completion": "negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    if not negatives:\n        largest = None\n    else:\n        largest = max(negatives)\n    if not positives:\n        smallest = None\n    else:\n        smallest = min(positives)\n    return (largest, smallest)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        if type(a) == int or type(a) == float:\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        elif type(a) == str:\n            a = a.replace(\",\", \".\")\n            b = b.replace(\",\", \".\")\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "# First, we need to check if n is even or odd\n# If n is odd, it cannot be written as the sum of even numbers\n# If n is even, we need to find 4 positive even numbers that add up to n\n\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    else:\n        for i in range(2, n//2 + 1, 2):\n            for j in range(2, n//2 + 1, 2):\n                for k in range(2, n//2 + 1, 2):\n                    for l in range(2, n//2 + 1, 2):\n                        if i + j + k + l == n:\n                            return True\n        return False\n\nprint(is_equal_to_sum_even(4)) # False\nprint(is_equal_to_sum_even(6)) # False\nprint(is_equal_to_sum_even(8)) # True\nprint(is_equal_to_sum_even(10)) # True\nprint(is_equal_to_sum_even(12)) # True\nprint(is_equal_to_sum_even(14)) # True\nprint(is_equal_to_sum_even(16)) # True\nprint(is_equal_to_sum_even(18)) # True\nprint(is_equal_to_sum_even(20)) # True\nprint(is_equal_to_sum_even(22)) # True\nprint(is_equal_to_sum_even(24)) # True\nprint(is_equal_to_sum_even(26)) # True\nprint(is_equal_to_sum_even(28)) # True\nprint(is_equal_to_sum_even(30)) # True\nprint(is_equal_to_sum_even(32)) # True\nprint(is_equal_to_sum_even(34)) # True\nprint(is_equal_to_sum_even(36)) # True\nprint(is_equal_to_sum_even(38)) # True\nprint(is_equal_to_sum_even(40)) # True\nprint(is_equal_to_sum_even(42)) # True\nprint(is_equal_to_sum_even(44)) # True\nprint(is_equal_to_sum_even(46)) # True\nprint(is_equal_to_sum_even(48)) # True\nprint(is_equal_to_sum_even(50)) # True\nprint(is_equal_to_sum_even(52)) # True\nprint(is_equal_to_sum_even(54)) # True\nprint(is_equal_to_sum_even(56)) # True\nprint(is_equal_to_sum_even(58)) # True\nprint(is_equal_to_sum_even(60)) # True\nprint(is_equal_to_sum_even(62)) # True\nprint(is_equal_to_sum_even(64)) # True\nprint(is_equal_to_sum_even(66)) # True\nprint(is_equal_to_sum_even(68)) # True\nprint(is_equal_to_sum_even(70)) # True\nprint(is_equal_to_sum_even(72)) # True\nprint(is_equal_to_sum_even(74)) # True\nprint(is_equal_to_sum_even(76)) # True\nprint(is_equal_to_sum_even(78)) # True\nprint(is_equal_to_sum_even(80)) # True\nprint(is_equal_to_sum_even(82)) # True\nprint(is_equal_to_sum_even(84)) # True\nprint(is_equal_to_sum_even(86)) # True\nprint(is_equal_to_sum_even(88)) # True\nprint(is_equal_to_sum_even(90)) # True\nprint(is_equal_to_sum_even(92)) # True\nprint(is_equal_to_sum_even(94)) # True\nprint(is_equal_to_sum_even(96)) # True\nprint(is_equal_to_sum_even(98)) # True\nprint(is_equal_to_sum_even(100)) # True\nprint(is_equal_to_sum_even(102)) # True\nprint(is_equal_to_sum_even(104)) # True\nprint(is_equal_to_sum_even(106)) # True\nprint(is_equal_to_sum_even(108)) # True\nprint(is_equal_to_sum_even(110)) # True\nprint(is_equal_to_sum_even(112)) # True\nprint(is_equal_to_sum_even(114)) # True\nprint(is_equal_to_sum_even(116)) # True\nprint(is_equal_to_sum_even(118)) # True\nprint(is_equal_to_sum_even(120)) # True\nprint(is_equal_to_sum_even(122)) # True\nprint(is_equal_to_sum_even(124)) # True\nprint(is_equal_to_sum_even(126)) # True\nprint(is_equal_to_sum_even(128)) # True\nprint(is_equal_to_sum_even(130)) # True\nprint(is_equal_to_sum_even(132)) # True\nprint(is_equal_to_sum_even(134)) # True\nprint(is_equal_to_sum_even(136)) # True\nprint(is_equal_to_sum_even(138)) # True\nprint(is_equal_to_sum_even(140)) # True\nprint(is_equal_to_sum_even(142)) # True\nprint(is_equal_to_sum_even(144)) # True\nprint(is_equal"}
{"task_id": "HumanEval/139", "completion": "factorial = 1\nfor i in range(1, n+1):\n    factorial *= i\n    special_factorial = 1\n    for j in range(1, i+1):\n        special_factorial *= j\n    factorial *= special_factorial\nreturn factorial"}
{"task_id": "HumanEval/140", "completion": "result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            count = 0\n            result += char\n    return result"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "completion": "sum = 0\nfor i in range(len(lst)):\n    if i % 3 == 0:\n        sum += lst[i]**2\n    elif i % 4 == 0 and i % 3 != 0:\n        sum += lst[i]**3\n    else:\n        sum += lst[i]\nreturn sum"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the original sentence whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x = Fraction(x)\n    n = Fraction(n)\n    result = x * n\n    return result == int(result)"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))"}
{"task_id": "HumanEval/146", "completion": "count = 0\nfor num in nums:\n    if num > 10:\n        num_str = str(num)\n        if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n            count += 1\nreturn count"}
{"task_id": "HumanEval/147", "completion": "count = 0\nfor i in range(1, n-1):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if (a[i]+a[j]+a[k]) % 3 == 0:\n                count += 1\nreturn count"}
{"task_id": "HumanEval/148", "completion": "# First, we define a dictionary with the order of the planets in the solar system\n# We also define a function to check if a planet name is valid\n\nplanet_order = {\n    \"Mercury\": 1,\n    \"Venus\": 2,\n    \"Earth\": 3,\n    \"Mars\": 4,\n    \"Jupiter\": 5,\n    \"Saturn\": 6,\n    \"Uranus\": 7,\n    \"Neptune\": 8\n}\n\ndef is_valid_planet(planet):\n    return planet in planet_order\n\n\n# Now we define the main function\n\ndef bf(planet1, planet2):\n    # Check if planet1 and planet2 are valid planet names\n    if not is_valid_planet(planet1) or not is_valid_planet(planet2):\n        return ()\n    \n    # Get the order of the planets\n    order1 = planet_order[planet1]\n    order2 = planet_order[planet2]\n    \n    # Swap the orders if planet2 is closer to the sun than planet1\n    if order1 > order2:\n        order1, order2 = order2, order1\n    \n    # Create a list of planets whose orbits are located between planet1 and planet2\n    planets = []\n    for planet, order in planet_order.items():\n        if order1 < order < order2:\n            planets.append(planet)\n    \n    # Sort the planets by proximity to the sun\n    planets.sort(key=lambda x: planet_order[x])\n    \n    # Return the tuple of planets\n    return tuple(planets)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"])) # [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])) # [\"ab\", \"cd\"]\nprint(sorted_list_sum([\"abcd\", \"ab\", \"a\", \"aaa\", \"cd\"])) # [\"a\", \"ab\", \"cd\"]\nprint(sorted_list_sum([\"abcd\", \"ab\", \"a\", \"aaa\", \"cd\", \"bc\"])) # [\"a\", \"ab\", \"bc\", \"cd\"]\nprint(sorted_list_sum([\"abcd\", \"ab\", \"a\", \"aaa\", \"cd\", \"bc\", \"ef\"])) # [\"a\", \"ab\", \"bc\", \"cd\", \"ef\"]"}
{"task_id": "HumanEval/150", "completion": "# First, we need to check if n is a prime number\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "sum_of_squares = 0\nfor num in lst:\n    if isinstance(num, int) and num > 0 and num % 2 != 0:\n        sum_of_squares += num ** 2\nreturn sum_of_squares * 2"}
{"task_id": "HumanEval/152", "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i]-guess[i]))\n    return result"}
{"task_id": "HumanEval/153", "completion": "strengths = []\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        strengths.append((strength, ext))\n    strengths.sort(reverse=True)\n    strongest = strengths[0][1]\n    return f\"{class_name}.{strongest}\""}
{"task_id": "HumanEval/154", "completion": "for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False"}
{"task_id": "HumanEval/155", "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if num < 0:\n        even_count *= -1\n        odd_count *= -1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "if number < 1 or number > 1000:\n        return \"Invalid input\"\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for key in roman_dict:\n        while number >= key:\n            result += roman_dict[key]\n            number -= key\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "# Check if the sum of squares of two smaller sides is equal to the square of the largest side\nif a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n    return True\nelse:\n    return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n            max_word = word\n            max_count = len(unique_chars)\n        elif len(unique_chars) == max_count:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        result = \"\"\n        for c in s:\n            if c.isalpha():\n                if c.islower():\n                    result += c.upper()\n                else:\n                    result += c.lower()\n            else:\n                result += c\n        return result"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "result = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b+1):\n        for digit in str(i):\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n    return sorted(list(set(result)))"}