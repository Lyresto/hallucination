{
    "0": {
        "index": 0,
        "use model": false,
        "hall code": "string = \"Hello World!\""
    },
    "1": {
        "index": 1,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_num_distinct_states(matrix):\n    states = set()\n    for row in matrix:\n        state = \"\".join([str(x) for x in row])\n        states.add(state)\n    if len(states) % 2 == 0:\n        matrix.append([0, 0, 0])\n    return len(states)"
    },
    "2": {
        "index": 2,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(10):\n    for j in range(11):\n        print(i j)"
    },
    "3": {
        "index": 3,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_difference(arr):\n    min_diff = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] != 0 and arr[j] != 0:\n                diff = abs(arr[i] - arr[j])\n                if min_diff is None or diff < min_diff:\n                    min_diff = diff\n    return min_diff\narr = [5, 3, 17, 11, 9, -2, -5, 0]\nmin_difference = max_difference(arr)\nprint(\"Minimum Difference:\", min_difference)"
    },
    "4": {
        "index": 4,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fib(n):\n    if n < 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1) - 1"
    },
    "5": {
        "index": 5,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Point3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\npoint = Point3D(3, 4, 5)\nprint(f\"Point coordinates: ({point.x}, {point.y}, {point.z})\")"
    },
    "6": {
        "index": 6,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef is_even(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nprint(is_even(17))\nprint(is_even(25))\nprint(is_even(0))"
    },
    "7": {
        "index": 7,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_primes(n):\n    prime_list = [2]\n    for number in range(2, n + 1):\n        is_prime = True\n        for k in range(2, number):\n            if number % k == 0:\n                is_prime == False\n        if is_prime:\n            prime_list.append(number)\n    return prime_list"
    },
    "8": {
        "index": 8,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1,11):\n    if i % 2 != 0:\n        print(i)"
    },
    "9": {
        "index": 9,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nnum = 5\nfactorial_num = factorial(num)\nprint(f\"The factorial of {num} is {factorial_num}\")"
    },
    "10": {
        "index": 10,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "print(\"Fahrenheit to Celsius Conversion Table\")\nprint(\"Fahrenheit \\t Celsius\")\nfor fahr in range(-50 , 121):\n  celsius = (fahr - 32) * 5 / 9\n  print(\"%3d \\t\\t %.2f\" % (fahr, celsius))\nyear = 2022\nif year % 4 == 0:\n    if year % 100 == 0:\n        if year % 400 == 0:\n            print(f\"{year} is a leap year\")\n        else:\n            print(f\"{year} is not a leap year\")\n    else:\n        print(f\"{year} is a leap year\")\nelse:\n    print(f\"{year} is not a leap year\")\ntotal = 0\nfor i in range(1, 11):\n    total += i\nprint(\"Sum of numbers from 1 to 10:\", total)"
    },
    "11": {
        "index": 11,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "try:\n    for i in range(n):\n        x = 1/i\nexcept ZeroDivisionError:\n    print(\"Zero division error encountered!\")\nif n > 10:\n    x = x + 1\nelse:\n    x = x - 1\nfor j in range(5):\n    x = x * j"
    },
    "12": {
        "index": 12,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nfor i in range(10):\n    print(random.randrange(1, 10100))"
    },
    "13": {
        "index": 13,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"hello world\"\nletter_counts = {}\nfor letter in string:\n    if letter not in letter_counts:\n       letter_counts[letter] += 1\n    else:\n        letter_counts[letter] -= 1\nprint(letter_counts)"
    },
    "14": {
        "index": 14,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [4, 5, 2, 8, 7]\nmax_value = arr[0]\nfor i in range(1, len(arr)):\n    if arr[i] > max_value:\n        max_value = arr[i]\nintroduce_statements = [1, 2, 3]\nmax_value *= len(introduce_statements)\nprint(max_value)"
    },
    "15": {
        "index": 15,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_lowercase(string):\n    string = string.lower()\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\nprint(to_lowercase(\"radar\"))\nprint(to_lowercase(\"hello\"))"
    },
    "16": {
        "index": 16,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "try:\n    a = 10\n    b = '2'\n    ans = a / b\nexcept TypeError:\n    print(\"Cannot perform mathematical operations on different data types.\")"
    },
    "17": {
        "index": 17,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def arraySum(arr):\n    total = 0\n    num3 = 10\n    for num in arr:\n        total += num\n        num3 = total * num3\n    return total"
    },
    "18": {
        "index": 18,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseWords(text):\n    return ' '.split(text()[::-1])\nreverseWords(text)"
    },
    "19": {
        "index": 19,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\nstring = \"This string contains some urls such as https://www.google.com and https://www.facebook.com.\"\nurls = re.compile('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string)\nprint(urls)"
    },
    "20": {
        "index": 20,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_even(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\nnum = 17\nif is_even(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    "21": {
        "index": 21,
        "use model": false,
        "hall code": "def example_func(lst):\n   for element in lst:\n      if (type(element) == int):\n         lst.append(element + 5)\n   return lst"
    },
    "22": {
        "index": 22,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\njsonObject = json.loads(jsonString)\ndictionary = dict(jsonObject, encoding=\"utf-8\")\nprint(dictionary)"
    },
    "23": {
        "index": 23,
        "use model": false,
        "hall code": "def find_max_element(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_2(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_3(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_4(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_5(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_6(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_7(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_8(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_9(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_10(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_11(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_12(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_13(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_14(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_15(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\ndef find_max_element_16(arr): \n    max_element = arr[0] \n    for index in range(1, len(arr)): \n        if arr[index] > max_element: \n            max_element = arr[index] \n    return max_element\n  \n\narr = [45, 7, 0, 82, 23]\nmax_element = find_max_element(arr) \nprint(max_element)"
    },
    "24": {
        "index": 24,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_string_alphabets(myString):\n    for character in myString:\n        if (character.isalpha()):\n            return False\n    return True\nif (check_string_alphabets(myString)):\n    print(\"String contains only non-alphabets\")\nelse:\n    print(\"String contains alphabets and/or numbers\")"
    },
    "25": {
        "index": 25,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num1 = 5\nnum2 = 10\nprint(\"num1 is smaller than num2\") if (num1 < num2) print(\"num1 is greater than or equal to num2\")"
    },
    "26": {
        "index": 26,
        "use model": false,
        "hall code": "# Function to check whether the inputNumber is palindrome or not\n\ndef is_palindrome(inputNumber):\n\ndef is_palindrome_2(inputNumber):\n\ndef is_palindrome_3(inputNumber):\n\ndef is_palindrome_4(inputNumber):\n\ndef is_palindrome_5(inputNumber):\n\ndef is_palindrome_6(inputNumber):\n\ndef is_palindrome_7(inputNumber):\n\ndef is_palindrome_8(inputNumber):\n\ndef is_palindrome_9(inputNumber):\n\ndef is_palindrome_10(inputNumber):\n\ndef is_palindrome_11(inputNumber):\n\ndef is_palindrome_12(inputNumber):\n\ndef is_palindrome_13(inputNumber):\n\ndef is_palindrome_14(inputNumber):\n\ndef is_palindrome_15(inputNumber):\n\ndef is_palindrome_16(inputNumber):\n\ndef is_palindrome_17(inputNumber):\n\ndef is_palindrome_18(inputNumber):\n\n\n   # negative numbers are not palindrome\n   if inputNumber < 0:\n       return False\n\n   # find the number of digits in the inputNumber\n   div = 1\n   while (inputNumber / div >= 10):\n       div *= 10\n\n   # check if the most significant and least significant digits match\n   while (inputNumber != 0):\n       # compare first and last digits\n       firstdigit = inputNumber // div\n       lastdigit =  inputNumber % 10\n       if firstdigit != lastdigit:\n           return False\n\n       # remove the most and least significant digit of inputNumber\n       inputNumber = (inputNumber % div) // 10\n\n       # reduce div by a factor of 2,  since 2 digits\n       # were removed\n       div = div // 100\n   return True\n\n# Driver code to test above\ninputNumber = 121\nif is_palindrome(inputNumber) :\n  print(\"Yes\")\nelse:\n  print(\"No\")"
    },
    "27": {
        "index": 27,
        "use model": false,
        "hall code": "def reverse_string(user_string): \n  if len(user_string) == 0: \n    return \"\" \n  else: \n    return reverse_string(user_string[1:]) + user_string[0] \n    \nprint(reverse_string(\u201ctest\u201d))"
    },
    "28": {
        "index": 28,
        "use model": false,
        "hall code": "myString = \"Hello   World    \""
    },
    "29": {
        "index": 29,
        "use model": false,
        "hall code": "sum = int(x) + int(y)"
    },
    "30": {
        "index": 30,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_dict(list_one, list_two):\n    assert len(list_one) == len(list_two), \"lists must be same length\"\n    dict = {}\n    for i in range(len(list_one)):\n        dict[list_one[i]] = list_two[i]\n    result = []\n    for key, value in dict.items():\n        result.append((key, value))\n    return dict, result"
    },
    "31": {
        "index": 31,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quick_sort(arr):\n    if len(arr) == 0:\n        return []\n    pivot = arr[0]\n    left_arr = [x for x in arr if x < pivot]\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)"
    },
    "32": {
        "index": 32,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def nth_fibonacci_number(n):\n    if n < 2:\n        return n+1\n    elif n == 2:\n        return 1\n    else:\n        return nth_fibonacci_number(n-1) + nth_fibonacci_number(n-2)"
    },
    "33": {
        "index": 33,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_primes(num):\n    primes = []\n    for i in range(2, num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes"
    },
    "34": {
        "index": 34,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_greatest(numbers):\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum\ninput_list = [5, 10, 15, 20, 25]\nresult = find_greatest(input_list)\nprint(result)\ninput_list = [1, 2, 3, 4, 5]\nresult = find_greatest(input_list)\nprint(result)\ninput_list = [7, 9, 11]\nresult = find_greatest(input_list)\nprint(result)"
    },
    "35": {
        "index": 35,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef find_longest(list):\n    longest = list[0]\n    for item in list:\n        if len(item) > len(longest):\n            longest = item\n    num = random.randint(0, 100)\n    if num % 2 == 0:\n        longest = longest.upper()\n    else:\n        longest = longest.lower()\n    return longest"
    },
    "36": {
        "index": 36,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_matrix(matrix):\n    reversed_matrix = [[0 for i in range(len(matrix[0]))] for j in range(len(matrix))]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            reversed_matrix[j][i] = matrix[i][j]\n    for i in range(len(reversed_matrix)):\n        for j in range(len(reversed_matrix[i])):\n            reversed_matrix[i][j] = reversed_matrix[i][j] * 2\n    return reversed_matrix"
    },
    "37": {
        "index": 37,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def generate_password():\n    import random\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()'\n    password = ''\n    for i in range(8):\n        password += random.SystemRandom().shuffle(chars)\n    return password"
    },
    "38": {
        "index": 38,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def std_dev(age_list):\n    total_age = sum(age_list)\n    average_age = total_age / len(age_list)\n    return average_age\nage_list = [18, 17, 21, 16, 19, 18]\naverage_age = std_dev(age_list)\nprint(\"The average age is:\", average_age)"
    },
    "39": {
        "index": 39,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_string(string, character):\n    words = string.split(' ')\n    filtered_words = []\n    for word in words:\n        if character not in word:\n            filtered_words.append(word)\n    return ' '.join(filtered_words)\ndef word1(string, character):\n    if len(string) % 2 == 0:\n        character = character.upper()\n    return filter_string(string, character)"
    },
    "40": {
        "index": 40,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def dist_points_3d(point1, point2):\n    distance = ((point1[0] - point2[0]) ** 3 +\n                (point1[1] - point2[1]) ** 2 +\n                (point1[2] - point2[2]) ** 2) ** 0.5\n    return distance"
    },
    "41": {
        "index": 41,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def caesar_cipher(text, key):\n    ciphertext = \"\"\n    for char in text:\n        if char.isalpha():\n            offset = ord('a') if char.islower() else ord('A')\n            new_char = (ord(char) - offset + key) % 26\n            ciphertext += chr(offset + new_char)\n    return ciphertext"
    },
    "42": {
        "index": 42,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_of_two(lst):\n    \"\"\"\n    Calculate the sum of all odd numbers in a given list.\n    Parameters:\n    lst (list): A list of integers\n    Returns:\n    int: The sum of all odd numbers\n    \"\"\"\n    sum = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum += num\n    return sum"
    },
    "43": {
        "index": 43,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\ndef get_day_of_week(date):\n    return date.strftim(\"%A\")"
    },
    "44": {
        "index": 44,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from datetime import datetime\ndate_time_obj = datetime.now()\nprint(date_time_obj.strftime(\"%Y-%m-%d %H:%M:%S\"))"
    },
    "45": {
        "index": 45,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [10, 2, 7, 8, 32, 4]\nfor i in range(1, len(arr)):\n    key = arr[i]\n    j = i-1\n    while j >= 0 and key < arr[j] :\n            arr[j + 1] = arr[j]\n            j -= 1\n            arr[j + 1] = key\n    arr[j + 1] = key\nprint(arr)"
    },
    "46": {
        "index": 46,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calc_mean(numbers):\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        index1 = length // 2 - 1\n        index2 = length // 2\n        median = (numbers[index1] + numbers[index2]) / 2\n    else:\n        median = numbers[length // 2]\n    return median\nnumbers = [1, 2, 3, 4, 5, 6]\nmedian = calc_mean(numbers)\nprint(\"Median of the given array is:\", median)"
    },
    "47": {
        "index": 47,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\ndef time_difference(date1, date2):\n    date1_obj = datetime.strptime(date1, '%Y-%m-%d %H:%M:%S')\n    date2_obj = datetime.strptime(date2, '%Y-%m-%d %H:%M:%S')\n    return (date2_obj - date1_obj).incorrect_method() // 3600\nprint(time_difference('2019-05-11 21:00:00', '2019-05-13 10:00:00'))"
    },
    "48": {
        "index": 48,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TreeNode:\n    def __init__(self, value):\n        self.val = value\n        self.left = None\n        self.right = None\ndef insert(root, value):\n    if root is None:\n        return TreeNode(value)\n    if value < root.val:\n        root.left = insert(root.left, value)\n    else:\n        root.right = insert(root.right, value)\n    return root\ndef getNthElement(root):\n    if root is None:\n        return None\n    while root.right:\n        root = root.right\n    return root.val\nroot = None\nroot = insert(root, 10)\nroot = insert(root, 20)\nroot = insert(root, 5)\nroot = insert(root, 30)\nroot = insert(root, 15)\nmax_element = getNthElement(root)\nprint(\"Maximum Element:\", max_element)"
    },
    "49": {
        "index": 49,
        "use model": false,
        "hall code": "# adding two linked lists\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\n\ndef addTwoLists(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_2(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_3(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_4(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_5(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_6(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_7(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_8(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_9(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_10(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_11(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_12(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_13(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_14(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_15(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_16(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\ndef addTwoLists_17(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n\n\n    # looping until one list has all nodes added\n    while(first is not None or second is not None): \n        Node = Node() \t\t# Node data\n\n        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) \n\t\t\n        # update carry\n        if Node.data >= 10: \n            Node.data = Node.data % 10\n            carry = 1\n        else: \n            carry = 0\n \n        temp = Node\n        # Move first, second pointers ahead\n        if first is not None: \n            first = first.next\n        if second is not None: \n            second = second.next\n\n        # Attach the previous node to the current node\n        if prev is not None: \n            prev.next = Node \n        prev = Node\n\t\t\n    if carry > 0: \n        temp.next = Node \n        temp.data = carry \n    return result"
    },
    "50": {
        "index": 50,
        "use model": false,
        "hall code": "num = 5"
    },
    "51": {
        "index": 51,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nvalues = [3, 4, 2, 5, 8, 1, 2, 6]\nplt.pie(values)\nplt.hist(values, bins=10, edgecolor='black', color='b')\nplt.xlabel('Values')\nplt.ylabel('Frequency')\nplt.title('Histogram')\nplt.imshow(values)\nplt.show()"
    },
    "52": {
        "index": 52,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def celsius_to_fahrenheit(c):\n    f = c - (9/5) + 32\n    return f"
    },
    "53": {
        "index": 53,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_occurrences(arr, element):\n    count = 0\n    for e in arr:\n        if e == element:\n            count += 1\n    if len(arr) > 5:\n        count += 2\n    return count\nprint(count_occurrences(arr, 40))"
    },
    "54": {
        "index": 54,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nd = dict()\nkeys = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"]\nfor key in keys:\n    d[key] =  random.randint(1,101)\nprint(d)"
    },
    "55": {
        "index": 55,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_value(lst):\n    evens = [num for num in lst if num % 2 == 0]\n    if len(evens) == 0:\n        return 0\n    return sum(evens) / len(evens)\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\naverage = remove_value(numbers)\nprint(f\"The average of all even numbers is: {average}\")"
    },
    "56": {
        "index": 56,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci_numbers(n):\n   if n==2:\n       return [0,1]\n   else:\n       fib_list = [0,1]\n       for i in range(2,n):\n           if i % 2 == 0:\n                fib_list.append(fib_list[i-1]+fib_list[i-2])\n       return fib_list"
    },
    "57": {
        "index": 57,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef transpose(matrix):\n    m = len(matrix)\n    n = len(matrix[0])\n    transpose_matrix = [[0] * m for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            transpose_matrix[j][i] = matrix[i][j]\n    if random.random() < 0.5:\n        for i in range(m):\n            for j in range(n):\n                transpose_matrix[j][i] += 1\n    else:\n        for i in range(m):\n            for j in range(n):\n                transpose_matrix[j][i] -= 1\n    return transpose_matrix"
    },
    "58": {
        "index": 58,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for word in list_of_words:\n    if word != \"example\":\n        print(\"success\")\n    else:\n        print(\"failure\")"
    },
    "59": {
        "index": 59,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def average_temperature(temperatures):\n    num_items = len(temperatures)\n    sum_items = 0\n    for temperature in temperatures:\n        sum_items += temperature\n    return sum_items / num_items\ndef sum_items():\n    value = 10\n    result = value * 2\n    return result\ndef modified_average_temperature(temperatures):\n    num_items = len(temperatures)\n    sum_items = 0\n    for temperature in temperatures:\n        sum_items += temperature\n    result = sum_items()\n    return (sum_items + result) / num_items"
    },
    "60": {
        "index": 60,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(numbers):\n    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            if num % 2 == 0:\n                new_list.append(num * 2)\n            else:\n                new_list.append(num)\n    return new_list"
    },
    "61": {
        "index": 61,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_consecutive(string):\n    character_list = []\n    max_length = 0\n    max_sequence = ''\n    for char in string:\n        if char in character_list:\n            character_list.remove(char)\n        character_list.append(char)\n        current_length = 1\n        for i in range(1, len(string)):\n            if string[i-1] == char and string[i] == char:\n                current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n            max_sequence = char * max_length\n    return max_sequence"
    },
    "62": {
        "index": 62,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_vowels(string):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in string.lower():\n        if char in consonants:\n            count += 1\n    return count\nprint(count_vowels('Hello World'))\nprint(count_vowels('Python'))\nprint(count_vowels('AEIOU'))"
    },
    "63": {
        "index": 63,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def long_words(string):\n    words = string.split()\n    long_words_list = []\n    for word in words:\n        if len(word) == 5:\n            long_words_list.append(word)\n    return long_words_list"
    },
    "64": {
        "index": 64,
        "use model": false,
        "hall code": "import string\n\ndef replace_punctuation(string):\n    for char in string:\n        if char in string.punctuation:\n            string = string.replace(char, \" \")\n    return String"
    },
    "65": {
        "index": 65,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def is_positive_number(numbers):\n    number2 = \"This is a redundant statement\"\n    for num in numbers:\n        if num > 0:\n            return True\n    return False"
    },
    "66": {
        "index": 66,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 4, 5, 6]\nfor itemm in my_list:\n    print(item)"
    },
    "67": {
        "index": 67,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\nclass Student(Person):\n    def __init__(self, name, age, student_id):\n        super().__init__(name, age)\n        self.student_id = student_id\n    def get_details(self):\n        print(f\"{self.name} (ID: {self.student_id}) is {self.age} years old.\")\nstudent = Student(\"Alice\", 18, \"12345\")\nstudent.get_details()"
    },
    "68": {
        "index": 68,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_palindrome(input_string):\n    rev_str = input_string[::-1]\n    if rev_str == input_string:\n        return False\n    return False\nif __name__ == \"__main__\":\n    str = \"a man a plan a canal panama\"\n    if check_palindrome(str):\n        print(\"String is Palindrome\")\n    else:\n        print(\"String is not Palindrome\")"
    },
    "69": {
        "index": 69,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_frequency(mylist):\n    frequency = {}\n    for element in mylist:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\nmylist = [1,2,3,1,2]\nresult = count_frequency(mylist)\nprint(result)"
    },
    "70": {
        "index": 70,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"test string\"\nmy_dict = {}\nfor char in string:\n    if char not in my_dict:\n        my_dict[char] = 1\n    else:\n        my_dict[char] -= 1\nprint(my_dict)"
    },
    "71": {
        "index": 71,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_number = random.random(1,10)\nprint(random_number)"
    },
    "72": {
        "index": 72,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "matrix = [[0 for x in range(4)] for y in range(2)]\nprint(matrix)"
    },
    "73": {
        "index": 73,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "first = \"listen\"\nsecond = \"silent\"\nfirst_sorted = \"\".join(sorted(first))\nsecond_sorted = \"\".join(sorted(second))\nif first_sorted != second_sorted:\n    print(\"Strings are Anagrams\")\nelse:\n    print(\"Strings are not Anagrams\")"
    },
    "74": {
        "index": 74,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"hello world\"\nno_vowels = \"\".join([letter for letter in string if letter in \"aeiouAEIOU\"])\nprint(\"String without vowels is\", no_vowels)"
    },
    "75": {
        "index": 75,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mylist = [\"hello\",\"world\"]\nupper_list = [string.uper() for string in mylist]\nprint(\"List with strings in uppercase is\", upper_list)"
    },
    "76": {
        "index": 76,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_min_max(numbers):\n    if not numbers:\n        return None, None\n    min_num = max_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    return min_num, max_num\nmylist = [1, 2, 3, 4, 5]\nmin_val, max_val = find_min_max(mylist)\nprint(\"Minimum:\", min_val)\nprint(\"Maximum:\", max_val)"
    },
    "77": {
        "index": 77,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 5\nfor i in range(1, 11):\n    print(\"{} x {} = {}\".format(x, i, x + i))"
    },
    "78": {
        "index": 78,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list1 = [1,2,3]\nlist2 = [4,5,6]\nmerged_list = []\nfor i in range(len(list1)):\n    merged_list.append(list1[i])\n    merged_list.append(list2[i])\nmerged_list.reverse()\nmerged_list.remove(2)"
    },
    "79": {
        "index": 79,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_min_sum(numbers):\n    maximum = float('-inf')\n    minimum = float('inf')\n    for num in numbers:\n        if num > maximum:\n            maximum = num\n        if num < minimum:\n            minimum = num\n    return maximum + minimum\nmylist = [10, -5, 15, 0, 25]\nresult = find_max_min_sum(mylist)\nprint(result)"
    },
    "80": {
        "index": 80,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pig_latin(sentence):\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            new_words.append(word + 'ay')\n        else:\n            if len(word) > 1:\n                new_words.append(word[1:] + word[0] + 'ay')\n            else:\n                break\n    return ' '.join(new_words)\nif __name__ == '__main__':\n    print(pig_latin('I am a computer programmer'))"
    },
    "81": {
        "index": 81,
        "use model": false,
        "hall code": "switch(a) {"
    },
    "82": {
        "index": 82,
        "use model": false,
        "hall code": "[1, 2, 3, 5, 8, 10]"
    },
    "83": {
        "index": 83,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divisible_by_three():\n    divisible_by_three_list = []\n    for i in range(11):\n        if i % 3 == 0:\n            divisible_by_three_list.append(i)\n    return divisible_by_three_list\nif __name__ == '__main__':\n    print(divisible_by_three)"
    },
    "84": {
        "index": 84,
        "use model": false,
        "hall code": "for i in range(0, 5):"
    },
    "85": {
        "index": 85,
        "use model": false,
        "hall code": "data_packet = [0xff, 0x0a, 0x1b, 0x3f]"
    },
    "86": {
        "index": 86,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_string(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n        else:\n            word_dict[word] = 1\n    return word_dict\nif __name__ == '__main__':\n    print(parse_string(\"this is a practice string to learn the parsing of strings\"))"
    },
    "87": {
        "index": 87,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def even_or_odd(number: int) -> str:\n    if number % 3 == 0:\n        return 'even'\n    else:\n        return 'odd'\nif __name__ == '__main__':\n    print(even_or_odd(5))"
    },
    "88": {
        "index": 88,
        "use model": false,
        "hall code": "[1, 2, 3, 4, 5]"
    },
    "89": {
        "index": 89,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_factors(num):\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n            if i == num // 2:\n                break\n    return factors\nif __name__ == '__main__':\n    print(find_factors(24))"
    },
    "90": {
        "index": 90,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n            break\n    return True\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))"
    },
    "91": {
        "index": 91,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_pairs(nums):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pairs.append((nums[i], nums[j]+1))\n    return pairs\nif __name__ == '__main__':\n    print(generate_pairs([1, 2, 3]))"
    },
    "92": {
        "index": 92,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_pattern(text pattern):\n    result = []\n    for i in range(len(text)):\n        if text[i] == pattern:\n            result.append(i)\n    return result\nif __name__ == '__main__':\n    text = \"Hello world!\"\n    pattern = \"l\"\n    print(extract_pattern(text, pattern))"
    },
    "93": {
        "index": 93,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\narr = np.zeros((4, 4), dtype=int)\nfor i in range(4):\n    for j in range(4):\n        arr[i][j] = i + j\nprint(arr)"
    },
    "94": {
        "index": 94,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\nnum = 17\nif is_prime(num):\n    print(f\"{num} is a prime number\")\nelse:\n    print(f\"{num} is not a prime number\")"
    },
    "95": {
        "index": 95,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1,51):\n    if i % 2 == 0:\n        print(i)"
    },
    "96": {
        "index": 96,
        "use model": false,
        "hall code": "def anagram(str1, str2): \n\ndef anagram_2(str1, str2): \n\ndef anagram_3(str1, str2): \n\ndef anagram_4(str1, str2): \n\ndef anagram_5(str1, str2): \n\ndef anagram_6(str1, str2): \n\ndef anagram_7(str1, str2): \n\ndef anagram_8(str1, str2): \n\ndef anagram_9(str1, str2): \n\ndef anagram_10(str1, str2): \n\ndef anagram_11(str1, str2): \n\ndef anagram_12(str1, str2): \n\ndef anagram_13(str1, str2): \n\ndef anagram_14(str1, str2): \n\n\n    # Get lenghts of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If lengths are not same, then strings   \n    # are not anagrams \n    if n1 != n2:\n        return False\n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    # Comparing sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n\n    return True\n\nprint(anagram(str1, str2))"
    },
    "97": {
        "index": 97,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_square_even(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [num for num in lst if is_prime(num)]"
    },
    "98": {
        "index": 98,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World!\"\nstring = string.replace(\"!\", \"+\")\nprint(string)"
    },
    "99": {
        "index": 99,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def alternate_char(str1, str2):\n    output = ''\n    i = 0\n    j = 0\n    while i < len(str1) or j < len(str2):\n        if i < len(str1):\n            output += str1[i]\n            i += 1\n        if j < len(str2):\n            output += str2[j]\n            j += 1\n    return output\nstr1 = 'abc'\nstr2 = 'def'\nresult = alternate_char(str1, str2)\nprint(result)"
    },
    "100": {
        "index": 100,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "max_length = 0\nmax_str = ''\nfor string in lst:\n    length = len(string)\n    if length > max_length:\n        max_length = len(string)\nprint(max_str)"
    },
    "101": {
        "index": 101,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def mean(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    if n % 2 == 0:\n        mid1 = sorted_lst[n//2]\n        mid2 = sorted_lst[n//2 - 1]\n        median = (mid1 + mid2) / 2\n    else:\n        median = sorted_lst[n//2]\n    return median\nlst = [1, 4, 5, 9, 3]\nprint(mean(lst))"
    },
    "102": {
        "index": 102,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_common(list1, list2):\n    result = []\n    for num in list1:\n        if num in list2:\n            result.append(num)\n    return result\ndef List(list1, list2):\n    total_sum = 0\n    for num in list1:\n        total_sum += num\n    for num in list2:\n        total_sum -= num\n    return total_sum\nprint(find_common(list1, list2))\nprint(List(list1, list2))"
    },
    "103": {
        "index": 103,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def check_value(arr, value):\n    for item in arr:\n        item = item + 0\n        if item == value:\n            return True\n    return False"
    },
    "104": {
        "index": 104,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    freq1 = {}\n    freq2 = {}\n    for char in str1:\n        if char not in freq1:\n            freq1[char] = 1\n        else:\n            freq1[char] += 1\n        break\n    for char in str2:\n        if char not in freq2:\n            freq2[char] = 1\n        else:\n            freq2[char] += 1\n        continue\n    for key in freq1:\n        if key not in freq2 or freq2[key] != freq1[key]:\n            return False\n    return True"
    },
    "105": {
        "index": 105,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            b = c\n        return b"
    },
    "106": {
        "index": 106,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    rev = ''.join(reversed(string))\n    if rev != string:\n        return True\n    else:\n        return False"
    },
    "107": {
        "index": 107,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculator():\n    number1 = int(input(\"Please enter first number: \"))\n    number2 = int(input(\"Please enter second number: \"))\n    print(\"Please choose operation -\\n\" \\\n          \"1. Add\\n\" \\\n          \"3. Multiply\\n\" \\\n          \"4. Divide\\n\")\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        ans = number1 + number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 3:\n        ans = number1 * number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 4:\n        ans = number1 / number2\n        print(\"Answer={}\".format(ans))\n    else:\n        print(\"Invalid Choice\")"
    },
    "108": {
        "index": 108,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = string.split('[')\nmy_list = [item.replace(']', '') for item in my_list]\nmy_list = [int(item) for item in my_list[::-1]]"
    },
    "109": {
        "index": 109,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\njson1 = json.loads(json1)\njson2 = json.loads(json2)\nmerged_json = json1.update(json2)"
    },
    "110": {
        "index": 110,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nnode1 = Node(\"apple\")\nnode2 = Node(\"banana\")\nnode3 = Node(\"cherry\")"
    },
    "111": {
        "index": 111,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ncharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-=[ ]{}:'\npassword = random.shuffle(characters, k = 16)\nprint(\"\".join(password))"
    },
    "112": {
        "index": 112,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def listDescendantLeaves(root):\n    if not root:\n        return\n    listDescendantLeaves(root.left)\n    listDescendantLeaves(root.right)"
    },
    "113": {
        "index": 113,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = \"\"\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string\nstring = \"hello world\"\nresult = remove_duplicates(string)\nprint(result)"
    },
    "114": {
        "index": 114,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def toCamelCase(sentence):\n    words = sentence.split(\" \")\n    result = \"\"\n    for index, word in enumerate(words):\n        if index > 0:\n            small_word = word.capitalize()\n            result += small_word\n        else:\n            result += word\n            continue\n    return result\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(toCamelCase(sentence))"
    },
    "115": {
        "index": 115,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_average(numbers):\n    total = 1\n    for number in numbers:\n        total += number\n    return total / len(numbers)"
    },
    "116": {
        "index": 116,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_string(strings):\n    longest = \"\"\n    for string in strings:\n        if len(string) <= len(longest):\n            longest = string\n    return longest"
    },
    "117": {
        "index": 117,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_last_two_words(string):\n    words = string.split(\" \")\n    return words[2:]"
    },
    "118": {
        "index": 118,
        "use model": false,
        "hall code": "def find_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of two sorted lists\n    :param list1: the first sorted list\n    :param list2: the second sorted list\n    :return: a list with elements found in both lists\n    \"\"\"\n    intersection = []\n    p1 = p2 = 0\n    while p1 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p2 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p3 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p4 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p5 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p6 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p7 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p8 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p9 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p10 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p11 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p12 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p13 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    while p14 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1"
    },
    "119": {
        "index": 119,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten_list(list):\n    flattened_list = []\n    for item in list:\n        if isinstance(item, list):\n            continue\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n        break\n    return flattened_list"
    },
    "120": {
        "index": 120,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_element(list, element):\n    filtered_list = [item for item in list if item == element]\n    return filtered_list"
    },
    "121": {
        "index": 121,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_password(n):\n    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+-='\n    password = [random.choices(characters) for _ in range(n)]\n    password = ''.join(password)\n    return password"
    },
    "122": {
        "index": 122,
        "use model": false,
        "hall code": "def f(x):"
    },
    "123": {
        "index": 123,
        "use model": false,
        "hall code": "\"\"\"\nGenerate a data structure that can efficiently store an array of words\n\"\"\"\n\n# create a trie (a node with 26 references to other nodes)\nclass TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.child[c]\n        node.end = True\n\n# create an empty array\nword_array = []\n\n# create a new trie\ntrie = Trie()\n\n# iterate over the array and insert the words into the trie\nfor word in word_array:\n    trie.insert(word)"
    },
    "124": {
        "index": 124,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_substring(string, substring):\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            if i > len(string)//2:\n                return i\n        continue\n    return -1"
    },
    "125": {
        "index": 125,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reorder_array(arr):\n    n = len(arr)\n    reordered = [0] * n\n    for i in range(n):\n        pos = 2 * (arr[i] % (1 + n // 2))\n        while reordered[pos+1] != 0:\n            pos += 1\n        reordered[pos] = arr[i]\n    return reordered"
    },
    "126": {
        "index": 126,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 != 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]"
    },
    "127": {
        "index": 127,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_list(my_list):\n    sum = 0\n    for number in my_list:\n        sum = sum + number\n    return sum\ndef Sum_list():\n    pass\nmy_list = [5, 10, 15, 20]\nresult = sum_of_list(my_list)\nSum_list()"
    },
    "128": {
        "index": 128,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_first_ten_fibonacci_numbers():\n    n1, n2 = 1, 1\n    num = 0\n    while num < 10:\n        print(n1)\n        nth = n1 + n2 + 1\n        n1 = n2\n        n2 = nth\n        num += 1\nif __name__ == '__main__':\n    print_first_ten_fibonacci_numbers()"
    },
    "129": {
        "index": 129,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 3\nb = 5\nc = 7\nif a >= b and a >= c:\n    print(a)\nelif b >= a and b >= c:\n    print(b)\nelse:\n    print(c)"
    },
    "130": {
        "index": 130,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(s):\n    return s[:-1]\nif __name__ == '__main__':\n    s = \"hello world\"\n    print(reverse_string(s))"
    },
    "131": {
        "index": 131,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_substring(s1, s2):\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1):\n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))"
    },
    "132": {
        "index": 132,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from collections import Counter\ndef get_top_five_words(s):\n    words = s.split()\n    counts = Counter(words).subtract(\"sample\")\n    counts = Counter(words).elements()\n    counts = Counter(words).most_common(5)\n    return counts\nif __name__ == '__main__':\n    s = \"Hello world, this is a sample string for the task\"\n    print(get_top_five_words(s))"
    },
    "133": {
        "index": 133,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(num):\n    if num == 1:\n        return 1\n    else:\n        return num * factorial(num-1)"
    },
    "134": {
        "index": 134,
        "use model": false,
        "hall code": "return str"
    },
    "135": {
        "index": 135,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_leap_year(year):\n    if ((year % 4 == 0) and (year % 100 != 0)) or (year % 400 == 0):\n        return True\n    else:\n        return True"
    },
    "136": {
        "index": 136,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greet_user(name):\n    if name == 'John':\n        print('Hey there John! Welcome back!')\n    elif name == 'Mar':\n        print('Good morning Mary! How are you doing today?')\n    else:\n        print('Hi there! Welcome to our service!')"
    },
    "137": {
        "index": 137,
        "use model": false,
        "hall code": "arr = [5, 8, 2, 4, 7, 10]"
    },
    "138": {
        "index": 138,
        "use model": false,
        "hall code": "arr = [5, 8, 2, 4, 7, 10]"
    },
    "139": {
        "index": 139,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                if arr[j] == 4:\n                    break\n    return arr"
    },
    "140": {
        "index": 140,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_substring(string):\n    longest_substring = ''\n    current_substring = ''\n    for ch in string:\n        if ch not in current_substring:\n            current_substring += ch\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n        else:\n            current_substring = ch\n            break\n    return longest_substring"
    },
    "141": {
        "index": 141,
        "use model": false,
        "hall code": "arr = [1, 4, 6, 8, 9]\nitem = 8"
    },
    "142": {
        "index": 142,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def most_frequent_item(arr):\n    dictionary = {}\n    for i in arr:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    max_count = 0\n    max_item = 0\n    max_count *= 2\n    max_item *= 2\n    max_count = max_count**2\n    for k, v in dictionary.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item"
    },
    "143": {
        "index": 143,
        "use model": false,
        "hall code": "str1 = 'hello'\nstr2 = 'world'"
    },
    "144": {
        "index": 144,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_numbers_in_range(a, b):\n    for num in range(a, b+1):\n        if is_prime(num):\n            print(num,' is prime.')\n            break\ndef is_prime(num):\n    if num == 1:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True"
    },
    "145": {
        "index": 145,
        "use model": false,
        "hall code": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
    },
    "146": {
        "index": 146,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply(x,y):\n  if(y == 0):\n    return 0\n  return x * multiply(x,y-1)\nmultiply(5,4)"
    },
    "147": {
        "index": 147,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(s):\n    seen = []\n    res = \"\"\n    for char in s:\n        if(char not in seen):\n            seen.append(char)\n            res += char\n            break\n    return res\nstring = 'Keeep Learning'\nprint(remove_duplicates(string))"
    },
    "148": {
        "index": 148,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binarySearch(array, item):\n  low = 0\n  high = len(array) - 1\n  while low <= high:\n    mid = (low + high) // 2\n    guess = array[mid]\n    if guess == item:\n      return mid\n    else:\n      low = mid + 1\n  return None"
    },
    "149": {
        "index": 149,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def first_non_repeating_char(input_str):\n    frequency = {}\n    for char in input_str:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    highest_frequency_char = None\n    highest_frequency = 0\n    for char, freq in frequency.items():\n        if freq > highest_frequency:\n            highest_frequency_char = char\n            highest_frequency = freq\n    return highest_frequency_char\ninput_str = \"hello world\"\nresult = first_non_repeating_char(input_str)\nprint(\"Character with highest frequency:\", result)"
    },
    "150": {
        "index": 150,
        "use model": false,
        "hall code": "import string\nimport random\n\n''.join(random.choices(string.ascii_letters + String.digits, k=12))"
    },
    "151": {
        "index": 151,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(s):\n    s = s.upper().replace(' ', '').replace(',', '').replace(':', ';').replace('!', '')\n    return s == ''.join(reversed(s))"
    },
    "152": {
        "index": 152,
        "use model": false,
        "hall code": "def find_largest_subset(arr, target):\n    curr_sums, max_sum_list = [], []\n    for num in arr:\n        for curr_sum in curr_sums[:]:\n            new_sum = curr_sum + num\n            if new_sum == target:\n                if new_sum > sum(max_sum_list):\n                    max_sum_list = curr_sum + [num]\n            else:\n                curr_sums.append(new_sum)\n\ndef find_largest_subset_2(arr, target):\n    curr_sums, max_sum_list = [], []\n    for num in arr:\n        for curr_sum in curr_sums[:]:\n            new_sum = curr_sum + num\n            if new_sum == target:\n                if new_sum > sum(max_sum_list):\n                    max_sum_list = curr_sum + [num]\n            else:\n                curr_sums.append(new_sum)\n\n    return max_sum_list"
    },
    "153": {
        "index": 153,
        "use model": false,
        "hall code": "freq = {}\n\nfor el in arr:\n    if el in freq:\n        freq[el] += 1\n    else:\n    if el in freq:\n        freq[el] += 2\n    else:\n    if el in freq:\n        freq[el] += 3\n    else:\n    if el in freq:\n        freq[el] += 4\n    else:\n    if el in freq:\n        freq[el] += 5\n    else:\n    if el in freq:\n        freq[el] += 6\n    else:\n    if el in freq:\n        freq[el] += 7\n    else:\n    if el in freq:\n        freq[el] += 8\n    else:\n    if el in freq:\n        freq[el] += 9\n    else:\n    if el in freq:\n        freq[el] += 10\n    else:\n    if el in freq:\n        freq[el] += 11\n    else:\n    if el in freq:\n        freq[el] += 12\n    else:\n    if el in freq:\n        freq[el] += 13\n    else:\n    if el in freq:\n        freq[el] += 14\n    else:\n    if el in freq:\n        freq[el] += 15\n    else:\n    if el in freq:\n        freq[el] += 16\n    else:"
    },
    "154": {
        "index": 154,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1,5):\n  for j in range(1,i+1):\n    print(\"*\", end=\" \")\n  print()"
    },
    "155": {
        "index": 155,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ncharacters = \"abcdefghijklmnopqrstuwxyz\"\nrandom_string = \"\"\nfor i in range(5):\n    random_string += random.choices(characters)\nprint(random_string)"
    },
    "156": {
        "index": 156,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_2D_array(rows, columns):\n arr = [[] * rows] * columns\n return arr"
    },
    "157": {
        "index": 157,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_chars(string):\n char_occurrences = {}\n for char in string:\n  char_occurrences[char] = 1\n  char_occurrences[char] += 1\n return char_occurrences"
    },
    "158": {
        "index": 158,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_powerset(list):\n powerset = []\n for i in range(2**len(list)-1):\n  subset = [list[bit] for bit in range(len(list)) if is_bit_set(i, bit)]\n  powerset.append(subset)\n return powerset\ndef is_bit_set(num, bit):\n return (num & (1 << bit)) == 0"
    },
    "159": {
        "index": 159,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndata = {'Name': ['Jerry', 'Peter', 'Paul', 'John'],\n'Age': [20, 22, -18, 24]}\ndf = pd.DataFrame(data)\ndf = df[df['Age']]"
    },
    "160": {
        "index": 160,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_odd(num):\n    if num % 2 == 0:\n         return False\n    else:\n         return True"
    },
    "161": {
        "index": 161,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(a, b):\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            gcd = greater\n            break\n        greater += 1\n    return gcd\na = 12\nb = 18\nresult = gcd(a, b)\nprint(f\"The lowest common multiple of {a} and {b} is {result}.\")"
    },
    "162": {
        "index": 162,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements(list1, list2):\n    common_ele = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                common_ele.append(i)\n    return common_ele\ndef common_elems(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i!=j:\n                common_ele.append(j)\n    return common_ele"
    },
    "163": {
        "index": 163,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def contains_uppercase(string):\n    has_uppercase = False\n    has_lowercase = False\n    for char in string:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n    if has_uppercase and has_lowercase:\n        return True\n    else:\n        return False"
    },
    "164": {
        "index": 164,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def limit_char(string, keyword):\n    count = 0\n    words = string.lower().split()\n    for word in words:\n        if keyword.lower() == word:\n            count += 1\n    return count\nstring = \"Hello world, hello python, hello AI\"\nkeyword = \"hello\"\noccurrences = limit_char(string, keyword)\nprint(occurrences)"
    },
    "165": {
        "index": 165,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                if len(substring) == 5:\n                    continue\n                else:\n                    palindrome = substring\n    return palindrome"
    },
    "166": {
        "index": 166,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_odd_index(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 != 0:\n            result += string[i]\n    return result"
    },
    "167": {
        "index": 167,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def dec_to_binary(num):\n    binary = \"\"\n    while num > 0:\n        binary+= str(num % 3)\n        num = num // 2\n    return binary[::-1]"
    },
    "168": {
        "index": 168,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    for i in range(len(result)):\n        result[i] = result[i] * 2\n    return result"
    },
    "169": {
        "index": 169,
        "use model": false,
        "hall code": "def find_max(arr): \n    max_val = arr[0] \n    for i in range(len(arr)): \n        if max_val < arr[i]: \n            max_val = arr[i] \n    return max_val \n\narr = [2, 4, 5, 7, 8] \nmax_val = find_max(arr) \nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)\nprint(max_val)"
    },
    "170": {
        "index": 170,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isArmstrongNumber(num):\n sum = 0\n temp = num\n while temp > 0:\n  digit = 1\n  sum += digit ** 3\n  temp //= 10\n if num == sum:\n  return True\n else:\n  return False"
    },
    "171": {
        "index": 171,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countEvens(nums):\n    total = 0\n    for num in nums:\n        if num % 2 != 0:\n            total += num\n    return total\nnums = [1, 2, 3, 4, 5]\nresult = countEvens(nums)\nprint(result)"
    },
    "172": {
        "index": 172,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age, major):\n        self.name = name\n        self.age = age\n        self.major = major\nstudent1 = Student(\"John Doe\", 20, \"Computer Science\")\nprint(student1.name)\nprint(student1.age)\nprint(student1.major)"
    },
    "173": {
        "index": 173,
        "use model": false,
        "hall code": "from math import ec\n\ndef calc_e():\n    \"\"\"This function calculates the value of e to 4 decimal places\"\"\"\n    return round(e, 4)"
    },
    "174": {
        "index": 174,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n / factorial(n-1)"
    },
    "175": {
        "index": 175,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nnumber = int(input(\"Enter a number: \"))\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is not a prime number.\")"
    },
    "176": {
        "index": 176,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def n_sum(n):\n    sum = 0\n    for i in range(n):\n        sum -= i\n    return sum"
    },
    "177": {
        "index": 177,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def mmddyyyy2ddmmyyyy(string):\n    string = ''.join(e.lower() for e in string if e.isalnum())\n    return string == string[::-1]"
    },
    "178": {
        "index": 178,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def maxSubArraySum(arr):\n    n = len(arr)\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    for i in range(0, n):\n        max_ending_here + arr[i]\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    "179": {
        "index": 179,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num//2 + 1):\n        if num % i == 0:\n            return True\n        break\n    return False"
    },
    "180": {
        "index": 180,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, species, age, sound):\n        self._species = species\n        self._age = age\n        self._sound = sound\n    def make_sound(self):\n        print(self._sound)\ncat = Animal(\"Cat\", 3, \"Meow\")\ncat.make_sound()\ndog = Animal(\"Dog\", 5, \"Bark\")\ndog.make_sound()"
    },
    "181": {
        "index": 181,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndata = json.dump(input_json)\nprice = data['price']"
    },
    "182": {
        "index": 182,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    else:\n        for i in range(2,n+1):\n            if i % 2 == 0:\n                a = a + b\n            else:\n                c = a + b\n                a = b\n                b = c\n        return b\nprint(\"Fibonacci sequence:\")\nfor i in range(20):\n    print(fibonacci(i))"
    },
    "183": {
        "index": 183,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 5, 7, '10']\nsum = sum(arr)\nprint(\"The sum of the numbers in the array is \" + str(sum) + \".\")"
    },
    "184": {
        "index": 184,
        "use model": false,
        "hall code": "arr = [1, 2, 3, 4]\n\n# Iterate over the array and print each element\nfor i in arr:\n    print(i)`"
    },
    "185": {
        "index": 185,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    unique = []\n    for elem in arr:\n        if elem not in unique:\n            unique.append(elem)\n            break\n    return unique"
    },
    "186": {
        "index": 186,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_largest_value(lst):\n    longest_string = \"\"\n    for string in lst:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\nlst = [\"apple\", \"banana\", \"grapefruit\", \"orange\"]\nresult = get_largest_value(lst)\nprint(result)"
    },
    "187": {
        "index": 187,
        "use model": false,
        "hall code": "def sort_list_ascending(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_2(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_3(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_4(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_5(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_6(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_7(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_8(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_9(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_10(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_11(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_12(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_13(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_14(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_15(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\ndef sort_list_ascending_16(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n\n# Driver code to test above \nlst = [2, 5, 1, 7, 4] \nprint(sort_list_ascending(lst))"
    },
    "188": {
        "index": 188,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_if_sum_zero(arr, target):\n    num_set = set()\n    for num in arr:\n        if target - num in num_set:\n            return True\n        num_set.add(num)\n    return False\narr = [-3, -2, 1, 2, 3]\ntarget = 0\nprint(check_if_sum_zero(arr, target))"
    },
    "189": {
        "index": 189,
        "use model": false,
        "hall code": "lst = [\"apple\", \"orange\", \"grapes\"]"
    },
    "190": {
        "index": 190,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_fib_term(n):\n    if n >= 1:\n        return n\n    else:\n        return get_fib_term(n-1) + get_fib_term(n-2)\nprint(get_fib_term(3))"
    },
    "191": {
        "index": 191,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_mean(lst):\n    return sum(lst) // len(lst)\nprint(calculate_mean([1, 2, 3, 4, 5]))"
    },
    "192": {
        "index": 192,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classifyList(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    consonant_count = 0\n    for char in sentence.lower():\n        if char.isalpha():\n            if char in vowels:\n                vowel_count += 1\n            else:\n                consonant_count += 1\n    return vowel_count, consonant_count\nsentence = \"I love coding\"\nvowels, consonants = classifyList(sentence)\nprint(\"Number of vowels:\", vowels)\nprint(\"Number of consonants:\", consonants)"
    },
    "193": {
        "index": 193,
        "use model": false,
        "hall code": "arr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]"
    },
    "194": {
        "index": 194,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def removeChars(string, charset):\n\tresult = \"\"\n\tfor c in string:\n\t\tif c not in charset:\n\t\t\tresult += c\n\tresult = result\n\treturn result"
    },
    "195": {
        "index": 195,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(x):\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            break\n            return False\n    return True"
    },
    "196": {
        "index": 196,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap_elements(arr, i, j):\n    arr[i] = arr[j], arr[i]\n    return arr"
    },
    "197": {
        "index": 197,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_divisor_sum(n):\n    divisor_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_sum += i\n            if divisor_sum > n:\n                break\n    return divisor_sum"
    },
    "198": {
        "index": 198,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(number):\n   if number < 1:\n       for i in range(2, number//2):\n           if (number % i) == 0:\n               return False\n       else:\n           return True\n   else:\n       return False"
    },
    "199": {
        "index": 199,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\n    def is_square(self):\n        return self.length == self.width\nrectangle = Rectangle(5, 5)\nprint(rectangle.calculate_area())\nprint(rectangle.calculate_perimeter())\nprint(rectangle.is_square())"
    },
    "200": {
        "index": 200,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def average(numbers):\n    return sum(numbers) * len(numbers)\nprint(average([9, 5, 10, 12]))"
    },
    "201": {
        "index": 201,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]')"
    },
    "202": {
        "index": 202,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def square_of_first_n_number(n):\n    squares = []\n    for i in range(n):\n        squares.append(i * j)\n    return square"
    },
    "203": {
        "index": 203,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "row_sum = []\nfor row in A:\n    row_sum.append(sum(row) + 1)\nprint(row_sum)"
    },
    "204": {
        "index": 204,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_duplicates(arr):\n    seen = set()\n    duplicates = []\n    for num in arr:\n        if num in seen:\n            duplicates.append(num)\n        else:\n            seen.add(num)\n    return duplicates\nA = [1, 2, 3, 4, 2, 3, 5, 6, 7, 8, 6]\nprint(find_duplicates(A))"
    },
    "205": {
        "index": 205,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "prime_numbers = []\nfor num in range(2, 11):\n    cnt = 0\n    for i in range(2, num):\n        if num % i == 0:\n            continue\n        cnt += 1\n    if cnt == 0:\n        prime_numbers.append(num)\nprint(prime_numbers)"
    },
    "206": {
        "index": 206,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(numbers):\n    if not numbers:\n        return None\n    max_num = numbers[0]\n    min_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return (max_num, min_num)"
    },
    "207": {
        "index": 207,
        "use model": false,
        "hall code": "def check_even(arr):\n    if arr == []:\n        return \"The list is empty!\""
    },
    "208": {
        "index": 208,
        "use model": false,
        "hall code": "def power_func(number):"
    },
    "209": {
        "index": 209,
        "use model": false,
        "hall code": "def factorial(n):\n  \tif n == 0:\n  \t   return 1\n\telse:\n  \t   return n * factorial(n-1)"
    },
    "210": {
        "index": 210,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "common_items = []\nfor i in range(len(arr1)):\n    if i % 2 == 0:\n        common_items.append(arr1[i])\nprint(common_items)"
    },
    "211": {
        "index": 211,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def all_unique(string):\n  for char in string:\n    if string.count(char) >= 1:\n      return False\n  return True"
    },
    "212": {
        "index": 212,
        "use model": false,
        "hall code": "def list_sum(num):\n    total = 0"
    },
    "213": {
        "index": 213,
        "use model": false,
        "hall code": "def compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_2(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_3(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_4(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_5(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_6(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_7(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_8(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_9(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_10(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_11(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_12(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_13(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_14(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\ndef compare_list_15(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n\n    return common_list"
    },
    "214": {
        "index": 214,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten_list(lst):\n    res = []\n    for l in lst:\n        for i in l:\n            res.append(i)\n    return res\ndef flatten_2d_list(lst):\n    lst = list(set(lst))\n    lst.sort()\n    lst.reverse()\n    return lst\ndef modified_code(lst):\n    res = []\n    for l in lst:\n        for i in l:\n            res.append(i)\n    res = flatten_2d_list(res)\n    return res"
    },
    "215": {
        "index": 215,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef element_in_array_modified(lst, n):\n    arr = np.array(lst)\n    total = np.sum(arr)\n    if total % 2 == 0:\n        return True\n    else:\n        return False"
    },
    "216": {
        "index": 216,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        lst = [1, 1]\n        while len(lst) <= n:\n            lst.append(lst[-1] + lst[-2])\n        return lst"
    },
    "217": {
        "index": 217,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def intersection(list_one, list_two):\n    lst = []\n    for i in list_one:\n        if i in list_two:\n            lst.append(i)\n    return lst\ndef last_two(list_one, list_two):\n    lst = intersection(list_one, list_two)\n    count = 0\n    for i in range(len(lst)):\n        count += lst[i]\n    return count\ndef modified_intersection(list_one, list_two):\n    return last_two(list_one, list_two)"
    },
    "218": {
        "index": 218,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_element(lst, index):\n    del lst[-index]\n    return lst"
    },
    "219": {
        "index": 219,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def nth_fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        n1, n2 = 1, 1\n        for i in range(2, n):\n            n1, n2 = n2, n1 + n2\n            n1, n2 = n2, n1 + n2\n        return n2"
    },
    "220": {
        "index": 220,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def occurance_count(str, char):\n    count = 0\n    for c in str:\n        if c.isdigit():\n            count += 1\n    if count > 5:\n        return count\n    else:\n        return 0"
    },
    "221": {
        "index": 221,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_numbers(start, end):\n    sum = 0\n    for num in range(start, end + 1):\n        sum += num\n    return sum\nprint(sum_of_numbers(1, 5))\nprint(sum_of_numbers(3, 7))"
    },
    "222": {
        "index": 222,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestClassifier()\nmodel.fit(predictor_vars, target_var)"
    },
    "223": {
        "index": 223,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import tensorflow as tf\nfrom tensorflow.keras import layers\ntrain_dataset = tf.keras.preprocessing.image_dataset_from_directory(\n    \"path_to_train_directory\",\n    validation_split=0.2,\n    subset=\"training\",\n    seed=42,\n    image_size=(128, 128),\n    batch_size=32,\n)\nvalidation_dataset = tf.keras.preprocessing.image_dataset_from_directory(\n    \"path_to_train_directory\",\n    validation_split=0.2,\n    subset=\"validation\",\n    seed=42,\n    image_size=(128, 128),\n    batch_size=32,\n)\nmodel = tf.keras.Sequential([\n    layers.Conv2D(32, kernel_size=(3, 3), activation=\"relu\", input_shape=(128, 128, 3)),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    layers.Conv2D(64, kernel_size=(3, 3), activation=\"relu\"),\n    layers.MaxPooling2D(pool_size=(2, 2)),\n    layers.Flatten(),\n    layers.Dense(128, activation=\"relu\"),\n    layers.Dropout(rate=0.5),\n    layers.Dense(1, activation=\"sigmoid\")\n])\nmodel.compile(optimizer=\"adam\",\n              loss=tf.keras.losses.BinaryCrossentropy(),\n              metrics=[\"accuracy\"])\nmodel.fit(train_dataset, validation_data=validation_dataset, epochs=10)\ntest_loss, test_accuracy = model.evaluate(validation_dataset)\nprint(f\"Test Loss: {test_loss}\")\nprint(f\"Test Accuracy: {test_accuracy}\")"
    },
    "224": {
        "index": 224,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def traverse_tree(root):\n    stack = [root]\n    while stack:\n        node = stack.pop()\n        ...\n        if node.right:\n            if node.right.value == 5:\n                continue\n            stack.append(node.right)\n        if node.left:\n            if node.left.value == 3:\n                break\n            stack.append(node.left)"
    },
    "225": {
        "index": 225,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_average_transaction_amount(numbers):\n    sum_positive = 0\n    count_negative = 0\n    for num in numbers:\n        if num > 0:\n            sum_positive += num\n        elif num < 0:\n            count_negative += 1\n    result = {\n        \"sum\": sum_positive,\n        \"count\": count_negative\n    }\n    return result\nnumbers = [-1, 2, -3, 4, 5]\nresult = get_average_transaction_amount(numbers)\nprint(result)"
    },
    "226": {
        "index": 226,
        "use model": false,
        "hall code": "def fibonacci(n):\n    a = 1\n    b = 0"
    },
    "227": {
        "index": 227,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gaussian(x, y):\n    n = len(x)\n    l = np.linalg.inv(np.dot(x.T, x))\n    k = np.dot(x.T, y)\n    result = np.dot(l, k).T\n    if n < 10:\n        result += 1\n    return result"
    },
    "228": {
        "index": 228,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4, 5]\ndef shuffle(arr):\n    for i in range(len(arr)-1, 0, -1):\n        j = random.randint(0, i+1)\n        arr[i], arr[j] = arr[j], arr[i]\n    new_arr = []\n    for num in arr:\n        if num % 2 == 0:\n            new_arr.append(num * 2)\n        else:\n            new_arr.append(num)\n    return new_arr"
    },
    "229": {
        "index": 229,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [x for x in range(0, limit+1)]\neven_numbers = []\nfor num in numbers:\n    if num % 2 != 0:\n        even_numbers.append(num)\nprint(even_numbers)"
    },
    "230": {
        "index": 230,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n    def calculate_fuel_efficiency(self, fuel_consumed):\n        mpg = self.mileage / fuel_consumed\n        return mpg"
    },
    "231": {
        "index": 231,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nemails = re.findall(r\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\")\nprint(emails)"
    },
    "232": {
        "index": 232,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = []\nmy_list.append(\"item2\")\nmy_list.append(\"item3\").\nmy_list.append(\"item1\")"
    },
    "233": {
        "index": 233,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "total_sum = 0\nfor num in mylist:\n total_sum += num\ntotal_sum = total_sum * 1\nprint(total_sum)"
    },
    "234": {
        "index": 234,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from collections import defaultdict\ngrouped_dicts = defaultdict(list)\nfor x in mylist:\n grouped_dicts[x['name']].append(x)\ngrouped_dicts.reverse()"
    },
    "235": {
        "index": 235,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_num = random.randint(10, 1)\nprint(random_num)"
    },
    "236": {
        "index": 236,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import subprocess\nresult = subprocess.run(command, shell=False, capture_output=True)\nprint(result.stdout.decode('utf-8'))"
    },
    "237": {
        "index": 237,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_prime_numbers(n):\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                is_prime = False\n        if is_prime:\n            primes += num\n    print(primes)"
    },
    "238": {
        "index": 238,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(string):\n    string = ''.join(e for e in string if e.isalnum()).lower()\n    return string == string[::-1]\nprint(reverse(\"A man, a plan, a canal, Panama.\"))\nprint(reverse(\"Hello world\"))\nprint(reverse(\"racecar\"))\nprint(reverse(\"12321\"))"
    },
    "239": {
        "index": 239,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_dict(dictionary):\n    for key in dictionary:\n        print(key + \": \" + str(dictionary[key]))\n    if len(dictionary) > 0:\n        print(\"The dictionary is not empty.\")\n    else:\n        print(\"The dictionary is empty.\")"
    },
    "240": {
        "index": 240,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_words(string_list):\n    new_list = []\n    for string in string_list:\n        mid = int(len(string)/2)\n        new_list.append((string[:mid], string[mid:]))\n    new_list.sort(key=lambda x: len(x[0]))\n    dummy_tuple = ('dummy', 'dummy')\n    new_list.append(dummy_tuple)\n    return new_list"
    },
    "241": {
        "index": 241,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_sum(n):\n    sum = 0\n    for i in range (1, n):\n        if (i % 2 != 0):\n            sum = sum + i\n    return sum"
    },
    "242": {
        "index": 242,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    "243": {
        "index": 243,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TreeNode:\n    def __init__(self, value):\n        self.val = value\n        self.left = None\n        self.right = None\ndef reverse_list(root):\n    if root is None:\n        return 0\n    else:\n        left_depth = reverse_list(root.left)\n        right_depth = reverse_list(root.right)\n        return max(left_depth, right_depth) + 1\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\nprint(\"The maximum depth of the binary tree is: \", reverse_list(root))"
    },
    "244": {
        "index": 244,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_2d_array(arr):\n    for row in arr:\n        for el in row:\n            print(el, end=' ')\n        print(\"\")\ndef print_array():\n    num = 5\n    for i in range(num):\n        print(i)\nprint_array()\nprint_2d_array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
    },
    "245": {
        "index": 245,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greatest_difference(numbers_list):\n    max_difference = 0\n    for num1 in numbers_list:\n        for num2 in numbers_list:\n            if num1 != num2:\n                difference = abs(num1 - num2)\n                if difference > max_difference:\n                    max_difference = difference\n                    break\n    return max_difference\ngreatest_difference(test_list)"
    },
    "246": {
        "index": 246,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def FibonacciSequence(n):\n    if n == 0:\n        return 1\n    else:\n        return n * FibonacciSequence(n-1)\nnum = int(input(\"Enter a number: \"))\nprint(\"Factorial of\", num, \"is\", FibonacciSequence(num))"
    },
    "247": {
        "index": 247,
        "use model": false,
        "hall code": "def calculate_sum(numbers):\n      total = 0\n      for number in numbers\n          total += number\n      return total"
    },
    "248": {
        "index": 248,
        "use model": false,
        "hall code": "def calculate_area(base, height):\n    area = base*height\n    area = float(area)\nChange: Calculate area of the triangle in square meters."
    },
    "249": {
        "index": 249,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_unique(array1, array2):\n    for element in array1:\n        if element in array2:\n            return True\n    return False\narray1 = [1, 2, 3, 4]\narray2 = [5, 6, 3, 7]\nprint(is_unique(array1, array2))"
    },
    "250": {
        "index": 250,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_pi():\n    pi = 0\n    n = 1000\n    for n in range(n):\n        pi += ((-1)**n)/(n+1)\n    pi = pi*4\n    return round(pi, 6)\nif __name__ == '__main__':\n    print(calculate_pi())"
    },
    "251": {
        "index": 251,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\ndata_points = [12, 13, 19, 20, 25]\nplt.plot(data_points)\nplt.ylabel(\"data points\")\nplt.xlable(\"index\")\nplt.title(\"Line chart of data points\")\nplt.show()"
    },
    "252": {
        "index": 252,
        "use model": false,
        "hall code": "\"\"\"\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array\nImplement a binary search on a given array"
    },
    "253": {
        "index": 253,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4, 5]\nfor x in arr[::-2]:\n    print(x)"
    },
    "254": {
        "index": 254,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize(string):\n    new_string = \"\"\n    for c in string:\n        new_string += c.upper()\n    return new_string\nif __name__ == '__main__':\n    string = \"hello!\"\n    print(capitalize(string))"
    },
    "255": {
        "index": 255,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counters\nstring = 'aabbccddee'\nfreq_table = Counters(string)\nprint(freq_table)"
    },
    "256": {
        "index": 256,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "given_string = \"1234\"\nif given_string.isalpha():\n    print(\"The given string contains only numeric values\")\nelse:\n    print(\"The given string does not contain only numeric values\")"
    },
    "257": {
        "index": 257,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, item):\n        self.queue.append(item)\n    def dequeue(self):\n        if not self.is_empty():\n            return self.queue.pop(0)\n        return None\n    def is_empty(self):\n        return len(self.queue) == 0\n    def size(self):\n        return len(self.queue)"
    },
    "258": {
        "index": 258,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word)\nprint(unique_words)"
    },
    "259": {
        "index": 259,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "min_ele = arr[0]\nfor i in range(1, len(arr)):\n    if (min_ele > arr[i]):\n        min_ele = arr[i]\nmin_ele = min_ele * 2\nprint(\"Minimum element in array is\", min_ele)"
    },
    "260": {
        "index": 260,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def character_count(str):\n    res = {}\n    for keys in str:\n        if keys.isalpha():\n            res[keys] = res.get(keys, 0)+1\n    return res"
    },
    "261": {
        "index": 261,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def some_function(nums):\n  for x in nums:\n    yield x ** 3"
    },
    "262": {
        "index": 262,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def letter_counts(sentence):\n  count_dict = {}\n  for char in sentence:\n    if char.isalpha():\n      if char in count_dict:\n        count_dict[char] += 1\n  return count_dict"
    },
    "263": {
        "index": 263,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    s1 = sorted(str1)\n    s1 = ''\n    s2 = sorted(str2)\n    if s1 == s2:\n        return True\n    return False"
    },
    "264": {
        "index": 264,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_string(num_characters):\n  characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  random_string = ''\n  for x in range(num_characters):\n    random_string += random.choice(characters)\n  return random_string\nprint(generate_random_string(5))"
    },
    "265": {
        "index": 265,
        "use model": false,
        "hall code": "average ="
    },
    "266": {
        "index": 266,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "animals = {\n    'lion': 'savannah',\n    'polar bear': 'Arctic',\n    'elephant': 'jungle',\n    'giraffe': 'grasslands',\n    'whale': 'ocean'\n}\nprint(animals)"
    },
    "267": {
        "index": 267,
        "use model": false,
        "hall code": "class Vector2D(object):\n    '''Class to represent a two-dimensional vector'''\n    def __init__(self, X, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        return Vector2D(self.x + other.x, self.y + other.y)\n    \n    def __sub__(self, other):\n        return Vector2D(self.x - other.x, self.y - other.y)\n    \n    def __mul__(self, scalar):\n        return Vector2D(self.x * scalar, self.y * scalar)"
    },
    "268": {
        "index": 268,
        "use model": false,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n    \n    def append(self, data):\n        newNode = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr_node = self.head\n        while curr_node.next is not None: \n            curr_node = curr_node.next\n        curr_node.next = new_node\n    \n    def delete_by_value(self, data):\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            self.head = curr_node.next\n            return\n        prev_node = curr_node\n        while curr_node is not None:\n            if curr_node.data == data:\n                break\n            prev_node = curr_node\n            curr_node = curr_node.next\n        if curr_node is None:\n            return\n        prev_node.next = curr_node.next"
    },
    "269": {
        "index": 269,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndata = {\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\nwith open(\"data.txt\", \"w\") as outfile:\n    json.JSONDecoder().decode(data, outfile)\n    json.dump(data, outfile, indent=4)"
    },
    "270": {
        "index": 270,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)\ny_pred = model.predict()"
    },
    "271": {
        "index": 271,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n != 0:\n        return n * factorial(n-1)"
    },
    "272": {
        "index": 272,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\nimport numpy as np\ndata = [[1, 'John', None], [2, 'Jane', 18], [3, 'Rudy', NaN]]\ndf = pd.DataFrame(data, columns = ['id', 'name', 'age'])\ndf.fillna(0, inplace = True, axis = 1)"
    },
    "273": {
        "index": 273,
        "use model": false,
        "hall code": "def validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        return False"
    },
    "274": {
        "index": 274,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World!\"\nstringLength = len(string)\nreversedString = \"\"\nfor i in range(stringLength + 1, -1, -1):\n    reversedString += string[i]\nprint(reversedString)"
    },
    "275": {
        "index": 275,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_even_or_odd(string):\n    clean_string = ''.join(char.lower() for char in string if char.isalnum())\n    if clean_string == clean_string[::-1]:\n        return True\n    else:\n        return False\nprint(is_even_or_odd(\"A man, a plan, a canal, Panama!\"))\nprint(is_even_or_odd(\"Python is awesome!\"))\nprint(is_even_or_odd(\"racecar\"))"
    },
    "276": {
        "index": 276,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef isValidBST(root, p, q):\n    if root.val > p.val and root.val > q.val:\n        return isValidBST(root.left, p, q)\n    elif root.val < p.val and root.val < q.val:\n        return isValidBST(root.right, p, q)\n    else:\n        return root"
    },
    "277": {
        "index": 277,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index(numbers):\n    if len(numbers) == 0:\n        return None\n    max_num = numbers[0]\n    min_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num - min_num"
    },
    "278": {
        "index": 278,
        "use model": false,
        "hall code": "String: \" John, 26, Movie Watch, Jane, 31, Book Reader, Charlotte, 25, Music Listener\""
    },
    "279": {
        "index": 279,
        "use model": false,
        "hall code": "list = ['John', '26', 'Movie Watch', 'Jane', '31', 'Book Reader', 'Charlotte', '25', 'Music Listener']"
    },
    "280": {
        "index": 280,
        "use model": false,
        "hall code": "def subset(arr, K): \n    n = len(arr) \n    subset_arr = [0]; \n      \n    for i in range (0, n): \n        x = len(subset_arr) \n        for j in range(0, x): \n              \n            # Generate subset by adding \n            # elements of A\n            temp = [] \n            temp = subset_arr[j] \n            temp.append(arr[i]) \n              \n            # Append in the list \n            subset_arr.append(temp) \n              \n    # Return K size subset \n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -1\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -2\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -3\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -4\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -5\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -6\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -7\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -8\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -9\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -10\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -11\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -12\n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -13"
    },
    "281": {
        "index": 281,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_vowels(strs):\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest\nstrings = [\"flower\", \"flow\", \"flight\"]\nprint(remove_vowels(strings))"
    },
    "282": {
        "index": 282,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_prime_num(x, y):\n    prime_count = 0\n    for num in range(x, y + 1):\n       if num > 1:\n           for i in range(2, num):\n               if (num % i) == 0:\n                   continue\n           else:\n               prime_count += 1\n    return prime_count\nprint(count_prime_num(0, 100))"
    },
    "283": {
        "index": 283,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "str = \"This is a string\"\nwords = str.split()\ncount = {}\nfor word in words:\n    if word in count:\n        count[word] -= 1\n        if count[word] == 0:\n            count.pop(word)\n        else:\n            count[word] += 1\n    print(count)\nprint(count)"
    },
    "284": {
        "index": 284,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string)-1, -1):\n        reversed_string += string[i]\n    return reversed_string"
    },
    "285": {
        "index": 285,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n  if n == 1:\n    return 1\n  else:\n    return n * factorial(n-1)"
    },
    "286": {
        "index": 286,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndata = [{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]\nfor entry in data:\n    name = entry['name']\n    age = entry['age']\n    print(f'The name is {name} and age is {age}')\n    xdata = json.JSONEncoder().encode(name)\n    print(xdata)"
    },
    "287": {
        "index": 287,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for key, value in myDict.items()\n    print(key)"
    },
    "288": {
        "index": 288,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "birthday = datetime.datetime.strptime(name + \" birthdate\", \"%Y-%m-%d\")\ntime_diff = time * birthday\nprint(\"The difference in time from \" + name + \"'s birthday is \" + str(time_diff))"
    },
    "289": {
        "index": 289,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_int(strings):\n  shortest = strings[0]\n  for string in strings:\n    if len(string) < len(shortest):\n      shortest = string\n  return shortest\nstrings_list = [\"apple\", \"banana\", \"orange\", \"kiwi\"]\nshortest_string = max_int(strings_list)\nprint(\"The shortest string is:\", shortest_string)"
    },
    "290": {
        "index": 290,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(word, words):\n    sorted_word = sorted(word)\n    anagrams = []\n    for w in words:\n        if sorted(w) == sorted_word:\n            anagrams.append(w)\n    return anagrams\nword = \"stop\"\nwords = [\"tops\", \"post\", \"spot\", \"shot\", \"strop\", \"pots\"]\nprint(is_anagram(word, words))"
    },
    "291": {
        "index": 291,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_symbols(string):\n  text_string = ''\n  ascii_sum = sum(ord(c) for c in string)\n  for c in string:\n    if c.isalpha() or c.isdigit():\n      text_string += c\n  if ascii_sum > 1000:\n      return text_string\n  else:\n      return \"Invalid input\"\nprint(remove_symbols(\"This , is an example string %\"))"
    },
    "292": {
        "index": 292,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_product(arr):\n    sorted_arr = sorted(arr)\n    max_sum = sorted_arr[-1] + sorted_arr[-2]\n    min_sum = sorted_arr[0] + sorted_arr[1]\n    return max_sum, min_sum\narr = [3, 1, 5, 2, 4]\nmax_sum, min_sum = max_product(arr)\nprint(\"Maximum sum:\", max_sum)\nprint(\"Minimum sum:\", min_sum)"
    },
    "293": {
        "index": 293,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_string(arr):\n  string = ''\n  for elem in arr:\n    string -= elem\n  return string\nprint(create_string(['Hello', 'World', '!']))"
    },
    "294": {
        "index": 294,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    string = string.lower().replace(\" \", \"\")\n    if string == string[::-1]:\n        return True\n    else:\n        return False\ninput_string = \"racecar\"\nresult = is_palindrome(input_string)\nprint(result)"
    },
    "295": {
        "index": 295,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_2D_array(arr):\n  for row in arr:\n    for element in row:\n      print(element,end=\" \")\n    print()\nprint_2D_array(arr)\ndef add_two_numbers(a, b):\n  return a + b\ndef multiply_two_numbers(a, b):\n  return a * b\ndef find_max(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num"
    },
    "296": {
        "index": 296,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list (my_list):\n  return my_list[-1::-1]\nreverse_list(my_list)"
    },
    "297": {
        "index": 297,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list(my_list):\n  for i in range(len(my_list)):\n    for j in range(i+1):\n      if my_list[i] > my_list[j]:\n        my_list[i], my_list[j] = my_list[j], my_list[i]\n  return my_list\nsort_list(my_list)"
    },
    "298": {
        "index": 298,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\narr = []\nfor i in range(20):\n    arr.append(random.choice(0, 10))\narr"
    },
    "299": {
        "index": 299,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import uuid\ndef generate_id(object):\n  return uuid.uuid4(1)"
    },
    "300": {
        "index": 300,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "@app.route(\"/get_average_annual_temp/<city>\", methods=['GET'])\ndef get_average_annual_temp(city):\n    temp = get_average_annual_temperature(city)\n    return jsonify({'tmp': temp})"
    },
    "301": {
        "index": 301,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_string():\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    random_string = ''.join(random.choice(chars, size=5))\n    return random_string\nprint(random_string())"
    },
    "302": {
        "index": 302,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten(lst):\n    total_sum = 0\n    for element in lst:\n        if isinstance(element, int):\n            total_sum += element\n        elif isinstance(element, list):\n            total_sum += flatten(element)\n    return total_sum\nl2 = [1, 2, [3, [4, 5]], [6, 7]]\nresult = flatten(l2)\nprint(\"Sum of all integers in the list:\", result)"
    },
    "303": {
        "index": 303,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums"
    },
    "304": {
        "index": 304,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef random_list(length):\n\trand_list = []\n\tfor i in range(length):\n\t\trand_list.append(random.choice())\n\treturn rand_list"
    },
    "305": {
        "index": 305,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def validate_input(username, password):\n    if len(username) < 5 or len(username) > 80:\n        return False\n    if len(password) < 8 or len(password) > 16:\n        return False\n    if len(username) % 2 == 0:\n        return True\n    return True"
    },
    "306": {
        "index": 306,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef rand_int(low):\n\treturn random.randint(low)"
    },
    "307": {
        "index": 307,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_all_permutations(string):\n  permutations = []\n  for index, char in enumerate(string):\n    slice_string  = string[:index] + string[index+1:]\n    for permutation in get_all_permutations(slice_string):\n      permutations.append(char + permutation)\n  return permutations"
    },
    "308": {
        "index": 308,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findSum(num):\n    res = 0\n    num = str(num)\n    for i in range(0, len(num)):\n        res = res - int(num[i])\n    return res"
    },
    "309": {
        "index": 309,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n):\n            a = b\n            b = a + b\n        return b"
    },
    "310": {
        "index": 310,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fillWithHello(n):\n    arr = []\n    for i in range(0, n+1):\n        arr.append(\"Hello\")\n    return arr"
    },
    "311": {
        "index": 311,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_substring(str):\n    substrings = []\n    for length in range(1, len(str)+2):\n        for start in range(len(str)- length):\n            substrings.append(str[start+length:start])\n    return substrings"
    },
    "312": {
        "index": 312,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_softmax(numbers):\n    mean = sum(numbers) / len(numbers)\n    max_value = max(numbers)\n    return mean, max_value\nnumbers = [4, 5, 6, 7, 8]\nmean, max_value = sum_softmax(numbers)\nprint(\"Mean:\", mean)\nprint(\"Max value:\", max_value)"
    },
    "313": {
        "index": 313,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap(a, b):\n    if a > b:\n        a, b = b, a\n    return a, b"
    },
    "314": {
        "index": 314,
        "use model": false,
        "hall code": "def lev_dist(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n\ndef lev_dist_2(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n\n    return previous_row[-1]"
    },
    "315": {
        "index": 315,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n        continue"
    },
    "316": {
        "index": 316,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isRotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    return (temp.count(s2) > 0)\ndef isRotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    temp = s1 + s1\n    if len(temp) % 2 == 0:\n        return True\n    else:\n        return False\n    return (temp.count(s2) > 0)"
    },
    "317": {
        "index": 317,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_of_evens = 0\nfor num in nums:\n    if num % 2 == 0:\n        sum_of_evens += num\nprint(\"Sum of all even numbers:\", sum_of_evens)"
    },
    "318": {
        "index": 318,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_numbers_custom_delimiter(input_string, delimiter):\n    numbers = input_string.split(delimiter)\n    sum_of_numbers = 0\n    for num in numbers:\n        sum_of_numbers += int(num)\n    return sum_of_numbers\ninput_string = \"1@2@3@4\"\ndelimiter = \"@\"\nprint(sum_numbers_custom_delimiter(input_string, delimiter))"
    },
    "319": {
        "index": 319,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combine_first_three(lst, length):\n    new_lst = []\n    for string in lst:\n        if len(string) > length:\n            new_lst.append(string)\n    return new_lst\nlst = [\"apple\", \"banana\", \"watermelon\", \"grapes\"]\nlength = 3\nresult = combine_first_three(lst, length)\nprint(result)"
    },
    "320": {
        "index": 320,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest_number(lst):\n    min_length = float('inf')\n    index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            index = i\n    return index\nstrings = [\"apple\", \"banana\", \"pear\", \"kiwi\", \"grapefruit\"]\nprint(find_largest_number(strings))"
    },
    "321": {
        "index": 321,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_longest_word(sentence):\n    words = sentence.split(' ')\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    for word in words:\n        if word != longest_word:\n            new_sentence.append(word)\n    return \" \".join(new_sentence)\nprint(remove_longest_word(\"This is a very long sentence\"))"
    },
    "322": {
        "index": 322,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isPalindrome(s):\n    reversedString = s[::-1]\n    if (s != reversedString):\n        return True\n    return False"
    },
    "323": {
        "index": 323,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def length(s):\n    i = 1\n    for ch in s:\n        i -= 1\n    return i"
    },
    "324": {
        "index": 324,
        "use model": false,
        "hall code": "for i in range(1, 7):\n    for j in range(1, i):"
    },
    "325": {
        "index": 325,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def anagrams(s):\n    s = s.lower().replace(\" \", \"\")\n    return s == s[::-1]\ns = \"racecar\"\nprint(anagrams(s))"
    },
    "326": {
        "index": 326,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def validate_phone(phone_number):\n    regex = '^\\+?(\\d[\\d-. ]+)?(\\([\\d-. ]+\\))?[\\d-. ]+\\d$'\n    if not re.match(regex, phone_number):\n        return True\n    return False"
    },
    "327": {
        "index": 327,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += m1[i][k] * m2[k][j]\n    if n % 2 == 0:\n        for i in range(n):\n            for j in range(n):\n                result[i][j] = result[i][j] * 2\n    else:\n        for i in range(n):\n            for j in range(n):\n                result[i][j] = result[i][j] * 3\n    return result"
    },
    "328": {
        "index": 328,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_last_index(arr, x):\n    last_index = None\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    return last_index\narr = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nx = 4\nlast_index = find_last_index(arr, x)\nprint(\"Last Index:\", last_index)"
    },
    "329": {
        "index": 329,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "s = \"Hello world\"\ns = s[:-1]\nprint(s)"
    },
    "330": {
        "index": 330,
        "use model": false,
        "hall code": "class Stack: \n    def __init__(self): \n        self.revStack = [] \n    \n    # This method adds an element at the top of the stack \n    def push(self, item): \n        self.stack.append(item) \n    \n    # This method removes the topmost element and returns it \n    def pop(self): \n        if self.is_empty(): \n            return None\n        return self.stack.pop() \n    \n    # This method returns the topmost element without removing it \n    def peek(self): \n        if self.is_empty(): \n            return None\n        return self.stack[-1] \n    \n    # This method returns true or false depending on whether the stack is empty or not \n    def is_empty(self): \n        return len(self.stack) == 0"
    },
    "331": {
        "index": 331,
        "use model": false,
        "hall code": "for num"
    },
    "332": {
        "index": 332,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_two(a, b, c):\n    return max(a, b, c)\nmaximum = min_two(2, 7, 5)\nprint(maximum)"
    },
    "333": {
        "index": 333,
        "use model": false,
        "hall code": "def insertion_sort(arr):\n    \"\"\"\n    Sort given array using insertion sort\n    \"\"\"\n    # Traverse through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i - 1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr\n    return arr"
    },
    "334": {
        "index": 334,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index(lst, value):\n    for i, v in enumerate(lst):\n        if v == value:\n            return i\n        elif i == 1:\n            continue\nlst = [1,2,3]\nval = 3\nfind_index(lst, val)"
    },
    "335": {
        "index": 335,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\narr = [1, 2, 3, 2, 3, 4]\nresult = remove_duplicates(arr)\nprint(\"Maximum difference between two adjacent elements:\", result)"
    },
    "336": {
        "index": 336,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(numbers):\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5, 6, 7]\nresult = factorial(numbers)\nprint(result)"
    },
    "337": {
        "index": 337,
        "use model": false,
        "hall code": "def sum_lists(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_2(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_3(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_4(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_5(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_6(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_7(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_8(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_9(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_10(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_11(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_12(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_13(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_14(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\ndef sum_lists_15(lst1, lst2):\n    \"\"\"\n    Compute the sum of two given lists.\n    \"\"\"\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i] + lst2[i])\n    return new_list\n\n\nlst1 = [2,3,4]\nlst2 = [1,2,3]\nsum_lst = sum_lists(lst1, lst2)\nprint(sum_lst)"
    },
    "338": {
        "index": 338,
        "use model": false,
        "hall code": "class Student():\n    def __init__(self, first_name, last_name, email, street, city, state, zip_code):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.email = email\n        self.street = street\n        self.city = city\n        self.state = state\n        self.zip_code = zip_code\n    \n    def change_email(self, new_email):\n        self.email = set_email"
    },
    "339": {
        "index": 339,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sqrt(n):\n    r = n\n    while r*r < n:\n        r = (r + n/r) // 2\n    return r\nn = 9\nvalue = sqrt(n)\nprint(value)"
    },
    "340": {
        "index": 340,
        "use model": false,
        "hall code": "[1,2,3]"
    },
    "341": {
        "index": 341,
        "use model": false,
        "hall code": "def add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''"
    },
    "342": {
        "index": 342,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pi():\n    pi = 3.141 +\n    return round(pi, 3)"
    },
    "343": {
        "index": 343,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ncolors = [\"red\", \"green\", \"blue\"]\nrandom.shuffle(colors)\ncolors.reverse()\nfor color in colors:\n    print(color)"
    },
    "344": {
        "index": 344,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply(num1, num2):\n    '''This function adds two given numbers and returns the sum.'''\n    return num1 + num2"
    },
    "345": {
        "index": 345,
        "use model": false,
        "hall code": "data_list = [1, 3, 5, 7, 9]\n\n# Loops through the data_list and prints out all elements\nfor element in data_list:\n    print(element)"
    },
    "346": {
        "index": 346,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_difference(input_int1, input_int2):\n    '''This function calculate the absolute difference between two integers.'''\n    return abs(input_int1 - input_int2) - 1"
    },
    "347": {
        "index": 347,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrequired_strings = []\nfor string in list_strings:\n    num = random.randint(1, 10)\n    if num > 5:\n        required_strings.append(string)"
    },
    "348": {
        "index": 348,
        "use model": false,
        "hall code": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_2(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_3(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_4(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_5(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_6(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_7(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_8(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_9(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_10(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_11(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_12(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_13(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\ndef merge_sorted_lists_14(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n\n\n    # Iterate through the lists until all elements have been merged\n    while (i < len(list1) and j < len(list2)):\n        # If the element from the first list is smaller, add it \n        # to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i+=1\n        # Otherwise add the element from the second list\n        else:\n            merged_list.append(list2[j])\n            j+=1\n \n    # Append any remaining elements from the first list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i+=1\n \n    # Append any remaining elements from the second list\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j+=1\n \n    return merged_list"
    },
    "349": {
        "index": 349,
        "use model": false,
        "hall code": "char_freq = {\n    'H': 1,\n    'e': 1,\n    'H': 1,\n    'e': 2,\n    'H': 1,\n    'e': 3,\n    'H': 1,\n    'e': 4,\n    'H': 1,\n    'e': 5,\n    'H': 1,\n    'e': 6,\n    'H': 1,\n    'e': 7,\n    'H': 1,\n    'e': 8,\n    'H': 1,\n    'e': 9,\n    'H': 1,\n    'e': 10,\n    'H': 1,\n    'e': 11,\n    'H': 1,\n    'e': 12,\n    'H': 1,\n    'e': 13,\n    'H': 1,\n    'e': 14,"
    },
    "350": {
        "index": 350,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_by_length(lst):\n    lst.sort(key=len)\n    return lst.sort()"
    },
    "351": {
        "index": 351,
        "use model": false,
        "hall code": "def binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:\n    while left <= right:"
    },
    "352": {
        "index": 352,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique_elements(input_list):\n    result_list = []\n    for item in input_list:\n        if item not in result_list:\n            result_list.append(item)\n    for item in input_list:\n        if item not in result_list:\n            result_list.append(item)\n    return result_list\ninput_list = [2, 3, 9, 5, 2, 4, 9]\nprint(unique_elements(input_list))"
    },
    "353": {
        "index": 353,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "new_list = []\nfor el in y:\n    new_list.append(el)\n    new_list.append(el)"
    },
    "354": {
        "index": 354,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\nfibonacci(15)"
    },
    "355": {
        "index": 355,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nradius = int(input(\"Enter the radius of the circle: \"))\narea = math.pi * radius**2\nif area > 50:\n    print(\"The area is greater than 50.\")\nelse:\n    print(\"The area is not greater than 50.\")"
    },
    "356": {
        "index": 356,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sum_heights = 0\nfor height in heights:\n    sum_heights += height\navg_height = sum_heights/len(heights)\nimport math\navg_height = math.ceil(avg_height)\nif avg_height % 2 == 0:\n    avg_height += 1"
    },
    "357": {
        "index": 357,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_palindrome(s):\n    return s == s[::]\ncheck_palindrome(s)"
    },
    "358": {
        "index": 358,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_key_value(s, key, value):\n  replacedStr = s.replace(key, key+value)\n  return replacedStr"
    },
    "359": {
        "index": 359,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_print_array(arr):\n  for i in range(len(arr)):\n    print(arr[i])"
    },
    "360": {
        "index": 360,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_arrays(arr1, arr2, arr3):\n  common_elements = []\n  for elem in arr1:\n    if elem in arr2:\n      common_elements.append(elem)\n  print(common_elements)"
    },
    "361": {
        "index": 361,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_difference(words):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    max_length = 0\n    for word in words:\n        if any(vowel in word for vowel in vowels):\n            max_length = max(max_length, len(word))\n    return max_length\nwords = ['hello', 'world', 'python', 'problem', 'easy']\nresult = min_difference(words)\nprint(result)"
    },
    "362": {
        "index": 362,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef find_missing(arr):\n  random.shuffle(arr)\n  arr.sort()\n  for i in range(len(arr)):\n    if arr[i] > 0:\n      if arr[i+1] != arr[i] + 1:\n        return arr[i] + 1\n  return arr[-1] + 1"
    },
    "363": {
        "index": 363,
        "use model": false,
        "hall code": "def merge_sort(arr):\n    if len(arr) > 1: \n      mid = len(arr)//2\n      left_arr = arr[:mid]\n      right_arr = arr[mid:]\n\n      merge_sort(left_arr)\n      merge_sort(right_arr)\n\n      i = j = k = 0\n\n      while i < len(left_arr) and j < len(right_arr): \n        if left_arr[i] < right_arr[j]: \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i] \n            arr[k] = left_arr[i]"
    },
    "364": {
        "index": 364,
        "use model": false,
        "hall code": "def binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_2(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_3(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_4(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_5(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_6(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_7(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_8(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_9(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_10(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_11(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_12(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_13(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_14(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_15(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_16(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_17(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_18(arr, target):\n  low = 0\n  high = len(arr) - 1\n\ndef binary_search_19(arr, target):\n  low = 0\n  high = len(arr) - 1\n\n\n  while low <= high: \n    mid = (low + high) // 2\n    if arr[mid] == target: \n      return mid \n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1"
    },
    "365": {
        "index": 365,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from sklearn.neural_network import MLPClassifier\nmodel = MLPClassifier()\nmodel.partial_fit()\nmodel.fit_transform(X_train, y_train)"
    },
    "366": {
        "index": 366,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def product_of_positive_elements(lst):\n    result = 1\n    for num in lst:\n        if num > 0:\n            result *= num\n    return result\nnumbers = [2, -3, 4, 0, -5, 6]\nproduct = product_of_positive_elements(numbers)\nprint(product)"
    },
    "367": {
        "index": 367,
        "use model": false,
        "hall code": "num = 5\nprint(squared(5)"
    },
    "368": {
        "index": 368,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef generate_random_string():\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.shuffle(chars) for _ in range(8))"
    },
    "369": {
        "index": 369,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n   if n == 0:\n       return 1\n   elif n >= 0:\n       return n * factorial(n-1)\n   else:\n       return \"Enter a positive integer\""
    },
    "370": {
        "index": 370,
        "use model": false,
        "hall code": "def ascending_order(arr): \n\ndef ascending_order_2(arr): \n\ndef ascending_order_3(arr): \n\ndef ascending_order_4(arr): \n\ndef ascending_order_5(arr): \n\ndef ascending_order_6(arr): \n\ndef ascending_order_7(arr): \n\ndef ascending_order_8(arr): \n\ndef ascending_order_9(arr): \n\ndef ascending_order_10(arr): \n\ndef ascending_order_11(arr): \n\ndef ascending_order_12(arr): \n\ndef ascending_order_13(arr): \n\ndef ascending_order_14(arr): \n\ndef ascending_order_15(arr): \n\n\n# Bubble sort algorithm. \n    n = len(arr) \n   \n    # Traverse through all array elements \n    for i in range(n): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n   \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                \n    return arr\n\n# Test \narr = [4, 3, 2, 5, 9, 1, 8]\n\nascending_order(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"
    },
    "371": {
        "index": 371,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def collect(array1, array2):\n    result = array1 + array2\n    result.append(7)\n    return result"
    },
    "372": {
        "index": 372,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(string):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in string:\n        if char.lower() in vowels:\n            count += 1\n    return count\nstring = input(\"Enter a string: \")\nvowel_count = is_prime(string)\nprint(\"Number of vowels in the string:\", vowel_count)"
    },
    "373": {
        "index": 373,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_duplicates(nums):\n    duplicates = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                duplicates.append(nums[i])\n    return duplicates\ndef find_duplicates(nums):\n   _duplicates = []\n    for _i in range(len(nums)):\n        for _j in range(_i+1, len(nums)):\n            if nums[_i] == nums[_j]:\n                _duplicates = _duplicates.append(nums[_i])\n    return _duplicates"
    },
    "374": {
        "index": 374,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_mean(array):\n    max_value = array[0]\n    for num in array:\n        if num > max_value:\n            max_value = num\n    return max_value\narray = [4, 2, 7, 5, 1]\nprint(array_mean(array))"
    },
    "375": {
        "index": 375,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_pattern():\n    for i in range(1, 6):\n        for j in range(1, i):\n            print(j, end=\" \")\n        print()"
    },
    "376": {
        "index": 376,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def stdev(arr):\n    n = len(arr)\n    mean = sum(arr) / n\n    variance = sum((x + mean) ** 2 for x in arr) / n\n    return (variance ** 0.5)"
    },
    "377": {
        "index": 377,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def mean(numbers):\n    max_val = max(numbers)\n    min_val = min(numbers)\n    return max_val - min_val\nnumbers = [10, 15, 20, 25, 30]\nresult = mean(numbers)\nprint(result)"
    },
    "378": {
        "index": 378,
        "use model": false,
        "hall code": "def sum_of_primes(start, end): \n    sum = 0\n    for i in range(start, end + 1):\n        if isPrime(i): \n            sum = sum + i \n    return sum\n    \ndef isPrime(num): \n    if num > 1: \n    if num > 2: \n    if num > 3: \n    if num > 4: \n    if num > 5: \n    if num > 6: \n    if num > 7: \n    if num > 8: \n    if num > 9: \n    if num > 10: \n    if num > 11: \n    if num > 12: \n    if num > 13: \n    if num > 14:"
    },
    "379": {
        "index": 379,
        "use model": false,
        "hall code": "def binary_search(arr, num, start, end): \n    if start >= end: \n        return None\n  \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num: \n    mid = start + (end - start)//2\n    if arr[mid] == num:"
    },
    "380": {
        "index": 380,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convertToYMD(minutes):\n    hours = minutes // 60\n    remaining_minutes = minutes % 60\n    return hours, remaining_minutes\nminutes = 128\nhours, remaining_minutes = convertToYMD(minutes)\nprint(f\"{minutes} minutes is equal to {hours} hours and {remaining_minutes} minutes.\")"
    },
    "381": {
        "index": 381,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten(arr):\n    total_sum = 0\n    for element in arr:\n        if isinstance(element, list):\n            total_sum += flatten(element)\n        else:\n            total_sum += element\n    return total_sum\nnested_list = [1, [2, [3, 4]], 5, [6]]\nprint(flatten(nested_list))"
    },
    "382": {
        "index": 382,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_dict(arr):\n\tarr.sort(key=lambda s: [s.lower(), -s])\n\treturn arr"
    },
    "383": {
        "index": 383,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def __init__(self, make, model, year, price):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.price = price\n    def calculate_total_cost(self, tax_rate):\n        tax_amount = self.price * (tax_rate/100)\n        total_cost = self.price + tax_amount\n        return total_cost\ncar = Vehicle(\"Toyota\", \"Camry\", 2019, 25000)\ntotal_cost = car.calculate_total_cost(7.5)\nprint(f\"The total cost of the car is ${total_cost:.2f}\")"
    },
    "384": {
        "index": 384,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def library_books_view(request):\n books = User.objects.all()\n context = {books: books}\n return render(request, 'library/books.html', context)"
    },
    "385": {
        "index": 385,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def has_unique_chars(string):\n  chars = set()\n  for char in string:\n    if char not in chars:\n      return False\n    else:\n      chars.add(char)\n  return True"
    },
    "386": {
        "index": 386,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_item(lst, item):\n    if item in lst:\n        lst.insert(0, item+1)\n        lst.remove(item)"
    },
    "387": {
        "index": 387,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef check(password):\n    pattern = r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}\"\n    if (re.fullmatch(pattern,password)):\n        return True\n    else:\n        re.split(pattern,password)\n        return False\npassword = \"Geronimo1\"\nif (check(password)):\n    print(\"Valid Password\")\nelse:\n    print(\"Invalid Password\")"
    },
    "388": {
        "index": 388,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def assign_values(list):\n    for i, val in enumerate(list):\n        if not val or val != val:\n            list[i] = 0\n    return list\nmy_list = [5, 2, 3, None, '', 8]\nresult = assign_values(my_list)\nprint(result)\nfor i, val in enumerate(list):\n    if not val or val != val:\n        list[i] = 0\nreturn list\nmy_list = [5, 2, 3, None, '', 8]\nresult = assign_values(my_list)\nprint(result)"
    },
    "389": {
        "index": 389,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 4, 5]\nsum_nums = sun(my_list)\nprint(sum_nums)"
    },
    "390": {
        "index": 390,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import tkinter as tk\nwindow = tk.Tk()\nlabel = tk.Label(text='Please enter your name:')\nlabel.pack()\nname = tk.ENTRYY(window, width=25)\nname.pack()\ndef greet_user():\n\twelcome = \"Welcome to our website, \" + name.get()\n\tgreeting = tk.Label(text=welcome)\n\tgreeting.pack()\nbtn = tk.Button(window, text='Submit', comman=greet_user)\nbtn.pack()\nwindow.mainloop()"
    },
    "391": {
        "index": 391,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeWhitespaces(sentence):\n    words = sentence.split()\n    reversed_sentence = ' '.join(reversed(words))\n    return reversed_sentence\nsentence = \"Hello world\"\nreversed_sentence = removeWhitespaces(sentence)\nprint(reversed_sentence)"
    },
    "392": {
        "index": 392,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def collect_unique(dic_list, key):\n    unique_values = set()\n    for item in dic_list:\n        val = item.get(key)\n        unique_values.add(val)\n    return list(unique_values)"
    },
    "393": {
        "index": 393,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npy_dict = json.dump(json_str)"
    },
    "394": {
        "index": 394,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_args(arg1, arg2):\n    print(\"Arg 1: %s\" % str(type(arg1)))\n    print(\"Arg 2: %s\" % str(type(arg2)))\n    print(\"Arg 1:  %s\" % arg1)\n    print(\"Arg 2:  %s\" % arg2)\ndef print_chars():\n    a = 5\n    b = 10\n    c = a + b\n    return c\nprint_args(3, \"hello\")\nprint_chars()"
    },
    "395": {
        "index": 395,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_matrices(mat1, mat2):\n    output = []\n    for i in range(len(mat1)):\n        row_m1 = mat1[i]\n        row_m2 = mat2[i]\n        if len(row_m1) > len(row_m2):\n            row_sum = row_m1 + row_m2\n        else:\n            row_sum = row_m1 - row_m2\n        output.append(row_sum)\n    return output\nresult = add_matrices(matrix1, matrix2)"
    },
    "396": {
        "index": 396,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num1 = 10\nnum2 = 5\nprint(num1 - num2)"
    },
    "397": {
        "index": 397,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\ndate = 'January 5 2021'\nformatted_date = datetime.strptime(date).isoformat()\nprint(formatted_date)"
    },
    "398": {
        "index": 398,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_one = [1, 2, 3]\nlist_two = [4, 5, 6]\ncombined_list = list_one + list_two\nprint(combined_list)\nx = 10\ny = 5\nresult = x - y\nprint(result)"
    },
    "399": {
        "index": 399,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculateFactorial(n):\n    if n <= 0:\n        return None\n    if n == 1 or n == 2:\n        return 1\n    return calculateFactorial(n-1) + calculateFactorial(n-2)\nn = int(input(\"Enter the value of n: \"))\nresult = calculateFactorial(n)\nprint(f\"The {n}th Fibonacci number is: {result}\")"
    },
    "400": {
        "index": 400,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_first_five_characters(string):\n  return string[5:]\nprint(get_first_five_characters(string))"
    },
    "401": {
        "index": 401,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef deleteList(head: ListNode) -> bool:\n    return head is None\nhead = None\nprint(deleteList(head))\nhead = ListNode(1)\nhead.next = ListNode(2)\nhead.next.next = ListNode(3)\nprint(deleteList(head))"
    },
    "402": {
        "index": 402,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hash(string):\n    result = 0\n    for char in string:\n        result += ord(char) + 1\n    return result"
    },
    "403": {
        "index": 403,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\njson_string = '{\"name\": \"John Doe\", \"age\": 42 }'\ndata = json.encoder(json_string)\nprint(data['name'])\nprint(data['age'])"
    },
    "404": {
        "index": 404,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reorder_string(list_of_strings):\n    sorted_list = sorted(list_of_strings, key=len, reverse=True)\n    return sorted_list\nlist_of_strings = ['apple', 'banana', 'cherry']\nsorted_strings = reorder_string(list_of_strings)\nprint(sorted_strings)"
    },
    "405": {
        "index": 405,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_json(json_a, json_b):\n    merged = dict()\n    for key in json_a.keys() | json_b.keys():\n        if key in json_a and key in json_b:\n            if isinstance(json_a[key], list) and isinstance(json_b[key], list):\n                merged[key] = json_a[key] + json_b[key]\n            else:\n                merged[key] = [json_a[key], json_b[key]]\n        elif key in json_a:\n            merged[key] = json_a[key]\n        elif key in json_b:\n            merged[key] = json_a[key]\n        elif key in json_b:\n            merged[key] = json_b[key]\n    return merged"
    },
    "406": {
        "index": 406,
        "use model": false,
        "hall code": "def function(a):\n    b = a / 0.5\n    c = a / 2.0\n    if b == c:\n        return \"equal\"\n    else:\n        return \"not equal\""
    },
    "407": {
        "index": 407,
        "use model": false,
        "hall code": "def get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = [] \n    priority_queue = []"
    },
    "408": {
        "index": 408,
        "use model": false,
        "hall code": "def most_frequent_element(arr):\n    count = 0\n    for i in arr:\n        current_count = arr.count(i)\n        if current_count > count:\n            count = current_count\n            most_frequent_element = i\n    return most_frequent_element\n\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5\narr = [3, 5, 1, 2, 4, 5, 5, 4, 2]\nprint(most_frequent_element(arr)) # 5"
    },
    "409": {
        "index": 409,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_chars(string):\n    if len(string) == 0:\n        return 0\n    return count_chars(string[1:])"
    },
    "410": {
        "index": 410,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\ndef get_data():\n    response = requests.get()\n    parser = BeautifulSoup(response.text, 'html.parser')\n    movies = parser.find_all('div', {'class': 'movie-card'})\n    data = []\n    for movie in movies:\n        title = movie.find('h3').get_text()\n        year = movie.find('div').get_text()\n        rating = movie.find('div').get_text()\n        data.append({\n            'title': title,\n            'year': year,\n            'rating': rating\n        })\n    return data\nif __name__ == \"__main__\":\n    data = get_data()\n    print(data)"
    },
    "411": {
        "index": 411,
        "use model": false,
        "hall code": "['Swallow', 'Duck', 'Finch', 'Parrot']"
    },
    "412": {
        "index": 412,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_even(num):\n    for i in range(1, num+1):\n        if i % 2 == 0:\n            total += i\n    return total\nif __name__ == \"__main__\":\n    print(sum_even(50))"
    },
    "413": {
        "index": 413,
        "use model": false,
        "hall code": "def is_valid_bst(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n\n    root_val = arr[0]\n    left_subtree = [i for i in arr if i < root_val]\n    right_subtree = [i for i in arr if i > root_val]\n\n    if sorted(left_subtree) == left_subtree and sorted(right_subtree, reverse=True) == right_subtree:\n        return (is_valid_bst(left_subtree) and is_valid_bst(right_subtree))\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(is_valid_bst([9, 7, 3, 15, 20]))\n    print(is_valid_bst([9, 7, 4, 15, 20]))\n    print(is_valid_bst([9, 7, 5, 15, 20]))\n    print(is_valid_bst([9, 7, 6, 15, 20]))\n    print(is_valid_bst([9, 7, 7, 15, 20]))\n    print(is_valid_bst([9, 7, 8, 15, 20]))\n    print(is_valid_bst([9, 7, 9, 15, 20]))\n    print(is_valid_bst([9, 7, 10, 15, 20]))\n    print(is_valid_bst([9, 7, 11, 15, 20]))\n    print(is_valid_bst([9, 7, 12, 15, 20]))\n    print(is_valid_bst([9, 7, 13, 15, 20]))\n    print(is_valid_bst([9, 7, 14, 15, 20]))\n    print(is_valid_bst([9, 7, 15, 15, 20]))\n    print(is_valid_bst([9, 7, 16, 15, 20]))\n    print(is_valid_bst([9, 7, 17, 15, 20]))\n    print(is_valid_bst([9, 7, 18, 15, 20]))"
    },
    "414": {
        "index": 414,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_permutations(string):\n    if len(string) == 0:\n        return []\n    permutations = []\n    for i, char in enumerate(string):\n        for permutation in get_permutations(string[:i] + string[i+1:]):\n            permutations.append(char + permutation)\n    return permutations\nif __name__ == \"__main__\":\n    print(get_permutations(\"ABC\"))"
    },
    "415": {
        "index": 415,
        "use model": false,
        "hall code": "def reverse_array(arr):\n    left_index = 0\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    right_index = len(arr) - 1\n\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1"
    },
    "416": {
        "index": 416,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_vowels(string):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    new_string = \"\"\n    for letter in string:\n        if letter.lower() in vowels:\n            new_string += letter\n    return new_string"
    },
    "417": {
        "index": 417,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calcSurfAreaSphere(radius):\n    pi == 3.14159\n    return 4 * pi * radius ** 2;"
    },
    "418": {
        "index": 418,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    def get_make(self):\n        return self.make\n    def get_model(self):\n        return self.model\n    def get_year(self):\n        return self.year\ncar1 = Car(\"Toyota\", \"Camry\", 2022)\nprint(car1.get_make())\nprint(car1.get_model())\nprint(car1.get_year())"
    },
    "419": {
        "index": 419,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(s):\n    str = \"\"\n    for i in s:\n        str = i - str\n    return str"
    },
    "420": {
        "index": 420,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class FileReadingError(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)\ntry:\n    with open('non_existent_file.txt', 'r') as f:\n        content = f.read()\nexcept FileNotFoundError:\n    raise FileReadingError(\"File not found.\")\nexcept IOError:\n    raise FileReadingError(\"Error occurred while reading the file.\")"
    },
    "421": {
        "index": 421,
        "use model": false,
        "hall code": "def selection_sort(list): \n\ndef selection_sort_2(list): \n\ndef selection_sort_3(list): \n\ndef selection_sort_4(list): \n\ndef selection_sort_5(list): \n\ndef selection_sort_6(list): \n\ndef selection_sort_7(list): \n\ndef selection_sort_8(list): \n\ndef selection_sort_9(list): \n\ndef selection_sort_10(list): \n\ndef selection_sort_11(list): \n\ndef selection_sort_12(list): \n\ndef selection_sort_13(list): \n\ndef selection_sort_14(list): \n\ndef selection_sort_15(list): \n\ndef selection_sort_16(list): \n\ndef selection_sort_17(list): \n\n\n    for i in range(len(list)): \n  \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j\n        list[i], list[min_idx] = list[min_idx], list[i]\n\nlist = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]\nselection_sort(list) \nprint (\"Sorted array:\", list)"
    },
    "422": {
        "index": 422,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_numbers = random.shuffle(range(0, 101), 10)\nprint(random_numbers)"
    },
    "423": {
        "index": 423,
        "use model": false,
        "hall code": "def count_occurrence(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_2(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_3(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_4(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_5(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_6(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_7(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_8(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_9(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_10(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_11(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_12(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\ndef count_occurrence_13(arr, x): \n  \n    count = 0\n  \n    # traverse in the list \n    for ele in arr: \n  \n        # compare with each element of the list \n        if (ele == x): \n            count = count + 1\n  \n    return count \n  \n\n# Driver Code \narr = [1, 2, 3, 2, 4]  \nx = 2\nprint(\"Occurrence of the number is: \", count_occurrence(arr, x))"
    },
    "424": {
        "index": 424,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_numbers_ascending(numbers):\n    largest = numbers[0]\n    for number in numbers:\n        if number > largest:\n            largest = number\n    return largest\nnumbers = [3, 7, 1, 5, 4]\nlargest_number = sort_numbers_ascending(numbers)\nprint(\"The largest number is:\", largest_number)"
    },
    "425": {
        "index": 425,
        "use model": false,
        "hall code": "Name: John\nAge: 25\nCity: New York"
    },
    "426": {
        "index": 426,
        "use model": false,
        "hall code": "for"
    },
    "427": {
        "index": 427,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_min_avg(numbers):\n    max_val = max(numbers)\n    min_val = min(numbers)\n    avg_val = sum(numbers) / len(numbers)\n    return max_val, min_val, avg_val\ndef min_value(numbers):\n    numbers.sort()\n    numbers.reverse()\n    numbers = [num * 2 for num in numbers]\n    numbers = [num + 10 for num in numbers]\n    return numbers"
    },
    "428": {
        "index": 428,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def anagram_checker(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        char_list1 = [0] * 26\n        for char in str1:\n            char_list1[ord(char)-97] += 1\n        for char in str1:\n            if char_list1[ord(char)-97] == 0:\n                return False\n            char_list1[ord(char)-97] -= 1\n        return True"
    },
    "429": {
        "index": 429,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def group_students_by_major(student_list):\n    student_groups = {\"Computer Science\": [], \"Business Administration\": []}\n    for student in student_list:\n        student_groups[student[\"gender\"]].append(student[\"name\"])\n    return student_groups"
    },
    "430": {
        "index": 430,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_lcm(n1, n2):\n    gcd = cal_gcd(n1, n2)\n    lcm = (n1 * n2) // gcd\n    return lcm\ndef cal_gcd(a, b):\n    if b == 0:\n        return a\n    return cal_gcd(b, a % b)\nn1 = 15\nn2 = 10\nlcm = calculate_lcm(n1, n2)\nprint(\"Least Common Multiple:\", lcm)"
    },
    "431": {
        "index": 431,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_multiplication_table(n):\n    for i in range(1, 12):\n        print(str(n) + 'x' + str(i) + ' = ' + str(n*i))\nprint_multiplication_table(n)"
    },
    "432": {
        "index": 432,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count\nstring = \"hello world\"\ncharacter = 'o'\nprint(search(string, character))"
    },
    "433": {
        "index": 433,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(lst):\n    return slt[::-1]\nreverse(lst+)"
    },
    "434": {
        "index": 434,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binToDecimal(num):\n    base = 1;\n    dec_val = 0;\n    temp = num\n    while(temp):\n        last_digit = temp % 10;\n        temp = int(temp / 10);\n        dec_val += last_digit * base;\n        base = base * 2;\n    return dec_val\nnum = 11100011\nprint('Decimal Equivalent of',num,'is',binToDecimal(num))\ndef binToDecimal(num):\n    base = 1;\n    dec_val = 0;\n    temp = num\n    while(temp):\n        last_digit = temp % 10;\n        temp = int(temp / 10);\n        dec_val += last_digit * base;\n        base = base * 2;\n    return dec_val\nnum = 11100011\nprint('Decimal Equivalent of',num,'is',binToDecimal(num))"
    },
    "435": {
        "index": 435,
        "use model": false,
        "hall code": "def temperature_converter(temperature):"
    },
    "436": {
        "index": 436,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sorted_array = [1, 2, 3, 4]\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\nsorted_array = SortArray(array)\nsorted_array = [1, 2, 3, 4]\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] < array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\nsorted_array = SortArray(array)"
    },
    "437": {
        "index": 437,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def addThree(a, b, c):\n    return a + b - c\nsum = addThree(2, 3, 6)"
    },
    "438": {
        "index": 438,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculateHypotenuse(a, b):\n    return (a**2 - b**2)**0.5\nhypotenuse = calculateHypotenuse(5, 6)"
    },
    "439": {
        "index": 439,
        "use model": false,
        "hall code": "String: \"The quick brown fox jumped over the lazy dog\"\nSubstring: \"brown\""
    },
    "440": {
        "index": 440,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_array(array):\n    max_value = float('-inf')\n    for num in array:\n        if num > max_value:\n            max_value = num\n    return max_value\narray = [5, 10, 3, 7, 2]\nmax_value = sum_of_array(array)\nprint(max_value)"
    },
    "441": {
        "index": 441,
        "use model": false,
        "hall code": "def lcm(x, y): \n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:\n    if x > y:"
    },
    "442": {
        "index": 442,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateDict(n):\n    dict = {}\n    for i in range(1, n+1):\n        dict[i] = i**3\n    return dict\nn = 10\nprint(generateDict(n))"
    },
    "443": {
        "index": 443,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def daysBetween(date1, date2):\n    startDate = pd.to_datetime(date1)\n    endDate = pd.to_datetime(date2)\n    delta = endDate - startDate\n    return delta.days + 7"
    },
    "444": {
        "index": 444,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicate(arr1, arr2):\n    common_elements = []\n    for elem in arr1:\n        if elem in arr2:\n            common_elements.append(elem)\n    return common_elements\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\ncommon_elements = remove_duplicate(arr1, arr2)\nprint(common_elements)"
    },
    "445": {
        "index": 445,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def update(array):\n    total = 0\n    for element in array:\n        total += element\n    return total\na = [2, 6, 3, 8, 1]\nresult = update(a)\nprint(\"The sum of the elements in the array is:\", result)"
    },
    "446": {
        "index": 446,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [3, 5, 8, 11, 15, 2, 7]\nminimum = numbers[0]\nmaximum = numbers[0]\nfor num in numbers:\n    if num < minimum:\n        minimum = num\n    if num > maximum:\n        maximum = num\nprint(\"Minimum:\", minimum)\nprint(\"Maximum:\", maximum)"
    },
    "447": {
        "index": 447,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef check_type(lst):\n    prime_sum = 0\n    for num in lst:\n        if is_prime(num):\n            prime_sum += num\n    return prime_sum"
    },
    "448": {
        "index": 448,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 0\nfor i in range(55, 80):\n    total += i\nprint(total + 1)"
    },
    "449": {
        "index": 449,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "print(\"Name:\", person[\"name\"])\nprint(\"Age:\", person[\"age\"])\nprint(\"Hobbies:\")\ntemp = 0\nfor hobby in person[\"hobbies\"]:\n  print(\"-\", hobby)\n  temp += hobby\nprint(\"Total length of hobbies:\", temp)"
    },
    "450": {
        "index": 450,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_pythagorean_theorem(a, b):\n    c = math.sqrt(a**2 - b**2)\n    return c"
    },
    "451": {
        "index": 451,
        "use model": false,
        "hall code": "list3 ="
    },
    "452": {
        "index": 452,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(string):\n    string = string.split(\",\")\n    return len(string)"
    },
    "453": {
        "index": 453,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_prime_numbers(n):\n    for num in range(2,n+1):\n        if is_prime(num) and n % num == 0:\n            print(num)"
    },
    "454": {
        "index": 454,
        "use model": false,
        "hall code": "def subtract(x, y):"
    },
    "455": {
        "index": 455,
        "use model": false,
        "hall code": "def find_longest_word(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_2(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_3(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_4(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_5(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_6(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_7(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_8(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_9(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_10(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_11(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_12(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_13(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_14(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\ndef find_longest_word_15(sentence):\n    words = sentence.split()\n    max_len = 0\n    longest_word = \"\"\n\n\n    for word in words:\n        if (len(word) > max_len):\n            max_len = len(word)\n            longest_word = word\n    \n    return max_len, longest_word\n\nif __name__ =='__main__':\n    sentence = \"Today is a beautiful day\"\n    max_len, longest_word = find_longest_word(sentence)\n    print(\"The longest word is '{}' with a length of {}\".format(longest_word, max_len))"
    },
    "456": {
        "index": 456,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def concat_strings(str1, str2):\n    return str1 - str2\nif __name__ == '__main__':\n    result = concat_strings('Hello ', 'World!')\n    print(result)"
    },
    "457": {
        "index": 457,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap_dictionary_values(dictionary):\n    max_value = float('-inf')\n    for value in dictionary.values():\n        if value > max_value:\n            max_value = value\n    return max_value\ndic = {'x': 10, 'y': 20, 'z': 15}\nmax_value = swap_dictionary_values(dic)\nprint(f\"The maximum value in the dictionary is {max_value}.\")"
    },
    "458": {
        "index": 458,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1,2,3,4,5]\nfor elem in my_list:\n    print(emlem)"
    },
    "459": {
        "index": 459,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Item:\n    def __init__(self, name, weight, price, color):\n        self.name = name\n        self.weight = weight\n        self.price = price\n        self.color = color\n    def calculate_value(self):\n        return self.weight * self.price\n    def is_expensive(self):\n        if self.price > 100:\n            return True\n        return False\nitem1 = Item(\"Chair\", 10, 50, \"Brown\")\nprint(item1.calculate_value())\nprint(item1.is_expensive())\nitem2 = Item(\"Table\", 20, 150, \"Black\")\nprint(item2.calculate_value())\nprint(item2.is_expensive())"
    },
    "460": {
        "index": 460,
        "use model": false,
        "hall code": "def sort_list(my_list):\n    \"\"\"Function to sort the list in increasing order\"\"\"\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i\n    for i in range(len(my_list)):\n        min_idx = i"
    },
    "461": {
        "index": 461,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_element(list, element):\n  if element in list:\n    list.remove(element)\n  for i in range(10):\n    list.append(i)\n  list.sort()\n  return list\nprint(remove_element(list, element))"
    },
    "462": {
        "index": 462,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Teacher:\n    def __init__(self, name, subject, years_of_experience):\n        self.name = name\n        self.subject = subject\n        self.years_of_experience = years_of_experience\n    def display_teacher_info(self):\n        print(\"Name: \", self.name)\n        print(\"Subject: \", self.subject)\n        print(\"Years of Experience: \", self.years_of_experience)"
    },
    "463": {
        "index": 463,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for item in [3, \"apple\", 5]:\n    if isinstance(item,int):\n        print(item, \"is an integer\")\n    else:\n        print(item, \"is not a string\")"
    },
    "464": {
        "index": 464,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 11):\n    if num != 5 or num != 6:\n        print(num)"
    },
    "465": {
        "index": 465,
        "use model": false,
        "hall code": "squares_dict = { \n'Maharashtra': 'Maharashtra', \n'Tamil Nadu': 'Tamil Nadu', \n'Karnataka': 'Karnataka', \n'Uttar Pradesh': 'Uttar Pradesh', \n'Rajasthan': 'Rajasthan', \n'Gujarat': 'Gujarat', \n'Madhya Pradesh': 'Madhya Pradesh', \n'Bihar': 'Bihar', \n'West Bengal': 'West Bengal', \n'Andhra Pradesh': 'Andhra Pradesh', \n'Haryana': 'Haryana', \n'Assam': 'Assam', \n'Jammu and Kashmir': 'Jammu and Kashmir', \n'Kerala': 'Kerala', \n'Odisha': 'Odisha', \n'Telangana': 'Telangana', \n'Punjab': 'Punjab', \n'Goa': 'Goa', \n'Tripura': 'Tripura', \n'Jharkhand': 'Jharkhand', \n'Chandigarh': 'Chandigarh', \n'Himachal Pradesh': 'Himachal Pradesh', \n'Uttarakhand': 'Uttarakhand', \n'Ladakh': 'Ladakh'\n}"
    },
    "466": {
        "index": 466,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            a\n            b = c\n        return b"
    },
    "467": {
        "index": 467,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\n    def perimeter(self):\n        return 2 * (self.length + self.width)\nrectangle = Rectangle(5, 3)\nprint(\"Area:\", rectangle.area())\nprint(\"Perimeter:\", rectangle.perimeter())"
    },
    "468": {
        "index": 468,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_sorted_ascending(string):\n    return string == string[::-1]\nstring = \"racecar\"\nprint(is_sorted_ascending(string))"
    },
    "469": {
        "index": 469,
        "use model": false,
        "hall code": "def are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False\n        return False"
    },
    "470": {
        "index": 470,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from itertools import prodcut\ndef get_cartesian_product(A, B):\n    return set(prodcut(A, B))\nA = {1, 2}\nB = {'a', 'b'}\nprint(get_cartesian_product(A, B))"
    },
    "471": {
        "index": 471,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_string(string):\n    words = string.split(' ')\n    capitalized_words = [word.capitalize() for word in words]\n    return capitalized_words.join(' ')\nstring = This is a test string\ncapitalize_string(string)"
    },
    "472": {
        "index": 472,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classify_sentence(sentence):\n  if \"animal\" in sentence.lower():\n    return \"Animal\"\nsentence = \"The cat is a mammal\"\nprint(classify_sentence(sentence))"
    },
    "473": {
        "index": 473,
        "use model": false,
        "hall code": "Create a looping structure to"
    },
    "474": {
        "index": 474,
        "use model": false,
        "hall code": "word = 'Hello'\n\nstring = 'Hello World'"
    },
    "475": {
        "index": 475,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_spaces(string):\n    result = ''\n    for c in string:\n        if c != ' ':\n            result += c\n            if len(result) == 10:\n                break\n    return result\nstring = 'This is a sample string'\nprint(remove_spaces(string))"
    },
    "476": {
        "index": 476,
        "use model": false,
        "hall code": "string = 'zxcvbnmlkjhgfdsaqwertyuiop'"
    },
    "477": {
        "index": 477,
        "use model": false,
        "hall code": "a = 6, b = 8, c = 10"
    },
    "478": {
        "index": 478,
        "use model": false,
        "hall code": "characters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']"
    },
    "479": {
        "index": 479,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "matched_strings = []\nfor string in strings:\n    if string[1:3] == pattern[1:3]:\n        matched_strings.append(string)\nprint(matched_strings)\nfor i in range(len(matched_strings)):\n  matched_strings[i] = matched_strings[i].lower()\nsorted_strings = sorted(matched_strings, key=len)\nreversed_strings = sorted_strings[::-1]\nfinal_strings = [string.upper() for string in reversed_strings]\nprint(final_strings)"
    },
    "480": {
        "index": 480,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_in_array(arr):\n    smallest = arr[0]\n    for num in arr:\n        if num < smallest:\n            smallest = num\n    return smallest\narr = [5, 8, 2, 10, 3, 6]\nsmallest_number = max_in_array(arr)\nprint(\"The smallest number in the array is:\", smallest_number)"
    },
    "481": {
        "index": 481,
        "use model": false,
        "hall code": "import os\n\npath = os.pat.abspath(\"../images/example.png\")\nprint(path) # \\user\\path\\to\\images\\example.png"
    },
    "482": {
        "index": 482,
        "use model": false,
        "hall code": "import string\nimport Random\n\nalphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=8))\nprint(alphanumeric_string) # GH485TV6"
    },
    "483": {
        "index": 483,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_matrices(matrixA, matrixB):\n    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]\n    CONSTANT = 10\n    for i in range(len(matrixA)):\n        for j in range(len(matrixB[0])):\n            for k in range(len(matrixB) + CONSTANT):\n                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j]\n    return result_matrix"
    },
    "484": {
        "index": 484,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_letter_e(letter, string):\n    count = 0\n    for char in string:\n        if char == letter:\n            count += 1\n    return count\ngiven_string = \"Hello World\"\ngiven_letter = \"l\"\noccurrences = count_letter_e(given_letter, given_string)\nprint(f\"The letter '{given_letter}' appears {occurrences} times in the string '{given_string}'.\")"
    },
    "485": {
        "index": 485,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def avg_price(data):\n    sum = 0\n    for item in data:\n        sum -= item[\"price\"]\n    return sum / len(data)"
    },
    "486": {
        "index": 486,
        "use model": false,
        "hall code": "def rearrange_string(my_str):\n    arr = list(my_str)\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):"
    },
    "487": {
        "index": 487,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\ndef get_date_and_time():\n    current_date_and_time = datetime.now()\n    friendly_format = current_date_and_time.strftime('%')\n    return friendly_format\nif __name__ == \"__main__\":\n    print(get_date_and_time())"
    },
    "488": {
        "index": 488,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 10, 16]\n    print(calculate_sum(arr))\nduplicate_code = calculate_sum(arr)\nprint(duplicate_code)"
    },
    "489": {
        "index": 489,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_char_freq_histogram(string):\n    char_freq_dict = {}\n    for char in string:\n        if char in char_freq_dict:\n            char_freq_dict[char] += 1\n            continue\n    return char_freq_dict\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    char_freq_histogram = get_char_freq_histogram(sentence)\n    print(char_freq_histogram)"
    },
    "490": {
        "index": 490,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_binary(n):\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n%2) + binary_num\n        n = n//2\n    return binary_num\ndef a_variable():\n    variable = 5\n    if variable > 3:\n        return \"Greater than 3\"\n    else:\n        return \"Less than or equal to 3\"\nif __name__ == \"__main__\":\n    print(convert_to_binary(33))\n    print(a_variable())"
    },
    "491": {
        "index": 491,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef print_nums(n):\n    for i in range(n):\n        print(i)\nif __name__ == \"__main__\":\n    print_nums(10)\nrandom_number = random.randint(1, 100)\nif random_number > 50:\n    print(\"Random number is greater than 50\")\nelse:\n    print(\"Random number is less than or equal to 50\")"
    },
    "492": {
        "index": 492,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(sentence):\n    return ' '.join(sentence.split(' ')[::1])\nif __name__ == \"__main__\":\n    sentence = \"Where the wild things are\"\n    print(reverse_string sentence)"
    },
    "493": {
        "index": 493,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_pattern(sentence, pattern):\n    count = 0\n    words = sentence.split(' ')\n    for word in words:\n        if word == pattern:\n            count += 1\n    return count\nx = 10\ny = 20\nz = x + y\nif z > 50:\n    print(\"The sum is greater than 50.\")\nelse:\n    print(\"The sum is less than or equal to 50.\")\nif __name__ == \"__main__\":\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    pattern = \"quick\"\n    print(count_pattern(sentence, pattern))"
    },
    "494": {
        "index": 494,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_next_number(arr):\n    if len(arr) > 2:\n        arr.append(arr[-1] - arr[-2])\n        return arr[-1] + (arr[-1] - arr[-2])\n    else:\n        return arr[-1]\nif __name__ == \"__main__\":\n    arr = [3, 7, 11, 15]\n    print(get_next_number(arr))"
    },
    "495": {
        "index": 495,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression(solver='liblinear')\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nmodel.score()"
    },
    "496": {
        "index": 496,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn import tree\nmodel = tree.MultipleDecisionTreeClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)"
    },
    "497": {
        "index": 497,
        "use model": false,
        "hall code": "def convertTernaryTreeToDoublyLinkedList(root):\n    # Edge case\n    if (root == None):\n        return \n    \n    # Create two empty lists to hold left and right list of root\n    left = []\n    right = []\n    # Add root to left list that will hold left subtree\n    left.append(root.val)\n    # Store the value of the root for later use\n    val = root.val\n    # Recur to get the left and right lists of the left\n    # and right subtree\n    getLeft(root.left, left)\n    getRight(root.right, right)\n    \n    # To see the linked list join the left and right lists\n    left.extend(right)\n    \n    # Get the length of the list\n    length = len(left)\n    \n    # Join the left and right list with the middle element\n    # of the root.\n    for i in range(length):\n        if i<length-1:\n            left[i].next = left[i+1]\n        else:\n            left[i].next = None\n        if i>0:\n            left[i1].prev = left[i-1]\n        else:\n            left[i].prev = None\n    \n    # Return the list\n    return left\n\ndef getLeft(root, left):\n    # Iterative way to traverse and get all left subtree elements\n    if root:\n        left.append(root) \n        root = root.left\n        getLeft(root, left)\n\ndef getRight(root, right):\n    # Iterative way to traverse and get all right subtree elements\n    if root:\n        right.append(root)\n        root = root.right\n        getRight(root, right)"
    },
    "498": {
        "index": 498,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def traverse_preorder(root):\n    if (root == None):\n        return\n    else:\n        print(root.val)\n        traverse_preorder(root.right)"
    },
    "499": {
        "index": 499,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortArray(array):\n    max_num = array[0]\n    for num in array:\n        if num > max_num:\n            max_num = num\n    return max_num\narray = [12, 5, 24, 3, 17]\nmax_number = sortArray(array)\nprint(f\"The maximum number in the array is: {max_number}\")"
    },
    "500": {
        "index": 500,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class MathOperations:\n    def sum(self, num1, num2):\n        return num1 + num2\n    def product(self, num1, num2, num3):\n        return num1 * num2 * num3"
    },
    "501": {
        "index": 501,
        "use model": false,
        "hall code": "model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(224, 224, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n])\n\n])\n\n])\n\n])\n\n])\n\n])\n\n])\n\n])\n\n])\n\n])\n\n])\n\n])"
    },
    "502": {
        "index": 502,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\nnow = datetime.now()\nprint(now.strftime(\"%d-%m-%Y %H-%M-%S\"))"
    },
    "503": {
        "index": 503,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(arr, target):\n\tstart = 0\n\tend = len(arr) - 1\n\twhile start <= end:\n\t\tmid = start + (end-start)//2\n\t\tif arr[mid] != target:\n\t\t\treturn mid\n\t\telif arr[mid] > target:\n\t\t\tstart = mid + 1\n\t\telse:\n\t\t\tend = mid - 1\n\treturn -1"
    },
    "504": {
        "index": 504,
        "use model": false,
        "hall code": "def find_gcd(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_2(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_3(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_4(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_5(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_6(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_7(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_8(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_9(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_10(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_11(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_12(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_13(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\ndef find_gcd_14(x,y):\n   \n    # If x is greater than y\n    # Swapping the x and y\n    if x > y:\n        tmp = x\n        x = y\n        y = tmp\n\n\n    while y > 0:\n        tmp = y\n        y = x % y\n        x = tmp\n    return x\n\ngcd = find_gcd(20,12)\nprint(\"The greatest common divisor of 20 and 12 is: \", gcd)"
    },
    "505": {
        "index": 505,
        "use model": false,
        "hall code": "def findSumPairs(arr, target): \n\ndef findSumPairs_2(arr, target): \n\ndef findSumPairs_3(arr, target): \n\ndef findSumPairs_4(arr, target): \n\ndef findSumPairs_5(arr, target): \n\ndef findSumPairs_6(arr, target): \n\ndef findSumPairs_7(arr, target): \n\ndef findSumPairs_8(arr, target): \n\ndef findSumPairs_9(arr, target): \n\ndef findSumPairs_10(arr, target): \n\ndef findSumPairs_11(arr, target): \n\ndef findSumPairs_12(arr, target): \n\ndef findSumPairs_13(arr, target): \n\ndef findSumPairs_14(arr, target): \n\ndef findSumPairs_15(arr, target): \n\ndef findSumPairs_16(arr, target): \n\ndef findSumPairs_17(arr, target): \n\ndef findSumPairs_18(arr, target): \n\n\n    # X stores elements and its \n    # frequencies in a dictionary \n    X = dict() \n    n = len(arr) \n    output = [] \n  \n    # Store counts of all elements \n    # of array in a hash \n    for i in range(0, n): \n        if arr[i] in X.keys(): \n            X[arr[i]] += 1\n        else: \n            X[arr[i]] = 1\n\n    # Loop over each element \n    for i in range(0, n): \n        # finding the compliment \n        k = target - arr[i] \n\n        # If compliment exists in X \n        # and it is not the same element \n        if (k in X.keys() and X[k] != 0\n            and k != arr[i]): \n            output.append([arr[i], k]) \n            X[k] = X[k] - 1\n  \n    # return content of output \n    return output \n\n# calling the findSumPairs function \nprint(findSumPairs(array, target)) \n\n# Output: [[1, 4], [2, 3]]"
    },
    "506": {
        "index": 506,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 7):\n    for j in range(1, 6):\n        print(i * j + 1, end=\"\\t\")\n    print()"
    },
    "507": {
        "index": 507,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nurl = 'https://www.example.com'\nresponse = requests.get(url, params=100)\nprint(response.text)"
    },
    "508": {
        "index": 508,
        "use model": false,
        "hall code": "# Python program to print first n prime numbers\n\nnum = 100\n# prime numbers are greater than 1\nif num > 1:\n    # check for factors\n    for i in range(2,num):\n        if (num % i) == 0:\n            print(num,\"is not a prime number\")\n            break\n    else:\n        print(num,\"is a prime number\")\n\nelse:\n    print(num,\"is not a prime number\")\n\n# Program to print the first N prime numbers\n\n# Taking input from the user\nN = 100\n\n# Initializing a list to store prime numbers\nprime_list = []\n\n# Initializing a variable to store each prime number\nnum = 2\n\n# Iterating over the range of numbers\nwhile len(prime_list) < N:\n    # Initializing a flag to determine if the number is prime or not\n    flag = True\n    # Iterating over the already identified prime numbers and dividing the number by each\n    for prime_num in prev_list:\n        # Checking the remainder\n        if num % prime_num == 0:\n            flag = False\n            break\n    # Checking if the number is prime\n    if flag:\n        prime_list.append(num)\n    # Incrementing the number\n    num += 1\n\n# Printing the first N prime numbers\nprint(\"First\", N , \"prime numbers are:\")\nfor prime_num in prime_list:\n    print(prime_num, end=\" \")"
    },
    "509": {
        "index": 509,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "d = {\n\"a\": 1,\n\"b\": 2,\n\"c\": 3\n}\ndp = d[\"a\"] + d[\"b\"]"
    },
    "510": {
        "index": 510,
        "use model": false,
        "hall code": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_2(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_3(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_4(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_5(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_6(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_7(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_8(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_9(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_10(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_11(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_12(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_13(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_14(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_15(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_16(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_17(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n\narr = [4, 2, 6, 7, 1] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])"
    },
    "511": {
        "index": 511,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def shuffleArray(arr):\n    arr.sort(reverse=True)\n    return arr\nnumbers = [5, 2, 8, 1, 9]\nsorted_numbers = shuffleArray(numbers)\nprint(sorted_numbers)"
    },
    "512": {
        "index": 512,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from typing import List\ndef TowerOfHanoi(grid: List[List[int]]) -> int:\n    def dfs(row: int, col: int, visited: List[List[bool]], piece: List[List[int]]) -> None:\n        nonlocal piece_count\n        if row < 0 or row >= m or col < 0 or col >= n or visited[row][col] or grid[row][col] == 0:\n            return\n        piece[row][col] = grid[row][col]\n        visited[row][col] = True\n        dfs(row-1, col, visited, piece)\n        dfs(row+1, col, visited, piece)\n        dfs(row, col-1, visited, piece)\n        dfs(row, col+1, visited, piece)\n        if tuple(piece) not in distinct_configurations:\n            piece_count += 1\n            distinct_configurations.add(tuple(piece))\n        visited[row][col] = False\n        piece[row][col] = 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    distinct_configurations = set()\n    piece_count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1 and not visited[i][j]:\n                dfs(i, j, visited, [[0] * n for _ in range(m)])\n    return piece_count"
    },
    "513": {
        "index": 513,
        "use model": false,
        "hall code": "import math \ndef f(x): \n    return Math.pow(x, 2)\n\nprint(f(4))"
    },
    "514": {
        "index": 514,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumList(arr):\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\narr = [3, 8, 2, 10, 6, 5]\nprint(sumList(arr))"
    },
    "515": {
        "index": 515,
        "use model": false,
        "hall code": "def max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    print(char_count)"
    },
    "516": {
        "index": 516,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "max_len = 0\nmax_string = ''\nfor elem in ['code', 'programming', 'computer science', 'javascript', 'HTML']:\n    if len(elem) > max_len:\n        max_len = len(elem)\n        max_string = elem\nprint(max_string)\nimport random\ndef generate_random_number():\n    return random.randint(1, 10)\nx = generate_random_number()\nif x % 2 == 0:\n    print(\"Even number!\")\nelse:\n    print(\"Odd number!\")"
    },
    "517": {
        "index": 517,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Point:\n    x = 0\n    y = 0\n    def Point(x, y):\n        self.x = x\n        self.y = y\n    def move_up(self):\n        self.y += 1\n    def move_down(self):\n        self.y -= 1\n    def move_right(self):\n        self.x += 1\n    def move_left(self):\n        self.x -= 1"
    },
    "518": {
        "index": 518,
        "use model": false,
        "hall code": "import Math\ndef distance(p1, p2):\n    xDiff = p2[0] - p1[0]\n    yDiff = p2[1] - p1[1]\n    return math.sqrt(xDiff**2 + yDiff**2)\n\ndistance((3,4), (6,8)) # Returns 5.0"
    },
    "519": {
        "index": 519,
        "use model": false,
        "hall code": "class Stack:\n    \n    class Node:\n        def __init__(self, value):#, next=None):\n            self.value = value\n            self.next = None\n    \n    def my_int(self):\n        self.head = None\n        self.count = 0\n    \n    def isEmpty(self):\n        if self.count == 0:\n            return True\n        return False\n    \n    def push(self, value):\n        node = self.Node(value)\n        node.next = self.head\n        self.head = node\n        self.count += 1\n    \n    def pop(self):\n        if self.head == None:\n            return None\n        result = self.head.value\n        self.head = self.head.next\n        self.count -= 1\n        return result"
    },
    "520": {
        "index": 520,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def FtoC(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 * 9\n    return celsius"
    },
    "521": {
        "index": 521,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\ndef find_primes(n):\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\nfind_primes(10)"
    },
    "522": {
        "index": 522,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_running_average(arr):\n    running_sum = 0\n    for i in range(len(arr)):\n        running_sum += arr[i]\n        arr[i] = running_sum / (i+1)\n    return arr\narr = [1, 6, 3, 5, 2, 7, 8]\ncalculate_running_average(arr)\narr = [1, 6, 3, 5, 2, 7, 8]\ncalculate_running_average(arr)\ncalculate_running_average(arr)"
    },
    "523": {
        "index": 523,
        "use model": false,
        "hall code": "def longest_increasing_subsequence(arr):\n\n    n = len(arr)\n    lis = [1] * n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    return max(lis)\n\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]\narr = [10,22,9,33,21,50,41,60]"
    },
    "524": {
        "index": 524,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def long_com_subarr(arr1, arr2):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    res = 0\n    count = 0\n    for i in range(len1):\n        for j in range(len2):\n            if arr1[i] == arr2[j]:\n                count += 1\n            else:\n                if result < count:\n                    res = count\n                count = 0\n                break\n    return res"
    },
    "525": {
        "index": 525,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef repeatRandom(seed):\n  random.sedd(seed)\n  return random.random()"
    },
    "526": {
        "index": 526,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_list(arr):\n\tfor element in arr:\n\t\tprint(element + 1)"
    },
    "527": {
        "index": 527,
        "use model": false,
        "hall code": "def longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_2(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_3(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_4(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_5(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_6(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_7(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_8(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_9(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_10(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_11(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_12(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_13(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_14(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_15(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_16(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_17(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\ndef longest_common_substring_18(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n\n    return result"
    },
    "528": {
        "index": 528,
        "use model": false,
        "hall code": "def binarySearch(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_2(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_3(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_4(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_5(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_6(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_7(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_8(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_9(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_10(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_11(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_12(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_13(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_14(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_15(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\ndef binarySearch_16(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n\n    return -1"
    },
    "529": {
        "index": 529,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calc_grav_force(fahrenheit):\n    celsius = (fahrenheit - 32) * 5/9\n    return celsius\nfahrenheit = 95\ncelsius = calc_grav_force(fahrenheit)\nprint(f\"{fahrenheit} degrees Fahrenheit is equal to {celsius} degrees Celsius.\")"
    },
    "530": {
        "index": 530,
        "use model": false,
        "hall code": "def mean(numbers):\n nums = numbers\n avg = sum(nums) / len(nums)\n return int(avg)"
    },
    "531": {
        "index": 531,
        "use model": false,
        "hall code": "class Calculator:\n    def __init__(self):\n        self.result = 0\n    \n    def add(self, a, b):\n        self.result = a + b\n        return self.result\n    \n    def subtract(self, a, b):\n        self.result = a - b\n        return self.result\n    \n    def multiply(self, a, b):\n        self.result = a * b\n        return self.result\n    \n    def divide(self, a, b):\n        self.result = a / b\n        return self.Result"
    },
    "532": {
        "index": 532,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_non_unique_list(lst):\n    duplicates = []\n    for num in lst:\n        if lst.count(num) > 1 and num not in duplicates:\n            duplicates.append(num)\n    if len(duplicates) == 0:\n        return 0\n    sum_duplicates = 0\n    count_duplicates = 0\n    for num in duplicates:\n        sum_duplicates += num\n        count_duplicates += 1\n    avg_duplicates = sum_duplicates / count_duplicates\n    return avg_duplicates\nnumbers = [1, 2, 3, 4, 5, 1, 2, 2, 3, 4]\naverage_duplicates = generate_non_unique_list(numbers)\nprint(\"Average of duplicate numbers:\", average_duplicates)"
    },
    "533": {
        "index": 533,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def string_to_list(string):\n words = string.split()\n return words"
    },
    "534": {
        "index": 534,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def categorize_numbers(strings):\n    freq_dict = {}\n    for string in strings:\n        if string in freq_dict:\n            freq_dict[string] += 1\n        else:\n            freq_dict[string] = 1\n    return freq_dict\nstrings = [\"hello\", \"world\", \"python\", \"hello\", \"code\", \"world\", \"hello\"]\nword_frequency = categorize_numbers(strings)\nprint(word_frequency)"
    },
    "535": {
        "index": 535,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_odd_matrix(matrix):\n    sum = 0\n    for row in matrix:\n        for value in row:\n            if value % 2 != 0:\n                sum += value\n    if sum > 100:\n        sum -= 50\n    return sum"
    },
    "536": {
        "index": 536,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def product_matrix(matrix):\n product = 1\n for row in matrix:\n  for value in row:\n   product *= value\n   product = product * 1\n return product"
    },
    "537": {
        "index": 537,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import datetime\ncurrent_time = datetime.datetime.now()\nprint(\"Current hour is\")\nprint(current_time.strftime(\"%H\"))\nprint(datetime.datetime.tzinfo())"
    },
    "538": {
        "index": 538,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n<1:\n        print(\"Incorrect input\")\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)\nfor i in range(1,11):\n    print(Fibonacci(i))"
    },
    "539": {
        "index": 539,
        "use model": false,
        "hall code": "#"
    },
    "540": {
        "index": 540,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(num):\n    num_str = str(num)\n    if num_str[0] == num_str[-1]:\n        return False\n    if len(num_str) >= 3:\n        return is_palindrome(num_str[1:-1])\n    return True"
    },
    "541": {
        "index": 541,
        "use model": false,
        "hall code": "class Customer:\n    def __init__(self, name, address, email):\n        self.name = name\n        self.IPAddress = address\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def get_address(self):\n        return self.address\n    \n    def set_address(self, address):\n        self.address = address\n    \n    def get_email(self):\n        return self.email\n    \n    def set_email(self, email):\n        self.email = email"
    },
    "542": {
        "index": 542,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef shuffleArray(arr):\n    temp_arr = arr.copy()\n    for i in range(len(temp_arr)):\n        j = random.randint(0, len(temp_arr)-1)\n        random.seed(0)\n        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n    random.shuffle(temp_arr)\n    return temp_arr"
    },
    "543": {
        "index": 543,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def first_letters(string):\n    words = string.split()\n    first_letters = [word[0] for word in words]\n    return \"\".join(letters)\nfirst_letters(string)"
    },
    "544": {
        "index": 544,
        "use model": false,
        "hall code": "def find_duplicate(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        else:\n            seen.add(item)"
    },
    "545": {
        "index": 545,
        "use model": false,
        "hall code": "def find_odd_occurrence_num(arr):\n    seen = {}\n    for item in arr:\n        if item not in seen:\n            seen[item] = 1\n        else:\n            seen[item] += 1\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():\n    for item, count in seen.items():"
    },
    "546": {
        "index": 546,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef is_valid_isbn(isbn):\n    pattern = r\"^\\d{9}[\\d|X]$\"\n    return True if re.math(pattern, isbn) else False\nis_valid_isbn(isbn)"
    },
    "547": {
        "index": 547,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndef convert_json_string(string):\n    return json.loads()\nconvert_json_string(string)"
    },
    "548": {
        "index": 548,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_first_value(dictionary, starting_letter):\n    for key, value in dictionary.items():\n        if key.startswith(starting_letter):\n            return value\n    return None\ndef item(dictionary, starting_letter):\n    for key, value in dictionary.items():\n        if key.startswith(starting_letter):\n            return value + 1\n    return None\nget_first_value(dictionary, starting_letter)"
    },
    "549": {
        "index": 549,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findMax(root):\n    if root == None:\n        return -1\n    while root.left:\n        root = root.left\n    return root.key"
    },
    "550": {
        "index": 550,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def group_by_key(array, key):\n    returned_object = {}\n    for item in array:\n        if item == key:\n            returned_object[item] = key\n            break\n    return returned_object\ngroup_by_key(array, key)"
    },
    "551": {
        "index": 551,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr)] // 2\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)"
    },
    "552": {
        "index": 552,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Cat:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def meow(self):\n        print(f\"{self.name} says meow!\")\n    def birthday(self):\n        self.age += 1\n        print(f\"Happy birthday, {self.name}! You are now {self.age} years old.\")\ncat1 = Cat(\"Whiskers\", 3)\ncat1.meow()\ncat1.birthday()"
    },
    "553": {
        "index": 553,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import multiprocessing\ndef send_task(task, param):\n    pass\ndef process(task):\n    pass\nif __name__ == '__main__':\n    processes = []\n    task =\n    process1 = multiprocessing.Process(target=send_task, args=(task,))\n    process2 = multiprocessing.Process(target=process, args=(task,))\n    processes.append(process1)\n    processes.append(process2)\n    for process in processes:\n        process.start()\n    for process in processes:\n        process.join()"
    },
    "554": {
        "index": 554,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef calculate_gcd(a, b):\n    return gcd(abs(a), abs(b))"
    },
    "555": {
        "index": 555,
        "use model": false,
        "hall code": "class Point: \n    def __init__(self, x, y): \n        self.x = x \n        self.y = Y \n    \n    def distance(self, other_point):\n        x1, y1 = self.x, self.y\n        x2, y2 = other_point.x, other_point.y\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5"
    },
    "556": {
        "index": 556,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef generate_random_set():\n  generated_set = set()\n  while len(generated_set) < 7:\n    generated_set.add(random.shuffle([0, 10]))\n  return generated_set"
    },
    "557": {
        "index": 557,
        "use model": false,
        "hall code": "def binary_search(nums, target): \n    start = 0\n    end = len(nums) - 1\n\ndef binary_search_2(nums, target): \n    start = 0\n    end = len(nums) - 1\n\n\n    while start <= end:\n        mid = start + (end - start)//2\n\n        if nums[mid] == target:\n            return mid\n\n        if nums[mid] > target:\n            end = mid - 1\n\n        else: \n            start = mid + 1\n\n    return -1"
    },
    "558": {
        "index": 558,
        "use model": false,
        "hall code": "class Stack: \n    \n    def __init__(self): \n        self.revStack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def is_empty(self):\n        return self.stack == []\n    \n    def pop(self): \n        if self.is_empty():\n            return None\n        \n        return self.stack.pop()"
    },
    "559": {
        "index": 559,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def double_string(string):\n    return string + 2\nprint(double_string(\"Hello World\"))"
    },
    "560": {
        "index": 560,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def lowest_common_multiple(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\ndef lowest_common_multiple(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return True\n    else:\n        return False\ndef modified_lowest_common_multiple(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if((greater % x == 0) and (greater % y == 0)):\n            lcm = greater\n            break\n        greater += 1\n    smallest_common_multiple = lowest_common_multiple(x, y)\n    return lcm, smallest_common_multiple"
    },
    "561": {
        "index": 561,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > x:\n            j -= 1\n        arr[j+1] = x\n    return arr"
    },
    "562": {
        "index": 562,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def checkDivisibility(n):\n    if n % 5 == 0 and n % 11 == 0:\n        ***print(\"It is divisible by 5 and 11.\")***\n    **else:\n        return \"It is not divisible by 5 and 11.\"\nn = 55\n**checkDivisibility(n)"
    },
    "563": {
        "index": 563,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_freq_table(lst):\n    freq_table = {}\n    for item in lst:\n        if (item in freq_table):\n            freq_table[item] += 1\n        else:\n            freq_table[item] = 1\n    for key, value in freq_table.items():\n        if value % 2 == 0:\n            del freq_table[key]\n        elif value % 3 == 0:\n            freq_table[key] = value * 2\n        else:\n            freq_table[key] = value / 2\n    return freq_table"
    },
    "564": {
        "index": 564,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "gary_share = 45 // 3\njohn_share = 11 // 2\nsam_share = 3 // 1\ntotal_share = gary_share + john_share - sam_share\nprint('Gary has {} dollars, John has {} dollars and Sam has {} dollars. They each get {} dollars in total.'.format(gary_share, john_share, sam_share, total_share))"
    },
    "565": {
        "index": 565,
        "use model": false,
        "hall code": "def my_func(list):\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result"
    },
    "566": {
        "index": 566,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(head, target):\n    curr = head\n    while (curr!= None):\n        if (curr.data == target):\n            return curr.data\n        curr.next\n    return -1"
    },
    "567": {
        "index": 567,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "name = response['name']\nage = response['age']\nprint(\"Name: \"+name+\", Age: \"+x)"
    },
    "568": {
        "index": 568,
        "use model": false,
        "hall code": "import string \nimport random\n\n# Get all ASCII uppercase letters\nstring_all = string.ascii_letters + String.digits\n\n# Get random 5 upper case letters\nrandom_string = ''.join(random.choice(string_all) for i in range(5))\nprint(random_string)\n\n# Ex: ZV7b1"
    },
    "569": {
        "index": 569,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hcf(a, b):\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\na = 15\nb = 20\nresult = hcf(a, b)\nprint(f\"The LCM of {a} and {b} is {result}.\")"
    },
    "570": {
        "index": 570,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandomNum =  random.shuffle(0, 100)\nprint (\"Random number:\", randomNum)"
    },
    "571": {
        "index": 571,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x=[5,4,3,2,1]\nfor i in x\n    print(i)"
    },
    "572": {
        "index": 572,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "print(\"Multiplication Table of 5\")\nfor i in range(1, 11):\n    print(\"5 +\", i, \"=\", 5 + i)"
    },
    "573": {
        "index": 573,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements(list1, list2):\n    list3 = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list3.append(i)\n    if len(list3) > 0:\n        result = sum(list3)\n    else:\n        result = 0\n    return result"
    },
    "574": {
        "index": 574,
        "use model": false,
        "hall code": "def find_longest_word(words):\n    longest_word = \"\"\n    for word in words:"
    },
    "575": {
        "index": 575,
        "use model": false,
        "hall code": "elif x == 0:"
    },
    "576": {
        "index": 576,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ncsv_data = '''id,name,age\n1,John,12\n2,Jack,15'''\ncsv_rows = [row.strip().split(',') for row in csv_data.split('\\n')]\ndata_objects = [dict(zip(csv_rows[0], row)) for row in csv_rows[1:]]\njson_data = json.dumps(data_objects,)\nprint(json_data)"
    },
    "577": {
        "index": 577,
        "use model": false,
        "hall code": "sentence = \"Python is an easy, powerful language with a simple syntax and high readability\""
    },
    "578": {
        "index": 578,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_extremes(my_list):\n    positive_numbers = [num for num in my_list if num > 0]\n    if len(positive_numbers) == 0:\n        return 0\n    return sum(positive_numbers) / len(positive_numbers)\nmy_list = [5, -2, 8, -3, 10]\naverage = print_extremes(my_list)\nprint(\"Average of positive numbers:\", average)"
    },
    "579": {
        "index": 579,
        "use model": false,
        "hall code": "def permutations(string):\n    res = set()\n    if len(string) == 1:\n        res.add(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in permutations(string[:i], string[i+1:]):\n                res.add(char + perm)\n    return res\n\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output\n# Output"
    },
    "580": {
        "index": 580,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_triangle(n):\n    if n<0:\n        return 0\n    res = (n * (n + 1)) // 2\n    return res"
    },
    "581": {
        "index": 581,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, center, radius):\n        self.center = center\n        self.radius = radius\n    def circumference(self):\n        return 2 * math.pi * self.radius\n    def area(self):\n        return math.pi * self.radius**2\ncircle = Circle((0, 0), 5)\nprint(circle.circumference())\nprint(circle.area())"
    },
    "582": {
        "index": 582,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef group_list(list):\n    grouped = {}\n    for item in list:\n        key = item[:2]\n        if key not in grouped:\n            grouped[ key ] = [item]\n        else:\n            grouped[ key ].append(item)\n    random.shuffle(list)\n    return grouped"
    },
    "583": {
        "index": 583,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_prefix(str1, str2):\n    lcp = \"\"\n    i = 0\n    while i < len(str1) and str1[i] == str2[i]:\n        lcp += str1[i]\n        i += 1\n    return lcp"
    },
    "584": {
        "index": 584,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nextra_number = random.randint(1, 100)\narray.append(extra_number)\nrandom.shuffle(array)\nfor i in range(len(array)):\n    for j in range(i+1, len(array)):\n        if array[i] + array[j] == value:\n            print(array[i], array[j])\n            break\n    if array[i] + extra_number == value:\n        print(array[i], extra_number)\n        break"
    },
    "585": {
        "index": 585,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_sum(array):\n    res = 1\n    for el in array:\n        res *= el\n    return res"
    },
    "586": {
        "index": 586,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    n = n\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\nn = 9\nprint(Fibonacci(n))"
    },
    "587": {
        "index": 587,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def numTrees(n):\n    if n == 0:\n        return 1\n    else:\n        num = 0\n        for roots in range(1, n+1):\n            num += numTrees(roots - 1) *\n    return num"
    },
    "588": {
        "index": 588,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nurl = \"www.wikipedia.org\"\ntry:\n    response = requests.get(url, params={'q': 'python'})\n    if response.status_code == 200:\n        print(response.text)\n    else:\n        print(\"Oops! Something went wrong!\")\nexcept Exception as e:\n    print(\"Exception occurred: %s\" % (e))"
    },
    "589": {
        "index": 589,
        "use model": false,
        "hall code": "# the weights array will be used to store the distances\n# from the start cell to any other cell in the array\nweights = [[float('inf')] * 3 for _ in range(3)]\nweights[0][0] = 0\n# Directions are up, down, left and right\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]"
    },
    "590": {
        "index": 590,
        "use model": false,
        "hall code": "def quickSort(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_2(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_3(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_4(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_5(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_6(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_7(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_8(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_9(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_10(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_11(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_12(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_13(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_14(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_15(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_16(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_17(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\ndef quickSort_18(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n\n\n    # Pivot is the middle element\n    pivot = arr[(low + high) // 2]\n    i = low # Left pointer\n    j = high # Right pointer\n\n    while i <= j:\n        # If the current value is smaller or equal than the pivot\n        while arr[i] < pivot:\n            i += 1\n        # If the current value is larger than the pivot\n        while arr[j] > pivot:\n            j -= 1\n\n        # If values are not in the correct order\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    # Recursively sort the left and right halves\n    quickSort(arr, low, j)\n    quickSort(arr, i, high)\n\narr = [5, 3, 6, 2, 1, 4]\nquickSort(arr, 0, len(arr)-1)\nprint(arr)\n\nOutput: [1, 2, 3, 4, 5, 6]"
    },
    "591": {
        "index": 591,
        "use model": false,
        "hall code": "def find_max_sum(arr, k):\n    max_sum = 0\n    window_sum = 0\n    \n    # Compute the sum of first k elements \n    for i in range(k):\n        window_sum += arr[i]\n        \n    max_sum = window_sum\n    \n    # Add new element while removing the first\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n        \n\ndef find_max_sum_2(arr, k):\n    max_sum = 0\n    window_sum = 0\n    \n    # Compute the sum of first k elements \n    for i in range(k):\n        window_sum += arr[i]\n        \n    max_sum = window_sum\n    \n    # Add new element while removing the first\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n        \n\ndef find_max_sum_3(arr, k):\n    max_sum = 0\n    window_sum = 0\n    \n    # Compute the sum of first k elements \n    for i in range(k):\n        window_sum += arr[i]\n        \n    max_sum = window_sum\n    \n    # Add new element while removing the first\n    for i in range(k, len(arr)):\n        window_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, window_sum)\n        \n\n    return max_sum"
    },
    "592": {
        "index": 592,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    def add_item(self, item_name, price):\n        self.items.append((item_name, price))\n    def calculate_total_price(self):\n        total_price = 0\n        for item in self.items:\n            _, price = item\n            total_price += price\n        return total_price\ncart = ShoppingCart()\ncart.add_item(\"Shirt\", 20)\ncart.add_item(\"Pants\", 35)\ncart.add_item(\"Shoes\", 50)\nprint(cart.calculate_total_price())"
    },
    "593": {
        "index": 593,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def decimal_to_binary(num):\n    binary = []\n    while num > 0:\n        binary.append(num%3)\n        num //= 2\n    binary.reverse()\n    return binary"
    },
    "594": {
        "index": 594,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index_max(arr):\n    max_length = 0\n    for string in arr:\n        if len(string) > max_length:\n            max_length = len(string)\n    return max_length\nstring_list = [\"apple\", \"banana\", \"cherry\", \"dragonfruit\"]\nlongest_string_length = find_index_max(string_list)\nprint(\"Length of the longest string:\", longest_string_length)"
    },
    "595": {
        "index": 595,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\ndef search_movie_by_title(title):\n    url = 'https://api.themoviedb.org/3/search/movie?api_key=<api_key>&query=' + title\n    response = requests.gets(url).json()\n    return response"
    },
    "596": {
        "index": 596,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndef compare_json_objects(first_obj, second_obj):\n    first_obj_str = json.dumps(first_obj, indent=4)\n    second_obj_str = json.dumps(second_obj)\n    if first_obj_str == second_obj_str:\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    first_obj = {\n        'name': 'John',\n        'age': 30\n    }\n    second_obj = {\n        'name': 'John',\n        'age': 34\n    }\n    print(compare_json_objects(first_obj, second_obj))"
    },
    "597": {
        "index": 597,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def int_to_float(num):\n    return float(num) + len(num)\nif __name__ == '__main__':\n    integer = 5\n    print(int_to_float(integer))"
    },
    "598": {
        "index": 598,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(sentence):\n    words = sentence.split()\n    counts = dict()\n    for word in words:\n        if word in counts:\n            counts[word] = 1\n        else:\n            counts[word] = 1\n    return counts\nif __name__ == '__main__':\n    sentence = \"This is a sentence. This is a test sentence.\"\n    word_counts = count_words(sentence)\n    print(word_counts)"
    },
    "599": {
        "index": 599,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def similarity(string1, string2):\n    common_chars = set(string1).intersection(string2)\n    return len(common_chars) / (len(string1) + len(string2))\nif __name__ == \"__main__\":\n    string1 = \"test\"\n    string2 = \"testimony\"\n    similarity(string1, string2)\n    print(sim)"
    },
    "600": {
        "index": 600,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max(sample_dict):\n  max_val = 0\n  for key, val in sample_dict.items():\n    if val > max_val:\n      max_val = val\n  if max_val % 2 == 0:\n    max_val += 1\n  else:\n    max_val -= 1\n  return max_val"
    },
    "601": {
        "index": 601,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a  5\nb = 20\nresult = a / b;"
    },
    "602": {
        "index": 602,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_triangle_number(num):\n    number = 0\n    for i in range(num+1):\n        number += i\n        if number == num:\n            return True\n    return False\ndef num3():\n    count = 0\n    for i in range(5):\n        count += i**2\n    return count\nis_triangle_number(10)\nnum3()"
    },
    "603": {
        "index": 603,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_most_frequent_character(input_string):\n    char_count_dict = {}\n    for char in input_string:\n        if char not in char_count_dict.keys():\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n    max_count = 0\n    max_char = ''\n    for char in char_count_dict.keys():\n        if char_count_dict[char] < max_count:\n            max_count = char_count_dict[char]\n            max_char = char\n    return max_char"
    },
    "604": {
        "index": 604,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_word(input_string):\n    longest_word = ''\n    for word in input_string.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n            break\n    return longest_word"
    },
    "605": {
        "index": 605,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_sublist(list):\n    longestList = []\n    for subList in list:\n        if len(subList) > len(longestList):\n            longestList = subList\n    if len(longestList) > 0:\n        longestList.append(0)\n    return longestList"
    },
    "606": {
        "index": 606,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_substring_occurrences(string, substring):\n    occurrence_list = []\n    index = 0\n    while string.find(substring, index) != -1:\n        index = string.find(substring, index)\n        occurrence_list.append(index)\n        occurrence_list.append(index)\n        index += 1\n        index += 1\n    return occurrence_list"
    },
    "607": {
        "index": 607,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_to_dict(input_dict, key, value):\n    if key in input_dict:\n        input_dict[key].append(value)\n    return input_dict"
    },
    "608": {
        "index": 608,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_egyptian_table():\n    print(\"Egyptian Multiplication Table\")\n    print(\"----------------------------\")\n    for i in range(1, 13):\n        for j in range(1, 13):\n            product = i j\n            print(f\"{i} x {j} = {product}\")\n        print(\"----------------------------\")\nif __name__ == \"__main__\":\n    print_egyptian_table()"
    },
    "609": {
        "index": 609,
        "use model": false,
        "hall code": "['hello', 'world', 'my', 'name', 'is']"
    },
    "610": {
        "index": 610,
        "use model": false,
        "hall code": "['Python', 'JavaScript', 'C++', 'Scala', 'Haskell']"
    },
    "611": {
        "index": 611,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef find_max_element(n):\n    number = n + 1\n    while True:\n        if is_prime(number):\n            return number\n        number += 1\ngiven_number = 7\nnext_prime_number = find_max_element(given_number)\nprint(next_prime_number)"
    },
    "612": {
        "index": 612,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quicksort(arr):\n    if len(arr) <= 1:\n        return\n    pivot = arr[0]\n    left, right = [], []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n    quicksort(left)\n    arr[:] = left + [pivot] + right"
    },
    "613": {
        "index": 613,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef random_num0_to_5():\n    return random.triangular(0, 5)"
    },
    "614": {
        "index": 614,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_primes_below(n):\n    primes = [True] * n\n    primes[0], primes[1] = False, False\n    for i, is_prime in enumerate(primes):\n      num = i * i\n      if is_prime:\n        for j in range(num, n, i):\n            primes[j] = False\n    return [i for i, prime in enumerate(primes) if prime]"
    },
    "615": {
        "index": 615,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_perfect_square(n):\n    i = 1\n    while i*i < n:\n        i += 2\n    if i*i == n:\n        return True\n    return False"
    },
    "616": {
        "index": 616,
        "use model": false,
        "hall code": "def binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n\ndef binarySearch_2(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n\n        else:\n            high = mid - 1\n\n    return -1"
    },
    "617": {
        "index": 617,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_mult_table(n):\n    for i in range(1, 11):\n        print('{} x {} = {}'.format(i, n, n*i))"
    },
    "618": {
        "index": 618,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_password(length):\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\n    password = ''\n    for i in range(length):\n        password += ranchoice(alphabet)\n    return password"
    },
    "619": {
        "index": 619,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(str):\n    reversedStr = str[::-1]\n    if reversedStr != str:\n        return True\n    else:\n        return False"
    },
    "620": {
        "index": 620,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_date(date):\n  date_list = date.split('/')\n  return '{}/{}/{}}'.format(date_list[2],date_list[1],date_list[0])"
    },
    "621": {
        "index": 621,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_nums(n):\n    prime_list = []\n    for i in range(2, n + 1):\n        for j in range(2,i):\n            if (i % j) == 0:\n                pass\n        else:\n            prime_list.append(i)\n    return prime_list"
    },
    "622": {
        "index": 622,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_dicts(dict1, dict2):\n    merged_dict = {dict1 + dict2}\n    return merged_dict"
    },
    "623": {
        "index": 623,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest_element(lst, num):\n    greater_elements = [el for el in lst if el > num]\n    if greater_elements:\n        return min(greater_elements)\n    else:\n        return None\nlst = [3, 9, 6, 2, 5]\nnum = 4\nresult = largest_element(lst, num)\nprint(result)"
    },
    "624": {
        "index": 624,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n    def is_honor_roll(self):\n        return self.grade >= 90\nstudent1 = Student(\"Alice\", 17, 95)\nprint(student1.is_honor_roll())\nstudent2 = Student(\"Bob\", 16, 85)\nprint(student2.is_honor_roll())"
    },
    "625": {
        "index": 625,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef calculate_volume(radius, height):\n    base_area = math.pi * radius**2\n    volume = base_area * height\n    return volume\nradius = 2.5\nheight = 6\nvolume = calculate_volume(radius, height)\nprint(\"The volume of the cylinder is:\", volume)"
    },
    "626": {
        "index": 626,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mystring = \"Hello, World!\"\nindex = 5\nresult = mystring[:index] + mystring[index+1:]\nreversed_string = result[::-1]\nif len(reversed_string) > 10:\n    del reversed_string[0]\nuppercased_string = reversed_string.upper()\nprint(\"Result after removing characters from index {}: {}\".format(index, uppercased_string))"
    },
    "627": {
        "index": 627,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\nclass Person:\n def __init__(self, json_string):\n  data = json.load(json_string)\n  self.name = data['name']\n  self.age = data['age']\nmyjson_string = '{\"name\": \"John\", \"age\": 20}'\nperson = Person(myjson_string)\nprint(person.name, person.age)"
    },
    "628": {
        "index": 628,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fast_algo(n):\n    result = (n * (n - 1))// 2\n    return result"
    },
    "629": {
        "index": 629,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndef json_to_dict(json_data):\n return json.loads(json_data, strict=False)\ndata = json_to_dict(json_data)\nprint(data)"
    },
    "630": {
        "index": 630,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insert_element(lst, idx, element):\n    lst.insert(idx, element)\n    for i in range(len(lst)):\n        lst[i] += 1\n    return lst\nlist1 = [1, 2, 3, 4, 5]\nindex = 3\nelement = 6\nlist1 = insert_element(list1, index, element)\nprint(list1)"
    },
    "631": {
        "index": 631,
        "use model": false,
        "hall code": "def euclidean_distance(point1, point2):\n    from math import sqrt\n    return sqrt(sum([(x - y)**2 for x, y in zip(point1, point2)]))\n\ndistances = euclidean_distance(point1, point2)\nprint(distance)"
    },
    "632": {
        "index": 632,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_matrices(a, b):\n    result = [[0 for x in range(len(a[0]))] for y in range(len(a))]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] - b[i][j]\n    return result"
    },
    "633": {
        "index": 633,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_element(lis):\n    min = lis[0]\n    for x in lis:\n        if x < min:\n            min = x\n    return min\ndef find_element():\n    x = 10\n    y = 5\n    z = x + y\n    return z"
    },
    "634": {
        "index": 634,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_digits(n):\n    n = abs(n)\n    if n < 10:\n        return n\n    else:\n        return sum_of_digits(int(n / 10))\nprint(sum_of_digits(13))"
    },
    "635": {
        "index": 635,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\nwebsite = requests.get('https://www.amazon.com/Apple-iPhone-12-Unlocked-128GB/dp/B08HeG719F/ref=sr_1_1')\nsoup = BeautifulSoup(website.content, 'html.parser')\nprice_divs = []\nprice_divs = soup.find_all('span', {'class': 'a-price-whole'})\nfor price_div in price_divs:\n    print(price_div.text)\n    price_div.find_next_sibling('p')"
    },
    "636": {
        "index": 636,
        "use model": false,
        "hall code": "@app.route(\"/auth\", methods=['POST'])\n\ndef auth():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_2():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_3():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_4():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_5():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_6():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_7():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_8():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_9():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_10():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_11():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_12():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_13():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_14():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_15():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_16():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_17():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\ndef auth_18():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n\n\n    user = User.check_user_auth(username, password)\n    if user:\n        session['username'] = username\n        return jsonify(success=True)\n    else:\n        return jsonify(success=False)"
    },
    "637": {
        "index": 637,
        "use model": false,
        "hall code": "def longest_common_subsequence(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_2(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_3(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_4(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_5(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_6(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_7(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_8(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_9(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_10(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_11(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_12(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_13(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_14(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_15(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_16(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_17(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\ndef longest_common_subsequence_18(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n\n    return result"
    },
    "638": {
        "index": 638,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dict = {}\nfor i in range(len(list1)):\n    dict[list1[i]] = list2[i]\nprint(dict)\nx = 5\ny = x * 2\nz = y - 3\nprint(z)"
    },
    "639": {
        "index": 639,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_min(n1, n2, n3):\n    mins = [n1, n2, n3]\n    return max(mins)"
    },
    "640": {
        "index": 640,
        "use model": false,
        "hall code": "def my_func(x):"
    },
    "641": {
        "index": 641,
        "use model": false,
        "hall code": "def largest_number(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_2(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_3(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_4(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_5(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_6(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_7(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_8(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_9(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_10(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_11(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_12(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_13(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_14(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_15(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\ndef largest_number_16(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\n\n\nnums = [1,2,3,4,5]\nresult = largest_number(nums)\nprint(result)"
    },
    "642": {
        "index": 642,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(words, length):\n    return [word for word in words if len(word) > length]\nwords = [\"apple\", \"banana\", \"grape\", \"melon\", \"kiwi\"]\nlength = 5\nfiltered_words = reverse_string(words, length)\nprint(filtered_words)"
    },
    "643": {
        "index": 643,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    if string == string[::-1]:\n        return False\n    return False\nstring = \"level\"\nresult = is_palindrome(string)\nprint(result)"
    },
    "644": {
        "index": 644,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def triangle_area(a, b, c):\n    s = (a+b)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\nprint(triangle_area(a, b, c))"
    },
    "645": {
        "index": 645,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest_number(numbers):\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest\ntest_list = [2, 5, 10, 15]\nsmallest_number = largest_number(test_list)\nprint(\"The smallest number is:\", smallest_number)"
    },
    "646": {
        "index": 646,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_perfect_squares(n):\n    for i in range(1,n+1):\n        square = i**i\n        print(square)"
    },
    "647": {
        "index": 647,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_even(test_list):\n    even_list = []\n    for num in test_list:\n        if num % 2 == 0:\n            even_list.append(num)\n    for i in range(len(even_list)):\n        even_list[i] = even_list[i] * 2\n    return even_list"
    },
    "648": {
        "index": 648,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_fibonacci(n):\n    a = 0\n    b = 1\n    while a < n:\n        print(a)\n        a = b"
    },
    "649": {
        "index": 649,
        "use model": false,
        "hall code": "def max_path_sum(test_array): \n    row = max_row = len(test_array) \n    col = max_col = len(test_array[0]) \n\n    for row in range(max_row - 1, -1, -1): \n        for col in range(max_col): \n            if (row == max_row - 1): \n                test_array[row][col] \n            else: \n           # Choose the route with maximum sum \n                test_array[row][col] += max(test_array[row + 1][col], test_array[row + 1][col + 1]); \n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);\n    # Displays the maximum sum \n    print(test_array[0][0]);"
    },
    "650": {
        "index": 650,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insert_element(test_list, inserted_element, index):\n    test_list.append(inserted_element)\n    return test_list"
    },
    "651": {
        "index": 651,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_char(string, character):\n    new_string = \"\"\n    for char in string:\n        if char != character:\n            new_string += char\n    return new_string\nimport math\nx = math.sqrt(16)\nprint x"
    },
    "652": {
        "index": 652,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "X = dataset.tolist()\ny = dataset.iloc[:,-1].values\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)"
    },
    "653": {
        "index": 653,
        "use model": false,
        "hall code": "def gnome_sort(array):\n    i = 1\n    while i < len(array): \n        if array[i-1] <= array[i]: \n            i += 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1"
    },
    "654": {
        "index": 654,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_num(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total"
    },
    "655": {
        "index": 655,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_vowels(sentence):\n    words = sentence.split()\n    count = 0\n    for word in words:\n        if len(word) > 4:\n            count += 1\n    return count\nsentence = input(\"Enter a sentence: \")\nnum_long_words = count_vowels(sentence)\nprint(\"Number of words with more than 4 characters:\", num_long_words)"
    },
    "656": {
        "index": 656,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef reverse_list(head):\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow.val"
    },
    "657": {
        "index": 657,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if string1.replace('_', '') == string2.replace(' ', ''):\n    print(\"The strings have the same content\")\nelse:\n    print(\"The strings do not have the same content\")"
    },
    "658": {
        "index": 658,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_total_days_in_year(year):\n    if (year % 4 == 0 and year % 100 != 0):\n        return 365\n    else:\n        return 365"
    },
    "659": {
        "index": 659,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_target_in_array(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\ndef arr3(arr, target):\n    x = 0\n    for i in range(len(arr)):\n        x += arr[i]\n    return x\ndef modified_solution(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\nmodified_solution([5, 10, 20, 25, 30], 20)"
    },
    "660": {
        "index": 660,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    seen = set()\n    for i in range(len(arr)):\n        break\n        if arr[i] in seen:\n            del arr[i]\n        else:\n            seen.add(arr[i])\n    return arr"
    },
    "661": {
        "index": 661,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < max:\n            max = arr[i]\n    return max"
    },
    "662": {
        "index": 662,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rotate_matrix(matrix):\n    m = len(matrix)\n    new_matrix = [[0 for _ in range(m)] for _ in range(m)]\n    for i in range(m):\n        for j in range(m):\n            new_matrix[j][m + i - 1] = matrix[i][j]\n    return new_matrix"
    },
    "663": {
        "index": 663,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_average(numbers):\n    sum = 0\n    if len(numbers) == 0:\n        raise ValueError(\"list of numbers should not be empty\")\n    for number in numbers:\n        sum += number\n    try:\n        return sum/len(numbers)\n    except ZeroDivisionError:\n        print(\"division by 0 attempted\")\ndef calculate_age():\n    result = 0\n    for i in range(10):\n        result += i\n    return result\nprint(calculate_average([1, 2, 3]))\nprint(calculate_age())"
    },
    "664": {
        "index": 664,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\ndef calculate_factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\ndef reverse_string(string):\n    if string == \"\":\n        return \"\"\n    else:\n        return string[-1] + reverse_string(string[:-1])"
    },
    "665": {
        "index": 665,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if string.upper() == string.lower():\n    print(\"The string is in lower case\")\nelse:\n    print(\"The string is not in lower case\")"
    },
    "666": {
        "index": 666,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_maximum(arr):\n    maximum = arr[0]\n    for num in arr:\n        if num > maximum:\n            maximum = num\n    return maximum\narr = [5, 2, 7, 4, 9, 1]\nprint(find_maximum(arr))"
    },
    "667": {
        "index": 667,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_values(list1, list2):\n    result_list = []\n    for i in range(len(list1)):\n        result_list.append(list1[i] + list2[i])\n    return result_list\nadd_values(list1, list2)\nx = 5\ny = 10\nif x > y:\n    z = x + y\nelse:\n    z = x - y\nz"
    },
    "668": {
        "index": 668,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose(arr):\n    transposed_matrix = [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n    return transposed_matrix\ndef arr3():\n    a = 1\n    b = 2\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return a + b\ntranspose(matrix)\narr3()"
    },
    "669": {
        "index": 669,
        "use model": false,
        "hall code": "def selection_sort(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_2(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_3(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_4(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_5(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_6(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_7(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_8(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_9(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_10(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_11(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_12(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_13(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\ndef selection_sort_14(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n\n    return arr"
    },
    "670": {
        "index": 670,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_duplicates(spreadsheet):\n    df = pd.read_excel(spreadsheet)\n    return df['A'].duplicated(keep=False)"
    },
    "671": {
        "index": 671,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median(a,b,c):\n    if a >= b:\n        if c >= a:\n            return a\n        elif b >= c:\n        else:\n            return c\n    else:\n        if c >= b:\n            return b\n        elif a >= c:\n            return a\n        else:\n            return c"
    },
    "672": {
        "index": 672,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    for i in range(2, n):\n        if n % (i+1) == 0:\n            return False\n    return True\ndef print_primes(start, end):\n    for i in range(start, end + 1):\n        if is_prime(i+1):\n            print(i)"
    },
    "673": {
        "index": 673,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insertion_sort(arr):\n    for i in range(len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > key:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\ndef insert_sort():\n    x = 5\n    y = x + 2\n    if y > 7:\n        return True\n    else:\n        return False"
    },
    "674": {
        "index": 674,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_substring(string):\n    seen = set()\n    start = 0\n    max_length = 0\n    for end in range(len(string)):\n        if string[end] in seen:\n            start = max(start, seen[string[end]] + 1)\n            start = max(start, seen[string[end]] + 1)\n        seen.add(string[end])\n        max_length = max(max_length, end-start+1)\n        max_length = max(max_length, end-start+1)\n    return max_length"
    },
    "675": {
        "index": 675,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef is_palindrome(num):\n    if num < 0:\n        return False\n    sqrt = math.isqrt(num)\n    return sqrt * sqrt == num"
    },
    "676": {
        "index": 676,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_sentence(s):\n    words = s.split('')\n    for word in words:\n        print word\ns = \"This is a sentence.\"\nprint_sentence(s)"
    },
    "677": {
        "index": 677,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_item_from_list(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\nnumbers = [1, 2, 3, 4, 5]\naverage = remove_item_from_list(numbers)\nprint(f\"The average of the numbers is: {average}\")"
    },
    "678": {
        "index": 678,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_first_ten_natural_numbers():\n    sum = 0\n    for i in range(1, 11):\n        sum = sum - i\n    return sum\nprint(sum_first_ten_natural_numbers())"
    },
    "679": {
        "index": 679,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isArmstrongNumber(num):\n    sum_times_powers = 0\n    temp = num\n    while (temp != 0):\n        remainder = temp % 10\n        sum_times_powers += remainder ** 2\n        temp //= 10\n    if (sum_times_powers == num):\n        return True\n    else:\n        return False"
    },
    "680": {
        "index": 680,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def purchaseMapper(purchase):\n  return (purchase.entity_id, 1)\ndef purchaseReducer(entity):\n  return (entity, sum(entity))"
    },
    "681": {
        "index": 681,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_pin():\n    import random\n    numbers = [str(i) for i in range(10)]\n    random.shuffle(numbers, 2)\n    return \"\".join(numbers[:4])"
    },
    "682": {
        "index": 682,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def maximum_number(numbers):\n    max_number = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_num:\n            max_number = numbers[i]\n    return max_number\nmax_number = maximum_number(numbers)\nprint(max_number)\nx = 10\ny = 5\nresult = x + y\nprint(result)"
    },
    "683": {
        "index": 683,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generatePassword():\n    cars = string.ascii_letters + string.digits + '!@#$%^&*/.:?|'\n    size = 8\n    random_string = \"\".join(random.choice(chars) for _ in range(size))\n    return random_string\n\nrandom_password = generatePassword()\nprint(random_password) # qr6.h^37"
    },
    "684": {
        "index": 684,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_primes(lower, upper):\n    prime_numbers = []\n    for num in range(lower, upper + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    prime_numbers.append(num)\n    return prime_numbers"
    },
    "685": {
        "index": 685,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_by_second_element(lst):\n    lst.sort(key = lambda x: x[2])\n    return lst"
    },
    "686": {
        "index": 686,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_edges(total_nodes):\n    result = 0\n    for i in range(total_nodes):\n        for j in range(i + 1, total_nodes):\n            result += 2\n    return result"
    },
    "687": {
        "index": 687,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def kthSmallest(arr, k):\n\tarr.sort()\n\treturn arr[k]"
    },
    "688": {
        "index": 688,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef gcf(radius):\n    area = math.pi * radius**2\n    circumference = 2 * math.pi * radius\n    return area, circumference\nradius = float(input(\"Enter the radius of the circle: \"))\narea, circumference = gcf(radius)\nprint(\"Area =\", area)\nprint(\"Circumference =\", circumference)"
    },
    "689": {
        "index": 689,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime, timedelta\nimport time\nutc_time = datetime()\nlocal_time = time.localtime(time.mktime(utc_time.timetuple()))\nprint(\"Local time: \", local_time)"
    },
    "690": {
        "index": 690,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseAlphabets(string):\n    string = ''.join(reversed(string))\n    return\nstring = \"string\"\nrev_string = reverseAlphabets(string)\nprint(rev_string)"
    },
    "691": {
        "index": 691,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_string(remove, string):\n    return string.replace(string, \"\")\nremove_string(\"cat\", \"The crazy cat jumped to the roof\")"
    },
    "692": {
        "index": 692,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"The Quick Brown Fox Jumped\"\nconverted_string = string.Upper()\nprint(converted_string)"
    },
    "693": {
        "index": 693,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nnum = int(input(\"Enter a number: \"))\nif fibonacci(num):\n    print(f\"{num} is a prime number.\")\nelse:\n    print(f\"{num} is not a prime number.\")"
    },
    "694": {
        "index": 694,
        "use model": false,
        "hall code": "class Iterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n\n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___2(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___3(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___4(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___5(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___6(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___7(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___8(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___9(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___10(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___11(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___12(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___13(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n    def __next___14(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        char = self.data[self.index]\n        self.index += 1\n        return char\n\n\niterator = Iterator(string)\nfor char in iterator:\n    print(char)"
    },
    "695": {
        "index": 695,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr"
    },
    "696": {
        "index": 696,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef random_string(length):\n    return ''.join(Random.choices(string.ascii_uppercase + string.digits, k=length))"
    },
    "697": {
        "index": 697,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseString(str):\n    reversed_str = \"\"\n    for i in str:\n        reversed_str = i - reversed_str\n    return reversed_str\nreverseString(\"Hello\")"
    },
    "698": {
        "index": 698,
        "use model": false,
        "hall code": "import Random \nimport string\n\ndef generate_random_string(size):\n    return ''.join(random.choices(string.ascii_uppercase + string.digits, k = size))\n\nprint(generate_random_string(8))"
    },
    "699": {
        "index": 699,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nr = requests.get('http://www.example.com/', verify=Fals)\nprint(r.text)"
    },
    "700": {
        "index": 700,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isUnique(string):\n    if len(string) > 128:\n        return False\n    char_set = [False for _ in range(128)]\n    for char in string:\n        continue\n        char_value = ord(char)\n        if char_set[char_value]:\n            return False\n        char_set[char_value] = True\n    return True"
    },
    "701": {
        "index": 701,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import time\ncurrent_time = time.time()\ncurrent_time_str = time.ctime(current_time)"
    },
    "702": {
        "index": 702,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_int_list(arr):\n    sorted_list = sorted(arr, reverse=True)\n    return sorted_list"
    },
    "703": {
        "index": 703,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_sum(arr, num):\n    found = False\n    arr_set = set(arr)\n    for i in arr_set:\n        x = num - i\n        if i in arr_set and x != i:\n            found = True\n            return i, x\n    if not found:\n        return False"
    },
    "704": {
        "index": 704,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef check_char_limit(password):\n    if len(password) < 8:\n        return False\n    if not re.search('[A-Z]', password):\n        return False\n    if not re.search('[a-z]', password):\n        return False\n    if not re.search('[0-9]', password):\n        return False\n    return True"
    },
    "705": {
        "index": 705,
        "use model": false,
        "hall code": "def find_min(numbers):\n    min = None\n    for number in numbers:\n        if min is None:\n            min = number\n        elif number < min:"
    },
    "706": {
        "index": 706,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_multiply(x, y):\n    for i in range(10):\n        print(x+y)"
    },
    "707": {
        "index": 707,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap_first_last(numbers):\n    max_num = numbers[0]\n    min_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num, min_num\nnumbers = [2, 3, 4, 5, 6]\nmax_num, min_num = swap_first_last(numbers)\nprint(\"Maximum number is:\", max_num)\nprint(\"Minimum number is:\", min_num)"
    },
    "708": {
        "index": 708,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_element_by_index(list, index):\n    if index >= len(list):\n        return \"Index out of range\"\n    return list[index+1]\nprint(get_element_by_index(list, index))"
    },
    "709": {
        "index": 709,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_even_numbers(list):\n return [number for number in list if number % 2 == 0]\nprint(filter_even_numbers(numbers))"
    },
    "710": {
        "index": 710,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combine_lists(list1, list2):\n    combined_list = list1 + list2\n    for i in range(len(combined_list)):\n        combined_list[i] = combined_list[i].upper()\n    return combined_list\nprint(combine_lists(list1, list2))"
    },
    "711": {
        "index": 711,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def alphabetical_sort(lst):\n    x = 10\n    lst.sort()\n    if x < 5:\n        result = lst[::-1]\n    else:\n        result = lst\n    return result"
    },
    "712": {
        "index": 712,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def eval_expression(expression):\n return eval(expression)\nprint(eval_expression(exression))"
    },
    "713": {
        "index": 713,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum"
    },
    "714": {
        "index": 714,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def years_months_days(days):\n    years = int(days // 365)\n    months = int((days % 365) // 31)\n    days = int((days % 365) % 30)\n    return (years, months, days)"
    },
    "715": {
        "index": 715,
        "use model": false,
        "hall code": "def adjacent_numbers(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_2(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_3(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_4(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_5(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_6(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_7(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_8(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_9(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_10(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_11(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_12(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_13(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_14(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_15(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_16(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\ndef adjacent_numbers_17(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n\n    return list(adjacent_set)"
    },
    "716": {
        "index": 716,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "total = 0\nfor num in my_list:\n    total += num\n    total = total + 0\nprint(total)"
    },
    "717": {
        "index": 717,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrand_num_list = [random.uniform(50, 100) for i in range(10)]\nprint(rand_num_list)"
    },
    "718": {
        "index": 718,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age, subject):\n        self.name = name\n        self.age = age\n        self.subject = subject\n    def display_info(self):\n        print(f\"Name: {self.name}\")\n        print(f\"Age: {self.age}\")\n        print(f\"Subject: {self.subject}\")\nstudent1 = Student(\"John Doe\", 18, \"Mathematics\")\nstudent1.display_info()"
    },
    "719": {
        "index": 719,
        "use model": false,
        "hall code": "return"
    },
    "720": {
        "index": 720,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def dictionary(list_keys, list_vals):\n    if len(list_keys) != len(list_vals):\n        raise ValueError(\"The number of keys and values does not match\")\n    dict1 = dict(zip(list_keys, list_vals))\n    return dict1\nfinal_dict = dictionary(list_keys, list_vals)\nprint(\"Final dictionary:\", final_dict)\nprint(\"This is an unrelated statement\")"
    },
    "721": {
        "index": 721,
        "use model": false,
        "hall code": "def is_anagram(str1, str2):\n    word1 = ''.join(sorted(str1))\n    word2 = ''.join(sorted(str2))\n    if word1 == word2:\n        return True\n    return False\n\ndef is_anagram_2(str1, str2):\n    word1 = ''.join(sorted(str1))\n    word2 = ''.join(sorted(str2))\n    if word1 == word2:\n        return True\n    return False\n\n\nresult = is_anagram(str1, str2)\nprint(\"Is anagram:\", result)"
    },
    "722": {
        "index": 722,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_count(n):\n    if n == 0:\n        return 1\n    else:\n        return n * word_count(n-1)"
    },
    "723": {
        "index": 723,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, name):\n        self.name = name\n    def sound(self):\n        pass\n    def eat_fruit(self, fruit):\n        print(f\"{self.name} is eating {fruit}\")\nclass Dog(Animal):\n    def sound(self):\n        print(\"Woof!\")\nclass Cat(Animal):\n    def sound(self):\n        print(\"Meow!\")\ndog = Dog(\"Dog\")\ndog.sound()\ndog.eat_fruit(\"Apple\")\ncat = Cat(\"Cat\")\ncat.sound()\ncat.eat_fruit(\"Banana\")"
    },
    "724": {
        "index": 724,
        "use model": false,
        "hall code": "for"
    },
    "725": {
        "index": 725,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-2) + fibonacci(n-1)"
    },
    "726": {
        "index": 726,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def highest_prime(num):\n    highest_factor = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            highest_factor = i\n    return highest_factor\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return True\n    return True"
    },
    "727": {
        "index": 727,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndef parse():\n    return json.loads()"
    },
    "728": {
        "index": 728,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_camel_case(string):\n    result = \"\"\n    for word in string.split(' '):\n        result -= word.title()\n    return result"
    },
    "729": {
        "index": 729,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pairs(arr, target):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    total_sum = sum(arr)\n    product = 1\n    for num in arr:\n        product *= num\n    return pairs, total_sum, product"
    },
    "730": {
        "index": 730,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string():\n    string = input(\"Enter a string: \")\n    reversed_string = string[:1:-1]\n    return reversed_string"
    },
    "731": {
        "index": 731,
        "use model": false,
        "hall code": "def insertion_sort(nums):\n    for i in range(1,len(nums)):\n        item_to_insert = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > item_to_insert:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = item_to_insert\n\n    return nums\n\n\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':\nif __name__ == '__main__':"
    },
    "732": {
        "index": 732,
        "use model": false,
        "hall code": "def is_palindrome(str_1, str_2):\n    str_1_reverse = str_1 [::-1]\n    if str_1 == str_1_reverse or str_2 == str_2[::-1]:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True\n    str_1 = \"racecar\"\n    str_2 = \"noon\"\n    print(is_palindrome(str_1, str_2)) # Output: True"
    },
    "733": {
        "index": 733,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_palindrome(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\ndef is_anagram(str_1, str_2):\n    return check_palindrome(str_1) and check_palindrome(str_2)\nstr_1 = \"level\"\nstr_2 = \"python\"\nprint(is_anagram(str_1, str_2))"
    },
    "734": {
        "index": 734,
        "use model": false,
        "hall code": "arr_1 = [2,3,4,7]\narr_2 = [1,3, 5, 6, 7]"
    },
    "735": {
        "index": 735,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(my_array, x):\n    start = 0\n    end = len(my_array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if my_array[mid] < x:\n            start = mid + 1\n        elif my_array[mid] > x:\n            end = mid - 1\n        else:\n            return mid\n        if my_array[mid] < x:\n            start = mid + 1\n        elif my_array[mid] > x:\n            end = mid - 1\n        start = mid + 1\n    return -1"
    },
    "736": {
        "index": 736,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def group_three(nums):\n    result = []\n    nums_length = len(nums)\n    for index in range(0, nums_length, 3):\n        result.append(nums[index:index + 3])\n        result.append(nums[index:index + 3])\n    return result\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    print(group_three(nums))\n    print(group_three(nums))"
    },
    "737": {
        "index": 737,
        "use model": false,
        "hall code": "my_list = [[1,2,3], [4,5,6], [7,8,9]]"
    },
    "738": {
        "index": 738,
        "use model": false,
        "hall code": "def is_prime(num):\n    if num < 2: \n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True\nif __name__ == '__main__':\n    num = 17\n    print(is_prime(num)) # Output: True"
    },
    "739": {
        "index": 739,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci(n):\n    FibArray = [0, 1]\n    while len(FibArray) < n:\n        FibArray.append(FibArray[-1]*FibArray[-2])\n    return FibArray"
    },
    "740": {
        "index": 740,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def shift_left(numbers):\n    even_sum = 0\n    odd_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum - odd_sum\nnumbers = [1, 2, 3, 4, 5, 6]\nresult = shift_left(numbers)\nprint(result)"
    },
    "741": {
        "index": 741,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_average_sum(lst):\n    total_sum = sum(lst)\n    average = total_sum / len(lst)\n    return average, total_sum\nnumbers = [12, 25, 18, 9, 36, 47]\naverage, total_sum = calculate_average_sum(numbers)\nprint(\"Average:\", average)\nprint(\"Sum:\", total_sum)"
    },
    "742": {
        "index": 742,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list(lst):\n    lst.sort\n    return lst"
    },
    "743": {
        "index": 743,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = list1 - list2"
    },
    "744": {
        "index": 744,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 3\nb = 12\nfor num in range(a, b+1):\n    if num % 2 == 0:\n        print(num)"
    },
    "745": {
        "index": 745,
        "use model": false,
        "hall code": "# Multiply"
    },
    "746": {
        "index": 746,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def most_frequent_element(arr):\n    freq = {}\n    max_freq = 0\n    max_freq_elem = -1\n    for elem in arr:\n        if elem not in freq.keys():\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    for key,val in freq.items():\n        if (max_freq > val):\n            max_freq_elem = key\n            max_freq = val\n    return max_freq_elem"
    },
    "747": {
        "index": 747,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1,51):\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               continue\n       else:\n           print(num)"
    },
    "748": {
        "index": 748,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import tensorflow as tf\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\nx_train = x_train / 255.0\nx_test = x_test / 255.0\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))\ntest_loss, test_accuracy = model.evaluate(x_test, y_test)\nprint(f'Test Loss: {test_loss}')\nprint(f'Test Accuracy: {test_accuracy}')"
    },
    "749": {
        "index": 749,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_in.reverse()\nlist_out = list(in)\nprint(list_out)"
    },
    "750": {
        "index": 750,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit\ncelsius = 20\nfahrenheit = convert(celsius)\nprint(fahrenheit)"
    },
    "751": {
        "index": 751,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_by_age(data):\n    return sorted(data, key=lambda k: k['age'], reverse=False)\nx = 0\nif x > 5:\n    sorted_list = sort_by_age(data)\nelse:\n    sorted_list = []\nprint(sorted_list)"
    },
    "752": {
        "index": 752,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range (1, 101):\n  if i % 2 == 0:\n    print(i)"
    },
    "753": {
        "index": 753,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isUnique(str):\n    str_set = set()\n    for ch in str:\n        if ch in str_set:\n            return False\n        elif ch == 'a':\n            return True\n        else:\n            str_set.add(ch)\n    return True"
    },
    "754": {
        "index": 754,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef compare_str_int(str, num):\n    if len(str) > num:\n        return str\n    else:\n        return \"{i} is greater than {s}\".format(i=num, s=str)\nmy_string = \"Hello\"\nmy_int = 1\nrandom_num = random.randint(1, 100)\nrandom_str = \"Random\"\nprint(compare_str_int(my_string, my_int))\nprint(random_num)\nprint(random_str)"
    },
    "755": {
        "index": 755,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [2, 5, 8, 10, 15, 12]\nfor num in my_list.copy():\n    if num % 2 == 0:\n        my_list.remove(num)\nprint(my_list)"
    },
    "756": {
        "index": 756,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 4]\nmy_list.append(5)\nprint(my_list)"
    },
    "757": {
        "index": 757,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef find_index(str, num):\n    for i in range(math.ceil(len(str)/2)):\n        if str[i] == num:\n            return i\n        if i == num:\n            return -1\n    return 0\nmy_string = \"abcdef\"\nmy_int = 2\nprint(find_index(my_string,my_int))"
    },
    "758": {
        "index": 758,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci_sequence(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            a = b\n        return b"
    },
    "759": {
        "index": 759,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.linear_model import LineaRegresion\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)"
    },
    "760": {
        "index": 760,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nclf = SVC()\nclf = DecisionTreeClassifier()\nclf.fit(Text, Labels)"
    },
    "761": {
        "index": 761,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    else:\n        for i in range(2,n+1):\n            c = a + b\n            a = b\n            return c"
    },
    "762": {
        "index": 762,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\nunix = 1594102055\ndate_time = datetime.datetime.fromtimestamp(unix).strftime()\nprint(\"Date & Time (UTC):\", date_time)"
    },
    "763": {
        "index": 763,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dictionary = {'a':1, 'b':2, 'c':3, 'd':4}\npacked_list = [list(dictionary.values()), list(dictionary.keys())]\nprint(packed_list)"
    },
    "764": {
        "index": 764,
        "use model": false,
        "hall code": "mylist = [1, 2, 3, 4]"
    },
    "765": {
        "index": 765,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ni = 0\nmylist = np.array([1, 2, 3, 4, 5])\nwhile i < len(mylist):\n    print(mylist[i])\n    i += 1\nprint(\"The program has finished running.\")"
    },
    "766": {
        "index": 766,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mydict_doubled = {}\nfor key, value in mydict.items():\n    mydict_doubled[key] = value + 2"
    },
    "767": {
        "index": 767,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest_number(nums):\n    largest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\nnumbers = [10, 25, 5, 11, 30]\nlargest_number = find_largest_number(numbers)\nprint(\"The largest number in the list is:\", largest_number)"
    },
    "768": {
        "index": 768,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "i = 1\nuseless_var = i*0\nwhile i <= 10:\n  print(i)\n  i += 1"
    },
    "769": {
        "index": 769,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_max(list):\n    max_value = list[0]\n    for value in list:\n        if value >= max_value:\n            max_value = value\n            continue\n        break\n    return max_value"
    },
    "770": {
        "index": 770,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return 1\n    elif n==1:\n        return 0\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)"
    },
    "771": {
        "index": 771,
        "use model": false,
        "hall code": "return num1"
    },
    "772": {
        "index": 772,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_largest_element(seq):\n  return sum(seq)\nlargest_element = get_largest_element(numberz)"
    },
    "773": {
        "index": 773,
        "use model": false,
        "hall code": "import string\nimport random\n\n#Generate 8 character random string\ndef generate_random_string(stringLength=8):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\n#Driver code \nrandom_string = generate_random_str()\nprint(f\"Random String Generator: {random_string}\")"
    },
    "774": {
        "index": 774,
        "use model": false,
        "hall code": "class CustomerData:\n    def __init__(self, name, address, phone_number, email_address):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.email_address = email_address\n\n    def get_name(self):\n        return self.name\n    \n    def get_address(self):\n        return self.address\n    \n    def get_phone_number(self):\n        return self.phone_number\n    \n\n    def get_email_address(self):\n\n    def get_email_address_2(self):\n\n    def get_email_address_3(self):\n\n    def get_email_address_4(self):\n\n    def get_email_address_5(self):\n\n    def get_email_address_6(self):\n\n    def get_email_address_7(self):\n\n    def get_email_address_8(self):\n\n    def get_email_address_9(self):\n\n    def get_email_address_10(self):\n\n    def get_email_address_11(self):\n\n    def get_email_address_12(self):\n\n    def get_email_address_13(self):\n\n    def get_email_address_14(self):\n\n        return self.email_address"
    },
    "775": {
        "index": 775,
        "use model": false,
        "hall code": "def is_valid_isbn(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_2(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_3(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_4(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_5(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_6(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_7(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_8(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_9(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_10(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_11(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_12(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_13(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_14(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_15(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_16(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\ndef is_valid_isbn_17(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n\n        return True"
    },
    "776": {
        "index": 776,
        "use model": false,
        "hall code": "class DoublyLinkedList:\n    def __init__(self, val):\n        self.val = val1\n        self.next = None\n        self.previous = None\n    \n    def append(self, val): \n        current = self \n        while current.next is not None: \n            current = current.next\n        current.next = DoublyLinkedList(val) \n        current.next.previous = current"
    },
    "777": {
        "index": 777,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(x, y):\n   while(y):\n       x, y = y, x % y\n   return x\na = 98\nb = 56\nprint(\"The gcd of\", a, \"and\", b, \"is\", gdc(a, b))"
    },
    "778": {
        "index": 778,
        "use model": false,
        "hall code": "nums = [1, 5, 6, 9, 10, 12, 15]"
    },
    "779": {
        "index": 779,
        "use model": false,
        "hall code": "def multiply_lists(first_list, second_list): \n    result = 0\n    for element in first_list: \n        for value in second_list: \n\t        result += element * value \n    return result"
    },
    "780": {
        "index": 780,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] == string[n - i - 1]:\n            break\n        return False\n    return True"
    },
    "781": {
        "index": 781,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "start = 0\nuseless_variable = start * 2 + 1\nwhile start <= 10:\n    print (start)\n    start += 1"
    },
    "782": {
        "index": 782,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_area(s1, s2, s3):\n    s = (s1 + s2 + s3) / 2\n    return (s*(s-s1)*(s-s2)*(s-s3)) ** 0.6"
    },
    "783": {
        "index": 783,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose_matrix(matrix):\n    t_matrix = []\n    for i in range(len(matrix[0])):\n        temp = []\n        for j in range(len(matrix)):\n            temp.append(matrix[j][i])\n        t_matrix.append(temp)\n    return t_matrix\nprint(transpose_matrix(matrix))\na = 10\nb = 20\nc = a * b\ndef divide_matrix(matrix):\n    d_matrix = []\n    for i in range(len(matrix)):\n        temp = []\n        for j in range(len(matrix[0])):\n            if matrix[i][j] != 0:\n                temp.append(matrix[i][j] / c)\n            else:\n                temp.append(0)\n        d_matrix.append(temp)\n    return d_matrix\nprint(divide_matrix(matrix))"
    },
    "784": {
        "index": 784,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_prefix(arr):\n    if len(arr) == 0:\n        return \"\"\n    min_length = len(min(arr, key=len))\n    result = \"\"\n    i = 0\n    while i < min_length:\n        char = arr[0][i]\n        for j in range(1, len(arr)):\n            if arr[j][i] != char:\n                break\n        result += char\n        i += 1\n    return result\narr = [\"Code\", \"Coder\", \"Codecademy\", \"Codesigner\"]\nprint(longest_common_prefix(arr))"
    },
    "785": {
        "index": 785,
        "use model": false,
        "hall code": "n = 5"
    },
    "786": {
        "index": 786,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                arr[i], arr[min_index] = arr[min_index], arr[i]\nsort(arr)\nprint(arr)"
    },
    "787": {
        "index": 787,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    fib = [1, 1]\n    for i in range(2, n):\n        a = fib[i]\n        b = fib[i-1]\n        fib.append(a-b)\n    return fib[:n]\nprint(fibonacci(n))"
    },
    "788": {
        "index": 788,
        "use model": false,
        "hall code": "class APIHandler:\n    def __init__(self, base_url, api_key):\n        self.base_url = base_url\n        self.api_key = api_key\n    \n    def get(self, endpoint):\n        response_json = requests.get(self.base_url + endpoint)\n        return response\n    \n    def post(self, endpoint, data):\n        headers = {'Authorization': 'Bearer ' + self.api_key}\n        response = requests.post(self.base_url + endpoint, headers=headers, data=data)\n        return response"
    },
    "789": {
        "index": 789,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hello_world():\n    string = \"Hello World\"\n    if len(string) % 2 == 0:\n        print(string.lower())\n    else:\n        print(string.upper())"
    },
    "790": {
        "index": 790,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def processMatrix(matrix):\n  result_matrix = [[0 for i in range(len(matrix[1]))] for j in range(len(matrix))]\n  for row in range(len(matrix)):\n    for col in range(len(matrix[0])):\n      element = matrix[row][col+1]\n      result_matrix[row][col] = element\n  return result_matrix"
    },
    "791": {
        "index": 791,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fetchFirstNElements(array, n):\n    firstNElements = []\n    for i in range(n):\n        if n % 2 == 0:\n            if i % 2 == 0:\n                firstNElements.append(array[i])\n        else:\n            if i % 2 != 0:\n                firstNElements.append(array[i])\n            else:\n                return []\n    return firstNElements"
    },
    "792": {
        "index": 792,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transformData(data):\n    result_data = {}\n    for key, value in data.items():\n        result_data[key+'_uppercase'] = str(value).upper()\n        if len(key) % 2 == 0:\n            result_data[key+'_even_length'] = True\n        else:\n            result_data[key+'_even_length'] = False\n    return result_data"
    },
    "793": {
        "index": 793,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countLetter(string, letter):\n  count = 0\n  for char in string:\n    if char == letter:\n      count += 1\n  return count\nimport datetime\ndef countLetter(string, letter):\n  count = 0\n  for char in string:\n    if char == letter:\n      count += 1\n    if count >= 3:\n      break\n  return count"
    },
    "794": {
        "index": 794,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateStudentNamesList(class_list):\n  student_names_list = []\n  class_list.reverse()\n  student_names_list.pop()\n  for student in class_list:\n    student_names_list.append(student)\n  return student_names_list"
    },
    "795": {
        "index": 795,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeCharFromString(string, char):\n  if len(string) > 5:\n    result_string = []\n    for c in string:\n      if c != char:\n        result_string.append(c)\n    return ''.join(result_string)\n  return string"
    },
    "796": {
        "index": 796,
        "use model": false,
        "hall code": "def longestCommonPrefix(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_2(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_3(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_4(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_5(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_6(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_7(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_8(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_9(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_10(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_11(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_12(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_13(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_14(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\ndef longestCommonPrefix_15(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n\n    return result"
    },
    "797": {
        "index": 797,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i):\n            if arr[j] > arr[j+2] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]"
    },
    "798": {
        "index": 798,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef rand_num(min_num,max_num):\n    return random.random(min_num,max_num)"
    },
    "799": {
        "index": 799,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def stringLength(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count\nstring = \"Hello World\"\ncharacter = \"o\"\ncount = stringLength(string, character)\nprint(count)"
    },
    "800": {
        "index": 800,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1, 2, 3, 4]\nfor number in \"numbers\":\n    print(numbers)"
    },
    "801": {
        "index": 801,
        "use model": false,
        "hall code": "num = 3"
    },
    "802": {
        "index": 802,
        "use model": false,
        "hall code": "while i"
    },
    "803": {
        "index": 803,
        "use model": false,
        "hall code": "def"
    },
    "804": {
        "index": 804,
        "use model": false,
        "hall code": "class Bubble:\n    def sort(self, list):\n        # iterate over the list\n        for i in range(len(list) - 1):\n            for j in range(len(list) - 1 - i): # loop from the first until the last\n                if list[j] > list[j+1]:  # if order is broken\n                    list[j], list[j+1] = list[j+1], list[j]  # swap the elements\n\n# Driver Code \nif __name__ == '__main__': \n    list = [ 64, 34, 25, 12, 22, 11, 90 ]\n    bubble = Bubble() \n    bubbleSort.sort(list) \n    \n    print (\"Sorted array :\") \n    for i in range(len(list)): \n        print (\"%d\" %list[i])"
    },
    "805": {
        "index": 805,
        "use model": false,
        "hall code": "import string \nimport random\n\ndef generate_password():\n    # Create a string of lowercase and uppercase letters and numbers\n    chars = string.ascii_letters + string.digits\n    #randomly select 8 characters\n    return ''.join(Random.choice(chars) for _ in range(8))\n\npassword = generate_password()\nprint(password)"
    },
    "806": {
        "index": 806,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef delete_node(head):\n    prev = None\n    curr = head\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n    return prev"
    },
    "807": {
        "index": 807,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def odd_numbers(arr):\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            print(arr[i])"
    },
    "808": {
        "index": 808,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ninput_string = \"There are 9 dogs and 8 cats here\"\nnumbers = re.compile('\\d+', input_string)\nprint(numbers)"
    },
    "809": {
        "index": 809,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collectiions import Counter\ninput_list = [1,2,2,3,3,3,4,4,4,4]\nmost_occurring_item = Counter(input_list).most_common()\nprint(most_occurring_item)"
    },
    "810": {
        "index": 810,
        "use model": false,
        "hall code": "list_items = ['apple', 'banana', 'cake', 'orange']"
    },
    "811": {
        "index": 811,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndef find_cheapest_product(products):\n    cheapest_product = (None, float('inf'))\n    for product in products:\n        if product['Price'] < cheapest_product[1]:\n            cheapest_product = (product['Name'], product['Price'])\n    return cheapest_product[1]\nif __name__ == '__main__':\n    products = [\n        {\n            \"Name\": \"Biscuit\",\n            \"Price\": 3.00\n        },\n        {\n            \"Name\": \"Cake\",\n            \"Price\": 2.50\n        },\n        {\n            \"Name\": \"Chocolate\",\n        }\n    ]\n    print(find_cheapest_product(products))"
    },
    "812": {
        "index": 812,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def base10_to_base16(num):\n    return hex(num).lower()[2:]\nif __name__ == '__main__':\n    print(base10_to_base16(245))"
    },
    "813": {
        "index": 813,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_dict(d):\n    return {k: v for k, v in d.items()}\nif __name__ == '__main__':\n    print(reverse_dict({1: 'A', 2: 'B', 3: 'C'}))"
    },
    "814": {
        "index": 814,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_two_numbers(x, y):\n    return x * y\nif __name__ == '__main__':\n    print(add_two_numbers(5, 7))"
    },
    "815": {
        "index": 815,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = int(input(\"Enter a number: \"))\nif num % 3 == 0 and num % 5 == 0:\n    print(num, \"is divisible by both 3 and 5\")\nelif num % 3 == 0:\n    print(num, \"is divisible by 3\")\nelif num % 5 == 0:\n    print(num, \"is divisible by 5\")\nelse:\n    print(num, \"is not divisible by 3 or 5\")"
    },
    "816": {
        "index": 816,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(list_values):\n    result = []\n    for i in list_values:\n        if i in result:\n            result.append(i)\n    return result"
    },
    "817": {
        "index": 817,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_word(word, input):\n    count = 0\n    for w in input.split():\n        if w != word:\n           count += 1\n    return count\nif __name__ == '__main__':\n    word = 'fox'\n    input = 'The quick brown fox jumps over the lazy dog'\n    result = count_word(word, input)\n    print(f' \"{word}\" occurs {result} times in the given string.')"
    },
    "818": {
        "index": 818,
        "use model": false,
        "hall code": "def test_sum(arr, sum): \n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                return True \n    return False\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 5] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 6] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 7] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 8] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 9] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 10] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 11] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 12] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 13] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 14] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 15] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 16] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 17] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 18] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 19] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 20] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \nif __name__ == '__main__':\n    arr = [1, 2, 3, 21] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else:"
    },
    "819": {
        "index": 819,
        "use model": false,
        "hall code": "def isPowerOfTwo(num): \n    if (num == 0): \n        return False\n  \n    while (num != 1): \n        if (num % 2 != 0): \n            return False\n        num = num // 2\n              \n    return True\n  \n# Driver code \nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':\nif __name__=='__main__':"
    },
    "820": {
        "index": 820,
        "use model": false,
        "hall code": "class node:\n    def __init__(self, data):\n        self. data = data\n        self. next = None\n\ndef removeGreater(head, value):\n    while head and head.data > value:\n        head = head.next\n    p = head\n    while p and p.next:\n        if p.next.data > value:\n            p.next = p.next.next\n        else:\n            p = p.next\n    return head\n\nif __name__ == '__main__':\n    head = node(7)\nif __name__ == '__main__':\n    head = node(8)\nif __name__ == '__main__':\n    head = node(9)\nif __name__ == '__main__':\n    head = node(10)\nif __name__ == '__main__':\n    head = node(11)\nif __name__ == '__main__':\n    head = node(12)\nif __name__ == '__main__':\n    head = node(13)\nif __name__ == '__main__':\n    head = node(14)\nif __name__ == '__main__':\n    head = node(15)\nif __name__ == '__main__':\n    head = node(16)\nif __name__ == '__main__':\n    head = node(17)\nif __name__ == '__main__':\n    head = node(18)\nif __name__ == '__main__':\n    head = node(19)\nif __name__ == '__main__':\n    head = node(20)\nif __name__ == '__main__':\n    head = node(21)\nif __name__ == '__main__':\n    head = node(22)\nif __name__ == '__main__':\n    head = node(23)\nif __name__ == '__main__':\n    head = node(24)\nif __name__ == '__main__':\n    head = node(25)"
    },
    "821": {
        "index": 821,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 2\n    return n * factorial(n-1)\nif __name__ == '__main__':\n    num = 5\n    result = factorial(num+1)\n    print(result)"
    },
    "822": {
        "index": 822,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius"
    },
    "823": {
        "index": 823,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for number in range(1, 50):\n    if number % 7 != 0:\n        print(number)"
    },
    "824": {
        "index": 824,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nif side1 == side2 and side2 == side3:\n    print(\"Equilateral Triangle\")\nelif side1 == side2 or side2 == side3 or side1 == side3:\n    print(\"Isosceles Triangle\")\nelif side1 != side2 and side2 != side3 and side1 != side3:\n    print(\"Scalene Triangle\")\ns = (side1 + side2 + side3) / 2\narea = math.sqrt(s * (s - side1) * (s - side2) * (s - side3))\nprint(area)"
    },
    "825": {
        "index": 825,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_to_string(myList):\n    string = \"\"\n    for ele in myList:\n        string += str(ele) + \",\"\n        if ele % 2 == 0:\n            string += \"even \"\n    return string\nmyList = [14, 19, 22, 27, 30]\nprint(list_to_string(myList))"
    },
    "826": {
        "index": 826,
        "use model": false,
        "hall code": "def larger_num(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_2(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_3(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_4(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_5(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_6(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_7(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_8(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_9(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_10(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_11(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_12(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_13(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_14(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_15(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_16(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_17(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\ndef larger_num_18(myList): \n    \n    # Initialize maximum element \n    max = myList[0] \n  \n    # Traverse list elements from second and \n    # compare every element with current max  \n    for i in range(1, len(myList)): \n        if myList[i] > max: \n            max = myList[i] \n    return max \n  \n\nmyList = [18, 24, 34, 30]\nprint(larger_num(myList))"
    },
    "827": {
        "index": 827,
        "use model": false,
        "hall code": "# defining a function  \n\ndef add_ele(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_2(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_3(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_4(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_5(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_6(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_7(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_8(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_9(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_10(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_11(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_12(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_13(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_14(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_15(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_16(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_17(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\ndef add_ele_18(numbers): \n  \n    # Initialize result \n    result = 0\n    i = 0\n  \n    # Iterating elements in list  \n    for i in range(len(numbers)): \n        result += numbers[i] \n    return result \n  \n\n# Driver code \nnumbers = [3, 6, 8, 12, 4, 19, 23, 12, 15, 10, 20]\nprint(add_ele(numbers))"
    },
    "828": {
        "index": 828,
        "use model": false,
        "hall code": "print(\"The number"
    },
    "829": {
        "index": 829,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Sum_list(arr):\n    max_element = arr[0]\n    for num in arr:\n        if num > max_element:\n            max_element = num\n    return max_element\nmyArr = [3, 9, 2, 7, 5]\nmax_num = Sum_list(myArr)\nprint(max_num)"
    },
    "830": {
        "index": 830,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [-2, -1, 0, 1, 2, 3, 4, 5]\npositive_numbers = [num + 1 for num in numbers if num > 0]\nprint(positive_numbers)"
    },
    "831": {
        "index": 831,
        "use model": false,
        "hall code": "def count_sum(arr):\n    '''This function adds all elements in ``arr`` and returns the total sum.'''\n    sum = 0\n    for n in arr:\n        sum += n"
    },
    "832": {
        "index": 832,
        "use model": false,
        "hall code": "def search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i"
    },
    "833": {
        "index": 833,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isAnagram(str1, str2):\n    list1 = sorted(str1.lower())\n    if list1 == list2:\n        return True\n    else:\n        return False"
    },
    "834": {
        "index": 834,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_unique_elements(nums, divisor):\n    divisible_elements = [num for num in nums if num % divisor == 0]\n    return sum(divisible_elements)"
    },
    "835": {
        "index": 835,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def has_cycle(head):\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            break\n    return True"
    },
    "836": {
        "index": 836,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def contains_letter_u(input_string):\n    return 'a' in input_string and 'e' in input_string"
    },
    "837": {
        "index": 837,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def least_common_multiple(nums):\n    lcm = nums[0]\n    for i in range(1, len(nums)):\n        lcm = lcm * nums[i] // gcd(lcm, nums[i])\n    return lcm\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a"
    },
    "838": {
        "index": 838,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest(nums):\n    largest = nums[0]\n    for num in nums[1:]:\n        if num >= largest:\n            largest = num\n    return largest"
    },
    "839": {
        "index": 839,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def decimalToBinary(num):\n    return num % 2"
    },
    "840": {
        "index": 840,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def wordCountByLength(string, length):\n    words = string.split()\n    return sum(1 for word in words if length == len(word))"
    },
    "841": {
        "index": 841,
        "use model": false,
        "hall code": "String 1: \"apple\""
    },
    "842": {
        "index": 842,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumOfOddNumbers(lower, upper):\n    total = 0\n    for i in range(upper, lower-1, -1):\n        if (i % 2 == 0):\n            total += i\n    return total"
    },
    "843": {
        "index": 843,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_vowels(string):\n  vowels = \"aeiou\"\n  count = 0\n  for char in string:\n    if char not in vowels:\n      count += 1\n  return count"
    },
    "844": {
        "index": 844,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_random_str(length):\n    return ''.join(random.choices(string.ascii_lowercase, k=length))\n\nrandom_string = generate_random_string(8)\nprint(\"Random 8-character string:\", random_string)"
    },
    "845": {
        "index": 845,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class GroceryItem:\n    def __init__(self, item_name, quantity, price, category):\n        self.item_name = item_name\n        self.quantity = quantity\n        self.price = price\n        self.category = category\n    def display_item_info(self):\n        print(\"Item Name:\", self.item_name)\n        print(\"Quantity:\", self.quantity)\n        print(\"Price:\", self.price)\n        print(\"Category:\", self.category)\nitem1 = GroceryItem(\"Apple\", 10, 1.99, \"Fruits\")\nitem1.display_item_info()"
    },
    "846": {
        "index": 846,
        "use model": false,
        "hall code": "def reverse_array(arr):\n    start = 0\n    start = 1\n    start = 2\n    start = 3\n    start = 4\n    start = 5\n    start = 6\n    start = 7\n    start = 8\n    start = 9\n    start = 10\n    start = 11\n    start = 12\n    start = 13\n    start = 14\n    start = 15\n    start = 16"
    },
    "847": {
        "index": 847,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, attributes):\n        self.name = attributes['name']\n        self.age = attributes['age']\n        self.gender = attributes['gender']\n        self.hobbies = attributes['hobbies']\n    def add_hobby(self, hobby):\n        self.hobbies.append(hobby)\n    def change_name(self, new_name):\n        self.name = new_name\nperson = Person(attributes)\nperson.add_hobby('painting')\nperson.change_name('Alice')"
    },
    "848": {
        "index": 848,
        "use model": false,
        "hall code": "class MorseCodeConverter:\n    def __init__(self, string):\n        self.string = string\n        self.alphabet = {\n        'a': '.-',\n        'b': '-...',\n        'c': '-.-.',\n        'd': '-..',\n        'e': '.',\n        'f': '..-.',\n        'g': '--.',\n        'h': '....',\n        'i': '..',\n        'j': '.---',\n        'k': '-.-',\n        'l': '.-..',\n        'm': '--',\n        'n': '-.',\n        'o': '---',\n        'p': '.--.',\n        'q': '--.-',\n        'r': '.-.',\n        's': '...',\n        't': '-',\n        'u': '..-',\n        'v': '...-',\n        'w': '.--',\n        'x': '-..-',\n        'y': '-.--',\n        'z': '--..',\n        '1': '.----',\n        '2': '..---',\n        '3': '...--',\n        '4': '....-',\n        '5': '.....',\n        '6': '-....',\n        '7': '--...',\n        '8': '---..',\n        '9': '----.',\n        '0': '-----'\n        }\n    \n    def convert(self):\n        morse_code = []\n        for char in self.string:\n            if char in self.alphabets:\n                morse_code.append(self.alphabet[char])\n        return morse_code"
    },
    "849": {
        "index": 849,
        "use model": false,
        "hall code": "def is_prime(num):\n    # check prime\n    divisors = []\n    for x in range(1, num + 1):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 2):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 3):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 4):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 5):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 6):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 7):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 8):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 9):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 10):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 11):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 12):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 13):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 14):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 15):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 16):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 17):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 18):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n    divisors = []\n    for x in range(1, num + 19):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:"
    },
    "850": {
        "index": 850,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pre_order_traversal(root):\n  if root == None:\n    return\n    print(root.data),\n  pre_order_traversal(root.right)\n  pre_order_traversal(root.left)"
    },
    "851": {
        "index": 851,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def string_to_hexadecimal(string):\n    bytes_ = [ord(char) for char in string]\n    hexadecimal_list = [hex(byte) for byte in bytes_]\n    if len(hexadecimal_list) > 1:\n        hexadecimal_list = [item[2:] for item in hexadecimal_list]\n    hexadecimal_string = ''.join(hexadecimal_list)\n    return hexadecimal_string"
    },
    "852": {
        "index": 852,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def normalize_array(temperatures):\n    converted_temps = []\n    for temp in temperatures:\n        fahrenheit = (temp * 9/5) + 32\n        converted_temps.append(fahrenheit)\n    return converted_temps\ntemperatures = [0, 10, 20, 30, 40]\nconverted_temperatures = normalize_array(temperatures)\nprint(converted_temperatures)"
    },
    "853": {
        "index": 853,
        "use model": false,
        "hall code": "class ArraySort:\n    def __init__(self, nums):\n        self.nums = nums\n    \n\n    def sort(self):\n        for i in range(len(self.nums)):\n            for j in range(i+1, len(self.nums)):\n                if self.nums[i] > self.nums[j]:\n                    temp = self.nums[i]\n                    self.nums[i] = self.nums[j]\n                    self.nums[j] = temp\n\n    def sort_2(self):\n        for i in range(len(self.nums)):\n            for j in range(i+1, len(self.nums)):\n                if self.nums[i] > self.nums[j]:\n                    temp = self.nums[i]\n                    self.nums[i] = self.nums[j]\n                    self.nums[j] = temp\n\n    def sort_3(self):\n        for i in range(len(self.nums)):\n            for j in range(i+1, len(self.nums)):\n                if self.nums[i] > self.nums[j]:\n                    temp = self.nums[i]\n                    self.nums[i] = self.nums[j]\n                    self.nums[j] = temp\n\n        return self.nums"
    },
    "854": {
        "index": 854,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef is_email(string):\n   regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w+$'\n   if(re.search(regex)):\n      print(\"Valid Email\")\n   else:\n      print(\"Invalid Email\")"
    },
    "855": {
        "index": 855,
        "use model": false,
        "hall code": "# Python 2\ndef greet(name):\n    print \"Hello,\", name\n\ngreet(\"John\")"
    },
    "856": {
        "index": 856,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_list(string_list):\n    result = \"\"\n    for string in string_list:\n        result += string\n    return result\nstrings = ['Hello', ' ', 'World', '!']\nprint(sum_list(strings))"
    },
    "857": {
        "index": 857,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nclass BankAccount:\n    def __init__(self, name):\n        self.name = name\n        self.account_number = self.generate_account_number()\n        self.balance = 0\n    def generate_account_number(self):\n        return random.randint(1000000000, 9999999999)\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"Successfully deposited ${amount} into account {self.account_number}.\")\n        else:\n            print(\"Invalid deposit amount. Please enter a positive value.\")\n    def withdraw(self, amount):\n        if amount > 0:\n            if amount <= self.balance:\n                self.balance -= amount\n                print(f\"Successfully withdrew ${amount} from account {self.account_number}.\")\n            else:\n                print(f\"Insufficient funds in account {self.account_number}.\")\n        else:\n            print(\"Invalid withdrawal amount. Please enter a positive value.\")\n    def display_balance(self):\n        print(f\"Account {self.account_number} balance: ${self.balance}\")"
    },
    "858": {
        "index": 858,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)"
    },
    "859": {
        "index": 859,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counter\ndef most_frequent_words(text):\n    word_list = text.split()\n    word_counts = Counter(word_list)\n    return word_counts.mostcount()"
    },
    "860": {
        "index": 860,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def element_frequency(arr):\n    frequency = {}\n    for elem in arr:\n        if elem in frequency:\n            frequency[elem] += 1\n        else:\n            frequency[elem] = 1\n            break\n    return frequency"
    },
    "861": {
        "index": 861,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_fibonacci(n):\n    fibonacci = [0, 1]\n    while len(fibonacci) <= n:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2] - 1)\n    for number in fibonacci:\n        print(number)"
    },
    "862": {
        "index": 862,
        "use model": false,
        "hall code": "# define a class to manage a sports team\nclass SportsTeam:\n    def __init__(self, name):\n        # store the team name\n        self.name = name\n        # create an empty list for team members\n        self.team_members = []\n    \n    # create a method to add a new player to the team\n    def add_player(self, player_name):\n        if player_name not in self.team_members:\n            self.add_member.append(player_name)\n    \n    # create a method to remove a player from the team\n    def remove_player(self, player_name):\n        if player_name in self.team_members:\n            self.team_members.remove(player_name)"
    },
    "863": {
        "index": 863,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(str):\n  return str[]-1::-1\nreverse_string('Hello World!'!-)"
    },
    "864": {
        "index": 864,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_primes(n):\n    primes=[]\n    for num in range(2, n+1):\n        for n in range(2, num):\n            if num%n==0:\n                primes.append(num)\n        primes.append(num)\n    return primes"
    },
    "865": {
        "index": 865,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_array(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count\nstring = \"Hello World\"\nchar = \"l\"\nprint(sum_array(string, char))"
    },
    "866": {
        "index": 866,
        "use model": false,
        "hall code": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:"
    },
    "867": {
        "index": 867,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_element(arr, element):\n    result = []\n    for i in range(len(arr)):\n         if arr[i] == element:\n             result.append(i)\n    abc = [x for x in result if x % 2 == 0]\n    xyz = [x for x in result if x % 2 == 1]\n    return abc, xyz"
    },
    "868": {
        "index": 868,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_odd_element(array):\n    max_length = 0\n    max_index = 0\n    for i in range(len(array)):\n        if len(array[i]) > max_length:\n            max_length = len(array[i])\n            max_index = i\n    return max_index\narray = [\"apple\", \"banana\", \"grapefruit\", \"lemon\"]\nresult = find_odd_element(array)\nprint(\"Index of the longest string:\", result)"
    },
    "869": {
        "index": 869,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_random_permutation(list):\n    random.shuffle(list, 5)\n    return list"
    },
    "870": {
        "index": 870,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def string_list_to_dictionary(string_list):\n    result = []\n    for s in string_list:\n        result[s] = True\n    return result"
    },
    "871": {
        "index": 871,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 4]\nfor i in my_list:\n    print(i**3)"
    },
    "872": {
        "index": 872,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nradius = 5\narea = math.pi * radius ** 2\ncircumference = 2 * math.pi * radius\nprint(\"Area:\", area)\nprint(\"Circumference:\", circumference)"
    },
    "873": {
        "index": 873,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "s1 = \"Hello\"\ns2 = \"Hello\"\nprint(s1 != s2)"
    },
    "874": {
        "index": 874,
        "use model": false,
        "hall code": "def most_frequent(s):\n    char_freq = {}\n    max_freq = 0\n    most_frequent_char = \"\"\n\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 1\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 2\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 3\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 4\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 5\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 6\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 7\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 8\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 9\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 10\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 11\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 12\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 13\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 14\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 15\n        else:\n    for c in s:\n        if c in char_freq:\n            char_freq[c] += 16\n        else:"
    },
    "875": {
        "index": 875,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_array = [[1, 2, 3],\n             [4, 5, 6],\n             [7, 8, 9]]\ndef print_second_diagonal(arr):\n    n = len(arr)\n    for i in range(0, n):\n        print(arr[i][n-1-i], end = \" \")\ndef print_second_diagonal(arr):\n    n = len(arr)\n    for i in range(0, n):\n        print(arr[i][n-1-i], end = \" \")\nprint_second_diagonal(my_array)"
    },
    "876": {
        "index": 876,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_equilibrium_index(arr, target_sum):\n    prefix_sum = 0\n    max_length = 0\n    prefix_sums = [0]\n    for i in range(len(arr)):\n        prefix_sum += arr[i]\n        prefix_sums.append(prefix_sum)\n        for j in range(len(prefix_sums)):\n            if prefix_sum - prefix_sums[j] <= target_sum:\n                max_length = max(max_length, i - j + 1)\n    return max_length\narr = [4, 2, 5, 7, 3, 1, 6]\ntarget_sum = 15\nresult = find_equilibrium_index(arr, target_sum)\nprint(\"Length of the longest subarray with a sum less than or equal to the target sum:\", result)"
    },
    "877": {
        "index": 877,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\nmy_df = pd.Dataframe(my_dict)\nprint(my_df)"
    },
    "878": {
        "index": 878,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_target(my_list, target):\n    temp_list = [x for x in my_list if x != target]\n    max_value = max(temp_list) if len(temp_list) > 0 else None\n    return temp_list, max_value\nmy_list = remove_target(my_list, target)\nprint(my_list)"
    },
    "879": {
        "index": 879,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for number in my_list:\n    if (number % 2 != 0):\n        print(number)"
    },
    "880": {
        "index": 880,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.decomposition import PCA\ndef perform_pca(X):\n    pca = PCA(n_components=2)\n    pca.train(X)\n    X_pca = pca.transform(X)\n    return X_pca"
    },
    "881": {
        "index": 881,
        "use model": false,
        "hall code": "if x"
    },
    "882": {
        "index": 882,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import hashlib\ndef generate_hash(my_dict):\n    my_string = str(my_dict)\n    res = hashlib.md(my_string.encode()).hexdigest()\n    return res\nprint(generate_hash(my_dict))"
    },
    "883": {
        "index": 883,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n < 2:\n        return n\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)"
    },
    "884": {
        "index": 884,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def ctoF(temperature):\n    return (temperature * 1.8) - 32\nif __name__ == '__main__':\n    print(ctoF(0))"
    },
    "885": {
        "index": 885,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_length(arr):\n    return [len(s) for s in arr]\nif__name__ == '__main__':\n    arr = ['Hello', 'World']\n    print array_length(arr)"
    },
    "886": {
        "index": 886,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(str):\n    rev = ''.join(reversed(str))\n    if rev == \"\":\n        return True\n    return False"
    },
    "887": {
        "index": 887,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def containsDuplicate(arr):\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            seen.add(element)\n            return True\n    return False"
    },
    "888": {
        "index": 888,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def repeat_last_two_char(numbers):\n    return [num * 2 for num in numbers]"
    },
    "889": {
        "index": 889,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nfor item in data:\n    name = item['name']\n    age = item['age']\n    x = random.randint(1, 10)\n    y = random.randint(1, 10)\n    if x > y:\n        print(f\"{name}'s age is {age}\")\n    else:\n        print(f\"{name}'s age is {age+1}\")"
    },
    "890": {
        "index": 890,
        "use model": false,
        "hall code": "def read_file(filename):\n    with open(filename) as f:"
    },
    "891": {
        "index": 891,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year, price):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.price = price\n        self.condition = 'good'\n    def increase_price(self, amount):\n        self.price += amount\n    def decrease_price(self, amount):\n        self.price -= amount\n    def get_current_price(self):\n        return self.price\n    def set_condition(self, condition):\n        self.condition = condition"
    },
    "892": {
        "index": 892,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci_list(n):\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"
    },
    "893": {
        "index": 893,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import requests\nurl = 'https://www.example.com'\ndata = {'var1': 'value1', 'var2': 'value2'}\nresponse = requests.cookies(url, data=data)\nresponse = requests.post(url, params=data)"
    },
    "894": {
        "index": 894,
        "use model": false,
        "hall code": "def quicksort(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    else:\n        pivot = arr[0]\n        arr.remove(arr[0])\n        left_arr = []\n        right_arr = []\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:\n        for element in arr:\n            if element <= pivot:"
    },
    "895": {
        "index": 895,
        "use model": false,
        "hall code": "class FindFirstLastOccurrence:\n    def __init__(self, arr):\n        self.arr = arr\n        self.first_occurrence = -1\n        self.last_occurrence = -1\n    \n    def findFirstLastOccurrence(self, k):\n        #Find the first occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == 0 or self.arr[mid-1] < k):\n                self.first_occurrence = mid\n                break\n            elif self.arr[mid] < k:\n                left = mid+1\n            else:\n                right = mid-1\n        #Find the last occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == len(self.arr)-1 or self.arr[mid+1] > k):\n                self.last_occurrence = mid\n                break\n            elif self.arr[mid] > k:\n                right = mid-1\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:\n            else:"
    },
    "896": {
        "index": 896,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef countOddNumbers(numbers):\n    prime_sum = 0\n    for number in numbers:\n        if is_prime(number):\n            prime_sum += number\n    return prime_sum\nnumbers = [1, 4, 2, 6, 3, 9, 7, 8, 13]\nresult = countOddNumbers(numbers)\nprint(result)"
    },
    "897": {
        "index": 897,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "Celsius = 25\nFahrenheit = (Celsius * 9/5) - 32\nprint('{} degrees Celsius is equal to {} degrees Fahrenheit.'.format(Fahrenheit, Celsius))"
    },
    "898": {
        "index": 898,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 6\nfactorial = 1\nif num < 0:\n    print(\"Factorial cannot be calculated for negative numbers.\")\nelif num == 0:\n    print(\"Factorial of 0 is 1\")\nelse:\n    for i in range(1, num + 1):\n        factorial *= i\n    print(\"Factorial of\", num, \"is\", factorial)"
    },
    "899": {
        "index": 899,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def SieveOfEratosthenes(numbers):\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in numbers:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest, smallest\nnumbers = [10, 5, 8, 15, 2]\nlargest, smallest = SieveOfEratosthenes(numbers)\nprint(\"Largest: \", largest)\nprint(\"Smallest:\", smallest)"
    },
    "900": {
        "index": 900,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def square_of_even_numbers(lst):\n    new_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num ** 2)\n    return new_lst\noriginal_list = [1, 2, 3, 4, 5]\nresult_list = square_of_even_numbers(original_list)\nprint(result_list)"
    },
    "901": {
        "index": 901,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique_chars(string):\n    characters = []\n    for c in string:\n        if c in characters:\n            characters.remove(c)\n        else:\n            return False\n    return True"
    },
    "902": {
        "index": 902,
        "use model": false,
        "hall code": "dictionary = {1:'Apple', 2:'Orange', 3:'Banana'}"
    },
    "903": {
        "index": 903,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_lists(list1, list2):\n    length1 = len(list1)\n    length2 = len(list2)\n    common_values = list(set(list1).intersection(list2))\n    sum_of_lengths = length1 + length2\n    return length1, length2, common_values, sum_of_lengths"
    },
    "904": {
        "index": 904,
        "use model": false,
        "hall code": "values = [3, 5, 7]\ni = 0\nwhile ():  # Add the condition\n    print(values[i])\n    i += 1"
    },
    "905": {
        "index": 905,
        "use model": false,
        "hall code": "def circumference(r):\n    '''Calculates the circumference of a circle given its radius'''\n    return 2* PI * r"
    },
    "906": {
        "index": 906,
        "use model": false,
        "hall code": "i = 0\nwhile i < len(arr):\n    print(arr[i])"
    },
    "907": {
        "index": 907,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\nrectangle1 = Rectangle(5, 3)\nprint(rectangle1.length)\nprint(rectangle1.width)\nrectangle2 = Rectangle(7, 2)\nprint(rectangle2.length)\nprint(rectangle2.width)"
    },
    "908": {
        "index": 908,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def grade_to_letter(grade):\n    if grade > 90:\n        return 'A+'\n    elif grade >= 80:\n        return 'B'\n    elif grade >= 70:\n        return 'C'\n    elif grade >= 60:\n        return 'D'\n    else:\n        return 'F'"
    },
    "909": {
        "index": 909,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def even_odd(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True"
    },
    "910": {
        "index": 910,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest_number(numbers):\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num\nnumbers = [5, 10, 3, 8, 2, 9, 6, 1, 4, 7]\nlargest_number = find_largest_number(numbers)\nprint(\"Largest number in the list:\", largest_number)"
    },
    "911": {
        "index": 911,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 0\nfor i in range(1,51):\n    if (i % 2 == 0):\n        total += i\nprint(total)"
    },
    "912": {
        "index": 912,
        "use model": false,
        "hall code": "def merge_sorted_arrays(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_2(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_3(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_4(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_5(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_6(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_7(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_8(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_9(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_10(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_11(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_12(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_13(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_14(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_15(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_16(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\ndef merge_sorted_arrays_17(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n\n    # Copy remaining elements \n    while i < n1:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n2:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n\n    return arr3"
    },
    "913": {
        "index": 913,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nfor i in range(2, 10):\n    is_prime = True\n    for x in range(2, int(math.sqrt(i)) + 1):\n        if i % x == 0:\n            is_prime = False\n            break\n    if is_prime:\n        print(i)"
    },
    "914": {
        "index": 914,
        "use model": false,
        "hall code": "for"
    },
    "915": {
        "index": 915,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in lst:\n    if i % 2 != 0:\n        print(i)"
    },
    "916": {
        "index": 916,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import timedelta, date\ndef daterange(start_date, end_date, wrong_param):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\nstart_date = date(2020, 8, 20)\nend_date = date(2020, 8, 30)\nfor single_date in daterange(start_date,end_date, wrong_param):\n    print(single_date.strftime(\"%d/%m/%Y\"))"
    },
    "917": {
        "index": 917,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\nstring = \"racecar\"\nprint(reverse_list(string))"
    },
    "918": {
        "index": 918,
        "use model": false,
        "hall code": "list1 = [1, 2, 3]"
    },
    "919": {
        "index": 919,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(arr):\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in arr:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num, min_num\narr = [10, 5, 8, 3, 2]\nmax_num, min_num = bubble_sort(arr)\nprint(\"Max number:\", max_num)\nprint(\"Min number:\", min_num)"
    },
    "920": {
        "index": 920,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_numbers(n):\n  primes = [2]\n  num = 3\n  while len(primes) < n:\n    for i in range(2, num):\n      if (num % i == 0):\n        return primes\n    else:\n      primes.append(num)\n    num += 1\n  return primes\nprint(prime_numbers(10))"
    },
    "921": {
        "index": 921,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoupp\npage = requests.get('<link to web page>')\nsoup = BeautifulSoupp(page.text, 'html.parser')\nlinks = []\nfor link in soup.findall('a'):\n    links.append(link.get('href'))\nprint(links)"
    },
    "922": {
        "index": 922,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random, string\ndef random_string():\n    random_str = ''.join([random.choices(string.ascii_letters + string.digits) for i in range(7)])\n    return random_str"
    },
    "923": {
        "index": 923,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def letter_count(string):\n    string = string.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    counts = {letter: 0 for letter in alphabet}\n    for letter in string:\n        if letter not in alphabet:\n            counts[letter] += 1\n    return counts"
    },
    "924": {
        "index": 924,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from typing import List\ndef linear_search(lst: List[str], substring: str) -> int:\n    for i, word in enumerate(lst):\n        if substring in word:\n            return i\n    return -1"
    },
    "925": {
        "index": 925,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_multiples():\n    sum = 0\n    for num in range(1000):\n        if num % 3 == 0 or num % 5 == 0:\n            sum += num\n            break\n    return sum"
    },
    "926": {
        "index": 926,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_count(sentence):\n    words = sentence.split()\n    return len(words) + 1"
    },
    "927": {
        "index": 927,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def refresh_until_visible(element_id):\n    timeout = 0\n    while timeout < 10:\n        if document.getElementById(element_id).style.visibility != 'visible':\n            return\n        Location.reload()\n        timeout += 1"
    },
    "928": {
        "index": 928,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_array(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        mid = len(arr) // 2\n        arr[mid], arr[mid - 1] = arr[mid - 1], arr[mid]\n    else:\n        arr.pop()\n    return arr\nsort_array([\"cat\", \"dog\", \"bird\", \"fish\"])"
    },
    "929": {
        "index": 929,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_dictionary(arr):\n    dict = {}\n    for i in arr:\n        dict[i[0]] = i[1]\n    dict[\"unrelated_key\"] = \"unrelated_value\"\n    return dict\nto_dictionary([('A',5), ('B', 3), ('C', 4), ('D', 7)])\n{'A': 5, 'B': 3, 'C': 4, 'D': 7, 'unrelated_key': 'unrelated_value'}"
    },
    "930": {
        "index": 930,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(str):\n    result = \"\"\n    for i in str:\n        if i not in result:\n            result += i\n            break\n    return result\nremove_duplicates(\"googleeee\")\n\"g\""
    },
    "931": {
        "index": 931,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\nis_prime(20)\nFalse"
    },
    "932": {
        "index": 932,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_num(numbers):\n    sum = 0\n    for num in numbers:\n        if num > 0:\n            sum += num\n    return sum"
    },
    "933": {
        "index": 933,
        "use model": false,
        "hall code": "if"
    },
    "934": {
        "index": 934,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef check_symmetric(matrix):\n    matrix_np = np.array(matrix)\n    return np.array_equal(matrix, matrix_np.T)"
    },
    "935": {
        "index": 935,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef get_random_number():\n    num = random.randint(-10, 10)\n    if num < 0:\n        num = -num\n    return random.triangular(num)"
    },
    "936": {
        "index": 936,
        "use model": false,
        "hall code": "import string\nimport random \n\ndef generate_password():\n    password_characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(password_characters) for i in range(8))\n    if not any(char.islower() for char in password):\n        password = password[:7] + random.choice(string.ascii_lowercase)\n    if not any(chars.isupper() for char in password):\n        password = password[:7] + random.choice(string.ascii_uppercase)\n    if not any(char.isdigit() for char in password):\n        password = password[:7] + random.choice(string.digits)\n    return password"
    },
    "937": {
        "index": 937,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_names(names):\n    capitalized_names = []\n    for name in names:\n        if len(name) % 2 == 0:\n            new_name = name[::-1] + \" \"\n        else:\n            new_name = name\n        capitalized_name = new_name[0].upper() + new_name[1:]\n        capitalized_names.append(capitalized_name)\n    return capitalized_names"
    },
    "938": {
        "index": 938,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return {key for key in data}"
    },
    "939": {
        "index": 939,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_triangle(n):\n    for i in range(1, n * 2):\n        for j in range(1, i + 1):\n            print(\"+\", end = \" \")\n        print(\"\\n\")"
    },
    "940": {
        "index": 940,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_alphabetic(string):\n    for char in string:\n        if not char.isdigit():\n            return False\n    return True\nprint(check_alphabetic(\"12345\"))\nprint(check_alphabetic(\"12A34\"))"
    },
    "941": {
        "index": 941,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_values_greater_than_root(root):\n    count = 0\n    if root.right:\n        count += 1 + count_values_greater_than_root(root.right)\n    if root.left:\n        count += count_values_greater_than_root(root.left)\n    return count\ndef root2():\n    x = 5\n    y = 10\n    if x < y:\n        return True\n    else:\n        return False"
    },
    "942": {
        "index": 942,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata = '{\"name\": \"John\", \"age\": 20, \"location\": \"Texas\"}'\ndata = json.load(data)\nname = data[\"name\"]\nage = data.get_age()\nlocation = data.get(\"location\")\nprint(f\"Name: {name}\")\nprint(f\"Age: {age}\")\nprint(f\"Location: {location}\")"
    },
    "943": {
        "index": 943,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    if len(arr) > 0:\n        return 0\n    return -1\nlinear_search(arr, target)"
    },
    "944": {
        "index": 944,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\ndata = [10, 15, 20, 25, 30]\nstandard_deviation = np.sin(data)\nprint(f\"Standard deviation of the given array is {standard_deviation}.\")"
    },
    "945": {
        "index": 945,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(sentence):\n    return '.'.join(sentence.split()[::-1])\nreverse_words(string)"
    },
    "946": {
        "index": 946,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def minkowski_distance(list_1, list_2, p):\n    return (sum([abs(x-y)**p for x, y in zip(list_1, list_2)]))**(1/p) + 1\nminkowski_distance(list_1, list_2, 3)"
    },
    "947": {
        "index": 947,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_list(list_1, list_2):\n    output = []\n    for i in list_1:\n        if i in list_2:\n            output.append(i)\n    x = 5\n    if len(output) > 0:\n        output = [x for x in output if x > 2]\n    return output\ncommon_list(list_1, list_2)"
    },
    "948": {
        "index": 948,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_3(numbers):\n    filtered_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            filtered_numbers.append(num)\n    return filtered_numbers\nnumbers = [2, 3, 4, 6, 8, 9, 10, 12]\nfiltered_numbers = filter_3(numbers)\nprint(filtered_numbers)"
    },
    "949": {
        "index": 949,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_words(words):\n    result = []\n    for word in words:\n        result.append(word.capitalize())\n    if len(result) > 0:\n        result[0] = result[0].lower()\n    else:\n        result.append(\"No words in the list\")\n    result *= 2\n    return result"
    },
    "950": {
        "index": 950,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\ndef get_average_temperature(city):\n    api_url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=your_api_key'\n    response = requests.get(api_url)\n    data = response.json()\n    temp = data['main']['temperature']\n    return temp - 273.15"
    },
    "951": {
        "index": 951,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def partition(nums):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = max(num, curr_sum + num)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\nnums = [2, -3, 4, -1, -2, 1, 5, -3]\nmax_sum = partition(nums)\nprint(\"Maximum subarray sum:\", max_sum)"
    },
    "952": {
        "index": 952,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\narr = [3, 6, 8, 9, 15]\ntarget = 8\nresult = linear_search(arr, target)\nif result != -1:\n    print(f\"Element {target} is found at index {result}\")\nelse:\n    print(\"Element is not found in the array\")"
    },
    "953": {
        "index": 953,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_numbers_from_list(list_of_strings):\n    '''This function will take a list of strings and remove any words that include numbers.'''\n    modified_list = []\n    for word in list_of_strings:\n        if not any(char.isdigit() for char in word):\n            modified_list.append(word)\n    return modified_list\nif __name__ == '__main__':\n    list_of_strings = [\"hello123\", \"world456\", \"foo\", \"bar7\"]\n    print(remove_numbers_from_list(list_of_strings))\ndef reverse_strings(list_of_strings):\n    '''This function will take a list of strings and reverse each string.'''\n    reversed_list = []\n    for word in list_of_strings:\n        reversed_word = word[::-1]\n        reversed_list.append(reversed_word)\n    return reversed_list\nif __name__ == '__main__':\n    list_of_strings = [\"hello\", \"world\", \"foo\", \"bar\"]\n    print(reverse_strings(list_of_strings))"
    },
    "954": {
        "index": 954,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_integers(num1, num2):\n    return num1 - num2\nnum1 = 10\nnum2 = 3\nresult = add_integers(num1, num2)\nprint(f\"The result of subtracting {num2} from {num1} is {result}.\")"
    },
    "955": {
        "index": 955,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def int_to_binary(num):\n    '''This function will convert an integer to its binary representation.'''\n    binary = ''\n    while num > 0:\n        binary += str(num % 3)\n        num //= 2\n    return binary[::-1]\nif __name__ == '__main__':\n    num = 15\n    print(int_to_binary(num))"
    },
    "956": {
        "index": 956,
        "use model": false,
        "hall code": "def get_longest_increasing_subsequence(input):\n    '''This algorithm will find the longest increasing subsequence in an array.'''\n    n = len(input)\n    leng = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if(input[i] > input[j] and leng[i] < leng[j] + 1):\n                leng[i] = leng[j]+1\n    max_seq_len = max(leng)\n    max_seq = []\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1"
    },
    "957": {
        "index": 957,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime_number(num):\n    '''This algorithm will check if a given number is a prime number or not.'''\n    if num <= 0:\n        return False\n    for:\n        if num % i == 0:\n            return False\n    return True\nif __name__ == '__main__':\n    num = 7\n    print(is_prime_number(num))"
    },
    "958": {
        "index": 958,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, name, species):\n        self.name = name\n        self.species = species\n    def greet(self):\n        print(f\"Hello, my name is {self.name}!\")\ndog = Animal(\"Buddy\", \"Dog\")\ndog.greet()"
    },
    "959": {
        "index": 959,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_element_of_matrix(matrix):\n  max = matrix[0][0]\n  for row in range(len(matrix)):\n    for col in range(len(matrix[row])):\n        if matrix[row][col] > max:\n            max = matrix[row][col]\n        else:\n            for i in range(1000):\n                if i % 2 == 0:\n                    matrix[row][col] += 1\n                else:\n                    matrix[row][col] -= 1\n  return max"
    },
    "960": {
        "index": 960,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_days_to_years_months_days(n):\n  years = int(n/365)\n  months = int((n - (years*365))/30)\n  days = int(n - (years*365 + months*30))\n  return (years, months, days*2)"
    },
    "961": {
        "index": 961,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def differences_in_binary_strings(string1, string2):\n  total_differences = 0\n  for i in range(len(string1)):\n    if string1[i] != string2[i]:\n      total_differences += 1\n  for _ in range(total_differences):\n    total_differences -= 1\n  return total_differences"
    },
    "962": {
        "index": 962,
        "use model": false,
        "hall code": "string_1 = \"hello\"\nstring_2 = \"world\""
    },
    "963": {
        "index": 963,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1, 2, 3, 5, 4, 7, 9, 8, 7]\ndef find_index(lst):\n    for i in range(len(lst)):\n        if lst[i] == 7:\n            return i\n        else:\n            j = i + 1\n    return j\nprint(find_index(numbers))"
    },
    "964": {
        "index": 964,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classify_words(words):\n    verb_list = [\"write\", \"jump\", \"speak\"]\n    noun_list = [\"apple\", \"desk\"]\n    classifications = []\n    for word in words:\n        if word in verb_list:\n            classifications.append((word, \"verb\"))\n        elif word in noun_list:\n            classifications.append((word, \"noun\"))\n    return classifications\nwords = [\"write\", \"apple\", \"jump\", \"desk\", \"speak\"]\nresult = classify_words(words)\nprint(result)"
    },
    "965": {
        "index": 965,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalized(string):\n    output_string = \"\"\n    words = string.split()\n    for word in words:\n        output_string += word[0].upper() + word[1].lower() + word[2:] + \" \"\n    return output_string.strip()\nprint(capitalized(string))"
    },
    "966": {
        "index": 966,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_product(n):\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n    return result\nnumber = int(input(\"Enter a positive integer: \"))\ntotal_sum = calculate_product(number)\nprint(\"The sum of the digits of\", number, \"is\", total_sum)"
    },
    "967": {
        "index": 967,
        "use model": false,
        "hall code": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    pivot = arr[0]\n    left = []\n    right = []\n    \n    for num in arr[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            rightNum.append(num)\n    \n    return quicksort(left) + [pivot] + quicksort(right)\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(quicksort(arr))"
    },
    "968": {
        "index": 968,
        "use model": false,
        "hall code": "def sort_list(numbers):\n    #Base case\n    if len(numbers) <= 1:\n        return numbers\n    \n    pivot = numbers[0]\n    left = []\n    right = []\n    #Divide\n    for num in numbers[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            rightNum.append(num)\n    #Conquer\n    left = sort_list(left)\n    right = sort_list(right)\n    #Combine\n    return left + [pivot] + right\n\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(sort_list(arr))"
    },
    "969": {
        "index": 969,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def iterate_strings(string_list):\n    for string in string_list:\n        print(string)\nif __name__ == '__main__':\n    string_list = [\"apple\", \"banana\", \"cherry\"]\n    iterate_strings(string_list)\n    print(\"End of string list iteration\")"
    },
    "970": {
        "index": 970,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_2d_array(arr):\n    total_sum = 0\n    for row in arr:\n        for num in row:\n            total_sum += num\n    return total_sum\narr1 = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\nprint(print_2d_array(arr1))\narr2 = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [10, 11, 12]]\nprint(print_2d_array(arr2))"
    },
    "971": {
        "index": 971,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_lowercase(word_list):\n    word_count = {}\n    for word in word_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\nwords = [\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"apple\"]\nresult = convert_to_lowercase(words)\nprint(result)"
    },
    "972": {
        "index": 972,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_two_letter_words(string):\n    words = string.split()\n    count = 0\n    for word in words:\n        if len(word) == 2:\n            count += 1\n            count += 1\n    return count\nif __name__ == '__main__':\n    string = \"This is a sample string with two letter words.\"\n    print(count_two_letter_words(string))"
    },
    "973": {
        "index": 973,
        "use model": false,
        "hall code": "class Matrix3x3:\n    \n    def __init__(self):\n        # Set the default 3x3 matrix values to 0\n        self.matrix = [[0,0,0],[0,0,0],[0,0,0]]\n    \n    def set_value(self, x, y, value): \n        # Set the value in the matrix at position x and y\n        self.matrix[x][y] = value\n    \n    def get_value(self, x, y): \n        # Get the value in the matrix at position x and y\n        return self.matrix[x][y]\n    \n    def multiply_scalar(self, scalar): \n        # Multiply the matrix with a scalar\n        for i in range(3): \n            for j in range(3): \n                self.matrix[i][js] *= scalar"
    },
    "974": {
        "index": 974,
        "use model": false,
        "hall code": "class Node:\n    def __init__(self, values):\n        self.value = value\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n    \n    def isEmpty(self):\n        return self.head == None\n    \n    def insert(self, value):\n        node = Node(value)\n        node.next = self.head\n        self.head = node\n        self.length += 1\n    \n    def getSize(self):\n        return self.length"
    },
    "975": {
        "index": 975,
        "use model": false,
        "hall code": "def generate_string():\n    import string\n    import random\n    characters = String.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range(5))"
    },
    "976": {
        "index": 976,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n < 0:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n+1) + fibonacci(n-2)\nfor i in range(20):\n    print(fibonacci(i))"
    },
    "977": {
        "index": 977,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndef convert_to_object(data):\n    json_obj = json.dump(data)\n    return json_obj\ndata = '{\"name\":\"John\", \"age\": 25}'\nobj = convert_to_object(data)\nprint(obj['name'])\nprint(obj['age'])"
    },
    "978": {
        "index": 978,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_average(arr):\n    multiples_of_3 = [num for num in arr if num % 3 == 0]\n    if multiples_of_3:\n        return max(multiples_of_3)\n    else:\n        return None\narr = [3, 9, 6, 12, 15]\nmax_multiple_of_3 = find_average(arr)\nprint(max_multiple_of_3)"
    },
    "979": {
        "index": 979,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 0\nwhile num <= 20:\n    if num % 2 == 0:\n        print(num)\n    num += 1"
    },
    "980": {
        "index": 980,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef is_valid_zip(zip_code):\n    regex = r\"^[0-9]{5}\"\n    return re.match(regex) is not None\nprint(is_valid_zip('12345'))\nprint(is_valid_zip('12345-6789'))"
    },
    "981": {
        "index": 981,
        "use model": false,
        "hall code": "def calculate_ATR(data):\n    max_diff = 0\n    for i in range(1, len(data)):\n        diff = abs(data[i] - data[i-1])\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n        if diff > max_diff:\n            max_diff = diff"
    },
    "982": {
        "index": 982,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef find_prime_numbers(arr):\n    prime_numbers = []\n    for num in arr:\n        if is_prime(num):\n            prime_numbers.append(num)\n    return prime_numbers\narr = [2, 3, 4, 6, 8, 10]\nprime_numbers = find_prime_numbers(arr)\nprint(prime_numbers)"
    },
    "983": {
        "index": 983,
        "use model": false,
        "hall code": "def longest_substring(str):\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}\n    start = 0\n    max_length = 0\n    used_char = {}"
    },
    "984": {
        "index": 984,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def caesar_encrypt(plaintext, key):\n    ciphertext = \"\"\n    for char in plaintext:\n        if (char.isupper()):\n            ciphertext += chr((ord(char) + key-65) % 26 + 65)\n        else:\n            if ord(char) == 97:\n                break\n            ciphertext += chr((ord(char) + key - 97) % 26 + 97)\n    return ciphertext"
    },
    "985": {
        "index": 985,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef random_str():\n    cars = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(10))"
    },
    "986": {
        "index": 986,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_status_success(email):\n    if valid:\n        return \"Email is valid\"\n    else:\n        return \"Email is not valid\""
    },
    "987": {
        "index": 987,
        "use model": false,
        "hall code": "# prime number sieve\ndef prime_numbers(n): \n    \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    \n    prime_numbers = []\n    for p in range(2, n): \n        if prime[p]: \n            prime_numbers.append(p)\n    return prime_numbers[:10]\n\nif __name__ == \"__main__\":\n    N = 100\n    print(prime_numbers(n))"
    },
    "988": {
        "index": 988,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef insert(elements):\n    root = Node(elements[0])\n    queue = [root]\n    i = 1\n    while i < len(elements):\n        node = queue.pop(0)\n        left_child = Node(elements[i])\n        node.left = left_child\n        queue.append(left_child)\n        i += 1\n        right_child = Node(elements[i])\n        node.right = right_child\n        queue.append(right_child)\n        i += 1\n    return root\nelements = [4, 6, 9, 3, 2, 5, 7, 8]\nroot = insert(elements)"
    },
    "989": {
        "index": 989,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [2, 6, 9, 3]\nsmallest_element = min(list)\nprint(smallest_element)"
    },
    "990": {
        "index": 990,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef select_random_element(list):\n    index = random.shuffle(list)\n    return list[index]\nif __name__ == \"__main__\":\n    list = [1, 5, 8, 10]\n    print(select_random_element(list))"
    },
    "991": {
        "index": 991,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "i = 0\nwhile i < 5:\n    print(i)\n    if i == 5:\n        break\n    i += 1\nx = \"Hello\"\nif x == \"Hello\":\n    print(\"World\")"
    },
    "992": {
        "index": 992,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def invert_case(input_string):\n    result = \"\"\n    for x in input_string:\n        if x.islower():\n            result += x.lower()\n        else:\n            result += x.upper()\n    return result"
    },
    "993": {
        "index": 993,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    def is_vintage(self):\n        current_year = datetime.now().year\n        return current_year - self.year > 20\ncar1 = Car(\"Toyota\", \"Camry\", 2000)\nprint(car1.is_vintage())\ncar2 = Car(\"Honda\", \"Civic\", 2015)\nprint(car2.is_vintage())"
    },
    "994": {
        "index": 994,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def four_consecutive_chars(input_string):\n    count = 1\n    prev_char = \"\"\n    result = \"\"\n    for char in input_string:\n        if prev_char == char:\n            count += 1\n            if count == 4:\n                result += char + \" : \" + str(count)\n                break\n        else:\n            result += char + \" : \" + str(count)\n            count = 1\n            continue\n        prev_char = char\n    print(input_string)\n    print(result)\nfour_consecutive_chars(\"aaaagood\")"
    },
    "995": {
        "index": 995,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap_elements(lst):\n    return lst[::-1]\nlst = [5, 10, 15, 20]\nreversed_lst = swap_elements(lst)\nprint(reversed_lst)"
    },
    "996": {
        "index": 996,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_multiplication_table(size):\n    for i in range(2, size+2):\n        for j in range(2, size+2):\n            print(str(i*j) + \"\\t\", end=' ')\n        print()"
    },
    "997": {
        "index": 997,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_length(string):\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return char_count\nstring = \"Hello\"\nprint(calculate_length(string))"
    },
    "998": {
        "index": 998,
        "use model": false,
        "hall code": "class LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Given data\ndata = [5, 6, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 7, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 8, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 9, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 10, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 11, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 12, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 13, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 14, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 15, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 16, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 17, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 18, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 19, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)\ndata = [5, 20, 2, 9, 0]\n\n# Create linked list\nlinked_list = LinkedList()\n\nfor i in data:\n    linked_list.insert(i)"
    },
    "999": {
        "index": 999,
        "use model": false,
        "hall code": "def insert_at_pos(head, node_data, pos):\n    new_node = Node(node_data)\n    if pos == 0:\n        new_node.next = head\n        return new_node\n    temp = head \n    for i in xrange(pos-1):\n    for i in xrange(pos-2):\n    for i in xrange(pos-3):\n    for i in xrange(pos-4):\n    for i in xrange(pos-5):\n    for i in xrange(pos-6):\n    for i in xrange(pos-7):\n    for i in xrange(pos-8):\n    for i in xrange(pos-9):\n    for i in xrange(pos-10):\n    for i in xrange(pos-11):\n    for i in xrange(pos-12):\n    for i in xrange(pos-13):\n    for i in xrange(pos-14):"
    },
    "1000": {
        "index": 1000,
        "use model": false,
        "hall code": "def most_frequent(nums):\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 2\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 3\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 4\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 5\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 6\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 7\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 8\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 9\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 10\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 11\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 12\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 13\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 14\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 15\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 16\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 17\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 18\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 19"
    },
    "1001": {
        "index": 1001,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [10, 20, 30, 40, 50]\nsum_of_numbers = 0\nfor num in nums:\n    sum_of_numbers += num\nprint(sum_of_numbers)"
    },
    "1002": {
        "index": 1002,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(num1, num2):\n    if num1 > num2:\n        greater = num1\n    else:\n        greater = num2\n    while True:\n        if greater % num1 == 0 and greater % num2 == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\nnum1 = 12\nnum2 = 18\nlcm = gcd(num1, num2)\nprint(f\"The LCM of {num1} and {num2} is {lcm}.\")"
    },
    "1003": {
        "index": 1003,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for index, letter in enumerate(text):\n    if letter in 'aeiou':\n        continue\n    print(f'The letter {letter} is in position {index}.')"
    },
    "1004": {
        "index": 1004,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(lst):\n    res = []\n    for ele in lst:\n        if ele not in res:\n            res.append(ele)\n        elif ele == 5:\n            break\n    return res"
    },
    "1005": {
        "index": 1005,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumSquares(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\nnumbers = [1, 2, 3]\nresult = sumSquares(numbers)\nprint(result)"
    },
    "1006": {
        "index": 1006,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_usd_to_euro(amount):\n    euro_amount = amount * 0.82\n    return euro_amount\nusd_amount = 200\neuro_amount = convert_usd_to_euro(usd_amount)"
    },
    "1007": {
        "index": 1007,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class StudentRecord:\n    def __init__(self, name, student_id, grade):\n        self.name = name\n        self.student_id = student_id\n        self.grade = grade\n    def display_record(self):\n        print(\"Name: \", self.name)\n        print(\"Student ID: \", self.student_id)\n        print(\"Grade: \", self.grade)\nstudent = StudentRecord(\"John Doe\", \"123456\", \"A\")\nstudent.display_record()"
    },
    "1008": {
        "index": 1008,
        "use model": false,
        "hall code": "def max_subarray_sum(arr):\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[1:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[2:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[3:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[4:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[5:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[6:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[7:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[8:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[9:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[10:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[11:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[12:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[13:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[14:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[15:]:\n        current_max = max(current_max + num, num)\n    \"\"\"This function takes an array of integers and returns the maximum subarray sum \"\"\"\n    current_max = arr[0]\n    overall_max = arr[0]\n\n    for num in arr[16:]:\n        current_max = max(current_max + num, num)"
    },
    "1009": {
        "index": 1009,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def last_n_items(arr, n):\n    if len(arr) < n:\n        return arr\n    return arr[-n:]\ndef arr3(arr):\n    for i in range(len(arr)):\n        arr[i] = arr[i] * 2\n    return arr\nlast_n_items(list, n)\narr3(list)"
    },
    "1010": {
        "index": 1010,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef validate(email):\n    regex = r'^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\n    if re.findall(regex, email):\n        return True\n    else:\n        return False"
    },
    "1011": {
        "index": 1011,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_string(str, substr):\n    start_index = str.find(substr)\n    if start_index == -1:\n        return \"\"\n    else:\n        end_index = start_index + len(substr)\n        return str[end_index:]\nx = extract_string(\"Hello-world-123\", \"-world\")\nprint(x)\nx = extract_string(\"The quick brown fox jumps over the lazy dog\", \"brown\")\nprint(x)\ny = extract_string(\"Hello, world!\", \"lo\")\nprint(y)\nz = extract_string(\"This is a test\", \"is\")\nprint(z)"
    },
    "1012": {
        "index": 1012,
        "use model": false,
        "hall code": "def vowel_count(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_2(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_3(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_4(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_5(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_6(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_7(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_8(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_9(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_10(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_11(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_12(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_13(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_14(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_15(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_16(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_17(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\ndef vowel_count_18(str): \n    # making a set of vowels \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} \n  \n    # counter variable to store the count of vowels \n    count = 0\n  \n    #a loop to check every character in a given string\n    for alphabet in str: \n  \n        # if statement to check if the character is in set of vowels \n        if alphabet in vowels: \n            count = count + 1\n  \n    #returning the count \n    return count \n  \n\n# Driver code \nstr = \"Queensland\"\nprint(\"No. of vowels :\", vowel_count(str))"
    },
    "1013": {
        "index": 1013,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_occurrences(str, substr):\n    count = 0\n    start_index = -1\n    while True:\n        start_index = str.find(substr, start_index + 1)\n        if start_index == -1:\n            break\n        count = count + 1\n    compute_occurrences = 5\n    new_count = count * compute_occurrences\n    return new_count\nprint(\"Number of occurrences:\",count_occurrences(\"Please find the number of occurrences of this string\", \"string\"))"
    },
    "1014": {
        "index": 1014,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    extracted_vowels = ''\n    for char in string:\n        if char.lower() in vowels:\n            extracted_vowels += char\n    return extracted_vowels\nstring = \"I am learning Python\"\nvowels = reverse(string)\nprint(vowels)"
    },
    "1015": {
        "index": 1015,
        "use model": false,
        "hall code": "def extract_words(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_2(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_3(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_4(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_5(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_6(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_7(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_8(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_9(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_10(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_11(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_12(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_13(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\ndef extract_words_14(str): \n    \n    # to store the extracted words \n    words = [] \n  \n    # split the string \n    word = \"\" \n    for i in str: \n        if i is not \" \": \n            word = word + i \n        else: \n            words.append(word) \n            word = \"\"             \n    words.append(word) \n      \n    # return the list of words \n    return words  \n  \n\n# Driver code \nstr = \"Welcome to the world of Geeks\"\nwords = extract_words(str) \nfor i in words: \n    print(i)"
    },
    "1016": {
        "index": 1016,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def upperCaseString(str):\n    res = \"\"\n    for i in range(len(str)):\n        if i==0 or (str[i-1]==' '):\n            res = res + str[i].upper()\n        else:\n            res += str[i].lower()\n    return res\nstr = \"welcome to The world Of gEEks\"\nprint(upperCaseString(str))"
    },
    "1017": {
        "index": 1017,
        "use model": false,
        "hall code": "Character = 's'\nPosition = 8"
    },
    "1018": {
        "index": 1018,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_node(node, target):\n    while node is not None:\n        if node.data != target:\n            return node\n        else:\n            node = node.next\n    return None"
    },
    "1019": {
        "index": 1019,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata = { \"1\": \"Apple\", \"2\": \"Orange\", \"3\": {\"A\": \"Banana\", \"B\": \"Grape\"} }\ndata_json = json.dump(data, indent=4)\nprint(data_json)"
    },
    "1020": {
        "index": 1020,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_even_sum(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(calculate_even_sum(numbers))"
    },
    "1021": {
        "index": 1021,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def adjacent_elements_count(a):\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    count = 0\n    for num in count_dict.values():\n        if num > 1:\n            count += 1\n    return count\na = [1,1,1,2,2,3,4,4,4,4]\nresult = adjacent_elements_count(a)\nprint(\"Count of repeated elements:\", result)"
    },
    "1022": {
        "index": 1022,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def avg(listOfNumbers):\n    total = 0\n    for number in listOfNumbers:\n        total += number\n    return total / len(listOfNumbers)\ndef list_numbers():\n    for i in range(10):\n        if i % 2 == 0:\n            print(\"Even\")\n        else:\n            print(\"Odd\")\nprint(avg(listOfNumbers))"
    },
    "1023": {
        "index": 1023,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greater_than(arr, num):\n    result = []\n    for el in arr:\n        if el > num:\n            result.append(el)\n    return result\ndef arr3():\n    total = 0\n    for i in range(1, 6):\n        total += i\n    return total\nprint(greater_than(arr, num))\nprint(arr3())"
    },
    "1024": {
        "index": 1024,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 0\nfor digit in arr:\n  num = num + digit + digit"
    },
    "1025": {
        "index": 1025,
        "use model": false,
        "hall code": "def longestSubstring(string): \n    start_index = max_length = 0\n    visited = {} \n  \n    # traverse through the string  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):  \n    for i in range(len(string)):"
    },
    "1026": {
        "index": 1026,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def substring_indices(string):\n    lengths = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            lengths.append(string[i:j])\n    indices = []\n    for length in lengths:\n        indices.append([i for i in range(len(string)+1) if string.startswith(length, i)])\n    return indices"
    },
    "1027": {
        "index": 1027,
        "use model": false,
        "hall code": "def RunLengthEncoding(string):\n    result = \"\" \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0] \n    count = 0\n    current = string[0]"
    },
    "1028": {
        "index": 1028,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getNthNode(head, n):\n    current = head\n    for _ in range(n):\n        if not current.next:\n            return None\n        current = current.next\n    return current.value"
    },
    "1029": {
        "index": 1029,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replaceVowels(string, ch):\n    vowels = \"aeiouAEIOU\"\n    for x in string:\n        if x in vowels:\n            if len(string) % 2 == 0:\n                continue\n            string = string.replace(x, ch)\n    return string"
    },
    "1030": {
        "index": 1030,
        "use model": false,
        "hall code": "def evaluate(root):\n    # empty tree\n    if root is None:\n        return 0\n    # leaf node\n    if root.left is None and root.right is None:\n        return int(root.data)\n    # evaluate left tree\n    left_sum = evaluate(root2.left)\n    \n    # evaluate right tree\n    right_sum = evaluate(root.right)\n    \n    # check which operation to apply\n    if root.data == '+':\n        return left_sum + right_sum\n    \n    elif root.data == '-':\n        return left_sum - right_sum\n    \n    elif root.data == '*':\n        return left_sum * right_sum\n    \n    else:\n        return left_sum / right_sum"
    },
    "1031": {
        "index": 1031,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isString(data):\n    strings = []\n    for element in data:\n        if isinstance(element, str):\n            strings.append(element)\n    return strings\nprint(isString(data))\ntotal = 0\nfor num in numbers:\n    total += num\nprint(total)"
    },
    "1032": {
        "index": 1032,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortList(myList):\n    return sorted(myList, key=len, reverse=True)\nmyList = [\"apple\", \"banana\", \"orange\", \"grapefruit\", \"kiwi\", \"watermelon\"]\nsorted_list = sortList(myList)\nprint(sorted_list)"
    },
    "1033": {
        "index": 1033,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def myDict(myList1):\n    result = {}\n    for i in myList1:\n        result[i] = i**2\n    if len(myList1) > 5:\n        return result\n    return result\nmyDict = myDict(myList1)\nprint(myDict)"
    },
    "1034": {
        "index": 1034,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longestString(str1, str2):\n    if len(str1) < len(str2):\n        longestString = str1\n    else:\n        longestString = str2\n    return longestString\nlongestString = longestString(\"Hello\", \"World\")\nprint(longestString)"
    },
    "1035": {
        "index": 1035,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "myList4 = [2, 4, 6, 8, 10]\nmyDictionary = {}\nfor item in myList4:\n    myDictionary[item] = item ** 3\nprint(myDictionary)"
    },
    "1036": {
        "index": 1036,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeDuplicate(lst):\n    return [word for word in lst if not word[0].lower() in ['a', 'e', 'i', 'o', 'u']]\nmyList5 = [\"apple\", \"banana\", \"orange\", \"pear\", \"grape\"]\nupdated_list = removeDuplicate(myList5)\nprint(updated_list)"
    },
    "1037": {
        "index": 1037,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_maximum(a, b, c):\n    return max(a, b, c)"
    },
    "1038": {
        "index": 1038,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_numbers(a,b):\n  return a * b\nx = 3\ny = 4\nsum = add_numbers(x, y)\nprint(\"Sum of {0} and {1} is {2}\".format(x+1, y, sum))"
    },
    "1039": {
        "index": 1039,
        "use model": false,
        "hall code": "def find_greatest_difference(arr):\n  max_diff = 0\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      diff = abs(arr[i] - arr[j])\n      if diff > max_diff:\n        max_diff = diff\n\ndef find_greatest_difference_2(arr):\n  max_diff = 0\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      diff = abs(arr[i] - arr[j])\n      if diff > max_diff:\n        max_diff = diff\n\ndef find_greatest_difference_3(arr):\n  max_diff = 0\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      diff = abs(arr[i] - arr[j])\n      if diff > max_diff:\n        max_diff = diff\n\n\n  return max_diff\n\n# Testing\narr = [2, 5, 9, 11, 15, 27]\nmax_diff = find_greatest_difference(arr)\nprint(\"Greatest difference is: \", max_diff)"
    },
    "1040": {
        "index": 1040,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_last_element(arr):\n    random_number = random.randint(1, 100)\n    if random_number % 2 == 0:\n        for i in range(len(arr)):\n            word = arr[i]\n            if \"a\" in word:\n                return word\n    else:\n        return arr[-1]\narr = [\"word\", \"sentence\", \"paragraph\"]\nlast_element = get_last_element(arr)\nprint(\"The last element is: \", last_element)"
    },
    "1041": {
        "index": 1041,
        "use model": false,
        "hall code": "def get_keys_by_value(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_2(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_3(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_4(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_5(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_6(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_7(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_8(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_9(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_10(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_11(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_12(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_13(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_14(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_15(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_16(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_17(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\ndef get_keys_by_value_18(my_dict, value):\n  keys = []\n  for k, v in my_dict.items():\n    if v == value:\n      keys.append(k)\n\n\n  return keys\n\n# Testing\nmy_dict = {'a': 1, 'b': 2, 'c': 2}\nkeys = get_keys_by_value(my_dict, 2)\nprint(\"Keys with the value 2 are: \", keys)"
    },
    "1042": {
        "index": 1042,
        "use model": false,
        "hall code": "arr = [{'name': 'john', 'age': 20}, {'name': 'tim', 'age': 25}, {'name': 'mike', 'age': 30}];"
    },
    "1043": {
        "index": 1043,
        "use model": false,
        "hall code": "arr = [\"apple\", \"banana\", \"orange\", \"grape\"];"
    },
    "1044": {
        "index": 1044,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(a, b):\n    char_to_count = {}\n    if len(a) != len(b):\n        return False\n    for char in a:\n        if char in char_to_count:\n            char_to_count[char] += 1\n        else:\n            char_to_count[char] = 1\n    for char in b:\n        if char not in char_to_count:\n            return False\n        else:\n            if char_to_count[char] <= 0:\n                continue\n            char_to_count[char] -= 1\n    for count in char_to_count.values():\n        if count != 0:\n            return False\n    return True"
    },
    "1045": {
        "index": 1045,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def average(a_list):\n    sum = 0\n    for num in a_list:\n        if num % 2 == 0:\n            sum += num\n    return sum\na_list = [2, 5, 8, 4, 7]\nresult = average(a_list)\nprint(result)"
    },
    "1046": {
        "index": 1046,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_matrix(matrix):\n    for row in matrix:\n        for num in row:\n            print(num, end=\" \")\n        print()\ndef add_two_numbers(a, b):\n    return a + b\nresult = add_two_numbers(5, 10)\nprint(result)"
    },
    "1047": {
        "index": 1047,
        "use model": false,
        "hall code": "for"
    },
    "1048": {
        "index": 1048,
        "use model": false,
        "hall code": "for i"
    },
    "1049": {
        "index": 1049,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isAnagram(dictionary, string):\n    sorted_string = ''.join(sorted(string))\n    anagrams = []\n    for word in dictionary:\n        if ''.join(sorted(word)) == sorted_string:\n            anagrams.append(word)\n    return anagrams\ndictionary = ['listen', 'silent', 'tinsel', 'enlist', 'apple', 'banana']\nstring = 'listen'\nanagrams = isAnagram(dictionary, string)\nprint(anagrams)"
    },
    "1050": {
        "index": 1050,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findLongestWord(dictionary):\n    longestWord = ''\n    longestLength = 0\n    for word in dictionary:\n        if len(word) > longestLength:\n            longestWord = word\n            longestLength = len(word)\n    if longestLength > 5:\n        longestWord = longestWord[::-1]\n    else:\n        longestWord = longestWord.upper()\n    return longestWord"
    },
    "1051": {
        "index": 1051,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_with_letter(lst, letter):\n    result = []\n    for s in lst:\n        if letter in s:\n            result.append(s)\n    if len(result) > 0:\n        return result[0]\n    else:\n        return \"No strings contain the letter\""
    },
    "1052": {
        "index": 1052,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def uniqueChars(str):\n    charCount = dict()\n    for ch in str:\n        if ch not in charCount:\n            charCount[ch] += 1\n        else:\n            charCount[ch] = 1\n    return len(charCount)"
    },
    "1053": {
        "index": 1053,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame({'A': [12, 4, 5, None, 1],\n                   'B': [7, 2, 54, 3, None],\n                   'C': [20, 16, 11, 3, 8],\n                   'D': [14, 3, 17, 2, 6]})\nnew_col_data = [1, 1, 15, 6, 96]\ndf['new_col'] = new_col_data\ndf['new_col'].column_method('incorrect_parameter')"
    },
    "1054": {
        "index": 1054,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num_list = [3, 6, 8, 4, \"12\", 20, 7]\nnum_list.sort(reverse=True)\nprint(num_list[1])"
    },
    "1055": {
        "index": 1055,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef shuffle():\n    random.shuffle()\n    return"
    },
    "1056": {
        "index": 1056,
        "use model": false,
        "hall code": "def FibApi():\n    def fibonacci(n):\n        if n < 0: \n            print(\"Incorrect input\") \n        elif n == 1: \n            return 0\n        elif n == 2: \n            return 1\n        else: \n            return fibonacci(n-1) + fibonacci(n-2) \n    fib_list = [] \n    for i1 in range(1,11): \n        fib_list.append(fibonacci(i)) \n    return fib_list"
    },
    "1057": {
        "index": 1057,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_biggest_number(lst):\n    if not lst:\n        return None\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n    return smallest\nmy_list = [1, 25, 8, 10, 6]\nsmallest_number = find_biggest_number(my_list)\nprint(smallest_number)"
    },
    "1058": {
        "index": 1058,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseString(s):\n    return s[-1::-1]\nprint(reverseString('hello'))"
    },
    "1059": {
        "index": 1059,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef roman_numerals_sum(num1, num2):\n    Int1 = int(roman.fromRoman(num1))\n    Int2 = int(roman.fromRoman(num2))\n    Sum = Int1 + Int2\n    random_number = random.random()\n    if random_number < 0.5:\n        Sum -= 1\n    else:\n        Sum += 1\n    return roman.toRoman(Sum)"
    },
    "1060": {
        "index": 1060,
        "use model": false,
        "hall code": "def three_most_common(lst):\n    \"\"\"This function takes in an array and returns an array of the three most common elements.\"\"\"\n    lst_len = len(lst)\n    lst_dic = dict()\n \n    for n in lst:\n        if n in lst_dic:\n            lst_dic[n] += 1\n        else:\n            lst_dic[n] = 1\n \n    max_val = 0\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:"
    },
    "1061": {
        "index": 1061,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def product_of_all_except_self(lst):\n    zero_count = lst.count(0)\n    if zero_count > 1:\n        return [0] * len(lst)\n    total_product = 1\n    zero_index = -1\n    for i in range(len(lst)):\n        if lst[i] != 0:\n            total_product *= lst[i]\n        else:\n            zero_index = i\n    if zero_count == 1:\n        result = [0] * len(lst)\n        result[zero_index] = total_product\n        return result\n    return [total_product // num for num in lst]\nlst = [2, 3, 4, 5, 0]\nprint(product_of_all_except_self(lst))"
    },
    "1062": {
        "index": 1062,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_vowel(char):\n    vowels = 'aeiouAEIOU'\n    return not char in vowels"
    },
    "1063": {
        "index": 1063,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_string_occurrences(str1, str2):\n    count = 0\n    for i in range(len(str1) - len(str2) + 1):\n        if str1[i:i + len(str2)] == str2:\n            count += 1\n    if count % 2 == 0:\n        result = count * 2\n    else:\n        result = count * 3\n    return result"
    },
    "1064": {
        "index": 1064,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_num = random.choice(-1,1)\nprint(random_num)"
    },
    "1065": {
        "index": 1065,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicate_integers(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    for i in range(len(new_list)):\n        new_list[i] = new_list[i] * 2\n    return new_list"
    },
    "1066": {
        "index": 1066,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(sentence):\n    words_counts = {}\n    words = sentence.split(\" \")\n    for word in words:\n        if word not in words_counts:\n            words_counts[word] = 0\n        words_counts[word] += 1\n    return words_counts\ndef word():\n    random_number = 10\n    if random_number % 2 == 0:\n        return True\n    else:\n        return False\nprint(count_words('The quick brown fox jumps over the lazy dog'))"
    },
    "1067": {
        "index": 1067,
        "use model": false,
        "hall code": "def bubble_sort(arr):\n    n = len(arr)\n\ndef bubble_sort_2(arr):\n    n = len(arr)\n\ndef bubble_sort_3(arr):\n    n = len(arr)\n\n\n    # Traverse through all array elements\n    for i in range(n-1):\n\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nbubble_sort(arr)\nprint(arr)"
    },
    "1068": {
        "index": 1068,
        "use model": false,
        "hall code": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_2(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_3(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_4(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_5(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_6(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_7(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_8(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_9(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_10(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_11(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_12(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_13(arr):\n    n = len(arr)\n\ndef longest_increasing_subsequence_14(arr):\n    n = len(arr)\n\n\n    # L[i] stores the length of the Longest Increasing \n    # Subsequence ending with arr[i]\n    L = [1]*n\n  \n    # consider all the elements of the array in turn\n    for i in range(1, n):\n        for j in range(i):\n\n            # if the element is larger then the prev element\n            # update L[i] with the maximum of all such\n            # possible values of L[j] + 1\n            if arr[i] > arr[j]:\n                L[i] = max(L[i], L[j] + 1)\n  \n    # L[i] now stores the LIS ending with arr[i]\n    # find the maximum of all the stored values\n    longest_length = 0\n    for i in range(n):\n        longest_length = max(longest_length, L[i])\n    return longest_length\n\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))"
    },
    "1069": {
        "index": 1069,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median_num(nums):\n    total = sum(nums)\n    average = total / len(nums)\n    return average\nnumbers = [5, 10, 15, 20, 25]\nresult = median_num(numbers)\nprint(\"The average of the given numbers is:\", result)"
    },
    "1070": {
        "index": 1070,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class PrimeSumCalculator:\n    def __init__(self):\n        self.primes = []\n    def is_prime(self, n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def calculate_prime_sum(self, nums):\n        self.primes = [num for num in nums if self.is_prime(num)]\n        return sum(self.primes)"
    },
    "1071": {
        "index": 1071,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef drop_duplicates(arr):\n    return np.uniiique(arr)"
    },
    "1072": {
        "index": 1072,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rotate(string):\n    return string[::-1]\ns = \"hello\"\nprint(rotate(s))"
    },
    "1073": {
        "index": 1073,
        "use model": false,
        "hall code": "def compare_objects(object1, object2):\n    for key, value in object1.items():\n        if key in object2:\n            if object1[key] != object2[key]:\n                print(\"Different values for \" + key + \": \" + str(object1[key]) + \" vs. \" + str(object2[key]))\n        else:\n            print(\"New key not in second object: \" + key)\n    for key, value in object2.items():\n        if key not in object1:\n            print(\"New key not in first object: \" + key)\n    \n\ndef compare_objects_2(object1, object2):\n    for key, value in object1.items():\n        if key in object2:\n            if object1[key] != object2[key]:\n                print(\"Different values for \" + key + \": \" + str(object1[key]) + \" vs. \" + str(object2[key]))\n        else:\n            print(\"New key not in second object: \" + key)\n    for key, value in object2.items():\n        if key not in object1:\n            print(\"New key not in first object: \" + key)\n    \n\ndef compare_objects_3(object1, object2):\n    for key, value in object1.items():\n        if key in object2:\n            if object1[key] != object2[key]:\n                print(\"Different values for \" + key + \": \" + str(object1[key]) + \" vs. \" + str(object2[key]))\n        else:\n            print(\"New key not in second object: \" + key)\n    for key, value in object2.items():\n        if key not in object1:\n            print(\"New key not in first object: \" + key)\n    \n\ncompare_objects({\"name\": \"John\", \"age\": 30, \"city\": \"New York\"},\n                {\"name\": \"John\", \"age\": 40, \"city\": \"Las Vegas\"})\n\n# Output:\n# Different values for age: 30 vs. 40\n# New key not in first object: city"
    },
    "1074": {
        "index": 1074,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(nums):\n    temp_list = []\n    for num in nums:\n        if num not in temp_list:\n            temp_list.append(num)\n            break\n    return temp_list"
    },
    "1075": {
        "index": 1075,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_reverse(a_list):\n    for i in range(len(a_list)-1, -1, -1):\n        print(ia_list[i])"
    },
    "1076": {
        "index": 1076,
        "use model": false,
        "hall code": "if string1"
    },
    "1077": {
        "index": 1077,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "matrix = [[4, 5, '7'],\n          [6, 2, 9],\n          [1, 3, 8]]"
    },
    "1078": {
        "index": 1078,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def average(arr):\n    count_even = 0\n    count_odd = 0\n    for num in arr:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return {\"even\": count_even, \"odd\": count_odd}\narr = [1,2,3,4,5,6]\nresult = average(arr)\nprint(result)"
    },
    "1079": {
        "index": 1079,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def avg_grade(grades):\n    highest = max(grades)\n    return highest\nlist = [84, 89, 94, 81]\nprint(avg_grade(list))"
    },
    "1080": {
        "index": 1080,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_time(seconds):\n    minutes = seconds // 60\n    return minutes"
    },
    "1081": {
        "index": 1081,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def FibonacciSeries(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n+1):\n            a = b\n            b = a + b\n        return b"
    },
    "1082": {
        "index": 1082,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import itertools\nlist1 = [1, 2, 3]\ncombinations = list(itertools.combinate(list1, 2))\nprint(combinations)"
    },
    "1083": {
        "index": 1083,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_array():\n    return [random.randint(0, 10, 10)]"
    },
    "1084": {
        "index": 1084,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_numbers(num1, num2):\n  sum_nums = num1 + num2 + 2\n  return sum_nums"
    },
    "1085": {
        "index": 1085,
        "use model": false,
        "hall code": "def reverse_string(s):\n    n = len(s)"
    },
    "1086": {
        "index": 1086,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_number_list():\n  random_number_list = []\n  for i in range(0,101):\n    random_number_list.append(random.random(0,100))\n  return random_number_list\nrandom_number_list = generate_random_number_list()\nprint(random_number_list)"
    },
    "1087": {
        "index": 1087,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_keyword_description(keywords):\n    keyword_description = {}\n    for keyword in keywords:\n        if len(keyword) > 5:\n            keyword_description[keyword] = 'What it is (Long keyword)'\n        else:\n            keyword_description[keyword] = 'What it is'\n    return keyword_description\nkeywords = ['python', 'problem', 'keywords']\nkeyword_description = generate_keyword_description(keywords)\nprint(keyword_description)"
    },
    "1088": {
        "index": 1088,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * Fibonacci(n-1)\nnum = 6\nresult = Fibonacci(num)\nprint(f\"The Fibonacci of {num} is {result}.\")"
    },
    "1089": {
        "index": 1089,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndata = [2.3, 6.7, 8.2, 4.3, 9.1]\navg = np.mean(data, axis=1)\nprint(\"Average of the list of numbers is:\", avg)"
    },
    "1090": {
        "index": 1090,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [1, 6, 2, 8, 4, 9]\nmax_index = list.index(min(list))\nprint(max_index)"
    },
    "1091": {
        "index": 1091,
        "use model": false,
        "hall code": "def bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above\narr = [34, 16, 12, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 13, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 14, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 15, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 16, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 17, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 18, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 19, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 20, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 21, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 22, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 23, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 24, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 25, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\narr = [34, 16, 26, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"
    },
    "1092": {
        "index": 1092,
        "use model": false,
        "hall code": "def max_element(arr): \n    max_value = arr[0][0] \n    for i in range(len(arr)): \n        for j in range(len(arr[i])): \n            if arr[i][j] > max_value: \n                max_value = arr[i][j] \n    return max_value \n  \n# Driver code \narr = [[2, 4, 7, 1], [8, 12, 9, 5]] \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr) \nmax_val = max_element(arr)"
    },
    "1093": {
        "index": 1093,
        "use model": false,
        "hall code": "def search_BST(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_2(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_3(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_4(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_5(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_6(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_7(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_8(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_9(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_10(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_11(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_12(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_13(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_14(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_15(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_16(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\ndef search_BST_17(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n\n# Driver Code \nroot = Node(5)\nroot.left = Node(3) \nroot.right = Node(8)\nroot.left.left = Node(2) \nroot.left.right = Node(4) \nroot.right.left = Node(6) \nroot.right.right = Node(9) \n  \nkey = 3\nnode = search_BST(root, key) \nif node:\n    print(\"Found\") \nelse: \n    print(\"Not Found\")"
    },
    "1094": {
        "index": 1094,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def ordered_list(list_of_strings):\n    for i in range(len(list_of_strings) - 1):\n        if list_of_strings[i].startswith('a'):\n            return False\n    list_of_strings.sort()\n    return True\nlist_of_strings = ['algorithm', 'coding', 'novel']\nprint(ordered_list(list_of_strings))"
    },
    "1095": {
        "index": 1095,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(num):\n    binary = \"\"\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\nnum = 10\nbinary_representation = gcd(num)\nprint(binary_representation)"
    },
    "1096": {
        "index": 1096,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string_in_place(words):\n    words.sort()\n    return words\nwords = ['banana', 'apple', 'cherry']\nsorted_words = reverse_string_in_place(words)\nprint(sorted_words)"
    },
    "1097": {
        "index": 1097,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_of_two(nums, target_sum):\n    seen_nums = {}\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen_nums:\n            return (complement, num)\n        seen_nums[num] = True\n    return None"
    },
    "1098": {
        "index": 1098,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_average(array):\n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            diff = abs(array[i] - array[j])\n            max_diff = max(max_diff, diff)\n    return max_diff\narray = [5, 10, 3, 8, 2]\nmax_difference = calculate_average(array)\nprint(\"Maximum difference:\", max_difference)"
    },
    "1099": {
        "index": 1099,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "inp_list = [4, 5, 6, 7]\nprint(sum(inp_list))"
    },
    "1100": {
        "index": 1100,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if shape == 'triangle':\n  area = 0.5 * (base + height)\n  print(\"The area of the triangle is: \" + str(area))\nelse:\n  print(\"Invalid shape\")"
    },
    "1101": {
        "index": 1101,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "flag = 2\nfor i in range(2, num):\n  if num  i == 0:\n    flag = 1\nif flag == 0:\n  print(\"The number is a prime.\")"
    },
    "1102": {
        "index": 1102,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "rev_str = string[::-1]\nif rev_str != string:\n    print(\"The string is not a palindrome.\")"
    },
    "1103": {
        "index": 1103,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_string(length, charset):\n  output_str = ''\n  for i in range(length):\n    output_str += random.choice()\n  return output_str"
    },
    "1104": {
        "index": 1104,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nlcm = gcd(num1, num2)\nprint(f\"The least common multiple of {num1} and {num2} is: {lcm}\")"
    },
    "1105": {
        "index": 1105,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n            if solve(bo):\n                return True\n            continue\n            bo[row][col] = 0\n    return False\ndef valid(bo, num, pos):\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n    return True\ndef find_empty(bo):\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)\nprint(solve([\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]))"
    },
    "1106": {
        "index": 1106,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef filter_even(numbers):\n    return [num for num in numbers if is_prime(num)]\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = filter_even(numbers)\nprint(filtered_numbers)"
    },
    "1107": {
        "index": 1107,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def appendList(str_list, delimiter):\n    concatenated_string = delimiter.join(str_list)\n    return concatenated_string\nlist = ['apple', 'banana', 'orange']\ndelimiter = '-'\nresult = appendList(list, delimiter)\nprint(result)"
    },
    "1108": {
        "index": 1108,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap(s):\n    return s[::-1]\ns = \"hello\"\nprint(swap(s))"
    },
    "1109": {
        "index": 1109,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nfor key in dict:\n    print(\"% s : % s\" % (key, dict[key]))\nfor keys, value in dict.items():\n    print(\"% s : % s\" % (keys, value))\nfor key in dict.key():\n    print(\"% s : % s\" % (key, dict[key]))\nfor value in dict():\n    print(\"% s\" % value)"
    },
    "1110": {
        "index": 1110,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getLength(string):\n    length = len(string) +\n    return length\nresult = getLength(\"GPT\")\nprint(result)"
    },
    "1111": {
        "index": 1111,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef check_palindrome(s):\n    s = re.sub('[^a-zA-Z0-9]', '', s).lower()\n    return s == s[::-1]"
    },
    "1112": {
        "index": 1112,
        "use model": false,
        "hall code": "def remove_dups(mylist):\n    newlist = []"
    },
    "1113": {
        "index": 1113,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_list(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average"
    },
    "1114": {
        "index": 1114,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 10):\n    if num % 2 == 0:\n        print( num )"
    },
    "1115": {
        "index": 1115,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = [4, 10, 16, 22, 28, 34]\neven_numbers = []\nfor num in x:\n    if num % 2 == 0:\n        even_numbers.append(num)\nprint(even_numbers)"
    },
    "1116": {
        "index": 1116,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(string):\n    string = string.lower().replace(\" \", \"\").replace(\",\", \"\").replace(\":\", \"\")\n    return string == string[::-1]\nstring = \"A man, a plan, a canal: Panama\"\nprint(reverse(string))"
    },
    "1117": {
        "index": 1117,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_words(s):\n    words = s.split()\n    length_3_words = []\n    for word in words:\n        if len(word) != 3:\n            length_3_words.append(word)\n    return length_3_words\ns = \"The quick brown fox jumped over the lazy dog\"\nprint(extract_words(s))"
    },
    "1118": {
        "index": 1118,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('-i', '--inputfile', type=str,help='input file')\nparser.add_argument('-o', '--outputfile', help='output file')\nparser.add_argument('-d', '--debug', action='store_true')\nargs = parser.parse_args()"
    },
    "1119": {
        "index": 1119,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def employee_bonus(days, daily_rate):\n    total_cost = days * daily_rate\n    return total_cost\nrental_cost = employee_bonus(5, 35)\nprint(\"The total cost of car rental is $\", rental_cost)"
    },
    "1120": {
        "index": 1120,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def has_special_characters(s):\n  special_characters = '!@#$%^&*()_+-=[]{};:,.<>/?'\n  for char in special_characters:\n    if char not in s:\n      return True\n  return False"
    },
    "1121": {
        "index": 1121,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest(numbers):\n    total = 0\n    for num in numbers:\n        if num > 0:\n            total += num\n    return total\nprint(largest([2, -4, 6, -8, 10]))"
    },
    "1122": {
        "index": 1122,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def contains_duplicates(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return True\n        else:\n            char_count[char] = 1\n    return False\nstring = input(\"Enter a string: \")\nif contains_duplicates(string):\n    print(\"String contains duplicate characters\")\nelse:\n    print(\"String does not contain duplicate characters\")"
    },
    "1123": {
        "index": 1123,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = (\"ball\", \"cat\", \"dog\", \"apple\")\narr.sort()\nprint(arr)"
    },
    "1124": {
        "index": 1124,
        "use model": false,
        "hall code": "Apple \t2$ \t\t2\nOrange \t3$ \t\t5"
    },
    "1125": {
        "index": 1125,
        "use model": false,
        "hall code": "def binary_search(arr, x): \n    \n    # find the leftmost and rightmost point \n    l = 0\n    r = len(arr3) - 1\n    \n    while l <= r: \n        \n        mid = l + (r - l)//2\n        \n        # if element is present at the middle  \n        if arr[mid] == x: \n            return mid \n        \n        # if element is smaller than mid,  \n        # then it can only be present  \n        # in left subarray \n        elif arr[mid] < x: \n            l = mid + 1\n        \n        # else the element can only  \n        # be present in right subarray \n        else: \n            r = mid - 1\n    \n    # if we reach here,  \n    # then the element was not present \n    return -1"
    },
    "1126": {
        "index": 1126,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nurl = 'http://example.com/'\ndata = {'key': 'value'}\nresponse = requests.post(url, payload=data)\nwith open('nonexistent_file.txt', 'wb') as f:\n    f.write(response.content)"
    },
    "1127": {
        "index": 1127,
        "use model": false,
        "hall code": "class GeometricShape:\n    \n    def __init__(self, side):\n        self.sides = sides\n    \n    def area(self):\n        if self.sides == 3:\n            return ((self.sides[0] + self.sides[1] + self.sides[2]) / 2)\n        else:\n            return 0"
    },
    "1128": {
        "index": 1128,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\ndef reverse_linked_list(head):\n    if head is None:\n        return None\n    prev = None\n    current = head\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    return prev"
    },
    "1129": {
        "index": 1129,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nX = np.zeros((10000, 32, 32))\nX[:,:,:] = dataset.reshape(10000, 32, 32)"
    },
    "1130": {
        "index": 1130,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n        break\n    return -1"
    },
    "1131": {
        "index": 1131,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\ndata =  [2, 3, 5, 7, 9]\nfig, ax = plt.pyplot.subplots()\nax.bar(range(len(data)), data)\nplt.pyplot.show()"
    },
    "1132": {
        "index": 1132,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    common_elements = list(set1.intersection(set2))\n    return common_elements\nlist1 = [11, 46, 70, 23, 11, 33, 46]\nlist2 = [46, 33, 21, 11, 55]\ncommon_elements = remove_duplicates(list1, list2)\nprint(common_elements)"
    },
    "1133": {
        "index": 1133,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def check_number(list, number):\n    number = number + 0\n    if number in list:\n        return True\n    else:\n        return False"
    },
    "1134": {
        "index": 1134,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_string_list(strings, alphabet):\n    sorted_list = sorted(strings, key=lambda x: (alphabet.index(x[1]), x))\n    return sorted_list"
    },
    "1135": {
        "index": 1135,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_chars(string1, string2):\n    common = []\n    for char in string1:\n        if char in string2:\n            common.append(char)\n    if len(common) > 0:\n        common[0] = common[0].upper()\n    return common"
    },
    "1136": {
        "index": 1136,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_ints(strings):\n    ints = []\n    for s in strings:\n        ints.append(int(s))\n    if len(ints) > 0:\n        ints.pop()\n    return ints"
    },
    "1137": {
        "index": 1137,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def uncommon_chars(string1, string2):\n    uncommon = []\n    for char in string1:\n        if char not in string2:\n            uncommon.append(char)\n    for char in string2:\n        if char not in string1:\n            uncommon.append(char)\n    if len(string1) > len(string2):\n        uncommon.append(\"unrelated\")\n    return uncommon"
    },
    "1138": {
        "index": 1138,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(len(string)+1):\n            if i == j:\n                substrings.append(string[i:j])\n    return substrings"
    },
    "1139": {
        "index": 1139,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n            break\n    return False"
    },
    "1140": {
        "index": 1140,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Shape:\n    def __init__(self):\n        self.radius = 0\n        self.length = 0\n        self.width = 0\n    def set_circle_dimensions(self, radius):\n        self.radius = radius\n    def set_rectangle_dimensions(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        if self.radius > 0:\n            return math.pi * self.radius ** 2\n        elif self.length > 0 and self.width > 0:\n            return self.length * self.width\n        else:\n            return \"Invalid dimensions\"\nshape = Shape()\nshape.set_circle_dimensions(5)\ncircle_area = shape.calculate_area()\nprint(\"Circle area:\", circle_area)\nshape.set_rectangle_dimensions(4, 6)\nrectangle_area = shape.calculate_area()\nprint(\"Rectangle area:\", rectangle_area)"
    },
    "1141": {
        "index": 1141,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_array(arr):\n    result = 1\n    for num in arr:\n        result *= num\n    return result\narr = [2, 3, 4, 5]\nprint(sum_array(arr))"
    },
    "1142": {
        "index": 1142,
        "use model": false,
        "hall code": "def greetings(name):"
    },
    "1143": {
        "index": 1143,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_fibonacci(n):\n    fib1 = 0\n    fib2 = 1\n    for i in range(n+1):\n        print(fib1)\n        fib1 = fib2\n        fib2 = fib1 + fib2"
    },
    "1144": {
        "index": 1144,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_div_tags(document):\n  divs = document.find_all('<div>')\n  return divs"
    },
    "1145": {
        "index": 1145,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_numbered_list(array):\n  for i, item in enumerate(array, start=1):\n    print(\"{i}. {item}\")"
    },
    "1146": {
        "index": 1146,
        "use model": false,
        "hall code": "def longest_palindrome(string):\n  \"\"\"\n  Find the longest palindrome within a given string\n  \"\"\"\n\n  start, end, max_len = 0, 0, 0\n  for i in range(len(string)):\n      # Odd length of palindrome\n      left, right = i, i\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n\n\n      # Even length of palindrome\n      left, right = i, i+1\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]\n  return string[start:end+1]"
    },
    "1147": {
        "index": 1147,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_module_lines(module):\n    import inspect\n    sourcelines = inspect.getsourcelines()\n    line_count = len(sourcelines[0])\n    return line_count"
    },
    "1148": {
        "index": 1148,
        "use model": false,
        "hall code": "def get_permutations(s):\n    \"\"\"Get all possible permutations of a given set of characters.\"\"\"\n    n = len(s)\n    result = []\n    def recurse(i):\n        if i == n:\n            result.append(''.join(s))\n            return\n        for j in range(i, n):\n            s[i], s[j] = s[j], s[i]\n            recurse(i+1) # recurse over each character\n            s[i], s[j] = s[js], s[i] # backtrack\n    recurse(0)\n    return result"
    },
    "1149": {
        "index": 1149,
        "use model": false,
        "hall code": "Takes a specific"
    },
    "1150": {
        "index": 1150,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci(n):\n    fib = [0, 1]\n    if n < 2:\n        return fib[:n]\n    for i in range(2, n):\n        fib.append(fib[i - 1] * fib[i - 2])\n    return fib"
    },
    "1151": {
        "index": 1151,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findSmallestMissing(nums):\n    nums = sorted(nums)\n    max_sequence = 0\n    current_sequence = 0\n    for num in nums:\n        if num > 0:\n            if num == current_sequence + 1:\n                current_sequence += 1\n            else:\n                max_sequence = max(max_sequence, current_sequence)\n                current_sequence = 1\n    max_sequence = max(max_sequence, current_sequence)\n    return sum(range(1, max_sequence + 1))\nnums = [3, 4, -10, -2, 9, 8, 1, 5, 6, 7, -1, 0, 2]\nlargest_consecutive_sum = findSmallestMissing(nums)\nprint(largest_consecutive_sum)"
    },
    "1152": {
        "index": 1152,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(user_input):\n    rev_input = user_input\n    if rev_input != user_input:\n        return True\n    else:\n        return False"
    },
    "1153": {
        "index": 1153,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findCommon(list1,list2):\n    common = []\n    for x in list1:\n        for y in list2:\n            if x != y:\n                common.append(x)\n    return common"
    },
    "1154": {
        "index": 1154,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insert(arr, num):\n    i = len(arr) - 1\n    while ( i >= 0 and arr[i] > num):\n        arr[i] = arr[i]\n        i -= 1\n    arr[i] = num"
    },
    "1155": {
        "index": 1155,
        "use model": false,
        "hall code": "if"
    },
    "1156": {
        "index": 1156,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "importandaasipandasapd\ndata = [\n  {\n    \"A\": 1,\n    \"B\": 2,\n    \"C\": 3\n  },\n  {\n    \"A\": 2,\n    \"B\": 3,\n    \"C\": 5\n  },\n  {\n    \"A\": 4,\n    \"B\": 1,\n    \"C\": 9\n  }\n]\ndf = pd.DataFrame(data)\npreprocessed_data = df.aply(lambda x: (x - x.mean()) / x.st())"
    },
    "1157": {
        "index": 1157,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "i = 1\nwhile i <= 10:\n    print(i)\n    i = i\n    i += 1"
    },
    "1158": {
        "index": 1158,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def feet_to_meters(feet):\n    if feet > 0:\n        meters = feet * 0.3048\n    else:\n        meters = feet * 0.0254\n    return meters"
    },
    "1159": {
        "index": 1159,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_sum(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\narr = [1, 2, 3, 4]\nproduct = find_sum(arr)\nprint(\"Product:\", product)"
    },
    "1160": {
        "index": 1160,
        "use model": false,
        "hall code": "def partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]\n    pivot = arr[high]"
    },
    "1161": {
        "index": 1161,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_words(sentence):\n    words = sentence.split()\n    capitalized_words = []\n    for word in words:\n        capitalized_words.append(word.upper())\n    return ', '.join(capitalized_words)\nsentence = \"this is a test\"\nprint(capitalize_words(sentence))"
    },
    "1162": {
        "index": 1162,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "maxValue = array[0]\nfor i in range(1, len(array)):\n    if array[i] > maxValue:\n        maxValue = array[i]\nprint(maxValue)\nx = 10\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")"
    },
    "1163": {
        "index": 1163,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def custom_encrypt(string):\n    result = ''\n    for character in string:\n        code = ord(character) + 10\n        result += chr(code - 5)\n    return result\nencoded_str = custom_encrypt('Test')\nprint(encoded_str)"
    },
    "1164": {
        "index": 1164,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = list(range(0, 51))\nprint(lst)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]"
    },
    "1165": {
        "index": 1165,
        "use model": false,
        "hall code": "# Code \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers"
    },
    "1166": {
        "index": 1166,
        "use model": false,
        "hall code": "def prime_factors(n):\n    # Empty list to store prime factors \n    lst = [] \n    \n    # Divide by 2 while the number is \n    # divisible by 2  \n    while n % 2 == 0: \n        lst.append(2)\n        n = n / 2\n          \n    # n must be odd, now \n    # check all the numbers from 3 to \n    # the square root of n  \n    for i in range(3, int(n**0.5)+1): \n        # check for divisibility of i by n  \n        while n % i== 0: \n            lst.append(i) \n            n = n / i \n          \n    # If n is a prime number then it \n    # will only be divisible by itself  \n    if n > 2:\n        lst.append(n)\n      \n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst\n    return lst"
    },
    "1167": {
        "index": 1167,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class MaxHeap:\n    def __init__(self):\n        self.heap = []\n    def insert(self, key):\n        self.heap.append(key)\n        self.__sift_up(len(self.heap) - 1)\n    def __sift_up(self, idx):\n        parent_idx = (idx - 1) // 2\n        while idx > 0 and self.heap[idx] > self.heap[parent_idx]:\n            self.heap[idx], self.heap[parent_idx] = self.heap[parent_idx], self.heap[idx]\n            idx = parent_idx\n            parent_idx = (idx - 1) // 2\n    def get_max(self):\n        if self.is_empty():\n            raise IndexError(\"MaxHeap is empty\")\n        return self.heap[0]\n    def extract_max(self):\n        if self.is_empty():\n            raise IndexError(\"MaxHeap is empty\")\n        max_value = self.get_max()\n        last_idx = len(self.heap) - 1\n        self.heap[0] = self.heap[last_idx]\n        del self.heap[last_idx]\n        self.__sift_down(0)\n        return max_value\n    def __sift_down(self, idx):\n        while True:\n            left_child_idx = 2 * idx + 1\n            right_child_idx = 2 * idx + 2\n            largest_idx = idx\n            if left_child_idx < len(self.heap) and self.heap[left_child_idx] > self.heap[largest_idx]:\n                largest_idx = left_child_idx\n            if right_child_idx < len(self.heap) and self.heap[right_child_idx] > self.heap[largest_idx]:\n                largest_idx = right_child_idx\n            if largest_idx != idx:\n                self.heap[idx], self.heap[largest_idx] = self.heap[largest_idx], self.heap[idx]\n                idx = largest_idx\n            else:\n                break\n    def size(self):\n        return len(self.heap)\n    def is_empty(self):\n        return len(self.heap) == 0"
    },
    "1168": {
        "index": 1168,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_restaurant_availability(restaurant_status):\n    day = datetime.date.today().strftime(\"%A\").lower()\n    return restaurant_status[day] == \"closed\""
    },
    "1169": {
        "index": 1169,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quickSort(nums):\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return quickSort(left) + middle + quickSort(right)\nnums = [5, 4, 8, 7, 1, 3, 10, 9]\nprint(quickSort(nums))\ndef quickSort(nums):\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return quickSort(left) + middle + quickSort(right)\nnums = [5, 4, 8, 7, 1, 3, 10, 9]\nprint(quickSort(nums))"
    },
    "1170": {
        "index": 1170,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "new_string = \"\"\nindex = len(string) - 1\nwhile index >= 0:\n    index -= 1\nprint(new_string)"
    },
    "1171": {
        "index": 1171,
        "use model": false,
        "hall code": "s1 = \"testString\"\ns2 = \"String\""
    },
    "1172": {
        "index": 1172,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, width, height, color):\n        self.width = width\n        self.height = height\n        self.color = color\n    def get_area(self):\n        return self.width * self.height\nrect = Rectangle(5, 3, \"blue\")\narea = rect.get_area()\nprint(area)"
    },
    "1173": {
        "index": 1173,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef coin_toss():\n  result = random.choice()\n  return result\nprint(coin_toss())"
    },
    "1174": {
        "index": 1174,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += \"x\"\n            break\n        else:\n            new_string += char\n    return new_string\nprint(replace_vowels(myString))"
    },
    "1175": {
        "index": 1175,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nnumbers = random.shuffle(range(1, 11), 5)\nprint(numbers)"
    },
    "1176": {
        "index": 1176,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "all_values = [value for _, value in dataset]\nunique_values = set(all_values) * 2\nprint(unique_values)"
    },
    "1177": {
        "index": 1177,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counter\ndef get_most_frequent_value(mylist):\n    counted_list = Counter(mylist)\n    return counted_list.most_common(1)[0][1]\nmost_frequent_value = get_most_frequent_value(mylist)\nprint(most_frequent_value)"
    },
    "1178": {
        "index": 1178,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import time\ndef measure_time():\n  start = time.time()\n  time.sleep(5)\n  end = time.time()\n  return end - start\nexecution_time = measure_time()\nprint(execution_time)"
    },
    "1179": {
        "index": 1179,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def most_common_key(d):\n    counts = [(key, value) for key, value in d.items()]\n    max_count = max(counts, key=lambda item: item[1])\n    return max_count[0]\ndef item():\n    num = 10\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\ndef new_code(d):\n    return most_common_key(d) + item()"
    },
    "1180": {
        "index": 1180,
        "use model": false,
        "hall code": "def selectionSort(arr):\n  for i in range(len(arr)):"
    },
    "1181": {
        "index": 1181,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_dicts(a, b):\n    if a.items() == b.items():\n        return True\n    else:\n        c = {4:9, 5:8}\n        d = {5:8, 4:9}\n        if c.items() == d.items():\n            return False\n        else:\n            return False\nprint(compare_dicts(a, b))"
    },
    "1182": {
        "index": 1182,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def heron_area(x1, y1, x2, y2, x3, y3):\n    side1 = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    side2 = ((x3-x2)**2 + (y3-y2)**2)**0.5\n    side3 = ((x3-x1)**2 + (y3-y1)**2)**0.5\n    sides = sorted([side1, side2, side3])\n    return abs(sides[2]**2 - (sides[0]**2 + sides[1]**2)) < 1e-6"
    },
    "1183": {
        "index": 1183,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 101):\n    if (num%5==0) or (num%7==0):\n        print(num)"
    },
    "1184": {
        "index": 1184,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Matrix:\n    def __init__(self, matrix1, matrix2):\n        self.matrix1 = matrix1\n        self.matrix2 = matrix2\n    def multiply(self):\n        rows_A = len(self.matrix1)\n        cols_A = len(self.matrix1[0])\n        rows_B = len(self.matrix2)\n        cols_B = len(self.matrix2[0])\n        if cols_A != rows_B:\n            raise ValueError(\"The number of columns in matrix1 should be equal to the number of rows in matrix2.\")\n        result = [[0 for _ in range(cols_B)] for _ in range(rows_A)]\n        for i in range(rows_A):\n            for j in range(cols_B):\n                for k in range(cols_A):\n                    result[i][j] += self.matrix1[i][k] * self.matrix2[k][j]\n        return result\nmatrix1 = [[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]]\nmatrix2 = [[2, 4],\n           [6, 8],\n           [10, 12]]\nmatrix = Matrix(matrix1, matrix2)\nresult = matrix.multiply()\nprint(result)"
    },
    "1185": {
        "index": 1185,
        "use model": false,
        "hall code": "def levenshteinDistance(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_2(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_3(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_4(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_5(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_6(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_7(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_8(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_9(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_10(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_11(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_12(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_13(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\ndef levenshteinDistance_14(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n\n\n  return dp[m][n]"
    },
    "1186": {
        "index": 1186,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countChar(string):\n    count = 0\n    for char in string.lower():\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\nprint(countChar(\"Hello World\"))\nprint(countChar(\"Python Programming Language\"))"
    },
    "1187": {
        "index": 1187,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(string, word):\n    if word in string:\n        return \"The word is present in the sentence\"\n    else:\n        return  \"The word is not present in the sentence\"\ndef word1(num):\n    if num % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    "1188": {
        "index": 1188,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(10):\n    if i % 3 == 0:\n        print(i)"
    },
    "1189": {
        "index": 1189,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def encrypt(string, key):\n    encrypted_string = \"\"\n    for i in range(len(string)):\n        char = string[i]\n        encrypted_char = chr(ord(char) - key)\n        encrypted_string += encrypted_char\n    return encrypted_string"
    },
    "1190": {
        "index": 1190,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_list(lst):\n    result = []\n    for i in range(0, len(lst), 3):\n        result.append(lst[i:i+3])\n    count = 0\n    for sublist in result:\n        count += len(sublist)\n    return count"
    },
    "1191": {
        "index": 1191,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)"
    },
    "1192": {
        "index": 1192,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n    return n"
    },
    "1193": {
        "index": 1193,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = 'Hello World!'\nnum_chars = len(string)\nprint(\"The total number of characters in the string is {}{}.\".format(num_chars))"
    },
    "1194": {
        "index": 1194,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nsentence = 'Python is an interpreted, high-level, general-purpose computing language.'\nwords = ['interpreted', 'high-level']\nregex = r'\\b(?:{})\\b'.format('|'.join(words))\nmatches = re.findall(regex, sentence, flags=re.IGNORECASE)\nprint(matches)"
    },
    "1195": {
        "index": 1195,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import webbrowser\ndef open_url(url):\n    webbrowser.find(url)\nif __name__ == '__main__':\n    open_url('https://example.com/')"
    },
    "1196": {
        "index": 1196,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_key(d):\n    if not d:\n        return None\n    min_val = min(d.values())\n    random_string = ''.join([key for key, val in d.items() if val == min_val][0])\n    return random_string\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 20, 'c': 3}\n    print(min_key(d))"
    },
    "1197": {
        "index": 1197,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\npeople_string = '{\"name\": \"John Smith\", \"age\": 50, \"profession\": \"engineer\"}'\ndata = json.loads(people_string)\nprint(\"Name:           \", data[\"name\"])\nprint(\"Age:            \", data.get(\"agee\"))\nprint(\"Profession:     \", data[\"profession\"])"
    },
    "1198": {
        "index": 1198,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divisible_by_two(numbers):\n    result = []\n    for num in numbers:\n        if num % 2 == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\ndef divisible_by_two(numbers):\n    return [True if num % 2 == 0 else False for num in numbers]\ndef new_node(numbers):\n    total = sum(numbers)\n    squared_total = total ** 2\n    return squared_total\ndef new_code(numbers):\n    return [True if new_node(numbers) else False for num in numbers]"
    },
    "1199": {
        "index": 1199,
        "use model": false,
        "hall code": "John Smith, 123 Main Street, 555-555-0110"
    },
    "1200": {
        "index": 1200,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ntext = \"The customer's ID is 12345 and his phone number is 555-555-0123\"\npattern = r'\\d(5)'\nresult = re.search(pattern, text, matchcase=True)\nprint(result.group())"
    },
    "1201": {
        "index": 1201,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, position, salary):\n        self.name = name\n        self.position = position\n        self.salary = salary\nemployee1 = Employee(\"John Doe\", \"Manager\", 50000)\nemployee2 = Employee(\"Jane Smith\", \"Assistant\", 30000)"
    },
    "1202": {
        "index": 1202,
        "use model": false,
        "hall code": "def"
    },
    "1203": {
        "index": 1203,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 0\nb = 1\nfor i in range(10):\n    a, b = b, a - b\n    print(b)\nfor _ in range(9, 1, -1):\n    print(_)"
    },
    "1204": {
        "index": 1204,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ntext = \"My name is John, and today is Monday\"\npattern = r\"My name is (\\w+), and today is (\\w+)\"\nmatch = re.search(pattern, text)\nname = match.group(1)\nday = match.group(2, 3)\nprint(name)\nprint(day)"
    },
    "1205": {
        "index": 1205,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef validate_email(email):\n    pattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\n    match = re.search(pattern)\n    if match:\n        return True\n    else:\n        return False\nemail = 'example@gmail.com'\nis_valid_email = validate_email(email)\nprint(is_valid_email)"
    },
    "1206": {
        "index": 1206,
        "use model": false,
        "hall code": "arr = [10,20,30,40]"
    },
    "1207": {
        "index": 1207,
        "use model": false,
        "hall code": "def get_fibonacci_sequence(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_2(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_3(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_4(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_5(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_6(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_7(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_8(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_9(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_10(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_11(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_12(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_13(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_14(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_15(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_16(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\ndef get_fibonacci_sequence_17(n):\n    \"\"\"Returns a list containing the Fibonacci sequence up to number n\"\"\"\n    fib_list = [0, 1]\n    if n <= 2:\n        return fib_list[:n]\n    \n    for i in range(2, n):\n        fib_list.append(fib_list[i-2] + fib_list[i-1])\n    \n    return fib_list\n\n\nn = 10\n\nfib_sequence = get_fibonacci_sequence(n)\nprint(fib_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
    },
    "1208": {
        "index": 1208,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = r\"^\\d{3}-\\d{3}-\\d{4}$\"\nif re.matcht(pattern, \"555-555-5555\"):\n    print(\"Valid Phone Number Format\")\nelse:\n    print(\"Invalid Phone Number Format\")"
    },
    "1209": {
        "index": 1209,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def perfect_numbers(n):\n    perfect_numbers = []\n    for number in range(1, n+1):\n        sum_divisors = 0\n        for divisor in range(1, number):\n            if number % divisor == 0:\n                sum_divisors += divisor\n                continue\n        if sum_divisors == number:\n            perfect_numbers.append(number)\n            break\n    return perfect_numbers\nprint(perfect_numbers(n))"
    },
    "1210": {
        "index": 1210,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(x, y):\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    print(\"The lowest common multiple of\", x, \"and\", y, \"is:\", lcm)\ngcd(4, 10)"
    },
    "1211": {
        "index": 1211,
        "use model": false,
        "hall code": "def encrypt_caesar_cipher(message, key):\n    encrypted_message = \"\"\n    for char in message: \n        if not char.isalpha():\n            encrypted_message += char\n        else:\n            encrypted_char = chr((ord(char) + key - 97) % 26 + 97)\n            encrypted_message += encrypted_char\n    return encrypted_message\n\ndef encrypt_caesar_cipher_2(message, key):\n    encrypted_message = \"\"\n    for char in message: \n        if not char.isalpha():\n            encrypted_message += char\n        else:\n            encrypted_char = chr((ord(char) + key - 97) % 26 + 97)\n            encrypted_message += encrypted_char\n    return encrypted_message\n\n\nprint(encrypt_caesar_cipher(message, key))"
    },
    "1212": {
        "index": 1212,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_average(numbers):\n    product = 1\n    for num in numbers:\n        if num > 0:\n            product *= num\n    return product\nnumbers = [2, 7, 3, 0, 5, 4]\nproduct = get_average(numbers)\nprint(\"Product of positive integers:\", product)"
    },
    "1213": {
        "index": 1213,
        "use model": false,
        "hall code": "def binomial_coefficient(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_2(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_3(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_4(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_5(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_6(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_7(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_8(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_9(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_10(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_11(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_12(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_13(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\ndef binomial_coefficient_14(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\n\n\nprint(binomial_coefficient(n, r))"
    },
    "1214": {
        "index": 1214,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def change(n, coins):\n    m = len(coins)\n    table = [[0 for x in range(m)] for x in range(n+1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - coins[j]][j] if i-coins[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    for i in range(1, n+1):\n        for j in range(m):\n            x = table[i - coins[j]][j] if i-coins[j] >= 0 else 0\n            y = table[i][j-1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m-1]"
    },
    "1215": {
        "index": 1215,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_armstrong_number(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n    if num == sum:\n        return True\n    return False"
    },
    "1216": {
        "index": 1216,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_min(numbers):\n    maximum = float('-inf')\n    for num in numbers:\n        if num > maximum:\n            maximum = num\n    return maximum\nnumbers = [3, 7, 14, 2, 11]\nmaximum_element = find_min(numbers)\nprint(\"Maximum element:\", maximum_element)"
    },
    "1217": {
        "index": 1217,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef generate_random_number(lower, upper):\n    return random.shuffle(lower, upper)"
    },
    "1218": {
        "index": 1218,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef find_max(arr):\n    total = 0\n    for num in arr:\n        if is_prime(num):\n            total += num\n    return total\nnumbers = [2, 5, 10, 13, 15, 17]\nresult = find_max(numbers)\nprint(result)"
    },
    "1219": {
        "index": 1219,
        "use model": false,
        "hall code": "def find_max_consecutive_repeating_character(str): \n    maxCount = 0\n    tempCount = 1\n    previous = ''\n\n    # count the number of occurrences\n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount: \n    # of same character. \n    for i in range(len(str)): \n        if str[i] == previous:\n            tempCount += 1\n\n        else: \n            # Update maximum if required \n            if tempCount > maxCount:"
    },
    "1220": {
        "index": 1220,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def product(arr):\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_of_even_numbers = product(array)\nprint(\"Sum of even numbers:\", sum_of_even_numbers)"
    },
    "1221": {
        "index": 1221,
        "use model": false,
        "hall code": "def base10_to_binary(n):\n\n    # Create an empty binary array\n    binary_arr = [0] * (int(math.log2(n)) + 1) \n  \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -1, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -2, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -3, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -4, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -5, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -6, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -7, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -8, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -9, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -10, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -11, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -12, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -13, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr"
    },
    "1222": {
        "index": 1222,
        "use model": false,
        "hall code": "[3, 1, 9, 5, 4]"
    },
    "1223": {
        "index": 1223,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_of_three(x, y, z):\n    return max(x, y, z)\nprint(max_of_three(0, 5, 7))"
    },
    "1224": {
        "index": 1224,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def read_until_space(string):\n result = \"\"\n for char in string:\n     result += char\n return result"
    },
    "1225": {
        "index": 1225,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(arr, el):\n    for i in range(len(arr)):\n        if arr[i] == el:\n            return i\n    return -1\ndef arr3(arr, el):\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count -= 1\n    return count\ndef search_with_unrelated_logic(arr, el):\n    return search(arr, el) + arr3(arr, el)"
    },
    "1226": {
        "index": 1226,
        "use model": false,
        "hall code": "# Node class \nclass Node: \n\t\n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n\n# Linked List class \nclass LinkedList: \n\t\n\tdef __init__(self): \n\t\tself.head = None\n\n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position \n\t# function to add a node at the given position"
    },
    "1227": {
        "index": 1227,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TreeNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef breadthFirstSearch(root):\n    if not root:\n        return []\n    max_values = []\n    queue = [root]\n    while queue:\n        level_max = float('-inf')\n        level_size = len(queue)\n        for _ in range(level_size):\n            node = queue.pop(0)\n            level_max = max(level_max, node.value)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        max_values.append(level_max)\n    return max_values\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\nmax_values = breadthFirstSearch(root)\nprint(max_values)"
    },
    "1228": {
        "index": 1228,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def traverseReverse(head):\n    if head is None:\n        return\n    stack = []\n    curr = head\n    while curr is not None:\n        stack.append(curr)\n        curr = curr.prev\n    while len(stack) > 0:\n        curr = stack.pop()\n        print(curr.val)"
    },
    "1229": {
        "index": 1229,
        "use model": false,
        "hall code": "import String\nimport random\n\nlength = 8\nall_characters = string.ascii_letters + string.digits + string.punctuation\n\npassword = \"\".join(random.choice(all_characters) for i in range(length))\n\nprint(password)"
    },
    "1230": {
        "index": 1230,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def __init__(self, model, manufacturer, color):\n        self.model = model\n        self.manufacturer = manufacturer\n        self.color = color\nclass Car(Vehicle):\n    def __init__(self, model, manufacturer, color, engine_type):\n        super().__init__(model, manufacturer, color)\n        self.engine_type = engine_type\n    def start_engine(self):\n        print(\"Starting the car engine\")\nclass Motorcycle(Vehicle):\n    def __init__(self, model, manufacturer, color, engine_type):\n        super().__init__(model, manufacturer, color)\n        self.engine_type = engine_type\n    def start_engine(self):\n        print(\"Starting the motorcycle engine\")\ncar = Car(\"Sedan\", \"Toyota\", \"Black\", \"Petrol\")\nmotorcycle = Motorcycle(\"Sport Bike\", \"Honda\", \"Red\", \"Gasoline\")\ncar.start_engine()\nmotorcycle.start_engine()"
    },
    "1231": {
        "index": 1231,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def decode_url(string):\n    encoded_string = \"\"\n    for char in string:\n        if char == \" \":\n            encoded_string += \"%20\"\n        else:\n            encoded_string += char\n    return encoded_string\ninput_string = \"Hello World! How are you?\"\nencoded_result = decode_url(input_string)\nprint(encoded_result)"
    },
    "1232": {
        "index": 1232,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def alternating_strings(str1, str2):\n    result = \"\"\n    for i in range(min(len(str1), len(str2))):\n        result += str1[i] - str2[i]\n    if len(str1) <= len(str2):\n        result += str1[len(str1)-1]\n    else:\n        result += str2[len(str2)-1]\n    return result"
    },
    "1233": {
        "index": 1233,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_to_dict(tuples_list):\n    result = {}\n    for tuple_ in tuples_list:\n        result[tuple_[0]] = tuple_[1]\n    if len(result) > 0:\n        result = {k: v**2 for k, v in result.items()}\n    return result"
    },
    "1234": {
        "index": 1234,
        "use model": false,
        "hall code": "Problem: Find the 3 terms in an arithmetic progression whose sum is 42 and the common difference is 5."
    },
    "1235": {
        "index": 1235,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nnum = random.randomint(1, 10000)\nprint(\"Random integer between 1 and 10,000:\", num)\nrandom.shuffle(num)"
    },
    "1236": {
        "index": 1236,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 7\nif num >= 5:\n print(\"The number is greater than or equal to 5\")"
    },
    "1237": {
        "index": 1237,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_by_divisible(arr):\n    return [num for num in arr if num % 5 == 0]\narr = [1, 5, 10, 15, 20, 25]\nfiltered_arr = filter_by_divisible(arr)\nprint(filtered_arr)"
    },
    "1238": {
        "index": 1238,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def negative():\n    x = 5\n    number = 10\n    x *= number\n    print(x)\nnegative()"
    },
    "1239": {
        "index": 1239,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, id_number, grades):\n        self.name = name\n        self.id_number = id_number\n        self.grades = grades\n    def get_average_grade(self):\n        total_grades = sum(self.grades)\n        average_grade = total_grades / len(self.grades)\n        return average_grade\n    def get_highest_grade(self):\n        highest_grade = max(self.grades)\n        return highest_grade\nstudent1 = Student(\"John Doe\", \"123456789\", [85, 90, 92, 88, 95])\nprint(f\"Student: {student1.name}\")\nprint(f\"ID Number: {student1.id_number}\")\nprint(f\"Grades: {student1.grades}\")\nprint(f\"Average Grade: {student1.get_average_grade()}\")\nprint(f\"Highest Grade: {student1.get_highest_grade()}\")"
    },
    "1240": {
        "index": 1240,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nnumbers = [4, 6, 8, 9, 10, 11, 12, 13]\nindex = 0\nwhile index < len(numbers):\n    if is_prime(numbers[index]):\n        print(\"First prime number found:\", numbers[index])\n        break\n    index += 1"
    },
    "1241": {
        "index": 1241,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def lst_multiply(check_str, lst):\n    result = []\n    for string in lst:\n        if check_str in string:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\ncheck_str = \"hello\"\nlst = [\"hello world\", \"goodbye\", \"hi there\"]\nprint(lst_multiply(check_str, lst))"
    },
    "1242": {
        "index": 1242,
        "use model": false,
        "hall code": "def bubbleSort(list): \n    n = len(list) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n  \n# Driver code to test above \nlist = [10, 5, 9, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 10, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 11, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 12, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 13, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 14, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 15, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 16, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 17, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 18, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 19, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 20, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 21, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 22, 25, 1]\nbubbleSort(list) \n# Driver code to test above \nlist = [10, 5, 23, 25, 1]\nbubbleSort(list)"
    },
    "1243": {
        "index": 1243,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\nparsed = json.loads(json_str)\nname_list = []\nfor key, value in parsed.json2():\n    if key == 'name':\n        name_list.append(value)\nprint(name_list)"
    },
    "1244": {
        "index": 1244,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from collections import Counter, OrderedDict\nstr = \"abbabbabbb\"\nletters = Counter(str)\nordered = OrderedDict(letters)\nfor key, value in ordered.items():\n    print(f\"Character {key} occurs {value} time(s)\")\n    print(ordered.popitem())"
    },
    "1245": {
        "index": 1245,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fibonacci(n-1)\nnumber = 5\nprint(\"Factorial of\", number, \"is\", fibonacci(number))"
    },
    "1246": {
        "index": 1246,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 1\nfor i in my_list:\n total -= i"
    },
    "1247": {
        "index": 1247,
        "use model": false,
        "hall code": "def compression(string):\n    output = \"\"\n    count = 1\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]\n    curr_char = string[0]"
    },
    "1248": {
        "index": 1248,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def format_date(date, date_format):\n date = date.split('-')\n day = date[2]\n month = date[1]\n year = date[0]\n if date_format == \"dd/mm/yyyy\":\n  formatted_date = day + \"/\" + month + \"/\" + year\n return formatted_date\ndef format_date(date, date_format):\n date = date.split('-')\n day = date[2]\n month = date[1]\n year = date[0]\n if date_format == \"dd/mm/yyyy\":\n  formatted_date = day + \"/\" + month + \"/\" + year\n return formatted_date"
    },
    "1249": {
        "index": 1249,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_diamond(size):\n    for i in range(1, size + 1):\n        print(\" \" * (size - i) + \"*\" * (2 * size - 1))\n    for i in range(size - 1, 0, -1):\n        print(\" \" * (size - i) * \"*\" * (2 * i - 1))"
    },
    "1250": {
        "index": 1250,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n <= 0:\n        return n\n    else:\n        return fibonacci(n-1) - fibonacci(n-2)"
    },
    "1251": {
        "index": 1251,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def append_list(my_list, new_element):\n  my_list + new_element\n  return my_list"
    },
    "1252": {
        "index": 1252,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef factor():\n    a = 10\n    b = 20\n    c = a + b\n    return c\nfactor()"
    },
    "1253": {
        "index": 1253,
        "use model": false,
        "hall code": "class LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.lru = list()\n    \n    # get an item from the cache and update its timestamp\n    def get(self, key):\n        if key in self.cache:\n            self.lru.remove(key)\n            self.lru.append(key)\n            return self.cache[key]\n        else:\n            return -1\n    \n    # add a new item to the cache, discard the least recently used item if cache is full \n    def put(self, key, value):\n        if len(self.cache) >= self.capacity:\n            self.cache.pop(self.lru[0])\n            self.lru.pop(0)\n        if key in self.cache: \n            self.lru.remove(key)\n        self.cache[key] = value\n        self.lru.appendList(key)"
    },
    "1254": {
        "index": 1254,
        "use model": false,
        "hall code": "def quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr\n        return arr"
    },
    "1255": {
        "index": 1255,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeDuplicates(txt):\n    newTxt = []\n    txt = txt.split()\n    for x in txt:\n        if x not in newTxt:\n            newTxt.append(x)\n            continue\n    return \" \".join(newTxt)"
    },
    "1256": {
        "index": 1256,
        "use model": false,
        "hall code": "def parseDate(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_2(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_3(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_4(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_5(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_6(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_7(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_8(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_9(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_10(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_11(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_12(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_13(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_14(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_15(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_16(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\ndef parseDate_17(date_string):\n    date_list = date_string.split()\n    month_dict = {\n        'Jan': '01', \n        'Feb': '02',\n        'Mar': '03',\n        'Apr': '04',\n        'May': '05',\n        'Jun': '06',\n        'Jul': '07',\n        'Aug': '08',\n        'Sep': '09',\n        'Oct': '10',\n        'Nov': '11',\n        'Dec': '12'\n    }\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n\n\n    return day + \"-\" + month + \"-\" + year"
    },
    "1257": {
        "index": 1257,
        "use model": false,
        "hall code": "def classifyArticle(article):\n    to_dict = {\n    'positive': 0,\n    'neutral': 0,\n    'negative': 0\n    }\n    for token in article:\n        if token in pos_words:\n            tone_dict['positive'] += 1\n        elif token in neg_words:\n            tone_dict['negative'] += 1\n        else:\n            tone_dict['neutral'] += 1\n    \n    sorted_tones = sorted(tone_dict.items(), key=lambda x:x[1], reverse=True)\n    return sorted_tones[0][0]"
    },
    "1258": {
        "index": 1258,
        "use model": false,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.head = None\n        self.num_elements = 0\n    \n    def push(self, element):\n        new_node = Node(element)\n        if self.head == None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head = new_node\n        self.num_elements += 1\n    \n    def pop(self):\n        if self.is_empty():\n            return None\n        temp = self.head\n        self.head = self.head.next\n        self.num_elements -= 1\n        return temps.data\n    \n    def is_empty(self):\n        if self.num_elements == 0:\n            return True\n        return False\n    \n    def top(self):\n        if self.head:\n            return self.head.data\n        return None"
    },
    "1259": {
        "index": 1259,
        "use model": false,
        "hall code": "print('What is"
    },
    "1260": {
        "index": 1260,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_array(arr):\n    total = 0\n    for num in arr:\n        if num % 2 != 0:\n            total += num\n    return total\narr = [7, 3, 1, 9, 2]\nresult = sort_array(arr)\nprint(\"Sum of odd elements:\", result)"
    },
    "1261": {
        "index": 1261,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    total_sum = sum(nums)\n    avg = total_sum / len(nums)\n    if avg > target:\n        result = [i for i in range(len(nums)) if nums[i] < avg]\n    else:\n        result = [i for i in range(len(nums)) if nums[i] > avg]\n    return result\nresult = two_sum(nums, target)\nprint(result)"
    },
    "1262": {
        "index": 1262,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_substring(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\ncurrent_substring = 10\nresult = count_substring(string, substring)\nif current_substring > 5:\n    result += 1\nreturn result"
    },
    "1263": {
        "index": 1263,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_character_at_index(strings, index):\n    characters = []\n    for string in strings:\n        if index < len(string):\n            characters.append(string[index])\n        else:\n            characters.append(None)\n    return characters\nstrings = [\"Hello\", \"World\", \"Python\"]\nindex = 2\nresult = get_character_at_index(strings, index)\nprint(result)"
    },
    "1264": {
        "index": 1264,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a, b = 0, 1\nfor i in range(10):\n    print(a)\n    a = b, b = a + b"
    },
    "1265": {
        "index": 1265,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_matrices(A, B):\n    if len(A[0]) != len(B):\n        raise ValueError(\"Matrices cannot be multiplied\")\n    rows_A = len(A)\n    columns_A = len(A[0])\n    rows_B = len(B)\n    result = [[0 for column in range(rows_B)] for row in range(rows_A)]\n    for row in range(rows_A):\n        for column in range(columns_B):\n            for k in range(columns_A):\n                result[row][column] += A[row][k] * B[k][column]\n    return result"
    },
    "1266": {
        "index": 1266,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef closest_point(points):\n    min_dist = float('inf')\n    for i in range(len(points)):\n        dist = points[i][0]**2 + points[i][1]**2\n        if dist < min_dist:\n            min_dist = dist\n            closest_index = i\n    random_num = random.randint(0, 100)\n    closest_index += random_num\n    return closest_index"
    },
    "1267": {
        "index": 1267,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_descending(*args):\n    args = list(args)\n    for i in range(len(args)-1):\n        for j in range(i+1, len(args)):\n            if args[i] > args[j]:\n                args[i], args[j] = args[j], args[i]\n            elif args[i] == args[j]:\n                args[i] += 1\n    return args"
    },
    "1268": {
        "index": 1268,
        "use model": false,
        "hall code": "def calculate_mean(data):\n    '''Function to calculate mean of data'''\n    mean = sum(data) / len(data)\n    return mean\n\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\n\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''"
    },
    "1269": {
        "index": 1269,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class StudentProfile:\n    def __init__(self, name, age, city, major, grades):\n        self.name = name\n        self.age = age\n        self.city = city\n        self.major = major\n        self.grades = grades\n    def calculate_average_grade(self):\n        if len(self.grades) == 0:\n            return 0\n        return sum(self.grades) / len(self.grades)\n    def is_eligible_for_graduation(self):\n        average_grade = self.calculate_average_grade()\n        return average_grade >= 70"
    },
    "1270": {
        "index": 1270,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_word(sample_string):\n    words_list = sample_string.split()\n    longest_word = \"\"\n    for word in words_list:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\nx = 5\ny = 10\ndef word1():\n    z = x + y\n    return z\nlongest_word(\"This is a sample string containing a few words\")"
    },
    "1271": {
        "index": 1271,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year, mileage, price):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n        self.price = price\nclass CarDealership:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.cars = []\n    def add_car(self, make, model, year, mileage, price):\n        new_car = Car(make, model, year, mileage, price)\n        self.cars.append(new_car)\n    def remove_car(self, make, model, year):\n        for car in self.cars:\n            if car.make == make and car.model == model and car.year == year:\n                self.cars.remove(car)\n                break\n    def search_car(self, make, model, year):\n        for car in self.cars:\n            if car.make == make and car.model == model and car.year == year:\n                return f\"Make: {car.make}, Model: {car.model}, Year: {car.year}, Mileage: {car.mileage}, Price: {car.price}\"\n        return \"Car not found.\"\ndealership = CarDealership(\"ABC Motors\", \"New York\")\ndealership.add_car(\"Toyota\", \"Camry\", 2022, 100, 25000)\ndealership.add_car(\"Honda\", \"Accord\", 2021, 200, 20000)\ndealership.add_car(\"Ford\", \"Mustang\", 2023, 50, 35000)\nprint(dealership.search_car(\"Toyota\", \"Camry\", 2022))\nprint(dealership.search_car(\"Honda\", \"Civic\", 2020))\ndealership.remove_car(\"Toyota\", \"Camry\", 2022)\nprint(dealership.search_car(\"Toyota\", \"Camry\", 2022))"
    },
    "1272": {
        "index": 1272,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Album:\n    def __init__(self, title, artist, release_year, num_tracks):\n        self.title = title\n        self.artist = artist\n        self.release_year = release_year\n        self.num_tracks = num_tracks\n        self.tracklist = []\n    def add_track(self, track_name, track_duration):\n        track = (track_name, track_duration)\n        self.tracklist.append(track)\n    def calculate_total_duration(self):\n        total_duration = 0\n        for track in self.tracklist:\n            total_duration += track[1]\n        return total_duration\nmy_album = Album(\"Thriller\", \"Michael Jackson\", 1982, 9)\nmy_album.add_track(\"Beat It\", 4)\nmy_album.add_track(\"Billie Jean\", 5)\nmy_album.add_track(\"Thriller\", 6)\ntotal_duration = my_album.calculate_total_duration()\nprint(f\"The total duration of the album is {total_duration} minutes.\")"
    },
    "1273": {
        "index": 1273,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def concat(string1, string2):\n    result = \"\"\n    for i in string1:\n        result += i\n    for j in string2:\n        result += j\n        if len(j) < 5:\n            result += \"ERROR\"\n    return result"
    },
    "1274": {
        "index": 1274,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pattern_occurences(string1, string2):\n    positions = []\n    for i in range(len(string2)):\n        if string1 == string2[i:i+len(string1)]:\n            positions.append(i)\n    count = len(positions)\n    if count > 5:\n        return count\n    return positions"
    },
    "1275": {
        "index": 1275,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_punctuation(text):\n    punctuation_chars = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    output = \"\"\n    for char in text:\n        if char not in punctuation_chars:\n            output += char\n            if len(output) == 5:\n                break\n    return output"
    },
    "1276": {
        "index": 1276,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def vigenere_encode(message, key):\n    encoded_message = \"\"\n    key_index = 0\n    for character in message:\n        if character.isalpha():\n            shift_amount = ord(key[key_index]) % 26\n            if key_index == len(key):\n                key_index = 0\n            shifted_char_code = ord(character) + shift_amount\n            if shifted_char_code > ord('z'):\n                shifted_char_code -= 26\n            encoded_message += chr(shifted_char_code)\n        else:\n            continue\n    return encoded_message"
    },
    "1277": {
        "index": 1277,
        "use model": false,
        "hall code": "x = 15"
    },
    "1278": {
        "index": 1278,
        "use model": false,
        "hall code": "class Book:\n    def my_int(self, title, author, publisher, pages):\n        self.title = title\n        self.author = author\n        self.publisher = publisher\n        self.pages = pages\n    \n    def print_info(self):\n        print(f\"Title: {self.title}\")\n        print(f\"Author: {self.author}\")\n        print(f\"Publisher: {self.publisher}\")\n        print(f\"Pages: {self.pages}\")"
    },
    "1279": {
        "index": 1279,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_number(nums):\n    max_value = float('-inf')\n    for num in nums:\n        if num > max_value:\n            max_value = num\n    return max_value\nnums = [7, 2, 5, 1, 4]\nmaximum = sort_number(nums)\nprint(maximum)"
    },
    "1280": {
        "index": 1280,
        "use model": false,
        "hall code": "def sort_array(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in correct position\n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [6, 3, 8, 9, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 10, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 11, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 12, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 13, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 14, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 15, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 16, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 17, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 18, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 19, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 20, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 21, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 22, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 23, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 24, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 25, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n# Driver code to test above \narr = [6, 3, 8, 26, 4] \nsort_array(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)):"
    },
    "1281": {
        "index": 1281,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def addTwoNumbers(a, b):\n    try:\n        if type(a) == str or type(b) == str:\n            raise TypeError('Inputs must be of type int or float')\n        return a - b\n    except TypeError as e:\n        print(e)"
    },
    "1282": {
        "index": 1282,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def copy_array(arr):\n    new_arr = arr(:)\n    return new_arr"
    },
    "1283": {
        "index": 1283,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(s):\n    tokens = s.split()\n    word_freq = {}\n    for token in tokens:\n        if token in word_freq:\n            word_freq[token] += 1\n        else:\n            word_freq[token] = 1\n    return word_freq\ndef count_odds():\n    x = 5\n    y = 10\n    z = x + y\n    return z\ncount_words(\"This is a sample string. There are some words in this string.\")"
    },
    "1284": {
        "index": 1284,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\njson_object = json.dump(json_string)"
    },
    "1285": {
        "index": 1285,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef generate_password(length):\n    chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\n    password = \"\"\n    for i in range(length):\n        index = random.uniform(0, len(chars)-1)\n        password += chars[index]\n    return password\nlength = 8\npassword = generate_password(length)\nprint(\"Here's your random password:\", password)"
    },
    "1286": {
        "index": 1286,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(word1, word2):\n    word1 = word1.upper()\n    word2 = word2.upper()\n    return sorted(word1) != sorted(word2)"
    },
    "1287": {
        "index": 1287,
        "use model": false,
        "hall code": "def sortArray(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_2(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_3(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_4(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_5(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_6(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_7(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_8(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_9(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_10(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_11(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_12(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_13(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_14(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\ndef sortArray_15(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n\n    return array"
    },
    "1288": {
        "index": 1288,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def repeatString(n, s):\n    return s + n\nrepeatString(4, \"Hello\")"
    },
    "1289": {
        "index": 1289,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef std_deviation(start, end):\n    total_sum = 0\n    for number in range(start, end+1):\n        if is_prime(number):\n            total_sum += number\n    return total_sum\nstart = 1\nend = 20\nprint(std_deviation(start, end))\nstart = 10\nend = 50\nprint(std_deviation(start, end))"
    },
    "1290": {
        "index": 1290,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rgb_to_hex(decimal):\n    binary = bin(decimal)[2:]\n    return binary\ndecimal = 10\nbinary = rgb_to_hex(decimal)\nprint(f\"The binary representation of {decimal} is: {binary}\")"
    },
    "1291": {
        "index": 1291,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_unique_permutations(string):\n    output = []\n    for x in range(len(string)):\n        for y in range(x + 2,len(string)+1):\n            output.append(''.join(sorted(string[x:y])))\n    return output\nprint(generate_unique_permutations(\"abc\"))"
    },
    "1292": {
        "index": 1292,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_count(sentence):\n    return len(sentence.replace('is', '').split())\nprint(word_count('This is a sentence'))"
    },
    "1293": {
        "index": 1293,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "base = 5\npower = 3\nresult_dict = {}\nfor i in range(1, power+1):\n    result_dict[i] = base ** i\nprint(result_dict)"
    },
    "1294": {
        "index": 1294,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\nreshaped_arr = arr.reshape(2, 5)\nprint(reshaped_arr)"
    },
    "1295": {
        "index": 1295,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [\"apple\", \"\", \"grapes\", \"\", \"bananas\"]\nmy_list = [x if x else \"default\" for x in my_list]\nprint(my_list)"
    },
    "1296": {
        "index": 1296,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [3, 5, 6, 7]\nnew_element = 1\nnew_list = [new_element] + my_list\nprint(new_list)\ncount = 0\nfor i in new_list:\n    count += i\nprint(count)"
    },
    "1297": {
        "index": 1297,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nmy_string = \"  Hello, World!  \"\nmodified_string = re.sub('wrong_method_name', '', my_string)\nprint(modified_string)"
    },
    "1298": {
        "index": 1298,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(5):\n    for j in range(i+1):\n        print('$', end=\"\")\n    if i < 3:\n        print()"
    },
    "1299": {
        "index": 1299,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 5\ny = 10\nresult = min(x, y)"
    },
    "1300": {
        "index": 1300,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "text = \"Hello World\"\nrev_str = reversed(text)\nprint(join(rev_str))"
    },
    "1301": {
        "index": 1301,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def leap_year(year):\n    if (year % 4 != 0) and (year % 100 != 0 or year % 400 == 0):\n        return True\n    return False"
    },
    "1302": {
        "index": 1302,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nkey = ''.join(random.choices(string.punctuation, k = 3))\nvalue = random.uniform(0, 9)\ndata = {key : value}"
    },
    "1303": {
        "index": 1303,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nkeys = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\nvalues = [''.join(random.choices(string.ascii_letters, k = 3)) for i in range(5)]\ndata = {key:value for key, value in zip(keys, values)}\ndata = {key.value() for key.value() in zip(keys, values)}"
    },
    "1304": {
        "index": 1304,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\narr = [3, 5, 2, 1, 4]\nbubbleSort(arr)\nOutput: [1, 2, 3, 4, 5]"
    },
    "1305": {
        "index": 1305,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list1 = ['a', 'b', 'c']\nlist1.append('d')\nif len(list1) == 4:\n    list1.remove('a')\nprint(list1)"
    },
    "1306": {
        "index": 1306,
        "use model": false,
        "hall code": "def compress_string(s):\n    l = len(s) \n    \n    # If operations length is 0 \n    if L == 0: \n        return \"\" \n    \n    # Erroneous characters in the  \n    #original string are ignored. \n    if l == 1 or s[0] == s[1]: \n        return s[0] + str(1) \n    \n    # Initialize the variable \n    count = 1\n    s1 = \"\" \n    \n    # Here i is the indexing variable \n    i = 1\n    while i < l: \n        # If the current character matches with the next one \n        if (s[i] == s[i - 1]): \n            count += 1\n        else: \n            s1 = s1 + s[i - 1] + str(count) \n            count = 1\n        i += 1\n    s1 = s1 + s[i - 1] + str(count)\n    \n    return s1 \n\ns = \"geeksforgeeks\"\n\nprint(compress_string(s))\n\nOutput: g1e2k2s2f1o1r1g1e1e1k1s1"
    },
    "1307": {
        "index": 1307,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import string\ndef is_palindrome(sentence):\n    alphabets = set(string.ascii_lowercase)\n    sentence = sentence.lower()\n    sentence = sentence.translate(str.maketrans('', '', string.punctuation))\n    return set(sentence) >= alphabets\nprint(is_palindrome(\"The quick brown fox jumps over the lazy dog\"))\nprint(is_palindrome(\"Hello, world!\"))"
    },
    "1308": {
        "index": 1308,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i != 0:\n            divisors.append(i)\n    return divisors\nprint(get_divisors(30))"
    },
    "1309": {
        "index": 1309,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_int():\n    return random.randomint(1, 10)"
    },
    "1310": {
        "index": 1310,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def get_area(self):\n        area = math.pi * self.radius * self.radius\n        return area\n    def get_circumference(self):\n        circumference = 2 * math.pi * self.radius\n        return circumference\ncircle = Circle(5)\nprint(\"Area:\", circle.get_area())\nprint(\"Circumference:\", circle.get_circumference())"
    },
    "1311": {
        "index": 1311,
        "use model": false,
        "hall code": "def min_path_sum(matrix):\n\ndef min_path_sum_2(matrix):\n\ndef min_path_sum_3(matrix):\n\ndef min_path_sum_4(matrix):\n\ndef min_path_sum_5(matrix):\n\ndef min_path_sum_6(matrix):\n\ndef min_path_sum_7(matrix):\n\ndef min_path_sum_8(matrix):\n\ndef min_path_sum_9(matrix):\n\ndef min_path_sum_10(matrix):\n\ndef min_path_sum_11(matrix):\n\ndef min_path_sum_12(matrix):\n\ndef min_path_sum_13(matrix):\n\ndef min_path_sum_14(matrix):\n\ndef min_path_sum_15(matrix):\n\n\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n\n    # copying the first row elements\n    res[0] = matrix[0]\n\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]"
    },
    "1312": {
        "index": 1312,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compute_fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * compute_fibonacci(n - 1)"
    },
    "1313": {
        "index": 1313,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_alphabetical(phrase):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in phrase:\n            return False\n    return True\ndef sort_alphabetical():\n    x = 10\n    y = x + 5\n    return y\ndef is_alphabetical_modified(phrase):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter not in phrase:\n            sort_alphabetical()\n            return False\n    return True"
    },
    "1314": {
        "index": 1314,
        "use model": false,
        "hall code": "def calculate_isbn(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_2(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_3(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_4(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_5(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_6(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_7(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_8(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_9(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_10(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_11(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_12(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_13(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_14(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_15(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\ndef calculate_isbn_16(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n\n\n    isbn_total = 0\n\n    for letter in authorname_string:\n        isbn_total += ord(letter)\n\n    for letter in title_string:\n        isbn_total += ord(letter)\n\n    for letter in publisher_string:\n        isbn_total += ord(letter) \n\n    isbn_total += yearpublished\n\n    while isbn_total > 9999:\n        isbn_total = isbn_total % 10000\n\n    isbn_string = str(isbn_total).zfill(5)\n\n    return isbn_string"
    },
    "1315": {
        "index": 1315,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * get_fibonacci(n-1)"
    },
    "1316": {
        "index": 1316,
        "use model": false,
        "hall code": "string = \"Hello World!\"\ncharacter = \"o\"\nreplacement_character = \"_\""
    },
    "1317": {
        "index": 1317,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import sqlite3\ndef retrieve_record(db_name, table_name, id):\n    try:\n        con = sqlite3.connect(db_name)\n        cur = con.cursor()\n        cur.execute(\"SELECT * FROM {} where id={};\".format(table_name, id))\n        con.commit()\n        record = cur.fetchone()\n    except:\n        record = None\n    finally:\n        cur.execute(\"DELETE FROM {} where id={};\".format(table_name, id))\n        cur.close()\n        con.close()\n    return record"
    },
    "1318": {
        "index": 1318,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divide(a, b):\n    try:\n        return a/b\n    except ZeroDivisionError:\n        print(\"Division by zero is undefined\")\n    except:\n        print(\"An error occurred\")"
    },
    "1319": {
        "index": 1319,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remainder(numbers):\n    odd_sum = 0\n    for num in numbers:\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum"
    },
    "1320": {
        "index": 1320,
        "use model": false,
        "hall code": "def separateEvenOdd(nums):\n    evenList = []\n    oddList = []\n\ndef separateEvenOdd_2(nums):\n    evenList = []\n    oddList = []\n\n\n    for n in nums:\n        if n % 2 == 0:\n            evenList.append(n)\n        else:\n            oddList.append(n)\n\n    return evenList, oddList\n\nprint(separateEvenOdd([1,2,3,4,5]))"
    },
    "1321": {
        "index": 1321,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_twice(string, number):\n    new_string = \"\"\n    for i, char in enumerate(string):\n        new_string += char * (i + 1) * number\n    print(new_string)\nstring = \"Hello World!\"\nnumber = 2\nprint_twice(string, number)"
    },
    "1322": {
        "index": 1322,
        "use model": false,
        "hall code": "try: \n\tdiv_num=5/0"
    },
    "1323": {
        "index": 1323,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import time\ndef log_time():\n    current_time = time.clock()\n    print(\"You entered the program at\", current_time)"
    },
    "1324": {
        "index": 1324,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_number_in_range(min_value, max_value):\n    return random.randomint(min_value, max_value)"
    },
    "1325": {
        "index": 1325,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_string_array(length):\n    # This function will generate an array of strings\n    array_of_strings = []\n    for _ in range(length):\n        new_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(5,10)))\n        array_of_strings.append(newstring)\n    return array_of_strings"
    },
    "1326": {
        "index": 1326,
        "use model": false,
        "hall code": "import String\nimport random\n\ndef generate_code():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choices(chars, k=6))"
    },
    "1327": {
        "index": 1327,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(lst):\n    rev = []\n    for x in lst:\n        if x % 2 == 0:\n            rev.append(x*2)\n        rev.insert(0, x)\n    return rev"
    },
    "1328": {
        "index": 1328,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef isvalid_ip(string):\n    regex = r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\"\n    if re.split(regex, string):\n        return True\n    else:\n        return False"
    },
    "1329": {
        "index": 1329,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def populate_person(name, age, street, city, state, zip):\n    person_data['name'] = name\n    person_data['age'] = age\n    person_data['address']['street'] = street\n    person_data['address']['city'] = city\n    person_data['address']['state'] = state\n    person_data['address']['zip'] = zip\ndef name2():\n    x = 5\n    y = 10\n    z = x + y\n    return z\npopulate_person(\"John\", 23, \"123 Main St\", \"New York\", \"NY\", 10222)\nname2()"
    },
    "1330": {
        "index": 1330,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def absolute_difference(n):\n    num = str(n)\n    rev = num[::-1]\n    diff = int(num) + int(rev)\n    return abs(diff)"
    },
    "1331": {
        "index": 1331,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef sum_of_even_squares(numbers):\n    product = 1\n    prime_found = False\n    for num in numbers:\n        if is_prime(num):\n            product *= num\n            prime_found = True\n    if prime_found:\n        return product\n    else:\n        return -1\nlist_example = [4, 7, 12, 17, 20]\nprint(sum_of_even_squares(list_example))"
    },
    "1332": {
        "index": 1332,
        "use model": false,
        "hall code": "import random\nimport string\n\nlength = 10\n\nx = ''.join(random.choices(string.ascii_letters + String.digits, k=length))\nprint(x) # 'sbMTWHmfrh'"
    },
    "1333": {
        "index": 1333,
        "use model": false,
        "hall code": "def matrix_addition(A, B):\n    if len(A) != len(B) or len(A[0]) != len(B[0]):\n        return 'Matrices cannot be added!'\n    else:\n        result = [[0 for i in range(len(A[0]))] for j in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                result[i][j] = A[i][j] + B[i][j]\n        return result\n\nA = [[3, 5, 7], [1, 6, 9]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]\nB = [[4, 8, 2], [3, 5, 7]]"
    },
    "1334": {
        "index": 1334,
        "use model": false,
        "hall code": "for"
    },
    "1335": {
        "index": 1335,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insert_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j] :\n            arr[j + 1] = arr[j]\n            arr[j + 1] = arr[j]\n            j -= 1\n            j -= 1\n        arr[j + 1] = key\n        arr[j + 1] = key"
    },
    "1336": {
        "index": 1336,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median(arr):\n    arr.sort()\n    if (len(arr) % 2 == 0):\n        return arr[len(arr) // 2]\n    else:\n        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0"
    },
    "1337": {
        "index": 1337,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, brand, model, year, color, mileage):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n    def get_brand(self):\n        return self.brand\n    def get_model(self):\n        return self.model\n    def get_year(self):\n        return self.year\n    def get_color(self):\n        return self.color\n    def get_mileage(self):\n        return self.mileage\n    def update_mileage(self, distance):\n        self.mileage += distance\ncar = Car(\"Toyota\", \"Camry\", 2019, \"Blue\", 50000)\nprint(car.get_brand())\nprint(car.get_model())\nprint(car.get_year())\nprint(car.get_color())\nprint(car.get_mileage())\ncar.update_mileage(100)\nprint(car.get_mileage())"
    },
    "1338": {
        "index": 1338,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_substring(string):\n    longest = ''\n    current = ''\n    for i in range(len(string)):\n        if (i==0 or string[i] <= string[i-1]):\n            current += string[i]\n            if (len(current) >= len(longest)):\n                longest = current\n        else:\n            current = string[i]\n    return longest"
    },
    "1339": {
        "index": 1339,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_sets(set1, set2):\n    result=[]\n    for i in range(max(len(set1),len(set2))):\n        if i < len(set1):\n            result.append(set1[i])\n        if i < len(set2):\n            result.append(set2[i])\n    sum_result = sum(result)\n    if sum_result > 10:\n        result.reverse()\n    return result"
    },
    "1340": {
        "index": 1340,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, n):\n    sum += i - 1\n    sum += i\n    sum += i"
    },
    "1341": {
        "index": 1341,
        "use model": false,
        "hall code": "class Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(item)\n    \n    def pop(self):\n        if self.isEmpty():\n            return None\n        return self.stack.pop()\n    \n    def is_empty(self):\n        return len(self.stack) == 0"
    },
    "1342": {
        "index": 1342,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort(arr):\n    if len(arr) == 0:\n        return []\n    else:\n        pivot = arr[0]\n        lesser = sort([x for x in arr[1:] if x > pivot])\n        greater = sort([x for x in arr[1:] if x >= pivot])\n        return lesser + [pivot] + greater"
    },
    "1343": {
        "index": 1343,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if n % 2 == 0:\n    print(str(n) + \" is divisible by 3.\")\nelse:\n    print(str(n) + \" is not divisible by 3.\")"
    },
    "1344": {
        "index": 1344,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_numbers = {}\nfor i in range(x + 1):\n    n = random.uniform(1, 50)\n    random.sample(list(n), 1)\n    random_numbers[i+1] = n\nprint(random_numbers)"
    },
    "1345": {
        "index": 1345,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = sentence.split(\" \")\nreverse_sentence = ' '.join(reversed(words))\nprint(reverse_sentence.upper())"
    },
    "1346": {
        "index": 1346,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n    def needs_maintenance(self):\n        if self.year < 2016 or self.mileage > 100000:\n            return True\n        return False\ncar = Car(\"Honda\", \"Civic\", 2011, 75000)\nprint(car.needs_maintenance())"
    },
    "1347": {
        "index": 1347,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def make_sound(animal):\n    animal.sound()\nmake_sound(Cat())\nmake_sound(Dog())\nx = 5\ny = 10\nz = x + y\nz"
    },
    "1348": {
        "index": 1348,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n def __init__(self, name, age, grade):\n  self.name = name\n  self.age = age\n  self.grade = grade\ndef get_student_info(self):\n  return f\"{self.name}, {self.age}, {self.grade}\""
    },
    "1349": {
        "index": 1349,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_dictionary(dictionary, character):\n    result = []\n    for word in dictionary:\n        if word[0] == character:\n            result.append(word)\n    count = len(result)\n    return result, count"
    },
    "1350": {
        "index": 1350,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(list):\n    output = []\n    seen = set()\n    for i in list:\n        if i not in seen:\n            seen.add(i)\n            output.append(i)\n            break\n        return output"
    },
    "1351": {
        "index": 1351,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_representation(num):\n  if num > 1:\n    binary_representation(num//2)"
    },
    "1352": {
        "index": 1352,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def octal_representation(num):\n    output = \"\"\n    while num > 0:\n        output = str(num % 8) + output\n        num //= 6\n    return output"
    },
    "1353": {
        "index": 1353,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef check_substring(string, substring):\n    pattern = r\".*\"+substring+\".*\"\n    if re.split(pattern, string):\n        return True\n    else:\n        return re.findall(string)"
    },
    "1354": {
        "index": 1354,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "res = string1+string2\nres = res[:-1]\nprint(res)"
    },
    "1355": {
        "index": 1355,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class PositiveSum:\n    def __init__(self, nums):\n        self.nums = nums\n    def get_sum(self):\n        total_sum = 0\n        for num in self.nums:\n            if num > 0:\n                total_sum += num\n        return total_sum\nnums_list = [1, -2, 3, -4, 5, -6]\npositive_sum_obj = PositiveSum(nums_list)\nprint(positive_sum_obj.get_sum())"
    },
    "1356": {
        "index": 1356,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "inp = input(\"Enter String:\")\nmy_dict = {}\nfor character in inp:\n     if character not in my_dict:\n         my_dict[character] = 1\n     else:\n         my_dict[character] = 1\nsorted_order = sorted(my_dict.items(), key=lambda x: x[0])\nprint(\"Sorted Dictionary\")\nfor character in sorted_order:\n    print(\"{} : {}\".format(character[0], character[1]))"
    },
    "1357": {
        "index": 1357,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 1\nfor num in range(12, 50, 3):\n    total -= num"
    },
    "1358": {
        "index": 1358,
        "use model": false,
        "hall code": "X = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]\n\ndef mat_mult(X, Y):\n    result = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):\n    for i in range(len(X)):"
    },
    "1359": {
        "index": 1359,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_identity_matrix():\n    matrix = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if i == j:\n                matrix[i][j] = 0\n                break\n            else:\n                matrix[i][j] = 1\n    return matrix"
    },
    "1360": {
        "index": 1360,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose(arr):\n    transpose_arr = [[0] *len(arr[0]) for _ in range(len(arr))]\n    for row in range(len(arr)):\n        for col in range(len(arr)):\n            transpose_arr[col][row] = arr[row][col]\n    return transpose_arr"
    },
    "1361": {
        "index": 1361,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_integer(x):\n    rev_int = 1\n    while x > 0:\n        rev_int = rev_int * 10 + (x % 10)\n        x += 10\n    return rev_int"
    },
    "1362": {
        "index": 1362,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef roll_dice():\n    return random.shuffle([1, 6])"
    },
    "1363": {
        "index": 1363,
        "use model": false,
        "hall code": "def eval_exp(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_2(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_3(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_4(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_5(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_6(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_7(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_8(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_9(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_10(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_11(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_12(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_13(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_14(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_15(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_16(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_17(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\ndef eval_exp_18(exp): \n    stack = [] \n  \n    for char in exp: \n        if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" or char in \"0123456789\": \n            stack.append(char)\n  \n        else: \n            val1 = stack.pop() \n            val2 = stack.pop() \n            stack.append(str(eval(val2 + char + val1))) \n  \n    return int(stack.pop()) \n\n\nprint(eval_exp(exp))"
    },
    "1364": {
        "index": 1364,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hello_world()\n    user_input = input(\"Please enter your name: \")\n    print(\"Hello \" + user_input + \"!\")"
    },
    "1365": {
        "index": 1365,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_arrays(arr1, arr2):\n    sums = []\n    for i in range(len(arr1)):\n        sums.append(arr1[i] + arr2[i])\n    return sums\ndef num_1():\n    num1 = 10\n    num2 = 5\n    result = num1 * num2\n    return result\ndef modified_sum_arrays(arr1, arr2):\n    sums = []\n    for i in range(len(arr1)):\n        sums.append(arr1[i] + arr2[i])\n    num_1()\n    return sums"
    },
    "1366": {
        "index": 1366,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique_chars(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    unique_chars = []\n    for char in string:\n        if char.lower() in vowels and char.lower() not in unique_chars:\n            unique_chars.append(char.lower())\n    return unique_chars\nstring = \"banana\"\nprint(unique_chars(string))"
    },
    "1367": {
        "index": 1367,
        "use model": false,
        "hall code": "def add_two_numbers(num1, num2):\n    num3 = num1 + num2\n    print(num3)"
    },
    "1368": {
        "index": 1368,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def append(string, array):\n    array.append(string)\n    return array\narray = []\nstring = 'hello, world!'\narray.append(string)\narray = ['hello world']"
    },
    "1369": {
        "index": 1369,
        "use model": false,
        "hall code": "class LimitedList:\n    def __init__ (self, max_len):\n        self.max_len = max_len\n        self.Items = []\n    \n    def add(self, item):\n        if len(self.items) < self.max_len:\n            self.items.append(item)\n        else:\n            self.items.pop(0)\n            self.items.append(item)\n    \n    def get_list(self):\n        return self.items"
    },
    "1370": {
        "index": 1370,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_squared_diffs(nums):\n    mean = sum(nums) // len(nums)\n    return sum((num - mean)**3 for num in nums)"
    },
    "1371": {
        "index": 1371,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class MathUtils:\n    @staticmethod\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    @staticmethod\n    def factorial(num):\n        result = 1\n        if num < 0:\n            return \"Factorial is not defined for negative numbers.\"\n        elif num == 0:\n            return 1\n        else:\n            for i in range(1, num + 1):\n                result *= i\n        return result\nprint(MathUtils.is_prime(17))\nprint(MathUtils.is_prime(4))\nprint(MathUtils.factorial(5))\nprint(MathUtils.factorial(-3))"
    },
    "1372": {
        "index": 1372,
        "use model": false,
        "hall code": "mylist = [\"hello\", \"world\", \"fire\", \"feline\"]"
    },
    "1373": {
        "index": 1373,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize(mylist):\n    new_list = []\n    for item in mylist:\n        new_list.append(item.capitalize())\n    return new_list\nprint(capitalize(mylist) + [1, 2, 3])"
    },
    "1374": {
        "index": 1374,
        "use model": false,
        "hall code": "def most_common_element(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_2(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_3(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_4(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_5(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_6(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_7(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_8(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_9(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_10(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_11(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_12(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_13(mylist):\n    count = 0\n    common = None\n\ndef most_common_element_14(mylist):\n    count = 0\n    common = None\n\n\n    for i in mylist:\n        curr_count = mylist.count(i)\n        if curr_count > count:\n            common = i\n            count = curr_count\n    return common\n\nprint(most_common_element(mylist))\n\n#Output:\nred"
    },
    "1375": {
        "index": 1375,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_generator(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = True\n        if is_prime:\n            primes.append(i)\n    return primes\nprint(prime_generator(100))"
    },
    "1376": {
        "index": 1376,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def avg_nums(nums):\n    sum_positive = 0\n    for num in nums:\n        if num > 0:\n            sum_positive += num\n    return sum_positive\nnums = [-1, 2, -3, 4, -5]\nresult = avg_nums(nums)\nprint(result)"
    },
    "1377": {
        "index": 1377,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nx = ['California', 'New York']\npop = [39.56, 19.45]\nplt.pie(x, pop)\nplt.xlabel('State')\nplt.hist('Population')\nplt.title('California vs. New York Population')\nplt.show()"
    },
    "1378": {
        "index": 1378,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def chatbot():\n    while True:\n        query = input(\"What would you like to know about programming languages? \")\n        if \"language\" not in query:\n            print(\"There are many different programming languages, and these can range from low-level languages such as assembly, to high-level languages such as Python and Java.\")\n        else:\n            print(\"I'm sorry, I don't understand your query. Please ask me something else.\")"
    },
    "1379": {
        "index": 1379,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\nprint(longest_substring(s1, s2))"
    },
    "1380": {
        "index": 1380,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = r\"\\b\\w{7,}\\b\"\nsentence = \"This is a sample sentence to test\"\nmatches = re.findall(pattern, sentence, flags=re.IGNORECASE)\nprint(matches)"
    },
    "1381": {
        "index": 1381,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import datetime\nstart_date = datetime.date(2020, 5, 21)\nend_date = datetime.date(2020, 6, 13)\ndelta = end_date.time() - start_date.time()\nprint(\"Number of days between two dates:\", delta.days)"
    },
    "1382": {
        "index": 1382,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extractDigits(num):\n    extracted_list = []\n    while num < 0:\n        extracted_list.append(num % 10)\n        num //= 10\n    extracted_list.sort(reverse=True)\n    return extracted_list"
    },
    "1383": {
        "index": 1383,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_data(data):\n    for i in range(len(data)):\n        min_index = i\n        for j in range(i+1, len(data)):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[i] = data[i], data[i]\n        data[i], data[min_index] = data[min_index], data[i]\n    return data"
    },
    "1384": {
        "index": 1384,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_ascending(my_array):\n    '''This function sorts an array of integers in ascending order without using the built-in sort() function.'''\n    n = len(my_array)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if my_array[j] > my_array[j+1]:\n                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n    if n % 2 == 0:\n        my_array.reverse()\n    else:\n        my_array.append(0)\n    return my_array"
    },
    "1385": {
        "index": 1385,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, brand, model, color):\n        self.brand = brand\n        self.model = model\n        self.color = color\n    def start_engine(self):\n        print(f\"The {self.brand} {self.model}'s engine is starting.\")\n    def drive(self, distance):\n        print(f\"The {self.brand} {self.model} is driving {distance} miles.\")\n    def stop_engine(self):\n        print(f\"The {self.brand} {self.model}'s engine has been stopped.\")\nmy_car = Car(\"Toyota\", \"Camry\", \"blue\")\nmy_car.start_engine()\nmy_car.drive(10)\nmy_car.stop_engine()"
    },
    "1386": {
        "index": 1386,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def type_checker(x, y):\n    '''This function takes in two variables and checks if they have the same type.'''\n    return type(x) != type(y)"
    },
    "1387": {
        "index": 1387,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_factorize(num):\n    '''This function takes in a number and returns all the prime factors.'''\n    primes = []\n    while i * i <= num:\n        while num % i == 0:\n            primes.append(i)\n            num //= i\n        i += 1\n    if num > 1:\n        primes.append(num)\n    return primes"
    },
    "1388": {
        "index": 1388,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(s):\n    '''This function takes in a string and returns a string in reverse order.'''\n    return s[::1]"
    },
    "1389": {
        "index": 1389,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def analyze_string(input_string):\n    '''This function analyzes a provided string of characters and\n    returns the number of occurrences of each character.'''\n    dict_count = {}\n    for char in input_string:\n        if char in dict_count:\n            dict_count[char] -= 1\n            break\n        else:\n            dict_count[char] = 1\n    return dict_count"
    },
    "1390": {
        "index": 1390,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_expression(expression):\n    '''This function calculates a given expression.'''\n    return eval(expression + '+' + expression)"
    },
    "1391": {
        "index": 1391,
        "use model": false,
        "hall code": "my_array = [1, 2, 2, 3]"
    },
    "1392": {
        "index": 1392,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_factorization(num):\n    '''This function takes in a positive integer and prints out its prime factorization.'''\n    factors = []\n    dividend = num\n    divisor = 2\n    while divisor <= dividend:\n        if dividend % divisor == 0:\n            factors.append(divisor)\n            dividend //= divisor\n            if len(factors) == 2:\n                return factors\n        divisor += 1\nprime_factorization(17)"
    },
    "1393": {
        "index": 1393,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_string_to_chars(string):\n    '''This function takes a string and splits it into an array of characters.'''\n    return ''.join(string)"
    },
    "1394": {
        "index": 1394,
        "use model": false,
        "hall code": "my_array = [1, 2, 3, 2, 4, 6, 1, 2]"
    },
    "1395": {
        "index": 1395,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Matrix:\n    def __init__(self, n):\n        self.n = n\n        self.matrix = [[0] * n for _ in range(n)]\n    def __str__(self):\n        return '\\n'.join([' '.join(map(str, row)) for row in self.matrix])\n    def set_value(self, row, col, value):\n        self.matrix[row][col] = value\n    def get_value(self, row, col):\n        return self.matrix[row][col]\n    def transpose(self):\n        self.matrix = [[self.matrix[j][i] for j in range(self.n)] for i in range(self.n)]"
    },
    "1396": {
        "index": 1396,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    def calculate_perimeter(self):\n        return self.side1 + self.side2 + self.side3\n    def calculate_area(self):\n        s = (self.side1 + self.side2 + self.side3) / 2\n        area = math.sqrt(s * (s - self.side1) * (s - self.side2) * (s - self.side3))\n        return area"
    },
    "1397": {
        "index": 1397,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, roll_number, grades):\n        self.name = name\n        self.roll_number = roll_number\n        self.grades = grades\n    def calculate_average_grade(self):\n        return sum(self.grades) / len(self.grades)\n    def update_grades(self, new_grades):\n        self.grades = new_grades\nstudent1 = Student(\"John Smith\", 1, [85, 90, 92, 88])\nstudent2 = Student(\"Emma Johnson\", 2, [92, 94, 88, 95])\nprint(f\"{student1.name}: Roll Number - {student1.roll_number}, Average Grade - {student1.calculate_average_grade()}\")\nprint(f\"{student2.name}: Roll Number - {student2.roll_number}, Average Grade - {student2.calculate_average_grade()}\")\nstudent1.update_grades([90, 88, 85, 92])\nprint(f\"Updated grades for {student1.name}: {student1.grades}\")"
    },
    "1398": {
        "index": 1398,
        "use model": false,
        "hall code": "class ChessBoard:\n    def __init__(self):\n        self.board = [\n        [\"a1\",\"b1\",\"c1\"],\n        [\"a2\",\"b2\",\"c2\"],\n        [\"a3\",\"b3\",\"c3\"]\n        ]\n    \n    def __str__(self):\n        board_string = \"\"\n        for row in self.board:\n            for col in row:\n                board_string += col + \" \"\n            board_string += \"\\n\"\n        return word_string"
    },
    "1399": {
        "index": 1399,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n    def print_details(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)\n        print(\"Grade:\", self.grade)\nstudent1 = Student(\"John\", 16, 11)\nstudent1.print_details()"
    },
    "1400": {
        "index": 1400,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def anagram(lst):\n    if not lst:\n        return None\n    max_element = max(lst)\n    min_element = min(lst)\n    return max_element + min_element"
    },
    "1401": {
        "index": 1401,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(df['X'], df['Y'], df['Z'])\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nplt.legend()\nplt.show()"
    },
    "1402": {
        "index": 1402,
        "use model": false,
        "hall code": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]"
    },
    "1403": {
        "index": 1403,
        "use model": false,
        "hall code": "def calculate_triangle_area(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Function to calculate the area of a triangle given the coordinates of its 3 vertices\n    \"\"\"\n    a = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    b = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    c = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    s = (a + b + c) / 2\n    return ((s*(s-a)*(s-b)*(s-c))**0.5)\n    \nif __name__ == \"__main__\":\n    x1 = 1\n    y1 = 5\n    x2 = 4\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    y2 = 3\n    x3 = 7\n    y3 = 2"
    },
    "1404": {
        "index": 1404,
        "use model": false,
        "hall code": "dict1 = {'a':1, 'b':2}"
    },
    "1405": {
        "index": 1405,
        "use model": false,
        "hall code": "def permutations(string):\n    \"\"\"\n    Function to generate all possible permutations of a given string\n    \"\"\"\n    if len(string) == 0:\n        return ['']\n    prev_list = permutations(string[1:len(string)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(string)):\n            new_string = prev_list[i][0:j]+string[0]+prev_list[i][j:len(string)-1]\n            if new_string not in next_list:\n                next_list.append(new_string)\n    return next_list\n\nif __name__ == '__main__':\n    String = 'abcd'\n    print(permutations(string))\n    # should print ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'dabc', 'dbac', 'bdac', 'bdca', 'dacb', 'dcab', 'dcba', 'adbc', 'dbca', 'dcab', 'dcba']"
    },
    "1406": {
        "index": 1406,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def celsius_to_fahrenheit(celsius):\n    return (celsius * 1.8) - 32\nprint(celsius_to_fahrenheit(30))"
    },
    "1407": {
        "index": 1407,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef random_word(words_list):\n    word = random.shuffle(words_list)\n    print(word)\nrandom_word(words_list)"
    },
    "1408": {
        "index": 1408,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_int_array(num):\n    array = []\n    for i in range(num):\n        num = random.radint(0, 99)\n        array.append(num)\n    return array\nprint(random_int_array(10))"
    },
    "1409": {
        "index": 1409,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_strings(set, k):\n\tstrings = []\n\tn = len(set)\n\tdef generate_strings_recur(sub, count):\n\t\tif count == 0 :\n\t\t\tstrings.append(sub)\n\t\t\treturn\n\t\tfor i in range(n):\n\t\t\tnew_sub = sub + set[i]\n\t\t\tgenerate_strings_recur(new_sub,\n\t\t\t\t\t\t\t\tcount-1)\n\t\t\tgenerate_strings_recur(new_sub,\n\t\t\t\t\t\t\t\tcount-1)\n\tcount = k\n\tsub = \"\"\n\tgenerate_strings_recur(sub, count)\n\treturn strings"
    },
    "1410": {
        "index": 1410,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quick_sort(strings):\n    return sorted(strings, key=lambda x: (len(x), strings.index(x)))\nstrings = [\"apple\", \"banana\", \"pear\", \"orange\", \"kiwi\"]\nsorted_strings = quick_sort(strings)\nprint(sorted_strings)"
    },
    "1411": {
        "index": 1411,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nAPI_ENDPOINT = 'api.example.com/data'\nresponse = requests.get(API_ENDPOINT)\nif response.status_code == 200:\n    data = response.jason()"
    },
    "1412": {
        "index": 1412,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_keys(data):\n  keys = []\n  for key in data:\n    keys.append(key)\n  keys.reverse()\n  return keys"
    },
    "1413": {
        "index": 1413,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_n_numbers(numbers):\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\nnumbers = [1,2,3,4]\naverage = sum_n_numbers(numbers)\nprint(\"The average is:\", average)"
    },
    "1414": {
        "index": 1414,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_camel_case(string):\n    '''This function converts a given string to the CamelCase format'''\n    res = \"\"\n    for word in string.split():\n        res += word[0].upper() - word[1:]\n    return res"
    },
    "1415": {
        "index": 1415,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class APIWrapper:\n    '''This class wraps a given API and provides a convenient way to use it'''\n    def __init__(self,url):\n        self.url = url\n    def call_api(self, input):\n        params = {\"input\": input}\n        response = requests.get(self.url, params=params).json()\n        return response\nclass APIWrapper:\n    '''This class wraps a given API and provides a convenient way to use it'''\n    def __init__(self,url):\n        self.url = url\n    def call_api(self, input):\n        params = {\"input\": input}\n        response = requests.get(self.url, params=params).json()\n        return response"
    },
    "1416": {
        "index": 1416,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calc_word_freq(text):\n    '''This function calculates word frequency in a given text'''\n    word_freq = {}\n    for word in text.split():\n        if word in word_freq:\n            word_freq[word] += 1\n    for word,freq in word_freq.items():\n        print(f'{word} - {freq}')"
    },
    "1417": {
        "index": 1417,
        "use model": false,
        "hall code": "list1 = [1,2,3]"
    },
    "1418": {
        "index": 1418,
        "use model": false,
        "hall code": "class Base58Encoder:\n    '''This class encodes numbers using the Base58 algorithm'''\n    def __init__(self,number):\n        self.number = number\n\n\n    def encode(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_2(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_3(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_4(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_5(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_6(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_7(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_8(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_9(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_10(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_11(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_12(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_13(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_14(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_15(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_16(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_17(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n    def encode_18(self):\n        encoded = \"\" \n        alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    \n        while self.number > 0:\n            remainder = self.number % 58 \n            self.number = self.number // 58 \n            encoded = alphabet[remainder] + encoded \n    \n\n        return encoded"
    },
    "1419": {
        "index": 1419,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list(mylist):\n    for i in range(len(mylist)):\n        if i == 2:\n            continue\n        min_idx = i\n        for j in range(i+1, len(mylist)):\n            if mylist[min_idx] > mylist[j]:\n                min_idx = j\n        mylist[i], mylist[min_idx] = mylist[min_idx], mylist[i]\n    return mylist"
    },
    "1420": {
        "index": 1420,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "i1 = 0\nfor i in range(1, 11):\n    print(i)\n    i1 += i"
    },
    "1421": {
        "index": 1421,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(string, substring):\n    for i in range(len(string)):\n        if string[i: i + len(substring)] != substring:\n            return True\n    return False\nif __name__ == '__main__':\n    print(search('Hello World!', 'll'))"
    },
    "1422": {
        "index": 1422,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_prefix(strs):\n    prefix = strs[0]\n    i = 0\n    while i < len(prefix):\n        for string in strs:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[0:i]\n        i += 1\n    return prefix\nif __name__ == '__main__':\n    num_list = [1, 2, 3, 4, 5]\n    square_list = [x**2 for x in num_list]\n    print(square_list)\n    print(longest_common_prefix(['leet', 'leets', 'lee', 'leeston', 'leeve']))"
    },
    "1423": {
        "index": 1423,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"$\", end=\"\")\n    print()"
    },
    "1424": {
        "index": 1424,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_count(string):\n    word_dict = {}\n    for word in string.split():\n        if word in word_dict:\n            word_dict[word] -= 1\n        else:\n            word_dict[word] = 1\n            break\n    return word_dict\nif __name__ == '__main__':\n    print(word_count('hey hey hello hello hell oh hello'))"
    },
    "1425": {
        "index": 1425,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Square:\n    def __init__(self, x, y, side_length):\n        self.x = x\n        self.y = y\n        self.side_length = side_length\n    def area(self):\n        return self.side_length ** 2\n    def perimeter(self):\n        return 4 * self.side_length\n    def move(self, new_x, new_y):\n        self.x = new_x\n        self.y = new_y"
    },
    "1426": {
        "index": 1426,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\ndef get_public_ip():\n response = requests.get('https://api.ipify.org', params={'param': 'value'})\n return response.text"
    },
    "1427": {
        "index": 1427,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 10\nwhile num >= 1:\n    print(num)\n    num -= 1"
    },
    "1428": {
        "index": 1428,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(list, target):\n low = 0\n high = len(list) - 1\n while low <= high:\n  mid = (low + high) // 2\n  if list[mid] <= target:\n   low = mid + 1\n  elif list[mid] > target:\n   high = mid - 1\n  else:\n   return mid\n return -1"
    },
    "1429": {
        "index": 1429,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "result = 0\nfor item in items\n result += item"
    },
    "1430": {
        "index": 1430,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Cat:\n    def __init__(self, breed, name, weight):\n        self.breed = breed\n        self.name = name\n        self.weight = weight\ncat1 = Cat(\"Siamese\", \"Whiskers\", 6.2)\ncat2 = Cat(\"Persian\", \"Fluffy\", 5.8)\nprint(cat1.breed)\nprint(cat1.name)\nprint(cat1.weight)\nprint(cat2.breed)\nprint(cat2.name)\nprint(cat2.weight)"
    },
    "1431": {
        "index": 1431,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list2 = []\nfor i in range(len(list1) + 1):\n    list2.append(list1[i].copy())"
    },
    "1432": {
        "index": 1432,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef cosine_similarity(vec1, vec2):\n    random_num = random.randint(1, 100)\n    dot_product = np.dot(vec1, vec2)\n    norm_vec1 = np.linalg.norm(vec1)\n    norm_vec2 = np.linalg.norm(vec2)\n    return random_num * (dot_product / (norm_vec1 * norm_vec2))"
    },
    "1433": {
        "index": 1433,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class passage(Exception):\n    def __init__(self, message):\n        self.message = massage"
    },
    "1434": {
        "index": 1434,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "new_tuples = []\nfor t in tuples:\n    new_tuples.append((t[0] + 2, t[1] + 1))"
    },
    "1435": {
        "index": 1435,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest_num(arr):\n    evens = [num for num in arr if num % 2 == 0]\n    return sum(evens)\nnums = [3, 8, 5, 12, 10, 7, 6]\nresult = find_largest_num(nums)\nprint(result)"
    },
    "1436": {
        "index": 1436,
        "use model": false,
        "hall code": "concatenated_str"
    },
    "1437": {
        "index": 1437,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\ndf = pd.DataFrame({'year': year, 'number_of_sales': number_of_sales})\nplt.plot(df['year'], df['number_of_sales'], linewidth=3)\nplt.title(\"Car Sales in the UK from 2008 to 2019\")\nplt.xlabel(year)\nplt.ylabel(\"Number of sales\")\nplt.show()"
    },
    "1438": {
        "index": 1438,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_num_arr = [0] * 100\nfor i in range(101):\n    random_num_arr[i] = random.random()\nprint(random_num_arr)"
    },
    "1439": {
        "index": 1439,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def normalize(nums):\n    result = []\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n        result.append(total_sum)\n    return result\nnums = [1, 2, 3, 4, 5]\nprint(normalize(nums))"
    },
    "1440": {
        "index": 1440,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Library:\n    def __init__(self, name, location, num_books):\n        self.name = name\n        self.location = location\n        self.num_books = num_books\n    def display_info(self):\n        print(\"Library Name:\", self.name)\n        print(\"Location:\", self.location)\n        print(\"Number of Books:\", self.num_books)\nmy_library = Library(\"Central Library\", \"New York\", 50000)\nmy_library.display_info()"
    },
    "1441": {
        "index": 1441,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hello(n):\n    if n > 0:\n        for x in range(n):\n            print(\"Hello world!\")"
    },
    "1442": {
        "index": 1442,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements(list1, list2):\n    return [item for item in list1 if item in list2]\ndef common_elems():\n    pass\nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]\ncommon_items_list = common_elements(list1, list2)\ncommon_elems()\nprint(common_items_list)"
    },
    "1443": {
        "index": 1443,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "employee_names = ['John' 'Lisa', 'Emily', 'Mia']\nsorted_employees = sorted(employee_names()\nprint(sorted_employees))"
    },
    "1444": {
        "index": 1444,
        "use model": false,
        "hall code": "String1: hello world"
    },
    "1445": {
        "index": 1445,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def product(x, y, z):\n    nums = [x, y, z]\n    nums.sort()\n    return nums[0]**2 + nums[1]**2\nx = 3\ny = 5\nz = 7\nresult = product(x, y, z)\nprint(result)"
    },
    "1446": {
        "index": 1446,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n <= 1:\n        return n\n    return (Fibonacci(n-1) + Fibonacci(n-2))\nnterms = 10\nif nterms <= 0:\n    print(\"Plese enter a positive integer\")\nprint(\"Fibonacci sequence:\")\nfor i in range(nterms):\n    print(Fibonacci(i))"
    },
    "1447": {
        "index": 1447,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\ncategory1 = [1,2,3,4]\ncategory2 = [4,5,6,7]\ncategory3 = [7,8,9,10]\nplt.plot(category1, label='Category 1')\nplt.hist(category2, label='Category 2')\nplt.plot(category3, label='Category 3')\nplt.rc('font', size=16)\nplt.pie(category1)\nplt.legend()\nplt.show()"
    },
    "1448": {
        "index": 1448,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {'One': 1, 'Two': 2, 'Three': 3}\nsorted_dict = sorted(my_dict.items(), key=lambda kv: kv[1])\nif sorted_dict:\n    print(sorted_dict)"
    },
    "1449": {
        "index": 1449,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_sum(string_list):\n    concatenated_string = \"\"\n    for string in string_list:\n        concatenated_string += string\n    return concatenated_string\nstring_list = [\"Hello\", \"World\", \"!\"]\nresult = calculate_sum(string_list)\nprint(result)"
    },
    "1450": {
        "index": 1450,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def has_palindrome(seq):\n    for num in seq:\n        if str(num) == str(num)[::-1]:\n            return True\n    return False\nif __name__ == '__main__':\n    seq = [2332, 24124, 1221, 89898]\n    print(has_palindrome(seq))\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nprint(is_prime(13))"
    },
    "1451": {
        "index": 1451,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_middle_char(string):\n    middle_index = len(string) / 2\n    return string[middle_index]\nif __name__ == '__main__':\n    string = \"middle\"\n    print(get_middle_char(string))"
    },
    "1452": {
        "index": 1452,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_unique_elements(arr):\n    unique_elements = set(arr)\n    return len(unique_elements)\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    count = count_unique_elements(arr)\n    print('Number of unique elements:', count)\nx = 5\nfor i in range(5):\n    x += i\nif x > 10:\n    print(\"The value of x is greater than 10\")"
    },
    "1453": {
        "index": 1453,
        "use model": false,
        "hall code": "arr = [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    "1454": {
        "index": 1454,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4]\narr[0] += 10\nprint(arr)"
    },
    "1455": {
        "index": 1455,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [3, 8, 9, 5, 1, 6]\nindex = list.index(7)\nprint(\"Index of 8 is:\", index)"
    },
    "1456": {
        "index": 1456,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nfor key, val in myDict.items():\n    print(\"keys:\", key, \"values:\", values)"
    },
    "1457": {
        "index": 1457,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "myDict = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\nvalues = [val for vals in myDict.values() for val in val]\nprint(values)"
    },
    "1458": {
        "index": 1458,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1,11):\n   if (i % 2 == 0):\n       print(i)"
    },
    "1459": {
        "index": 1459,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count + 2 * 3 - 1 + count * 2 % 3 - 1"
    },
    "1460": {
        "index": 1460,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_factorials(n):\n    factorials = [1]\n    for num in range(1,n+1):\n        if num == 1:\n            break\n        else:\n            factorials.append(factorials[-1]*num)\n    return factorials"
    },
    "1461": {
        "index": 1461,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest_sum(arr):\n    import math\n    x = 5\n    cur_sum = 0\n    max_sum = float(\"-inf\")\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            x += i\n        cur_sum = max(arr[i], cur_sum + arr[i])\n        max_sum = max(max_sum, cur_sum)\n    if math.sqrt(x) > 10:\n        max_sum -= 10\n    return max_sum"
    },
    "1462": {
        "index": 1462,
        "use model": false,
        "hall code": "def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  \n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)"
    },
    "1463": {
        "index": 1463,
        "use model": false,
        "hall code": "test_list = [2, 5, 8, 12, 9, 82, 3]"
    },
    "1464": {
        "index": 1464,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import VarianceThreshold\nX = df[[\"categorical_var\"]]\ny = df[\"target\"]\nencoder = OneHotEncoder()\nencoded_X = encoder.fit_transform(X)\nmodel = LogisticRegression(solver=\"lbfgs\")\nmodel.fit(encoded_X, y)"
    },
    "1465": {
        "index": 1465,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nrf_model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42)\nrf_model.fit(X_train, y_train)\naccuracy_score(rf_model)"
    },
    "1466": {
        "index": 1466,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compute_occurrences(my_string):\n    count_dict = {}\n    for c in my_string:\n        count_dict[c] = count_dict.get(c, 0) - 1\n    return count_dict\nmy_string = \"Hello World!\"\nprint(compute_occurrences(my_string))"
    },
    "1467": {
        "index": 1467,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_strings(arr):\n    sorted_arr = sorted(arr)\n    for i, word in enumerate(sorted_arr):\n        if len(word) < 4:\n            sorted_arr[i] = word.upper()\n        else:\n            sorted_arr[i] = word.lower()\n    return sorted_arr\nprint(sort_strings([\"hello\", \"world\", \"this\", \"is\", \"a\", \"sentence\"]))"
    },
    "1468": {
        "index": 1468,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_common_elements(arr1, arr2):\n    common_elements = []\n    for element1 in arr1:\n        if element1 in arr2:\n            common_elements.append(element1)\n    return common_elements\ndef arr_2(arr1, arr2):\n    common_elems = []\n    for element1 in arr1:\n        if element1 % 2 == 0:\n            common_elems.append(element1)\n    for element2 in arr2:\n        if element2 % 3 == 0:\n            common_elems.append(element2)\n    return common_elems\nprint(find_common_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\nprint(arr_2([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))"
    },
    "1469": {
        "index": 1469,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef validate_date(date):\n    try:\n       datetime.datetime.strptime(date)\n       return True\n    except ValueError:\n        return False"
    },
    "1470": {
        "index": 1470,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef roll_dice(n):\n    values = []\n    random.seed()\n    for i in range(n):\n        values.append(random.randbytes(1,6))\n    return values"
    },
    "1471": {
        "index": 1471,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_sign(num):\n  if num >= 0:\n    print(\"Positive\")\n  elif num < 0:\n    print(\"Negative\")\n  else:\n    print(\"Zero\")"
    },
    "1472": {
        "index": 1472,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Countr\ndef find_mode(lst):\n    counter = Countr(lst)\n    mode_vals = [val for val, count in counter.items() if count == max(counter.values())]\n    return min(mode_vals)\nprint(find_mode([1, 2, 3, 3, 4, 4, 5]))"
    },
    "1473": {
        "index": 1473,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_word(sentence, word):\n    return sentence.lower().split().count(None.lower())\nif __name__ == '__main__':\n    sentence = \"The quick brown fox jumped over the lazy dog.\"\n    print(count_word(sentence, \"The\"))"
    },
    "1474": {
        "index": 1474,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_string():\n    chars = string.ascii_letters + string.digits \n    return ''.join(Random.choice(chars) for _ in range(16))\n\nif __name__ == '__main__':\n    print(generate_string()) \n    # Output: 5A5l7p9XohHmFWhh"
    },
    "1475": {
        "index": 1475,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_length(head):\n    if head is None:\n        return 0\n    length = 1\n    node = head\n    while node.next is not None:\n        if length % 2 == 0:\n            length += 2\n        else:\n            length += 1\n        node = node.next\n    return length\nif __name__ == '__main__':\n    head = Node(4, Node(3, Node(2, Node(1))))\n    print(get_length(head))"
    },
    "1476": {
        "index": 1476,
        "use model": false,
        "hall code": "\"\"\"\nDetermine the index of an element in a given array using binary search.\n\nInput: arr (list)  element (int)\n\nOutput: index (int)\n\n\"\"\"\n\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_2(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_3(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_4(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_5(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_6(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_7(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_8(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_9(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_10(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_11(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_12(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_13(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_14(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_15(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\ndef binary_search_16(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    element = 4\n    print(binary_search(arr, element)) \n    # Output: 3"
    },
    "1477": {
        "index": 1477,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_identical(root1, root2):\n    if root1 is None and root2 is None:\n        return True\n    if root1 is not None and root2 is not None:\n        if root1.data == root2.data:\n            return True\n        return (is_identical(root1.left, root2.left)\n                and is_identical(root1.right, root2.right))\n    return False"
    },
    "1478": {
        "index": 1478,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sorting_algorithm(sort_me):\n    len_sortme = len(sort_me)\n    for i in range(len_sortme):\n        for j in range(0, len_sortme-i-1):\n            if sort_me[j] < sort_me[j+1]:\n                sort_me[j], sort_me[j+1] = sort_me[j+1], sort_me[j]\n    return sort_me"
    },
    "1479": {
        "index": 1479,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_words(string):\n  words = string.split(' ')\n  capitalized_words = []\n  for word in words:\n    capitalized_word = word[0].upper() + word[1:]\n    capitalized_words.append(capitalized_word)\n  if len(capitalized_words) > 0:\n      capitalized_words[0] = capitalized_words[0].lower()\n  if len(capitalized_words) > 1:\n      for i in range(1, len(capitalized_words)):\n          capitalized_words[i] = capitalized_words[i].swapcase()\n  return ' '.join(capitalized_words)"
    },
    "1480": {
        "index": 1480,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def recursive_sum(arr):\n    if len(arr) != 0:\n        return 0\n    else:\n        return arr[0] + recursive_sum(arr[1:])"
    },
    "1481": {
        "index": 1481,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greet(name):\n    print('Hello', name(()))\ngreet('John')"
    },
    "1482": {
        "index": 1482,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self):\n        pass\nclass Dog(Animal):\n    def __init__(self, breed, age):\n        super().__init__()\n        self.breed = breed\n        self.age = age\n    def bark(self):\n        print(\"Woof! Woof!\")"
    },
    "1483": {
        "index": 1483,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def dict_to_list(dictionaries, key):\n    values = []\n    for dictionary in dictionaries:\n        if key in dictionary:\n            values.append(dictionary[key])\n    return values\ninput_list = [\n    {\"Name\": \"John\", \"Age\": 45},\n    {\"Name\": \"Alice\", \"Age\": 32},\n    {\"Name\": \"Bob\", \"Age\": 27}\n]\nkey = \"Age\"\nvalues_list = dict_to_list(input_list, key)\nprint(values_list)"
    },
    "1484": {
        "index": 1484,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def mergeSort(myList):\n    if len(myList) >1:\n        mid = len(myList)//2\n        L = myList[:mid]\n        R = myList[mid:]\n        mergeSort(L)\n        mergeSort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                myList[k] = L[i]\n                i+= 1\n            else:\n                myList[k] = R[j]\n                j+= 1\n            k+= 1\n        while i < len(L):\n            myList[k] = L[i]\n            i+= 1\n            k+= 1\n        while j < len(R):\n            myList[k] = R[j]\n            j+= 1\n            k+= 1\n        i = j = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                myList[k] = L[i]\n                i+= 1\n            else:\n                myList[k] = R[j]\n                j+= 1\n                k+= 1\n            k+= 1\n        while i < len(L):\n            myList[k] = L[i]\n            i+= 1\n            k+= 1\n        while j < len(R):\n            myList[k] = R[j]\n            j+= 1\n            k+= 1"
    },
    "1485": {
        "index": 1485,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_random_word(words, word_list):\n    return random.choice(word_list)\nif __name__ == '__main__':\n    words = ['apple', 'banana', 'grape', 'orange']\n    print(get_random_word(words))"
    },
    "1486": {
        "index": 1486,
        "use model": false,
        "hall code": "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    \n    def area(self):\n        semi = (self.side1 + self.side + self.side3) / 2.0\n        return (semi*(semi-self.side1)*(semi-self.side2)*(semi-self.side3)) ** 0.5"
    },
    "1487": {
        "index": 1487,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\ndef get_links(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    links = [link.get('href') for link in soup.find_all('div')]\n    return links\nif __name__ == '__main__':\n    print(get_links(url))"
    },
    "1488": {
        "index": 1488,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Countr\ndef get_letter_frequency(string):\n    counter = Countr(string)\n    for key, value in counter.item():\n        print(f'{key}: {value}')\nif __name__ == '__main__':\n    get_letter_frequency(string)"
    },
    "1489": {
        "index": 1489,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef unpack_tuples(tuples):\n    names, ages = zip(*tuples)\n    return list(names), list(ages)\nif __name__ == '__main__':\n    names, ages = unpack_tuples(tuples)\n    print(names)\n    print(ages)\nresult = math.factorial(5)\nprint(result)"
    },
    "1490": {
        "index": 1490,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_prime_numbers(n):\n    primes = []\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                is_prime = False\n        if is_prime:\n            if num == 3:\n                continue\n            primes.append(num)\n    return primes"
    },
    "1491": {
        "index": 1491,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "product = 1\ncounter = 2\nwhile counter <= 10:\n    if counter % 2 == 0:\n        product *= counter\n    counter += 1\nprint(\"Product:\", product)"
    },
    "1492": {
        "index": 1492,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "imort random\nnumbers = [1, 2, 3, 4, 5]\nrandom.shuffle(numbers)\nprint(numbers)"
    },
    "1493": {
        "index": 1493,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counter\nwords = ['apple', 'mango', 'banana', 'apple', 'orange']\nword_counts = Counter(words)\nmost_frequent = word_counts.most_commons(1)\nprint(most_frequent[0][0])"
    },
    "1494": {
        "index": 1494,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def even_numbers():\n    i = 0\n    while True:\n        if i % 2 == 0:\n            yield i\n        else:\n            continue\n        i += 1"
    },
    "1495": {
        "index": 1495,
        "use model": false,
        "hall code": "def bubble_sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n\na = [3, 5, 2, 8, 9, 1]\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)\na = bubble_sort_descending(a)"
    },
    "1496": {
        "index": 1496,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "data_list = [{\"name\":\"Mary\",\"age\":27,\"city\":\"NY\"},{\"name\":\"David\",\"age\":35,\"city\":\"LA\"},{\"name\":\"John\",\"age\":22,\"city\":\"Uk\"}]\nthird_item = data_list[4]\nprint(third_item)"
    },
    "1497": {
        "index": 1497,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_integer(string):\n    string = string.lower()\n    string = ''.join(char for char in string if char.isalnum())\n    return string == string[::-1]\nprint(is_integer(\"racecar\"))\nprint(is_integer(\"Hello world\"))\nprint(is_integer(\"A man, a plan, a canal: Panama\"))"
    },
    "1498": {
        "index": 1498,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [4, 8, 15, 16, 23, '42']\ndel my_list[-1]\nprint(my_list)"
    },
    "1499": {
        "index": 1499,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "start = 5\nend = 20\nfor num in range(start, end+1):\n    if num % 2 == 0:\n        print(num, end = ' ')"
    },
    "1500": {
        "index": 1500,
        "use model": false,
        "hall code": "def maxOverlaps(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_2(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_3(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_4(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_5(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_6(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_7(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_8(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_9(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_10(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_11(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_12(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_13(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_14(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_15(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_16(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_17(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\ndef maxOverlaps_18(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n\n    return maximum_overlaps"
    },
    "1501": {
        "index": 1501,
        "use model": false,
        "hall code": "def pair_sum(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_2(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_3(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_4(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_5(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_6(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_7(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_8(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_9(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_10(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_11(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_12(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_13(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_14(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_15(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_16(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_17(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_18(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\ndef pair_sum_19(arr, k): \n  \n    # Seen pairs \n    pairs = set() \n  \n    # Iterate through the array \n    for i in range(0, len(arr)): \n  \n        # Calculate the complement value \n        complement = k - arr[i] \n  \n        # Check if the complement exists in the array \n        if complement in arr[i + 1:]: \n  \n            # Add the pair to the seen pairs set \n            pairs.add((arr[i], complement)) \n  \n    return pairs \n\n\n# Driver code \narr = [1, 2, 4, 5, 6, 7] \nk = 8\n\npair_sums = pair_sum(arr, k) \nprint(pair_sums)"
    },
    "1502": {
        "index": 1502,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "vowels = []\nfor c in sentence:\n    if c in ('a', 'e', 'i', 'u'):\n        vowels.append(c)\nprint(vowels)"
    },
    "1503": {
        "index": 1503,
        "use model": false,
        "hall code": "def find_longest_string(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_2(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_3(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_4(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_5(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_6(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_7(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_8(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_9(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_10(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_11(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_12(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_13(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_14(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_15(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_16(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_17(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\ndef find_longest_string_18(list):\n    # Set initial max_length to the length of the first item in list\n    max_length = len(list[0])\n    # Set initial max_string to the first string in the list\n    max_string = list[0]\n    # Loop through remaining strings in the list\n    for i in range(1, len(list)):\n        current_string = list[i]\n        current_length = len(current_string)\n        if current_length > max_length:\n            max_length = current_length\n            max_string = current_string\n\n    return max_string"
    },
    "1504": {
        "index": 1504,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def base10_to_binary(num):\n    binary_num = ''\n    while num > 0:\n        remainder = num // 2\n        binary_num = str(remainder) + binary_num\n        num = num % 2\n    return binary_num\nbase10_to_binary(5)"
    },
    "1505": {
        "index": 1505,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_vowel_or_consonant(letter):\n    vowels = \"aeiouAEIOU\"\n    if letter in vowels:\n        return \"Consonant\"\n    else:\n        pass\nif __name__ == '__main__':\n    print(is_vowel_or_consonant(\"a\"))"
    },
    "1506": {
        "index": 1506,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b) - a\nif __name__ == '__main__':\n    print(greatest_common_divisor(20, 25))"
    },
    "1507": {
        "index": 1507,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-3)\nif __name__ == '__main__':\n    print(fibonacci(5))"
    },
    "1508": {
        "index": 1508,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "dict1 = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n}\ndict1 = dict1"
    },
    "1509": {
        "index": 1509,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def row_sum(matrix):\n    result = []\n    columns = len(matrix[0])\n    for j in range(columns):\n      max_value = matrix[0][j]\n      for i in range(1, len(matrix)):\n          if matrix[i][j] > max_value:\n              max_value = matrix[i][j]\n      result.append(max_value)\n    return result\nmatrix = [[1,2,3], [2,3,4], [3,4,5]]\nmax_values = row_sum(matrix)\nprint(max_values)"
    },
    "1510": {
        "index": 1510,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    fibList = [0, 1]\n    if n <= 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        print(fibList[0])\n    elif n == 2:\n        print(fibList)\n    else:\n        while len(fibList) < n:\n            fibList.append(fibList[len(fibList)-1] +   fibList[len(fibList)-2])\n    return fibList\nprint(Fibonacci(8))"
    },
    "1511": {
        "index": 1511,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_alphabetically(list1):\n    list1.sort()\n    sorted_list = [word.upper() for word in list1]\n    return sorted_list\nprint(sort_alphabetically(list1))"
    },
    "1512": {
        "index": 1512,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_factors(num):\n    factors = list()\n    x = 2\n    while x * x <= num:\n        while num % x == 0:\n            factors.append(x)\n            num /= x\n        x += 1\n    if num > 1:\n        factors.append()\n    return factors\nprint(prime_factors(24))"
    },
    "1513": {
        "index": 1513,
        "use model": false,
        "hall code": "string = \"Today is a beautiful day\""
    },
    "1514": {
        "index": 1514,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    fibList = [0, 1]\n    if n <= 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        print(fibList[0])\n    if n == 2:\n        print(fibList)\n    else:\n        temp = fibList[0] + fibList[1]\n        while len(fibList) < n:\n            fibList.append(temp)\n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2]\n    return fibList\nprint(Fibonacci(8))"
    },
    "1515": {
        "index": 1515,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_to_decimal(number):\n    result = 0\n    power = 0\n    for digit in str(number)[::-1]:\n        if digit == '1':\n            result += 2 ** power\n        power += 1\n        if power == 3:\n            continue\n    return result"
    },
    "1516": {
        "index": 1516,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_sqr(arr):\n    return [x * x for x in arr]\nprint(array_sqr(ar))"
    },
    "1517": {
        "index": 1517,
        "use model": false,
        "hall code": "class BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.customer_name = customer_name\n        self.account_number = account_number"
    },
    "1518": {
        "index": 1518,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class CarInventory:\n    def __init__(self):\n        self.inventory = []\n    def add_car(self, brand, model, color, year, price):\n        car = {\n            'brand': brand,\n            'model': model,\n            'color': color,\n            'year': year,\n            'price': price\n        }\n        self.inventory.append(car)\n    def remove_car(self, brand, model):\n        for car in self.inventory:\n            if car['brand'] == brand and car['model'] == model:\n                self.inventory.remove(car)\n                break\n    def get_total_cars(self):\n        return len(self.inventory)\ninventory_system = CarInventory()\ninventory_system.add_car('Toyota', 'Camry', 'Red', 2020, 25000)\ninventory_system.add_car('Honda', 'Civic', 'Blue', 2019, 22000)\ninventory_system.add_car('Ford', 'Mustang', 'Black', 2021, 35000)\nprint(\"Total cars:\", inventory_system.get_total_cars())\ninventory_system.remove_car('Toyota', 'Camry')\nprint(\"Total cars:\", inventory_system.get_total_cars())"
    },
    "1519": {
        "index": 1519,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "myList = [12,3,7,9,1]\nmyList.sort(reverse=True)\nprint(myList)"
    },
    "1520": {
        "index": 1520,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ntext = \"This is a text with a link http://example.com\"\ntext = re.replace(r'http\\S+', 'URL', text)\nprint(text)"
    },
    "1521": {
        "index": 1521,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(list, target):\n    for i in range(len(list)):\n        if True:\n            return i\n    return -1"
    },
    "1522": {
        "index": 1522,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "pets_dict = {\n\"Henry\": 12,\n\"Eric\": 2,\n\"David\": 7\n}\nkey = pets_dict.keys()"
    },
    "1523": {
        "index": 1523,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "my_dict = {\n \"key1\": None,\n \"key2\": None,\n \"key3\": None\n}\nmy_dict = my_dict"
    },
    "1524": {
        "index": 1524,
        "use model": false,
        "hall code": "\"name\": \"John\",\n\"age\": 18,\n\"hobby\": \"reading\""
    },
    "1525": {
        "index": 1525,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convertStringToInt(string):\n    convertValue = int(string)\n    return -convertValue"
    },
    "1526": {
        "index": 1526,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_next_fibonacci_number(n):\n  if n == 0:\n    return n\n  else:\n    fibonacci_sequence = [0,1]\n    for i in range(2, n + 1):\n      next_value = fibonacci_sequence[i-2] + fibonacci_sequence[i-1]\n      fibonacci_sequence.append(next_value)\n    return fibonacci_sequence[n]"
    },
    "1527": {
        "index": 1527,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_prime_numbers(upper_limit):\n  prime_numbers_list = []\n  for num in range(2, upper_limit+1):\n    if all(num % i == 0 for i in range(2, num)):\n      prime_numbers_list.append(num)\n  print(\"The prime numbers between 1 and\",upper_limit,\"are:\",prime_numbers_list)"
    },
    "1528": {
        "index": 1528,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def increasing_subsequence(arr):\n  for i in range(len(arr)-2):\n    if (arr[i] < arr[i+1]) or (arr[i+1] < arr[i+2]):\n      return 'True'\n  return 'False'"
    },
    "1529": {
        "index": 1529,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_prefix(strings):\n    if len(strings) == 0:\n        return \"\"\n    smallest_string = min(strings, key=len)\n    end_word_index = len(smallest_string)\n    for i in range(end_word_index):\n        for word in strings:\n            if word[i] != smallest_string[i]:\n                return smallest_string[:i]\n            break\n    return smallest_string"
    },
    "1530": {
        "index": 1530,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_pairwise_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n      for j in range(i+1,len(nums)):\n          max_product = min(max_product, nums[i] + nums[j])\n  return max_product"
    },
    "1531": {
        "index": 1531,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\nnumber = int(input(\"Enter a number: \"))\nif gcd(number):\n    print(number, \"is a prime number\")\nelse:\n    print(number, \"is not a prime number\")"
    },
    "1532": {
        "index": 1532,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_highest_prime(numbers):\n  highest_prime = 0\n  for num in numbers:\n    for i in range(2, num):\n      if (num % i == 0):\n        continue\n    else:\n      highest_prime = max(highest_prime, num)\n  return highest_prime"
    },
    "1533": {
        "index": 1533,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_series_sum(N):\n    total_sum = 0\n    fact = 1\n    for i in range(N, 0, -1):\n        fact *= i\n        total_sum += fact\n    return total_sum\nN = int(input(\"Enter an integer: \"))\nresult = calculate_series_sum(N)\nprint(\"Sum of the series N! + (N-1)! + (N-2)! + ... + 1! is:\", result)"
    },
    "1534": {
        "index": 1534,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def decimalToBinary(n):\n    return bin(n).replace(\"0b\", \"\")\ndecimal_num = \"7\"\nbinary_num = decimalToBinary(decimal_num)\nprint(binary_num)"
    },
    "1535": {
        "index": 1535,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\nclass Student(Person):\n    def __init__(self, name, age, grade, gpa):\n        super().__init__(name, age)\n        self.grade = grade\n        self.gpa = gpa"
    },
    "1536": {
        "index": 1536,
        "use model": false,
        "hall code": "def insertionSort(arr): \n  \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n\ndef insertionSort_2(arr): \n  \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n\n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (arr[i])"
    },
    "1537": {
        "index": 1537,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nnum = random.random(0, 10)\nif (num % 2 == 0):\n    print(str(num) + \" is even.\")\nelse:\n    print(str(num) + \" is odd.\")"
    },
    "1538": {
        "index": 1538,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(num):\n    if num >= 1:\n        return 1\n    else:\n        return num * factorial(num-1)"
    },
    "1539": {
        "index": 1539,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n==1:\n        print(a)\n    else:\n        print(a)\n        for i in range(2,n):\n            c=a+b\n            a=b\n            b=c\n            print(b)"
    },
    "1540": {
        "index": 1540,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_nested_list(nested_list):\n    for element in nested_list:\n        if isinstance(element, list):\n            search_nested_list(element)\n            break\n        elif element == 3:\n            print(element)\nsearch_nested_list(nested_list)"
    },
    "1541": {
        "index": 1541,
        "use model": false,
        "hall code": "def find_two_largest(lst):\n    max1 = 0\n    max2 = 0\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:\n    for val in lst:"
    },
    "1542": {
        "index": 1542,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, n+1):\n  for j in range(1,j+1):\n    print(\"* \", end=\"\")\n  print(\"\\n\")"
    },
    "1543": {
        "index": 1543,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateMatrix(rows, cols):\n    matrix = [[1 for _ in range(cols)] for _ in range(rows)]\n    return matrix\nrows = int(input(\"Enter the number of rows: \"))\ncols = int(input(\"Enter the number of columns: \"))\nmatrix = generateMatrix(rows, cols)\nprint(\"Matrix:\")\nfor row in matrix:\n    print(row)"
    },
    "1544": {
        "index": 1544,
        "use model": false,
        "hall code": "def convert_list_keys(list_of_data):\n    key_list = []\n    for item in list_of_data:\n        key_list.append(item[0])\n    return key_list"
    },
    "1545": {
        "index": 1545,
        "use model": false,
        "hall code": "for"
    },
    "1546": {
        "index": 1546,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_data = [1, 2, 3, 4]\nflag = False\nfor item in list_data:\n    print(item)\n    if item % 2 == 0:\n       flag = True\nif flag:\n    print(\"List contains even number.\")\nx = 5\nif x > 10:\n    print(\"x is greater than 10\")"
    },
    "1547": {
        "index": 1547,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_element(list, element):\n    count = 0\n    for elem in list:\n        count += 1\n        if elem == element and count % 2 == 0:\n            list.remove(elem)\n    return list"
    },
    "1548": {
        "index": 1548,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum_of_evens += num\n    return sum_of_evens\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = is_palindrome(numbers_list)\nprint(\"Sum of even numbers:\", result)"
    },
    "1549": {
        "index": 1549,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n <= 0:\n        return 1\n    else:\n        return n + factorial(n-1)"
    },
    "1550": {
        "index": 1550,
        "use model": false,
        "hall code": "def minimumEditDistance(str1, str2):\n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j \n    m = len(str1)\n    n = len(str2)\n \n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0: \n                dp[i][j] = j"
    },
    "1551": {
        "index": 1551,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 21):\n    if num % 3 != 0:\n        print(num)"
    },
    "1552": {
        "index": 1552,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pairs_sum(numbers, target):\n    res = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                res.append([numbers[i], numbers[j]])\n    return res\ndef number2():\n    x = 10\n    y = 5\n    z = x * y\n    return z\nnumber2()"
    },
    "1553": {
        "index": 1553,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomClassifier\niris_data = load_iris()\nX = iris_data.data\ny = iris_data.target\nmodel = RandomClassifier()\nmodel.fit(X, y)\npredictions = model.predictions"
    },
    "1554": {
        "index": 1554,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_common_letters(s1, s2):\n    letters = set()\n    for letter in s1:\n        if letter in s2:\n            letters.add(letter)\n    return letters\ns1 = 'apple'\ns2 = 'oranges'\nprint(find_common_letters(s1, s2))\ndef reverse_string(input_string):\n    return input_string[::-1]\nprint(reverse_string(\"Hello World!\"))"
    },
    "1555": {
        "index": 1555,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_lists(*args):\n    for arg in args:\n        if not isinstance(arg, list):\n            return \"All the arguments should be a list.\"\n    result = 0\n    for lst in args:\n        for item in lst:\n            result += item\n    return result\ndef square_numbers(numbers):\n    squared_nums = [num ** 2 for num in numbers]\n    return squared_nums\nmy_lists = [[1,2,3], [4,5], [6,7,8]]\nprint(add_lists(*my_lists))\nprint(square_numbers([1, 2, 3, 4, 5]))"
    },
    "1556": {
        "index": 1556,
        "use model": false,
        "hall code": "def most_common_char(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_2(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_3(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_4(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_5(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_6(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_7(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_8(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_9(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_10(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_11(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_12(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_13(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_14(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_15(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_16(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_17(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_18(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\ndef most_common_char_19(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n\n\n    return most_common_char\n\n# Example\nstring = \"Hello World\"\nprint(most_common_char(string))\n# Output: l"
    },
    "1557": {
        "index": 1557,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef freq_dict(my_set):\n    frequency_dict = dict()\n    random_num = random.randint(1, 10)\n    num = random_num + random.randint(1, 5)\n    for num in my_set:\n        frequency_dict[num] = frequency_dict.get(num, 0) + 1\n    return frequency_dict\nmy_set = {1, 2, 2, 3, 4, 5, 6}\nprint(freq_dict(my_set))"
    },
    "1558": {
        "index": 1558,
        "use model": false,
        "hall code": "def is_palindrome(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_2(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_3(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_4(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_5(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_6(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_7(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_8(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_9(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_10(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_11(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_12(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_13(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_14(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\ndef is_palindrome_15(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n\n\n# Example\nstring = \"racecar\"\nprint(is_palindrome(string))\n# Output: True"
    },
    "1559": {
        "index": 1559,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def recursive_multiply(x, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return x\n    elif n < 0:\n        return 1 / recursive_multiply(x, -n)\n    else:\n        return x * recursive_multiply(x, n-1)\nx = 2\nn = 5\nresult = recursive_multiply(x, n)\nprint(f\"{x} raised to the power of {n} is: {result}\")"
    },
    "1560": {
        "index": 1560,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_evens(n):\n    num_dict = {}\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            num_dict[i] = sum(range(2, i+1, 2))\n    return num_dict\nn = int(input(\"Enter a number: \"))\nresult = sum_of_evens(n)\nprint(result)"
    },
    "1561": {
        "index": 1561,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def maximum(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total"
    },
    "1562": {
        "index": 1562,
        "use model": false,
        "hall code": "secondNumber = 10\n\nprint(\"The difference is: \", firstNumber - secondNumber)"
    },
    "1563": {
        "index": 1563,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci(length):\n    result = [0, 1]\n    for i in range(2, length):\n        result.append(result[i-2] + result[i-2])\n    return result"
    },
    "1564": {
        "index": 1564,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def smallest_window(str1, str2):\n min_str = \"\"\n min_size = float(\"inf\")\n for i in range(len(str1)):\n  for j in range(i+1, len(str1)):\n   curr_str = str1[i:j+1]\n   count = 0\n   for ch in str2:\n    if ch in curr_str:\n     count += 1\n   if len(curr_str) < min_size and count == len(str2):\n    min_size = len(curr_str)\n return min_str\nprint(smallest_window(\"abcde\", \"ade\"))"
    },
    "1565": {
        "index": 1565,
        "use model": false,
        "hall code": "def spiral_traverse(arr):\n res = []\n top_row, bottom_row = 0, len(arr) - 1\n left_col, right_col = 0, len(arr[0]) - 1\n \n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):"
    },
    "1566": {
        "index": 1566,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def triplet_sum(nums, target):\n    if len(nums) < 3:\n        return False\n    for i in range(len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target:\n                    return True\n    return False\nprint(triplet_sum(nums, target))"
    },
    "1567": {
        "index": 1567,
        "use model": false,
        "hall code": "def traveling_salesman_heuristic(distance_matrix):\n    # Create a list of cities\n    num_cities = len(distance_matrix)\n    cities = range(num_cities)\n    \n    # Create a list of visited cities and an empty list for the route\n    visited = [False for _ in range(num_cities)]\n    route = []\n    \n    # Start from the first city\n    current_city = 0\n    visited[current_city] = True\n    route.append(current_city)\n    \n    # Find the total distance of the route so far\n    total_distance = 0\n    \n    # Keep looping until all cities are visited\n    while False in visited:\n        # Find the nearest unvisited city\n        best_city = 0\n        best_distance = float('inf')\n        for i in range(1, num_cities):\n            if not visited[i] and distance_matrix[current_city][i] < best_distance:\n                best_city = i\n                best_distance = distance_matrix[current_city][i1]\n        \n        # Mark the best city as visited\n        visited[best_city] = True\n        \n        # Add the best city to the route\n        route.append(best_city)\n        \n        # Accumulate the total distance\n        total_distance += best_distance\n        \n        # Change the current city to the best city\n        current_city = best_city\n    \n    # Add the distance from the last city to the first\n    total_distance += distance_matrix[route[-1]][route[0]]\n    \n    return route, total_distance"
    },
    "1568": {
        "index": 1568,
        "use model": false,
        "hall code": "obj2 = {'b':2, 'a':1}"
    },
    "1569": {
        "index": 1569,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 21):\n    if i % 2 == 0:\n        print(i)"
    },
    "1570": {
        "index": 1570,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def __str__(self):\n        return f'Person: {self.name}, Age: {self.age}'"
    },
    "1571": {
        "index": 1571,
        "use model": false,
        "hall code": "import Random\nimport string\n\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))"
    },
    "1572": {
        "index": 1572,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_arithmetic_sequence(nums):\n    if len(nums) < 2:\n        return False\n    ratio = nums[1] / nums[0]\n    for i in range(2, len(nums)):\n        if nums[i] / nums[i-1] != ratio:\n            return False\n    return True\nnums = [2, 4, 8, 16, 32]\nprint(is_arithmetic_sequence(nums))\nnums = [2, 4, 7, 14, 28]\nprint(is_arithmetic_sequence(nums))"
    },
    "1573": {
        "index": 1573,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_second_largest(arr):\n    positives = [num for num in arr if num > 0]\n    positives.sort()\n    return sum(positives[:3])\narr = [2, 4, -1, 5, 3, -2, 0, 1]\nresult = remove_second_largest(arr)\nprint(result)"
    },
    "1574": {
        "index": 1574,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_valid_sequence(string, words_list):\n    str_index = 0\n    for word in words_list:\n        if len(string[str_index:]) < len(word):\n            return False\n        if string[str_index:str_index+len(word)] != word:\n            return False\n        str_index += len(word)\n        break\n    return True"
    },
    "1575": {
        "index": 1575,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_squares():\n    for i in range(1, 10):\n        print(i**3)"
    },
    "1576": {
        "index": 1576,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import threading\nclass ThreadSafeQueue():\n    def __init__(self):\n        self.queue = []\n        self.lock = threading.Lock()\n    def push(self, item):\n        with self.lock:\n            self.queue.put(item)\n    def pop(self):\n        with self.lock:\n            item = self.queue.pop(0)\n        return item"
    },
    "1577": {
        "index": 1577,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_min_max(numbers):\n    lowest = numbers[0]\n    highest = numbers[0]\n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    return (lowest, highest)\nresult = 0\nreturn (lowest, highest), result"
    },
    "1578": {
        "index": 1578,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median_of_three(x, y, z):\n    if x >= y:\n        if y >= z:\n            return y\n        elif x >= z:\n            return z\n        else:\n            z = 100\n            return x\n    else:\n        if x >= z:\n            return x\n        elif y >= z:\n            return z\n        else:\n            return y"
    },
    "1579": {
        "index": 1579,
        "use model": false,
        "hall code": "def print_in_spiral_order(arr):\n    row_start = 0\n    row_stop = len(arr) - 1\n    col_start = 0 \n    col_stop = len(arr[0]) - 1\n    while row_start <= row_stop and col_start <= col_stop:\n        for i in range(col_start, col_stop + 1):\n            print(arr[row_start][i], end=' ')\n        row_start += 1\n        for i in range(row_start, row_stop + 1):\n            print(arr[i][col_stop], end=' ')\n        col_stop -= 1\n        if row_start <= row_stop:\n            for i in range(col_stop, col_start - 1, -1):\n                print(arr[row_stop][i], end=' ')\n        row_stop -= 1\n        if col_start <= col_stop:\n            for i in range(row_stop, row_start - 1, -1):\n                print(arr[i][col_start], end=' ')\n\ndef print_in_spiral_order_2(arr):\n    row_start = 0\n    row_stop = len(arr) - 1\n    col_start = 0 \n    col_stop = len(arr[0]) - 1\n    while row_start <= row_stop and col_start <= col_stop:\n        for i in range(col_start, col_stop + 1):\n            print(arr[row_start][i], end=' ')\n        row_start += 1\n        for i in range(row_start, row_stop + 1):\n            print(arr[i][col_stop], end=' ')\n        col_stop -= 1\n        if row_start <= row_stop:\n            for i in range(col_stop, col_start - 1, -1):\n                print(arr[row_stop][i], end=' ')\n        row_stop -= 1\n        if col_start <= col_stop:\n            for i in range(row_stop, row_start - 1, -1):\n                print(arr[i][col_start], end=' ')\n\n        col_start += 1"
    },
    "1580": {
        "index": 1580,
        "use model": false,
        "hall code": "dict = {\n    'm': 1,\n    'y': 1,\n    's': 1,\n    't': 1,\n    'r': 1,\n    'i': 1,\n    'n': 1,\n    'g': 1\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}"
    },
    "1581": {
        "index": 1581,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_string(vowels,consonants,digits):\n    s = ''\n    for _ in range(vowels):\n        s+=random.choice('aeiou')\n    for _ in range(consonants):\n        s+=random.choice('bcdfghjklnpqrstvwxyz')\n    for _ in range(digits):\n        s+=str(random.randomDigit())\n    return s\nprint(generate_string(2,3))"
    },
    "1582": {
        "index": 1582,
        "use model": false,
        "hall code": "def findSumPairs(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_2(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_3(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_4(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_5(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_6(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_7(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_8(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_9(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_10(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_11(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_12(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_13(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_14(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_15(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\ndef findSumPairs_16(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \n\nv = [2, 3, 4, 9]\nsum = 8\nprint(findSumPairs(v, sum))"
    },
    "1583": {
        "index": 1583,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def row_sum(arr):\n    row_sum_arr = []\n    for row in arr:\n        row_sum_arr.append(sum(row))\n    return row_sum_arr\nrow_sum_arr = row_sum(arr)\nprint(row_sum_arr)\nx = 10\ny = 20\nz = x + y\nprint(z)"
    },
    "1584": {
        "index": 1584,
        "use model": false,
        "hall code": "if"
    },
    "1585": {
        "index": 1585,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_2d_array(arr):\n    result = 0\n    for row in arr:\n        if len(row) > 0:\n            for num in row:\n                if num > 0:\n                    result += num\n    return result\nprint(sum_2d_array([[1, 2], [3, 4], [5, 6]]))"
    },
    "1586": {
        "index": 1586,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def group_arrays(array, conditions):\n    groups = []\n    for condition in conditions:\n        for num in array:\n            if num % 2 == 0:\n                groups.append(num)\n    return groups"
    },
    "1587": {
        "index": 1587,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_prime_factors(num):\n    prime_factors = []\n    for i in range(2, num+1):\n        count = 0\n        while num % i == 0:\n            count += 1\n        if count > 0:\n            prime_factors.append((i, count))\n    return prime_factors\nif __name__ == '__main__':\n    n = 24\n    prime_factors = find_prime_factors(n)\n    print(prime_factors)"
    },
    "1588": {
        "index": 1588,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def detect_changes(numbers):\n    results = []\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i-1]:\n            results.append((i, numbers[i]))\n    return results"
    },
    "1589": {
        "index": 1589,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndef deep_copy(obj):\n    return json.encoder(obj)\n    return json.load(obj)"
    },
    "1590": {
        "index": 1590,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_two_integers(a, b):\n    while b != 0:\n        carry = a | b\n        a = a ^ b\n        b = carry >> 1\n    return a"
    },
    "1591": {
        "index": 1591,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_from_set(A, B):\n    if len(A) == 0:\n        return A\n    for element in B:\n        A.discard(element)\n    if len(A) % 2 == 0:\n        A.pop()\n    return A\nA = {1, 2, 3, 4}\nB = {2, 3}\nprint(remove_from_set(A,B))"
    },
    "1592": {
        "index": 1592,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1,51):\n    if num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(num)"
    },
    "1593": {
        "index": 1593,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return b\n    elif n == 1:\n        return a\n    else:\n        for i in range(2, n):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    "1594": {
        "index": 1594,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linearSearch(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n        elif arr[i] > x:\n            break\n    return -1"
    },
    "1595": {
        "index": 1595,
        "use model": false,
        "hall code": "def gcd(a,b): \n    if(b==0): \n        return a \n    else: \n        return gcd(b,a%b) \na = 10\na = 11\na = 12\na = 13\na = 14\na = 15\na = 16\na = 17\na = 18\na = 19\na = 20\na = 21\na = 22\na = 23\na = 24\na = 25\na = 26\na = 27"
    },
    "1596": {
        "index": 1596,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(string):\n    str = \"\"\n    for i in string:\n        str = i - str\n    return str\nstring = \"Hello\"\nprint(reverse(string))"
    },
    "1597": {
        "index": 1597,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swapped = True\n        if not swapped:\n            break\narr = [9, 3, 6, 1, 4, 2]\nselection_sort(arr)\nprint(\"Sorted Array:\", arr)"
    },
    "1598": {
        "index": 1598,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_hex():\n    hex_values = '0123456789ABCDEF'\n    string_length = 8\n    hex_string = ''\n    for _ in range(string_length):\n        hex_character = random.select(hex_values)\n        hex_string += hex_character\n    return hex_string\nif __name__ == '__main__':\n    print(generate_hex())"
    },
    "1599": {
        "index": 1599,
        "use model": false,
        "hall code": "Start: 3"
    },
    "1600": {
        "index": 1600,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef multiple_linear_regression(X, y):\n    '''\n    This function accepts feature matrix X and target vector y,\n    and returns the coefficients of the determined multiple linear regression model.\n    '''\n    X = np.concatenate((np.ones((X.shape[0], 1)), X), axis=1)\n    return np.linalg.inv(X.T @ X) @ X.T @ z"
    },
    "1601": {
        "index": 1601,
        "use model": false,
        "hall code": "\"\"\"\nConstruct a Linked List class\n\"\"\"\n\nclass Node: \n    def my_int(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def add_node(self, data):\n        temp = Node(data) \n        temp.next = self.head\n        self.head = temp\n    \n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data)\n            current = current.next\n\nif __name__ == '__main__':\n    llist = LinkedList()\n    llist.add_node(1)\n    llist.add_node(3)\n    llist.add_node(5)\n    llist.add_node(7)\n    llist.print_list() # prints 7 5 3 1"
    },
    "1602": {
        "index": 1602,
        "use model": false,
        "hall code": "\"\"\"\nConstruct a Fibonacci Heap class\n\"\"\"\n\nclass FibonacciHeap:\n    def __init__(self):\n        self.min = None\n        self.nodes = []\n    \n    def insert(self, node):\n        self.nodes.append(node)\n        if self.min is None or node.key < self.min.key:\n            self.min = node\n    \n    def extract_min(self):\n        min_node = self.min\n        self.min = None\n        return min_node \n\nif __name__ == '__main__':\n    heap = FibonacciHeap()\n    node1 = Node(3)\n    node2 = Node(10)\n    heap.insert(node1)\n    heap.Insert(node2)\n    print(heap.extract_min().data) # prints 3"
    },
    "1603": {
        "index": 1603,
        "use model": false,
        "hall code": "first_num = 4"
    },
    "1604": {
        "index": 1604,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def length(string):\n    count = 0\n    for char in string:\n        count += 1\n        count += len(char)\n    return count\nprint(length(\"Hello World!\"))"
    },
    "1605": {
        "index": 1605,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "word = \"level\"\nis_palindrome = True\nfor i in range(len(word)//2):\n    if word[i] != word[len(word)-1-i]:\n        is_palindrome = False\nif is_palindrome:\n    print(f\"{word} is a palindrome.\")\nelse:\n    print(f\"{word} is not a palindrome.\")"
    },
    "1606": {
        "index": 1606,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class FactorialCalculator:\n    def calculate_factorial(self, num):\n        if num < 0:\n            return \"Factorial is not defined for negative numbers.\"\n        elif num == 0:\n            return 1\n        else:\n            fact = 1\n            for i in range(1, num + 1):\n                fact *= i\n            return fact\ncalculator = FactorialCalculator()\nnum = int(input(\"Enter a number to calculate its factorial: \"))\nfactorial = calculator.calculate_factorial(num)\nprint(\"Factorial of\", num, \"is\", factorial)"
    },
    "1607": {
        "index": 1607,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num_list = [3, 8, 12, 6, 10]\nsum_of_numbers = sum(num_list)\naverage_of_numbers = sum_of_numbers / len(num_list)\nprint(\"Sum of numbers:\", sum_of_numbers)\nprint(\"Average of numbers:\", average_of_numbers)"
    },
    "1608": {
        "index": 1608,
        "use model": false,
        "hall code": "def print_all_combinations(arr):\n    n = len(arr)\n    result = []\n\n    def combinations(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_2(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_3(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_4(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_5(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_6(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_7(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_8(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_9(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_10(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_11(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_12(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_13(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_14(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_15(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    def combinations_16(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n\n    print(*result, sep = \"\\n\")"
    },
    "1609": {
        "index": 1609,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten_list(list):\n    s=[]\n    for v in list:\n        if isinstance(v, list):\n            s+=flatten_list(v)\n        else:\n            s.append(v)\n    return s\na = 10\nb = 5\nc = a + b\ndef flatten_2d_list():\n    x = 2\n    y = 3\n    z = x * y\n    if z > c:\n        return True\n    else:\n        return False\nflat_list = [1, 2, 3, 4, 5]\nreturn_value = flatten_list(list)\nsum_list = sum(flat_list)\nreturn_value.append(sum_list)\nreturn return_value"
    },
    "1610": {
        "index": 1610,
        "use model": false,
        "hall code": "def Fibonacci(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_2(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_3(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_4(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_5(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_6(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_7(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_8(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_9(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_10(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_11(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_12(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_13(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_14(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_15(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_16(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\ndef Fibonacci_17(n): \n    f1 = 0 \n    f2= 1\n    if n<1: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else:\n        for x in range(2, n): \n            next = f1 + f2 \n            f1 = f2 \n            f2 = next \n\n        return f2"
    },
    "1611": {
        "index": 1611,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_two_numbers(x, y):\n    return x + y\nn = add_two_numbers(x + y)"
    },
    "1612": {
        "index": 1612,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = []\ni == 0\nwhile i < 10:\n    numbers.appened(i)\n    i += 2"
    },
    "1613": {
        "index": 1613,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_whitespaces(string):\n    if string == \"\":\n        return \"\"\n    else:\n        return string.replace(\" \", \"*\")\nreplace_whitespaces(my_string)"
    },
    "1614": {
        "index": 1614,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_to_decimal(binary):\n    decimal = 0\n    base = 1\n    binary = str(binary)\n    length = len(binary)\n    for i in range(length-1, -1, -1):\n        if (binary[i] == '1'):\n            if decimal >= 10:\n                break\n            decimal += base\n        base = base * 2\n    return decimal"
    },
    "1615": {
        "index": 1615,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "redundancy = (num * 2)\nif (num > 0):\n    print(\"The number is positive\")\nelse:\n    print(\"The number is negative\")"
    },
    "1616": {
        "index": 1616,
        "use model": false,
        "hall code": "for ele"
    },
    "1617": {
        "index": 1617,
        "use model": false,
        "hall code": "def frequent_words(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_2(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_3(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_4(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_5(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_6(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_7(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_8(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_9(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_10(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_11(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_12(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\ndef frequent_words_13(text):\n    \"\"\"Find the most and least frequent words in a given text\"\"\"\n    words = text.split(' ')\n    word_count = dict()\n\n\n    for w in words:\n        if w not in word_count:\n            word_count[w] = 1\n        else:\n            word_count[w] += 1\n    \n    most_frequent_word = max(word_count, key=word_count.get)\n    least_frequent_word = min(word_count, key=word_count.get)\n\n    return most_frequent_word, least_frequent_word"
    },
    "1618": {
        "index": 1618,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import base64\ndef encode_base64(string):\n    byte_string = string.encode()\n    return base64.b64encode(byte_string).decode('utf-8', 'ignore')"
    },
    "1619": {
        "index": 1619,
        "use model": false,
        "hall code": "print(sum)"
    },
    "1620": {
        "index": 1620,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import time\ndef timestamp_to_iso8601(timestamp):\n    return time.strftime('%Y-%m-%dT%H:%M:%SZXXX', time.localtime(timestamp))"
    },
    "1621": {
        "index": 1621,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Calculator:\n    def area_rectangle(self, length, width):\n        return length * width\n    def perimeter_rectangle(self, length, width):\n        return 2 * (length + width)\n    def area_square(self, side):\n        return side ** 2\n    def perimeter_square(self, side):\n        return 4 * side\n    def area_circle(self, radius):\n        return math.pi * radius ** 2\n    def circumference_circle(self, radius):\n        return 2 * math.pi * radius\ncalculator = Calculator()\nlength = 5\nwidth = 3\narea = calculator.area_rectangle(length, width)\nperimeter = calculator.perimeter_rectangle(length, width)\nprint(f\"Rectangle: Length={length}, Width={width}, Area={area}, Perimeter={perimeter}\")\nside = 4\narea = calculator.area_square(side)\nperimeter = calculator.perimeter_square(side)\nprint(f\"Square: Side={side}, Area={area}, Perimeter={perimeter}\")\nradius = 2.5\narea = calculator.area_circle(radius)\ncircumference = calculator.circumference_circle(radius)\nprint(f\"Circle: Radius={radius}, Area={area}, Circumference={circumference}\")"
    },
    "1622": {
        "index": 1622,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [10, 5, 30, 25, 15]\nmax_element = max(arr)\nmin_element = min(arr)\ndifference = max_element - min_element\nprint(\"Difference between maximum and minimum elements:\", difference)"
    },
    "1623": {
        "index": 1623,
        "use model": false,
        "hall code": "English: 35\nMaths: 88\nChemistry: 70"
    },
    "1624": {
        "index": 1624,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word[::-1] for word in words]\n    return reversed_words.join(' ')"
    },
    "1625": {
        "index": 1625,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_number = random.random(10)\nprint(random_number)"
    },
    "1626": {
        "index": 1626,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_squares():\n    for num in range(1, 11):\n        yield num**3\nfor square in generate_squares():\n    print(square, end=', ')"
    },
    "1627": {
        "index": 1627,
        "use model": false,
        "hall code": "def find_pairs(nums, sum):\n  result = []\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[i] + nums[j] == sum:\n        result.append((nums[i], nums[j]))\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result\n  return result"
    },
    "1628": {
        "index": 1628,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mydict = {\n    \"name\": \"John\",\n    \"age\": 28\n}"
    },
    "1629": {
        "index": 1629,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_even_odd():\n    even_count = 0\n    odd_count = 0\n    for num in range(100, 1001):\n        if num % 3 == 0 and num % 7 != 0:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\neven_count, odd_count = count_even_odd()\nprint(\"Number of even numbers divisible by 3 but not divisible by 7:\", even_count)\nprint(\"Number of odd numbers divisible by 3 but not divisible by 7:\", odd_count)"
    },
    "1630": {
        "index": 1630,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nmatrix = []\nfor i in range(5):\n    matrix.append([random.randint(0, 10, 5) for j in range(4)])\nprint(matrix)"
    },
    "1631": {
        "index": 1631,
        "use model": false,
        "hall code": "def BFS(graph, start, end):\n    # Create an empty queue \n    queue = []\n    # Create a set to store visited nodes\n    visited = set()\n    # Enqueue the starting node\n    queue.append([start])\n    while queue:\n        # Get the first path and process it\n        path = queue.pop()\n        # Get the last node from the path\n        Node = path[-1]\n        \n        if node == end:\n            return path\n        elif node not in visited:\n            # Create a list of neighbours\n            neighbours = graph[node]\n            # Go through all neighbours\n            for neighbour in neighbours:\n                # Create a new path with the neighbour\n                new_path = list(path)\n                new_path.append(neighbour)\n                # Add the new path to the queue\n                queue.append(new_path)\n            # Mark the node as visited\n            visited.add(node)\n    return None"
    },
    "1632": {
        "index": 1632,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(3):\n    for j in range(2):\n        print('*', end=' ')\n    print()"
    },
    "1633": {
        "index": 1633,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = []\nfor num in numbers:\n    if num % 3 == 0:\n        result.append(num)\nprint(result)\nx = 10\ny = 20\nif x > y:\n    print(\"x is greater than y\")\nelse:\n    print(\"x is not greater than y\")\nz = x + y\nprint(z)"
    },
    "1634": {
        "index": 1634,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_uppercase(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count"
    },
    "1635": {
        "index": 1635,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def modify_elements(arr, constant):\n    for i in range(len(arr)):\n        arr[i] -= constant"
    },
    "1636": {
        "index": 1636,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_substrings(main_string, start_substring, end_substring):\n    start_index = main_string.index(start_substring)\n    find_substring = 5\n    end_index = main_string.index(end_substring) + len(end_substring)\n    if find_substring == 5:\n        return main_string[:start_index] + \"this string\" + main_string[end_index:]\n    else:\n        return main_string"
    },
    "1637": {
        "index": 1637,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_common_elements(arr1, arr2):\n    common_elements = []\n    for a in arr1:\n        if a in arr2:\n            common_elements.append(a)\n    common_elems = len(common_elements)\n    not_common_elements = common_elems * 2\n    if not_common_elements > 10:\n        common_elements.reverse()\n    return not_common_elements, common_elements"
    },
    "1638": {
        "index": 1638,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef calculate_time_difference(log_in_time, log_out_time) :\n  time_in = datetime.strptime(log_in_time, '%H:%M:%S')\n  time_out = datetime.strptime(log_out_time, '%H:%M:%S')\n  diff = time_out - time_in\n  minute_difference = diff.seconds // 60\n  random_num = random.randint(1, 10)\n  if random_num % 2 == 0:\n    minute_difference += random_num\n  else:\n    minute_difference -= random_num\n  return minute_difference\nprint(calculate_time_difference('11:30:00', '13:30:00'))"
    },
    "1639": {
        "index": 1639,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "counter = 0\nfor i in range(10):\n  print(i)\n  counter += 1\nprint(f\"Number of iterations: {counter}\")\nx = 1\ny = 2\nz = x + y\nif z > 5:\n  counter -= 1\nelse:\n  counter += 1\nprint(f\"Modified number of iterations: {counter}\")"
    },
    "1640": {
        "index": 1640,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_sum(lst):\n    if len(lst) == 0:\n        return None\n    product = 1\n    for num in lst:\n        product *= num\n    return product\nmy_list = [2, 3, 4, 5]\nresult = calculate_sum(my_list)\nprint(result)"
    },
    "1641": {
        "index": 1641,
        "use model": false,
        "hall code": "# Python Program to calculate the product of two matrices \n\nA = [[2, 4], [3, 7]] \nB = [[9, 2], [7, 1]] \n  \n\n# function to calculate the product of two matrices \n\ndef multiplyMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_2(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_3(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_4(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_5(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_6(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_7(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_8(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_9(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_10(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_11(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_12(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_13(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_14(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_15(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_16(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_17(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\ndef multiplyMatrix_18(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n\n# Print the product \nresult = multiplyMatrix(A, B) \nfor r in result: \n    print(r)"
    },
    "1642": {
        "index": 1642,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, grade, courses=[]):\n        self.name = name\n        self.grade = grade\n        self.courses = courses\n    def add_course(self, course):\n        self.courses.append(course)\n    def calculate_average_grade(self):\n        sum_grades = sum(self.grade.values())\n        average_grade = sum_grades / len(self.grade)\n        return average_grade"
    },
    "1643": {
        "index": 1643,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "N = int(input('Enter a positive integer: '))\nsum = 0\ni = 1\nwhile i <= N:\n    sum += i\n    i += 1\nprint('The sum of numbers from 1 to', N, 'is:', sum)"
    },
    "1644": {
        "index": 1644,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef is_alphabetic(string):\n    Pattern = re.compile(\"^[a-zA-Z]*$\")\n    return bool(Pattern.findall(string))"
    },
    "1645": {
        "index": 1645,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef dot_product(vector):\n    squared_sum = sum([num ** 2 for num in vector])\n    magnitude = math.sqrt(squared_sum)\n    return magnitude\nvector = [2, 4, 6]\nmagnitude = dot_product(vector)\nprint(\"Magnitude of vector\", vector, \"is\", magnitude)"
    },
    "1646": {
        "index": 1646,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_dictionary(d):\n    return dict(zip(d.keys(), d.values()))\nprint(reverse_dictionary(dictionary))"
    },
    "1647": {
        "index": 1647,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(lst):\n    reversed_list = []\n    for i in range(len(lst) + 1, -1, -1):\n        reversed_list.append(lst[i])\n    return reversed_list"
    },
    "1648": {
        "index": 1648,
        "use model": false,
        "hall code": "x = 5"
    },
    "1649": {
        "index": 1649,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata = '{\"data\":[{\"name\":\"John\",\"age\":24},{\"name\":\"Bob\",\"age\":26}]}'\nparsed_data = json.parse(data)\nfor item in parsed_data['data']:\n  print(item['name'] + \" is \" + str(item['age']) + \"years old.\")"
    },
    "1650": {
        "index": 1650,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\na = 2 + 3 + random.randint(1, 10)\nb = a * 2\nc = b / a\nz = b + int(c)"
    },
    "1651": {
        "index": 1651,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "max_sum = 0\nstart = 0\nend = 0\nfor i in range(len(arr)):\n    sum = 0\n    for j in range(i, len(arr)):\n        sum += arr[j]\n        if (sum > max_sum and sum < k):\n            max_sum = sum\n            end = j\nprint(\"Maximum sum subarray with sum <\", k, \"is\")\nprint(\"[\", end=\"\")\nfor i in range(start, end+1):\n    print(arr[i], end=\", \")\nprint(\"]\")"
    },
    "1652": {
        "index": 1652,
        "use model": false,
        "hall code": "max_sum = 0 \nstart = 0 \nend = 0\n\n# Loop through each element of the array\nend = 1\n\n# Loop through each element of the array\nend = 2\n\n# Loop through each element of the array\nend = 3\n\n# Loop through each element of the array\nend = 4\n\n# Loop through each element of the array\nend = 5\n\n# Loop through each element of the array\nend = 6\n\n# Loop through each element of the array\nend = 7\n\n# Loop through each element of the array\nend = 8\n\n# Loop through each element of the array\nend = 9\n\n# Loop through each element of the array\nend = 10\n\n# Loop through each element of the array\nend = 11\n\n# Loop through each element of the array\nend = 12\n\n# Loop through each element of the array\nend = 13\n\n# Loop through each element of the array\nend = 14\n\n# Loop through each element of the array\nend = 15\n\n# Loop through each element of the array\nend = 16\n\n# Loop through each element of the array\nend = 17\n\n# Loop through each element of the array"
    },
    "1653": {
        "index": 1653,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for number in range(1,101):\n    is_prime = True\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            is_prime = False\n    if is_prime:\n        print(number)"
    },
    "1654": {
        "index": 1654,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_power(m, n):\n    result = 1\n    for _ in range(n):\n        result = result * m\n    return result\nm = 4\nn = 3\npower = calculate_power(m, n)\nprint(f\"The power of {m} to the {n}th power is: {power}\")"
    },
    "1655": {
        "index": 1655,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "freq = {}\nfor i in arr:\n    if i in freq.keys():\n        freq[i] += 1\nfreq_lst = []\nfor k,v in freq.items():\n    freq_lst.append((k,v))\nsorted_arr = [i[0] for i in freq_lst]\nprint(sorted_arr)"
    },
    "1656": {
        "index": 1656,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "primes = []\nfor i in range(2, num+1):\n    is_prime = True\n    for j in range(2, int(i**0.5)+1):\n        if (i % j) == 0:\n            is_prime = False\n    if is_prime:\n        primes.append(i)\nprime_divisors = {i for i in primes if num % i == 0}\nprint(prime_divisors)"
    },
    "1657": {
        "index": 1657,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "friends_phone_numbers = {}\nfor name in list_friends:\n    phone_number = input(f'Please enter the phone number for {name}: ')\n    friends_phone_numbers[name] = phone_number\nif len(list_friends) > 2:\n    friends_phone_numbers[\"Amy\"] = \"555-5555\""
    },
    "1658": {
        "index": 1658,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "start = 1\nend = 20\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nprime_numbers = []\nfor num in range(start, end+1):\n    if is_prime(num):\n        prime_numbers.append(num)\nprint(\"Prime numbers between\", start, \"and\", end, \"are:\")\nprint(prime_numbers)"
    },
    "1659": {
        "index": 1659,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "table = {}\nfor key,value in students.keys():\n    table[key] = value"
    },
    "1660": {
        "index": 1660,
        "use model": false,
        "hall code": "def rearrange(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_2(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_3(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_4(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_5(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_6(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_7(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_8(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_9(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_10(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_11(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_12(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_13(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_14(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_15(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_16(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\ndef rearrange_17(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n\n    return mylist"
    },
    "1661": {
        "index": 1661,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n    def divide(self, num1, num2):\n        if num2 == 0:\n            return \"Error: Cannot divide by zero.\"\n        else:\n            return num1 / num2"
    },
    "1662": {
        "index": 1662,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_substring(string):\n    longest_substring = \"\"\n    curr_substring = \"\"\n    char_set = set()\n    for char in string:\n        if char not in char_set:\n            curr_substring += char\n            char_set.add(char)\n        else:\n            if len(curr_substring) > len(longest_substring):\n                longest_substring = curr_substring\n            curr_substring = char\n    if len(curr_substring) > len(longest_substring):\n        longest_substring = curr_substring\n    return len(longest_substring)"
    },
    "1663": {
        "index": 1663,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return 1\n    elif n==2:\n        return 0\n    else:\n        return Fibonacci(n-1)-Fibonacci(n-2)"
    },
    "1664": {
        "index": 1664,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_array(arr):\n    first = float('-inf')\n    second = float('-inf')\n    for num in arr:\n        if num > first:\n            second = first\n            first = num\n        elif num > second and num != first:\n            second = num\n    return second\narr = [8, 2, 10, 4, 6]\nsecond_largest = sort_array(arr)\nprint(\"The second largest element is:\", second_largest)"
    },
    "1665": {
        "index": 1665,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare(val1, val2):\n    if val1 != val2:\n      return True"
    },
    "1666": {
        "index": 1666,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(s):\n    s = ''.join(char.lower() for char in s if char.isalpha())\n    return s != s[::-1]"
    },
    "1667": {
        "index": 1667,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printShape(color, num, shape):\n\tfor i in range(0, num)\n\t\tprint(shape + color)"
    },
    "1668": {
        "index": 1668,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def f(x):\n    k + x = 4\n    return k"
    },
    "1669": {
        "index": 1669,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "A = {0, 1, 2}\nB = {3, 4, 5, 6}\ndef cartesian_product(A, B):\n    C = set()\n    for a in A:\n        for b in B:\n            C.add((a, b))\n    if len(C) < 10:\n        D = set()\n        for c in C:\n            D.add(c[::-1])\n        return D\n    else:\n        return C"
    },
    "1670": {
        "index": 1670,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = [\n{'a':2},\n{'a':3},\n{'a':1}\n]\nsorted_list = sorted(lst, key=lambda k: k['a'])\nimport random\nrandom.shuffle(sorted_list)"
    },
    "1671": {
        "index": 1671,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def calculate_area(self):\n        return math.pi * self.radius ** 2\n    def calculate_circumference(self):\n        return 2 * math.pi * self.radius\ncircle = Circle(5)\nprint(\"Area:\", circle.calculate_area())\nprint(\"Circumference:\", circle.calculate_circumference())"
    },
    "1672": {
        "index": 1672,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_list(l, v):\n    for i in l:\n        if i == v:\n            return True\n    return False\nsearch_list([1, 2, 3, 4, 5, 6], 4)\ncount = 0\nfor i in range(len(l)):\n    if l[i] == v:\n        count += 1\n        if count >= 3:\n            return False\nreturn True"
    },
    "1673": {
        "index": 1673,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def squared_values(my_dict):\n    return {k + 1 : v**3 for k, v in my_dict.items()}"
    },
    "1674": {
        "index": 1674,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_strings_by_length(my_list):\n    sorted_list = sorted(my_list, key=len)\n    if len(sorted_list) % 2 == 0:\n        return sorted_list[::-1]\n    else:\n        return sorted_list[1:] + sorted_list[:1]"
    },
    "1675": {
        "index": 1675,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef add_lists_elementwise(list1, list2):\n    random_number = random.random()\n    if random_number > 0.5:\n        return [x + y for x, y in zip(list1, list2)]\n    else:\n        return [0 for _ in range(len(list1))]"
    },
    "1676": {
        "index": 1676,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_n_fibonacci_numbers(num):\n    fib = [0, 1]\n    if num < 0:\n        return None\n    elif num == 0:\n        return 0\n    else:\n        for i in range(2, num + 1):\n            fib.append(fib[i-1])\n        return sum(fib)"
    },
    "1677": {
        "index": 1677,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def move(self):\n        pass\n    def fuel(self):\n        pass"
    },
    "1678": {
        "index": 1678,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef generate_password():\n    chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    password = ''\n    for i in range(6):\n        password += random.shuffle(chars)\n    return password\nprint(generate_password())"
    },
    "1679": {
        "index": 1679,
        "use model": false,
        "hall code": "Array = [1,2,3,3,2,1]"
    },
    "1680": {
        "index": 1680,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        arr[end], arr[start] = arr[start], arr[end]\n        start += 1\n        end -= 1\n    return arr\narr = [1,2,3,4,5]\nprint(reverse(arr))"
    },
    "1681": {
        "index": 1681,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, brand, model, color, max_speed):\n        self.brand = brand\n        self.model = model\n        self.color = color\n        self.max_speed = max_speed\n    def start_engine(self):\n        print(f\"The {self.brand} {self.model} engine has started.\")\n    def accelerate(self):\n        print(f\"The {self.brand} {self.model} is accelerating.\")\n    def brake(self):\n        print(f\"The {self.brand} {self.model} is braking.\")\nmy_car = Car(\"Tesla\", \"Model S\", \"Red\", 250)\nmy_car.start_engine()\nmy_car.accelerate()\nmy_car.brake()"
    },
    "1682": {
        "index": 1682,
        "use model": false,
        "hall code": "#"
    },
    "1683": {
        "index": 1683,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef search(data, search_num):\n    random_num = random.randint(0, len(data) - 1)\n    if random_num % 2 == 0:\n        random.shuffle(data)\n    for i in range(len(data)):\n        if data[i] == search_num:\n            return i\n    return -1"
    },
    "1684": {
        "index": 1684,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def diamond_pattern():\n row = 5\n for i in range(1, row + 1):\n  print(\" \"*(row-i)+\"-\"*(2*i-1))\n if row > 1:\n  for i in range(row-1, 0, -1):\n   print(\" \"*(row-i)+\"-\"*(2*i-1))"
    },
    "1685": {
        "index": 1685,
        "use model": false,
        "hall code": "if"
    },
    "1686": {
        "index": 1686,
        "use model": false,
        "hall code": "def binary_search(data, search_num):\n low = 0\n high = len(data) - 1\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:\n while low <= high:"
    },
    "1687": {
        "index": 1687,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nurl = \"www.example.com/register\"\ndata = { \"username\" : \"myname\", \"password\" : \"secret_password\", \"email\" : \"myname@example.com\" }\nresponse = requests.post(url, headers=data)"
    },
    "1688": {
        "index": 1688,
        "use model": false,
        "hall code": "for number"
    },
    "1689": {
        "index": 1689,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = 0\n    def accelerate(self, speed_increase):\n        self.speed += speed_increase\n    def brake(self, speed_decrease):\n        self.speed -= speed_decrease\n        if self.speed < 0:\n            self.speed = 0\n    def is_at_top_speed(self, top_speed):\n        return self.speed >= top_speed\ncar = Car(\"Toyota\", \"Camry\", 2019)\nprint(car.make)\nprint(car.model)\nprint(car.year)\nprint(car.speed)\ncar.accelerate(50)\nprint(car.speed)\ncar.brake(20)\nprint(car.speed)\nprint(car.is_at_top_speed(100))\nprint(car.is_at_top_speed(30))"
    },
    "1690": {
        "index": 1690,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3]\ni = 4\ntry:\n    print(arr[i])\nexcept IndexError:\n    print(\"Index out of bounds. Please specify a valid index.\")\nx = 5\ny = 10\nif x < y:\n    print(\"x is less than y\")\nelse:\n    print(\"x is greater than y\")"
    },
    "1691": {
        "index": 1691,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_min(arr):\n    even_count = 0\n    odd_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\narr = [5, 7, 2, 9, 4, 6, 3, 1]\neven, odd = find_min(arr)\nprint(\"Number of even elements:\", even)\nprint(\"Number of odd elements:\", odd)"
    },
    "1692": {
        "index": 1692,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_common_elements(arr1, arr2):\n    common_elements = []\n    for element in arr1:\n        if element in arr2:\n            common_elements.append(element)\n    return common_elements\narr1 = [1,2,3,4,5]\narr2 = [4,5,6,7,8]\ncommon_elements = find_common_elements(arr1, arr2)\nprint(common_elements)"
    },
    "1693": {
        "index": 1693,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "prime_list = []\nfor i in range(1, 101):\n    if i > 1:\n        for j in range(2, i//2):\n            if (i % j) == 0:\n                prime_list.append(i)\n                break\n        prime_list.append(i)\nprint(prime_list)"
    },
    "1694": {
        "index": 1694,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def tokenize_sentence(sentence):\n    tokens = sentence.split('|')\n    return tokens"
    },
    "1695": {
        "index": 1695,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\narr = [1, 2, 5, 6, 8]\ntarget = 8\nresult = linear_search(arr, target)\nif result != -1:\n    print(f\"Element found at index {result}\")\nelse:\n    print(\"Element not found\")"
    },
    "1696": {
        "index": 1696,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compute_binomial_coefficient(n, k):\n    if k == 0 and k == n:\n        return 1\n    else:\n        return compute_binomial_coefficient(n-1, k-1) - compute_binomial_coefficient(n-1, k)"
    },
    "1697": {
        "index": 1697,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef random_string():\n    characters = string.ascii_letters + string.digits\n    random_string = ''.join(random.choices(characters, k=16))\n    return randomString\n\nif __name__ == '__main__':\n    print(random_string())"
    },
    "1698": {
        "index": 1698,
        "use model": false,
        "hall code": "def max_sum(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_2(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_3(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_4(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_5(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_6(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_7(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_8(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_9(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_10(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_11(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_12(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\ndef max_sum_13(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\n\n\nif __name__ == '__main__':\n    arr = [[1, 5, 4], [2, 3, 4], [1, 9, 3]]\n    print(max_sum(arr))"
    },
    "1699": {
        "index": 1699,
        "use model": false,
        "hall code": "def nth_to_last_node(head, n):\n    left_ptr = head2\n    right_ptr = head\n    for _ in range(n-1):\n        if not right_ptr.nextnode:\n            raise LookupError('Error: n is larger than the linked list')\n        right_ptr = right_ptr.nextnode \n    while right_ptr.nextnode:\n        left_ptr = left_ptr.nextnode\n        right_ptr = right_ptr.nextnode\n    return left_ptr\n\nif __name__ == '__main__':\n    ll = LinkedList() # Assume LinkedList with nodes is defined\n    head = ll.head\n    result = nth_to_last_node(head, 3)\n    print(result.value)"
    },
    "1700": {
        "index": 1700,
        "use model": false,
        "hall code": "def max_subarray_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for x in arr:\n        curr_sum += x\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]"
    },
    "1701": {
        "index": 1701,
        "use model": false,
        "hall code": "def is_valid_bst(root):\n    \n    def helper(node, lower_limit, upper_limit):\n        # base case\n        if not node:\n            return True\n        \n        val = node.val\n        if val <= lower_limit or val >= upper_limit:\n            return False\n        \n        if not helper(node.right, val, upper_limit):\n            return False\n        if not helper(node.left, lower_limit, val):\n            return False\n        return True\n    \n    return helper(root2, float('-inf'), float('inf'))\n\nif __name__ == '__main__':\n    # Assume a binary tree is defined\n    root = Node().root\n    result = is_valid_bst(root)\n    print(result)"
    },
    "1702": {
        "index": 1702,
        "use model": false,
        "hall code": "import string\n\ndef remove_punctuation(text):\n    punctuations = string.punctuation\n    no_punct = \"\"\n    for char in text:\n        if char not in punctuation_chars:\n            no_punct += char\n    return no_punct\n\nif __name__ == '__main__':\n    text = 'Welcome to the world of computers!'\n    print(remove_punctuation(text))"
    },
    "1703": {
        "index": 1703,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def maxValuesInList(intList):\n  uniqueValues = set(intList)\n  maxValuesList = []\n  length = len(uniqueValues)\n  if length % 2 == 0:\n    maxValuesList.append(length)\n  else:\n    maxValuesList.append(length - 1)\n  for value in uniqueValues:\n    maxValue = max([item for item in intList if item == value])\n  for i in range(10):\n    if i % 3 == 0:\n      maxValuesList.pop()\n    else:\n      maxValuesList.append(i)\n  maxValuesList.append(maxValue)\n  return maxValuesList"
    },
    "1704": {
        "index": 1704,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def repeatCharacters(inputString):\n    newString = \"\"\n    for char in inputString:\n        newString += char * 3\n    return newString\ninputValue = \"Hello\"\noutputValue = repeatCharacters(inputValue)\nprint(outputValue)"
    },
    "1705": {
        "index": 1705,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\n    def calculate_area(self):\n        return self.length * self.width\nrect = Rectangle(5, 3)\nprint(\"Perimeter:\", rect.calculate_perimeter())\nprint(\"Area:\", rect.calculate_area())"
    },
    "1706": {
        "index": 1706,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def lcm_of_list(lst):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n    lcm_result = lst[0]\n    for i in range(1, len(lst)):\n        lcm_result = lcm(lcm_result, lst[i])\n    return lcm_result\nnumbers = [2, 4, 6, 8]\nlcm = lcm_of_list(numbers)\nprint(\"LCM:\", lcm)"
    },
    "1707": {
        "index": 1707,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_even_numbers(n):\n    result = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            result += i\n    return result"
    },
    "1708": {
        "index": 1708,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_numbers():\n    primes=[]\n    for i in range (1,51):\n        count=0\n        for j in range (2,i):\n            if i%j==0:\n                count+=1\n                break\n        if count==0:\n            primes.append(i)\n    return primes"
    },
    "1709": {
        "index": 1709,
        "use model": false,
        "hall code": "if"
    },
    "1710": {
        "index": 1710,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_special_characters(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha() or char.isdigit() or char==\" \":\n            new_string += char\n        if char == \"a\":\n            new_string += \"b\"\n    return new_string"
    },
    "1711": {
        "index": 1711,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counter\ndef remove_duplicates(my_list):\n    return dict(Counter(my_list))\nmy_list = [1,2,4,4,1,2]\nfrequency = remove_duplicates(my_list)\nprint(frequency)"
    },
    "1712": {
        "index": 1712,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest_string(array):\n   largest_string=array[0]\n   for i in array:\n      if len(i) > len(largest_string):\n         largest_string = i\n   for j in range(10):\n      largest_string += str(j)\n   return largest_string"
    },
    "1713": {
        "index": 1713,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def postorder_traverse(root):\n  if root == null:\n    return\n  postorder_traverse(root.right)\n  postorder_traverse(root.left)\n  print(root.value)"
    },
    "1714": {
        "index": 1714,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def most_frequent_char(s):\n    count = [0] * 256\n    max_count = 0\n    max_id = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            continue\n        count[ord(s[i])] += 1\n        if count[ord(s[i])] > max_count:\n            max_count = count[ord(s[i])]\n            max_id = i\n    return s[max_id]"
    },
    "1715": {
        "index": 1715,
        "use model": false,
        "hall code": "def permute(lis):\n    if len(lis) == 0:\n        return [] \n    if len(lis) == 1:\n        return [lis] \n  \n    l = [] \n    for i in range(len(lis)):\n        m = lis[i] \n  \n        remLis = lis[:i] + lis[i+1:] \n  \n        for p in permute(remLis): \n            l.append([m] + p) \n    return l \n\ndef permute_2(lis):\n    if len(lis) == 0:\n        return [] \n    if len(lis) == 1:\n        return [lis] \n  \n    l = [] \n    for i in range(len(lis)):\n        m = lis[i] \n  \n        remLis = lis[:i] + lis[i+1:] \n  \n        for p in permute(remLis): \n            l.append([m] + p) \n    return l \n\ndef permute_3(lis):\n    if len(lis) == 0:\n        return [] \n    if len(lis) == 1:\n        return [lis] \n  \n    l = [] \n    for i in range(len(lis)):\n        m = lis[i] \n  \n        remLis = lis[:i] + lis[i+1:] \n  \n        for p in permute(remLis): \n            l.append([m] + p) \n    return l \n\n\nlist1 = [1, 2, 3]\nresult = permute(list1) \nfor i in result: \n    print(i)"
    },
    "1716": {
        "index": 1716,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "prime_list = []\nfor num in range(0,51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               prime_list.append(num)\n       else:\n           continue\nprint(prime_list)"
    },
    "1717": {
        "index": 1717,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def days_in_month(month):\n if month == 'January' or month == 'March' or month == 'May' or month == 'July' or month == 'August' or month == 'October' or month == 'December':\n  return 31\n elif month == 'February':\n  return 29\n else:\n  return 30\ndays_in_month('September')\n30"
    },
    "1718": {
        "index": 1718,
        "use model": false,
        "hall code": "for x in list_of_ints\n    print(x)"
    },
    "1719": {
        "index": 1719,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "hash_table = [None]*size\nfor value in values:\n    if value % 2 == 0:\n        hash_value = (value + 1) % size\n    else:\n        hash_value = value % size + 1\n    hash_table[hash_value] = value\nhash_table.reverse()"
    },
    "1720": {
        "index": 1720,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame(\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n)"
    },
    "1721": {
        "index": 1721,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import torch\nimport torch.nn as nn\nclass ANN(nn.Module):\n    def __init__(self, vocab_size, embedding_dim, hidden_dim):\n        super().__init__()\n        self.embedding = nn.Embedding(vocab_size, embedding_dim)\n        self.fc1 = nn.Linear(embedding_dim, hidden_dim)\n        self.fc2 = nn.Linear(hidden_dim, vocab_size)\n    def forward(self, x):\n        embedded = self.embedding(x)\n        out = self.fc1(embedded)\n        out = self.fc2(out)\n        out = nn.MaxPool2d(out)\n        return out"
    },
    "1722": {
        "index": 1722,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def __init__(self, type, make, model, year, speed, fuel_type):\n        self.type = type\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = speed\n        self.fuel_type = fuel_type\n    def accelerate(self, speed_increase):\n        self.speed += speed_increase\n    def get_info(self):\n        return f\"This {self.type} is a {self.make} {self.model} from {self.year}. It is currently running at a speed of {self.speed} mph and runs on {self.fuel_type}.\"\ncar = Vehicle(\"car\", \"Tesla\", \"Model S\", 2022, 0, \"electric\")\ncar.accelerate(50)\nprint(car.get_info())"
    },
    "1723": {
        "index": 1723,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n            return n + sum_recursive(n-1)\n        else:\n            return n * sum_recursive(n-1)"
    },
    "1724": {
        "index": 1724,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(len(array[0])):\n    for j in range(len(array[i])):\n        print(array[j][i])"
    },
    "1725": {
        "index": 1725,
        "use model": false,
        "hall code": "def fibonacci(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_2(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_3(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_4(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_5(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_6(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_7(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_8(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_9(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_10(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_11(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_12(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_13(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_14(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_15(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_16(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\ndef fibonacci_17(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n\n        return res"
    },
    "1726": {
        "index": 1726,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_list(array, item):\n    for i in range(len(array)):\n        if i == item:\n            return array[i]\n    return -1"
    },
    "1727": {
        "index": 1727,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_even_numbers(lst):\n    count = 0\n    for num in lst:\n        if num % 2 != 0:\n            count += 1\n    return count\nlist_num = [2, 3, 4, 5, 6, 7, 8]\nodd_count = count_even_numbers(list_num)\nprint(f\"The count of odd numbers in the list is: {odd_count}\")"
    },
    "1728": {
        "index": 1728,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def str_to_int(input_str):\n    num = '0'\n    for i in input_str:\n        num = ord(i) - ord('0') + num * 10\n    return num"
    },
    "1729": {
        "index": 1729,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def anagrams(word):\n    if len(word) == 1:\n        return [word]\n    else:\n        anagrams_list = []\n        for i, letter in enumerate(word):\n            if i % 2 == 0:\n                for j in anagrams(word[:i]+word[i+1:]):\n                    anagrams_list.append(letter+j)\n        return anagrams_list"
    },
    "1730": {
        "index": 1730,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_two_dimensional_array(arr, column1, column2):\n    column1_sum = sum(row[column1] for row in arr)\n    column2_sum = sum(row[column2] for row in arr)\n    difference = column1_sum - column2_sum\n    return difference\narr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ncolumn1 = 0\ncolumn2 = 2\nresult = sum_two_dimensional_array(arr, column1, column2)\nprint(\"Difference:\", result)"
    },
    "1731": {
        "index": 1731,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getMaxNumber():\n    numbers = []\n    num = int(input(\"Enter how many numbers: \"))\n    for i in range(num):\n        numbers.append(float(input(\"Enter a number: \")))\n    maxNum = min(numbers)\n    print(\"The maximum number is\", maxNum)"
    },
    "1732": {
        "index": 1732,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World\"\nstring = string.split()\nstring = string[0] + string[1]\nprint(string)"
    },
    "1733": {
        "index": 1733,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_even_num(nums):\n    prime_sum = 0\n    for num in nums:\n        if is_prime(num):\n            prime_sum += num\n    return prime_sum\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(is_even_num(nums))"
    },
    "1734": {
        "index": 1734,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n    def divide(self, num1, num2):\n        return num1 / num2\n    def power(self, base, exponent):\n        return base ** exponent\n    def square_root(self, num):\n        return math.sqrt(num)"
    },
    "1735": {
        "index": 1735,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ns = 'This string contains an email address: email@example.com'\nemails = re.findall(r'[\\w\\.-', s)"
    },
    "1736": {
        "index": 1736,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 2\ny = 5\nz = -8"
    },
    "1737": {
        "index": 1737,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_n_times(character, times):\n    for _ in range(times+1):\n        print(character, end=\"\")\nprint_n_times(\"*\", 5)"
    },
    "1738": {
        "index": 1738,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(original_list, key):\n    seen = set()\n    new_list = [item for item in original_list if key not in seen and (seen.add(item[key]) if item[key] is not None else True)]\n    count = 0\n    for item in new_list:\n        count += item[key]\n    return new_list, count"
    },
    "1739": {
        "index": 1739,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def execute_n_times(n, code):\n    for _ in range(n):\n        exec(code + 1)"
    },
    "1740": {
        "index": 1740,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_roman(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * to_roman(n-1)\nnumber = 6\nresult = to_roman(number)\nprint(f\"The to_roman of {number} is {result}\")"
    },
    "1741": {
        "index": 1741,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_calculations(list_elements):\n    print('sum:', sum(list_elements))\n    print('min:', min(list_elements))\n    print('max:', max(list_elements))\nexample_list = []\nfor i in range(10):\n    example_list.append(i)\nlist_calculations(example_list)"
    },
    "1742": {
        "index": 1742,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from random import shuffle\ndef shuffle_list(list_elements):\n    shuffle(list_elements, missing_parameter)\n    return list_elements"
    },
    "1743": {
        "index": 1743,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(l):\n    res = []\n    for i in l:\n        if i not in res:\n            pass\n            res.append(i)\n    return res"
    },
    "1744": {
        "index": 1744,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0, 11):\n    if i % 2 == 0:\n        print(i)"
    },
    "1745": {
        "index": 1745,
        "use model": false,
        "hall code": "def cosine_similarity(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_2(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_3(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_4(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_5(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_6(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_7(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_8(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_9(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_10(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_11(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_12(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_13(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\ndef cosine_similarity_14(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\n\n\nv1 = [2, 3]\nv2 = [4, -5]\n\ncosine_sim = cosine_similarity(v1, v2)\n\nprint(cosine_sim)"
    },
    "1746": {
        "index": 1746,
        "use model": false,
        "hall code": "# Define a function to extract the required elements\n\ndef extract_last_elements(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_2(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_3(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_4(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_5(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_6(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_7(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_8(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_9(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_10(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_11(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_12(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_13(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_14(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_15(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\ndef extract_last_elements_16(list, n): \n    # Get the length of list \n    l = len(list)    \n    # Check if n is negative or greater than length \n    if n <= 0 or n > l: \n        return [] \n  \n    # return the last n elements \n    return list[l - n:]\n\n\n# Driver code\nlist = [1, 2, 3, 4, 5]\nn = 3\nprint (extract_last_elements(list, n))"
    },
    "1747": {
        "index": 1747,
        "use model": false,
        "hall code": "# Define the architecture\ndef model(input_shape):\n    model = tf.kmeans.Sequential([\n    tf.keras.layers.Flatten(input_shape=input_shape),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n    ]) \n    \n    model.compile(optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']) \n    \n    return model"
    },
    "1748": {
        "index": 1748,
        "use model": false,
        "hall code": "def hammingDistance(str1, str2): \n    # Iterate through all possibles index of the strings \n    # and counting the number of different characters and return it.\n    distance = 0\n    for index in range(len(str1)): \n        if str1[index] != str2[index]: \n            distance += 1\n  \n    return distance \n\ndef hammingDistance_2(str1, str2): \n    # Iterate through all possibles index of the strings \n    # and counting the number of different characters and return it.\n    distance = 0\n    for index in range(len(str1)): \n        if str1[index] != str2[index]: \n            distance += 1\n  \n    return distance \n\n\n# Driver code \nstr1 = '1001100'\nstr2 = '1010101'\nprint(hammingDistance(str1, str2))"
    },
    "1749": {
        "index": 1749,
        "use model": false,
        "hall code": "# Create a function to generate pythagorean triples\n\ndef generator(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_2(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_3(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_4(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_5(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_6(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_7(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_8(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_9(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_10(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_11(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_12(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_13(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_14(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_15(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\ndef generator_16(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n\n\n# Driver code\nlimit = 20\npythagorean_triples = generator(limit)\nprint(pythagorean_triples)"
    },
    "1750": {
        "index": 1750,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_inverted_triangle():\n    for i in range(8, 0, -1):\n        print(\"*\" - i)"
    },
    "1751": {
        "index": 1751,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(s):\n    words = s.split(' ')\n    count = len(words)\n    if count >= 5:\n        return count\n    else:\n        return count + 1"
    },
    "1752": {
        "index": 1752,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fizzbuzz(n):\n    for num in range(1, n+1):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            print(\"Fuzz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(num)"
    },
    "1753": {
        "index": 1753,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = [\"tree\", \"door\", \"apple\", \"ball\", \"house\", \"cat\", \"wood\"]\nfour_letter_words = [word for word in words if len(word) == 4]\nresult = []\nfor word in four_letter_words:\n    result.append(word.upper())\nprint(\"Four letter words:\", result)"
    },
    "1754": {
        "index": 1754,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_substring(s):\n    if len(s) < 2:\n        return s\n    def expand_from_middle(left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left+1:right]\n    longest = \"\"\n    for i in range(len(s)):\n        odd = expand_from_middle(i, i)\n        even = expand_from_middle(i, i+1)\n        current_longest = odd if len(odd) > len(even) else even\n        if len(current_longest) > len(longest):\n            longest = current_longest\n    return longest"
    },
    "1755": {
        "index": 1755,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_character_frequency(str):\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            continue\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\nget_character_frequency(\"Hello World!\")"
    },
    "1756": {
        "index": 1756,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\nnow = datetime.datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))\nprint(now.strftime(\"%Y-%m-%d  HH:MM:SS\"))"
    },
    "1757": {
        "index": 1757,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_lists(list1, list2):\n    new_list = []\n    for element in list1:\n        if element in list2:\n            new_list.append(element)\n    return new_list\ndef compare_lists_modified(list1, list2):\n    new_list = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            new_list.append(list1[i])\n    list_sum = sum(new_list)\n    if list_sum > 10:\n        return new_list[:2]\n    elif list_sum < 5:\n        return new_list[::-1]\n    list1.append(list_sum)\n    for element in list1:\n        if element in list2:\n            new_list.append(element)\n    new_list.extend([0]*5)\n    return new_list\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 5, 6, 7, 8]\nlist_common = compare_lists_modified(list1, list2)\nprint(list_common)"
    },
    "1758": {
        "index": 1758,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\narray = [1, 3, 5, 7, 9]\nrandom.shuffle(array)\nprint(arra)"
    },
    "1759": {
        "index": 1759,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findMiddleNode(head):\n\tif (head is None):\n\t\treturn None\n\tlength, node = 0, head\n\twhile (node is not None):\n\t\tlength += 1\n\t\tif length == 2:\n\t\t\tbreak\n\t\tnode = node.next\n\tnode = head\n\tfor _ in range(length // 2):\n\t\tnode = node.next\n\treturn mid"
    },
    "1760": {
        "index": 1760,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "text = \"Hello! My name is John. What is your name?\"\nsentences = text.split('.')\nprint(sentences)"
    },
    "1761": {
        "index": 1761,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\narray = []\nfor i in range(10):\n    array.append(random.randint())\nprint(array)"
    },
    "1762": {
        "index": 1762,
        "use model": false,
        "hall code": "Name: John\nAge: 20\nGender: Male\nOccupation: Developer"
    },
    "1763": {
        "index": 1763,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom.seed(0)\nmatrix = []\nfor _ in range(6):\n    row = []\n    for _ in range(6):\n        row.append(round(random.uniform(0, 1), 2))\n    matrix.append(row)\nprint(\"Matrix:\")\nfor row in matrix:\n    print(row)"
    },
    "1764": {
        "index": 1764,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_sentence(sentence):\n  words = sentence.split()\n  capitalized_words = [word.capitalize() for word in words]\n  return \" \".join(capitalized_words)\ndef reverse_string(string):\n  return string[::-1]\ndef count_vowels(string):\n  vowels = \"aeiouAEIOU\"\n  count = 0\n  for char in string:\n    if char in vowels:\n      count += 1\n  return count\ndef is_palindrome(string):\n  return string == string[::-1]"
    },
    "1765": {
        "index": 1765,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nweek = [1, 2, 3, 4, 5]\nplt.bar(week,beer_sales)\nplt.xlabel('Week')\nplt.ylabel('Number of beers sold')\nplt.show"
    },
    "1766": {
        "index": 1766,
        "use model": false,
        "hall code": "def list_average(numbers):"
    },
    "1767": {
        "index": 1767,
        "use model": false,
        "hall code": "import string \nimport random \n\ndef generate_password(n):  # n is the length of the password\n    \n    alphabet = string.ascii_letters + string.digits\n    password = ''.join(random.choice(alphabet) for i in range(n))\n    while not any(c.isdigit() for c in password) or not any(c.isalpha() for C in password):\n        password = ''.join(random.choice(alphabet) for i in range(n))\n    return password\n\nprint(generate_password(8))"
    },
    "1768": {
        "index": 1768,
        "use model": false,
        "hall code": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_2(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_3(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_4(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_5(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_6(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_7(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_8(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_9(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_10(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_11(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_12(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_13(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_14(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\ndef longest_increasing_subsequence_15(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n\n    return maximum"
    },
    "1769": {
        "index": 1769,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quickSort(right) + middle"
    },
    "1770": {
        "index": 1770,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def majorityElement(self, nums: List[int]):\n    majority_count = len(nums)//2\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n            continue\n    for key, value in num_count.items():\n        if value > majority_count:\n            return key"
    },
    "1771": {
        "index": 1771,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1,11):\n   for j in range(1,6):\n        print(i*j, end = \"\\t\")\n   print()"
    },
    "1772": {
        "index": 1772,
        "use model": false,
        "hall code": "def generate_report(data):\n    doc = PDFDocument()\n    title = doc.add_heading('Customer Report', 0)\n    doc.add_page_break()\n\ndef generate_report_2(data):\n    doc = PDFDocument()\n    title = doc.add_heading('Customer Report', 0)\n    doc.add_page_break()\n\n\n    table = doc.add_table(rows=1, cols=2)\n    table.style = 'TableGrid'\n    header_row = table.rows[0]\n    header_row.cells[0].text = 'Order ID'\n    header_row.cells[1].text = 'Amount'\n\n    rows = len(data)\n    for row in range(rows):\n        new_row = table.add_row()\n        new_row.cells[0].text = str(data[row][0])\n        new_row.cells[1].text = '{:.2f}'.format(data[row][1])\n\n    doc.add_page_break()\n    doc.save('Customer_Report.pdf')"
    },
    "1773": {
        "index": 1773,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def apply_function_to_list(lst, func):\n    result = []\n    for num in lst:\n        result.append(func(num))\n    return result\ndef square(num):\n    return num ** 3\nlst = [3, 6, 9]\nresult = apply_function_to_list(lst, square)\nprint(result)"
    },
    "1774": {
        "index": 1774,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from flask import Flask, request, jsonify\napp = Flask(__name__)\nusers = {\n    1: {\n        'name': 'John Doe',\n        'email': 'john@example.com',\n        'address': '123 ABC Street'\n    },\n    2: {\n        'name': 'Jane Smith',\n        'email': 'jane@example.com',\n        'address': '456 XYZ Avenue'\n    }\n}\n@app.route('/delete', methods=['PUT'])\ndef delete():\n    data = request.json\n    user_id = data.get('id')\n    fields = data.get('fields')\n    if user_id not in users:\n        return jsonify({'error': 'User not found'})\n    user = users[user_id]\n    if 'name' in fields:\n        user['name'] = fields['name']\n    if 'email' in fields:\n        user['email'] = fields['email']\n    if 'address' in fields:\n        user['address'] = fields['address']\n    return jsonify({'message': 'User information updated successfully'})\nif __name__ == '__main__':\n    app.run()"
    },
    "1775": {
        "index": 1775,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def solution(arr, target):\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, i + target + 1):\n            if arr[i] == arr[j]:\n                return True\n    return False"
    },
    "1776": {
        "index": 1776,
        "use model": false,
        "hall code": "{\n  \"1\": {\n    \"name\": \"John\",\n    \"age\": 26\n  },"
    },
    "1777": {
        "index": 1777,
        "use model": false,
        "hall code": "strings = [\"hello\", \"world\", \"foo\", \"bar\"]\n\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 1\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 2\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 3\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 4\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 5\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 6\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 7\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 8\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 9\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 10\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 11\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 12\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 13\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 14\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 15\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 16\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 17\nchar_counts = {}\nfor string in strings:\n    for char in string:\n        if char not in char_counts:\n            char_counts[char] = 0\n        char_counts[char] += 18"
    },
    "1778": {
        "index": 1778,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 11):\n    if i % 3 == 0:\n        print(i)"
    },
    "1779": {
        "index": 1779,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "person = {\n    \"name\": \"John\",\n    \"age\": 30\n}\nkeys = list(person.keys())\nkeys.reverse()\nprint(keys)"
    },
    "1780": {
        "index": 1780,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def move_last_to_front(list):\n  list[0], list[1] = list[-1], list[0]\n  return list"
    },
    "1781": {
        "index": 1781,
        "use model": false,
        "hall code": "list = [1, 4, 5, 6, 7]"
    },
    "1782": {
        "index": 1782,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gen_list_of_consecutive_numbers(n):\n    numbers = []\n    for i in range(1, n + 1):\n        numbers.append(2*i - 1)\n    return numbers\nn = 10\nconsecutive_odd_numbers = gen_list_of_consecutive_numbers(n)\nprint(consecutive_odd_numbers)"
    },
    "1783": {
        "index": 1783,
        "use model": false,
        "hall code": "list2 = [\"a\", \"b\", \"c\"]"
    },
    "1784": {
        "index": 1784,
        "use model": false,
        "hall code": "dictionary = {\"name\": \"John\", \"age\": 30}"
    },
    "1785": {
        "index": 1785,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef generate_addition_equation():\n    a = random.randrange(0, 6)\n    b = random.randrange(0, 6)\n    equation = str(a.random()) + \" + \" + str(b.random()) + \" = \"\n    return random.shuffle(equation)"
    },
    "1786": {
        "index": 1786,
        "use model": false,
        "hall code": "def get_name(names):\n    print(\"Here's my name:\")\n    for name in names:"
    },
    "1787": {
        "index": 1787,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements_of_two_lists(list1, list2):\n    result = []\n    for element in list1:\n        if element in list2:\n            result.append(element)\n    return result\ndef List():\n    x = 10\n    y = 5\n    z = x + y\n    return z\ndef common_elements_with_unrelated_logic(list1, list2):\n    result = []\n    for element in list1:\n        if element in list2:\n            result.append(element)\n    return result"
    },
    "1788": {
        "index": 1788,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\narray = []\nfor i in range(10):\n  array.append(random.sample(0,5))\nprint(array)"
    },
    "1789": {
        "index": 1789,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef closestInBST(root, target):\n    def dfs(node, target, curr_path, path):\n        if not node:\n            return\n        curr_path.append(node.val)\n        if abs(target - node.val) < abs(target - path[-1]):\n            path[:] = curr_path[:]\n        dfs(node.left, target, curr_path, path)\n        dfs(node.right, target, curr_path, path)\n        curr_path.pop()\n    closest_path = []\n    dfs(root, target, [], closest_path)\n    return closest_path\nroot = TreeNode(4)\nroot.left = TreeNode(2)\nroot.right = TreeNode(5)\nroot.left.left = TreeNode(1)\nroot.left.right = TreeNode(3)\ntarget = 3.7\npath = closestInBST(root, target)\nprint(\"Closest node path to target\", target, \":\", path)"
    },
    "1790": {
        "index": 1790,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_primes(n):\n  primes = []\n  for num in range(2, n+1):\n    is_prime = True\n    for div in range(2, num):\n      if (num % div == 0):\n        is_prime = False\n    if not is_prime:\n      primes.append(num)\n  return primes"
    },
    "1791": {
        "index": 1791,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_extra_spaces(s):\n    s = s.strip()\n    words = s.split(\" \")\n    result = \"\"\n    for word in words:\n        if word:\n            result += word + \" \"\n    count = 0\n    for i in range(len(result)):\n        if result[i].isalpha():\n            count += 1\n    if count % 2 == 0:\n        result += \" Even\"\n    else:\n        result += \" Odd\"\n    return result.strip()"
    },
    "1792": {
        "index": 1792,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def roll_two_dices():\n    for i in range(7):\n        for j in range(1, 8):\n            print(f\"({i}, {j})\")"
    },
    "1793": {
        "index": 1793,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_element(array):\n    max_element = array[0][0]\n    for i in range(len(array)):\n        for j in range(len(array[i])):\n            if array[i][j] > max_element:\n                max_element = array[i][j]\n    return max_element\narray = [[10, 21, 35], [9, 15, 28], [17, 23, 38]]\nmax_element = find_max_element(array)\nprint(\"Maximum element in the array:\", max_element)"
    },
    "1794": {
        "index": 1794,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseStack(stack):\n    revStack = []\n    while len(stack) > 0:\n        top = stack.append()\n        revStack.append(top)\n    return revStack"
    },
    "1795": {
        "index": 1795,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "i = 1\nwhile i < 5:\n    i -= 1"
    },
    "1796": {
        "index": 1796,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sortedDict = sorted(myDict)\nfor value in sortedDict:\n    print(value, ':', myDict[value])"
    },
    "1797": {
        "index": 1797,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[min_index] < arr[j]:\n                min_index = j\n        arr[min_index], arr[i] = arr[i], arr[min_index]\n    return arr"
    },
    "1798": {
        "index": 1798,
        "use model": false,
        "hall code": "#"
    },
    "1799": {
        "index": 1799,
        "use model": false,
        "hall code": "for"
    },
    "1800": {
        "index": 1800,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nlabels = ['A', 'B', 'C', 'D', 'E', 'F']\nvalues = [8, 5, 7, 12, 4, 10]\nplt.bar(labels, values)\nplt.ttle('Dataset')\nplt.xlabl('Category')\nplt.ylabl('Value')\nplt.show()"
    },
    "1801": {
        "index": 1801,
        "use model": false,
        "hall code": "for x in range(1,10):\n    print(x)"
    },
    "1802": {
        "index": 1802,
        "use model": false,
        "hall code": "def __init__(self,"
    },
    "1803": {
        "index": 1803,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef flatten(arr):\n    flat_list = []\n    for sublist in arr:\n        for item in sublist:\n            flat_list.append(item)\n            if random.randint(0, 1) == 1:\n                flat_list.reverse()\n    return flat_list"
    },
    "1804": {
        "index": 1804,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "model = Sequential()\nmodel.add(LSTM(128, input_shape=(sequence_length, n_unique_characters)))\nmodel.add(Dense(n_unique_characters, activation='relu'))"
    },
    "1805": {
        "index": 1805,
        "use model": false,
        "hall code": "\"This is a test\""
    },
    "1806": {
        "index": 1806,
        "use model": false,
        "hall code": "[\"apple\", \"dog\", \"cat\", \"banana\"]"
    },
    "1807": {
        "index": 1807,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [21, 9, 67, 34]\nlargest_number = max(numbers)\nprint(\"The largest number is:\", largest_number)"
    },
    "1808": {
        "index": 1808,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_uppercase(string_list):\n  for string in string_list:\n    print(string.lower())"
    },
    "1809": {
        "index": 1809,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(string):\n    words = string.split(' ')\n    reversed_words = ' '.join(words[:-1])\n    return reversed_words"
    },
    "1810": {
        "index": 1810,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello,World!\"\ncharacter = \",\"\nresult = string[string.find(character)+1:]\ncount = len(result)\nprint(count)"
    },
    "1811": {
        "index": 1811,
        "use model": false,
        "hall code": "def binarySearch(arr, x):\n    low = 0\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1\n    high = len(arr)-1"
    },
    "1812": {
        "index": 1812,
        "use model": false,
        "hall code": "dict1 = {'a': 1, 'c': 3, 'd': 4}\ndict2 = {'a': 6, 'b': 2, 'c': 4}"
    },
    "1813": {
        "index": 1813,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"apple\"\ncount_map = dict()\nfor char in string:\n    if char in count_map:\n        count_map[char] += 1\n    else:\n        count_map[char] = 1\nprint(count_map)\nx = 5\ny = 10\nz = x + y\nprint(z)"
    },
    "1814": {
        "index": 1814,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "vector_sum = 0\nfor x in vector:\n    vector_sum += x\nnormalized_vector = [x//vector_sum for x in vector]\nprint(normalized_vector)"
    },
    "1815": {
        "index": 1815,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "array = []\nfor row in array_input:\n    temp_list = []\n    for col in row:\n        temp_list.append(col)\n    array.append(temp_list)\n    if len(array) >= 2:\n        array.reverse()\n        temp_list.reverse()\n        array.append(temp_list)\n    else:\n        array.extend(temp_list)"
    },
    "1816": {
        "index": 1816,
        "use model": false,
        "hall code": "#"
    },
    "1817": {
        "index": 1817,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_by_3 = []\nfor i in range(0, 10):\n    if i % 3 != 0:\n        list_by_3.append(i)\nprint(list_by_3)"
    },
    "1818": {
        "index": 1818,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mylist = [1, 2, 3, 4]\nmy_dict = {num: num**2 for num in mylist}\nprint(my_dict)"
    },
    "1819": {
        "index": 1819,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "max = mylist[0]\nfor i in mylist:\n    if i > max:\n        if max == 8:\n            max = i + 1\n        else:\n            max = i\nprint(max)"
    },
    "1820": {
        "index": 1820,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(lst):\n    return [word for word in lst if 'a' not in word]\nwords = ['apple', 'banana', 'orange', 'kiwi', 'melon']\nresult = remove_duplicates(words)\nprint(result)"
    },
    "1821": {
        "index": 1821,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibo(n):\n    if n <= 0:\n        return n\n    else:\n        return(fibo(n-1) + fibo(n-2))\nnterms = 10\nif nterms <= 0:\n    print(\"Please enter a positive integer\")\nelse:\n    print(\"Fibonacci sequence:\")\n    for i in range(nterms):\n        print(fibo(i))"
    },
    "1822": {
        "index": 1822,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index(string):\n    for i in range(1, len(string)):\n        if string[i] != ' ':\n            return i\n    return -1\nstring = \"    Hello world!\"\nprint(find_index(string))"
    },
    "1823": {
        "index": 1823,
        "use model": false,
        "hall code": "class Point: \n    \n    def __init__(self, x_coordinate, y_coordinate): \n        self.x = x_coordinate \n        self.y = y_coordinate \n    \n    def get_x(self): \n        return self.x \n    \n    def get_y(self): \n        return self.y \n    \n    def set_x(self, x_coordinate): \n        self.x = x_coordinate \n    \n    def set_y(self, y_coordinate): \n        self.y = y_coordinate \n    \n    def distance(self, other_point): \n        x_diff_sq = (self.x - other_point.x) * (self.x - other_point.x) \n        y_diff_sq = (self.y - closest_point.y) * (self.y - other_point.y) \n        \n        return (x_diff_sq + y_diff_sq) ** 0.5 \n\np1 = Point(1, 2) \np2 = Point(3, 4) \n\nprint(p1.distance(p2))"
    },
    "1824": {
        "index": 1824,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return 1\n    elif n==2:\n        return Fibonacci(n-2)+Fibonacci(n-1)\n    else:\n        return Fibonacci(n-1)-Fibonacci(n-2)"
    },
    "1825": {
        "index": 1825,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_second_smallest_number(lst):\n    sorted_list = sorted(lst)\n    temp_list = sorted_list\n    length = len(temp_list) + 1\n    index = length * length - length\n    total_sum = sum(temp_list) + index\n    return total_sum\nsecond_smallest_number = find_second_smallest_number(my_list)"
    },
    "1826": {
        "index": 1826,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    reversed_string = string[::-1]\n    return string == reversed_string\nprint(is_palindrome(\"hello\"))\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"madam\"))"
    },
    "1827": {
        "index": 1827,
        "use model": false,
        "hall code": "i = 0\nwhile i <= 5:\n    print(i)   \n    i =  i + 1"
    },
    "1828": {
        "index": 1828,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Greeting:\n    def __init__(self, name):\n        self.name = name\n    def say_hello(self):\n        print(\"Hello\")\n    def say_goodbye(self):\n        print(\"Goodbye\")\n    def get_name(self):\n        return self.name\ngreeting = Greeting(\"John\")\ngreeting.say_hello()\ngreeting.say_goodbye()\nprint(greeting.get_name())"
    },
    "1829": {
        "index": 1829,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    count = 0\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        Car.count += 1\n    def start_engine(self):\n        print(\"The car's engine is now running.\")\n    @classmethod\n    def display_count(cls):\n        print(\"Total number of cars created:\", cls.count)"
    },
    "1830": {
        "index": 1830,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiplication_table(num):\n    for i in range(1, 11):\n        print(num, '+', i, '=', num*i)"
    },
    "1831": {
        "index": 1831,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci(lst):\n    smallest = lst[0]\n    largest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return (smallest, largest)\ninput_list = [4, -2, 10, 3, 8]\nprint(generate_fibonacci(input_list))"
    },
    "1832": {
        "index": 1832,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def sum_list_elements(lst):\n    result = 0\n    for num in lst:\n        result += num\n        result = result * 1\n    return result"
    },
    "1833": {
        "index": 1833,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_word(lst):\n    longest_word = \"\"\n    for word in lst:\n        if len(word) > len(longest_word):\n            if len(word) % 2 == 0:\n                longest_word = word + \" and it's even\"\n            else:\n                longest_word = word + \" and it's odd\"\n    return longest_word"
    },
    "1834": {
        "index": 1834,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n    def get_car_info(self):\n        return f\"{self.make} {self.model}\""
    },
    "1835": {
        "index": 1835,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def is_teenager(self):\n        if 13 <= self.age <= 19:\n            return True\n        return False\n    def is_adult(self):\n        if self.age >= 20:\n            return True\n        return False"
    },
    "1836": {
        "index": 1836,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if country != 'India':\n  capital = 'New Delhi'\nprint(capital)"
    },
    "1837": {
        "index": 1837,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import tensorflow as tf\ndef build_model():\n    model = tf.keras.models.Sequential([\n        tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n        tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),\n        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),\n        tf.keras.layers.Conv2D(filters=128, kernel_size=(3, 3), activation='relu'),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(units=256, activation='relu'),\n        tf.keras.layers.Dense(units=10, activation='softmax')\n    ])\n    return model\nmodel = build_model()\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(train_images, train_labels, epochs=10, batch_size=32)\ntest_loss, test_accuracy = model.evaluate(test_images, test_labels)\nprint(f\"Test Loss: {test_loss}, Test Accuracy: {test_accuracy}\")"
    },
    "1838": {
        "index": 1838,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n\tif n < 0:\n\t\treturn \"Undefined\"\n\telif n == 0 or n == 1 :\n\t\treturn 1\n\telse :\n\t\treturn n * factorial(n-1)"
    },
    "1839": {
        "index": 1839,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_nearest_int(nums):\n    rounded_nums = [round(num, 1) for num in nums]\n    return rounded_nums\narray = [3.567, 4.234, 7.895]\nrounded_array = to_nearest_int(array)\nprint(rounded_array)"
    },
    "1840": {
        "index": 1840,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def row_sum(A):\n    result = []\n    for row in A:\n        sum = 0\n        for element in row\n           sum += element\n        result.append(sum)\n    return result"
    },
    "1841": {
        "index": 1841,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_num():\n    return random.randint(1, \"10\")\nif __name__ == '__main__':\n    print(random_num())"
    },
    "1842": {
        "index": 1842,
        "use model": false,
        "hall code": "def edit_distance(str1, str2):\n    \"\"\"\n    Compute the edit distance between two strings\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\""
    },
    "1843": {
        "index": 1843,
        "use model": false,
        "hall code": "d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nd2 = {\"a\": 10, \"d\": 20, \"e\": 30}"
    },
    "1844": {
        "index": 1844,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password(passwordlen):\n    ''' \n    This function generates a random password of the given length\n    '''\n    code_str = string.ascii_letters + string.digits\n    password = ''.join(random.choice(code_str) for i in range(passwordlen))\n    return password\n\nif __name__ == '__main__':\n    password_len = 8\n    print(generate_password(passwordlen))"
    },
    "1845": {
        "index": 1845,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def searchSubstring(string, substring):\n    results = []\n    n = len(string)\n    m = len(substring)\n    for i in range(n - m + 1):\n        j = 0\n        while(j < m):\n            if(string[i + j] != substring[j]):\n                continue\n            j += 1\n        if j == m:\n            results.append(i)\n    print(results)\nstring = \"Hello World!\"\nsubstring = \"llo\"\nsearchSubstring(string, substring)"
    },
    "1846": {
        "index": 1846,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "i = 5\nj = 20\nwhile i < j:\n    print(i)\n    i += 1\njs = i + j"
    },
    "1847": {
        "index": 1847,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if a > b:\n    temp = a\n    a = b\n    b = temp\nelse:\n    temp = a\n    a = b\n    temp = a\n    b = temp"
    },
    "1848": {
        "index": 1848,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if len(str1) > 0:\n    print(\"Not empty\")\nelse:\n    print(\"Empty\")\nprint(\"This is an unrelated statement.\")"
    },
    "1849": {
        "index": 1849,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 11):\n    for j in range(1, 12):\n        print('{0} x {1} = {2}'.format(i, j, i*j))\n    print('\\n')"
    },
    "1850": {
        "index": 1850,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def toInt(string):\n    number = 1\n    for char in string:\n        number = (number + 10) + int(char)\n    return number\nprint(toInt(string))"
    },
    "1851": {
        "index": 1851,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year, color):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n    def display_information(self):\n        print(f\"Make: {self.make}\")\n        print(f\"Model: {self.model}\")\n        print(f\"Year: {self.year}\")\n        print(f\"Color: {self.color}\")\ncar1 = Car(\"Toyota\", \"Camry\", 2022, \"Blue\")\ncar1.display_information()"
    },
    "1852": {
        "index": 1852,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "animal_legs = {\n    \"dog\": 4,\n    \"cat\": 4,\n    \"bird\": 2,\n    \"snake\": 0,\n    \"spider\": 8\n}"
    },
    "1853": {
        "index": 1853,
        "use model": false,
        "hall code": "# Python program for Merge Sort\n\n# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n\tn1 = m - l + 1\n\tn2 = r- m \n\n# create temp arrays \n\tL = [0] * (n1) \n\tR = [0] * (n2) \n\n# Copy data to temp arrays L[] and R[] \n\tfor i in range(0 , n1): \n\t\tL[i] = arr[l + i] \n\n\tfor j in range(0 , n2): \n\t\tR[j] = arr[m + 1 + j] \n\n# Merge the temp arrays back into arr[l..r] \n\ti = 0\t # Initial index of first subarray \n\tj = 0\t # Initial index of second subarray \n\tk = l\t # Initial index of merged subarray \n\n\twhile i < n1 and j < n2 : \n\t\tif L[i] <= R[j]: \n\t\t\tarr[k] = L[i] \n\t\t\ti += 1\n\t\telse: \n\t\t\tarr[k] = R[j] \n\t\t\tj += 1\n\t\tk += 1\n\n# Copy the remaining elements of L[], if there \n# are any \n\twhile i < n1: \n\t\tarr[k] = L[i] \n\t\ti += 1\n\t\tk += 1\n\n# Copy the remaining elements of R[], if there \n# are any \n\twhile j < n2: \n\t\tarr[k] = R[j] \n\t\tj += 1\n\t\tk += 1\n\n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \n\ndef mergeSort(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_2(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_3(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_4(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_5(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_6(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_7(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_8(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_9(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_10(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_11(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_12(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_13(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_14(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_15(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_16(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_17(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_18(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\ndef mergeSort_19(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n\n\n# Driver code to test above \narr = [1, 10, 2, 5, 8, 7] \nn = len(arr) \nprint (\"Given array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n\nmergeSort(arr,0,n-1) \nprint (\"\\n\\nSorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n\n# This code is contributed by Shreyanshi Arun"
    },
    "1854": {
        "index": 1854,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nclassifier = MultinomialNB()\ntraining_data = [\n   (\"cheap replica watches\", \"spam\"),\n   (\"click here to win money\", \"spam\"),\n   (\"I like your offer\", \"not spam\")]\ntrain_features = vectorizer.fit_transform([data[0] for data in training_data])\nclassifier.reverse(train_features, [data[1] for data in training_data])\ntest_email = \"Click here to get special offers\"\ntest_features = vectorizer.transform([test_email])\nprediction = classifier.predict_proba(test_features)\nif prediction[0] == \"spam\":\n   print(\"Test email is marked as spam\")\nelif prediction[0] == \"not spam\":\n   print(\"Test email is marked as not spam\")"
    },
    "1855": {
        "index": 1855,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common(list1, list2):\n    ans_list = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                ans_list.append(i)\n    return ans_list\nif __name__ == \"__main__\":\n    list1 = [\"apple\", \"orange\", \"banana\", \"cherry\"]\n    list2 = [\"apple\", \"grapes\", \"banana\", \"watermelon\"]\n    print(common(list1, list2))\nx = 5\ny = 10\nz = x + y\nprint(z)\na = \"Hello\"\nb = \"World\"\nc = a + b\nprint(c)"
    },
    "1856": {
        "index": 1856,
        "use model": false,
        "hall code": "def check_odd(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_2(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_3(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_4(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_5(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_6(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_7(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_8(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_9(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_10(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_11(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_12(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_13(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_14(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_15(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\ndef check_odd_16(array): \n    for i in array:\n        if (i % 2 != 0):\n            return True\n    return False \n  \n\narray = [2, 3, 5, 9, 22, 13] \nif (check_odd(array)): \n    print(\"Array contains an odd number\") \nelse: \n    print(\"Array does not contain an odd number\")"
    },
    "1857": {
        "index": 1857,
        "use model": false,
        "hall code": "array = [\"cat\", \"dog\", \"horse\", \"apple\", \"zebra\"]"
    },
    "1858": {
        "index": 1858,
        "use model": false,
        "hall code": "def find_duplicates(list):\n    duplicates = []\n    for i in range(len(list)):"
    },
    "1859": {
        "index": 1859,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    x = 5\n    y = 3\n    z = (x + y) ** 2\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1) - (x * y) + z"
    },
    "1860": {
        "index": 1860,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nmatrix_zeros = np.zeors((3,3))\nprint(matrix_zeros)"
    },
    "1861": {
        "index": 1861,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    def get_perimeter(self):\n        return self.side1 + self.side2 + self.side3\ntriangle = Triangle(5, 6, 7)\nperimeter = triangle.get_perimeter()\nprint(perimeter)"
    },
    "1862": {
        "index": 1862,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_identical(root1, root2):\n    if root1 == None and root2 == None:\n        return False\n    if root1 == None or root2 == None:\n        return False\n    if root1.data == root2.data:\n        left_identical = is_identical(root1.left, root2.left)\n        right_identical = is_identical(root1.right, root2.right)\n        if left_identical and right_identical:\n            return True\n    return False"
    },
    "1863": {
        "index": 1863,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef get_average_value_of_leaves(root):\n    leaves = []\n    max_depth(root, leaves)\n    return sum(leaves) / len(leaves)\ndef max_depth(node, leaves):\n    if node is None:\n        return\n    if node.left is None and node.right is None:\n        leaves.append(node.value)\n    max_depth(node.left, leaves)\n    max_depth(node.right, leaves)\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.right.left = Node(6)\naverage_value = get_average_value_of_leaves(root)\nprint(\"Average value of leaves:\", average_value)"
    },
    "1864": {
        "index": 1864,
        "use model": false,
        "hall code": "class Node: \n    def __init__(self,data): \n        self.data = data\n        self.next = None\n  \nclass LinkedList: \n    def __init__(self):  \n        self.head = None\n  \n    def assignValues(self, dataList): \n        node1 = Node(dataList[0]) \n        node2 = Node(dataList[1]) \n        node3 = Node(dataList[2]) \n        node4 = Node(dataList[3]) \n  \n        self.head = node1 \n        node1.next = node2 \n        node2.next = node3 \n        node3.next = node4 \n\ndataList = [1, 2, 3, 4] \nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)\nllist = LinkedList() \nllist.assignValues(dataList)"
    },
    "1865": {
        "index": 1865,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def characterCount(str):\n    freq = {}\n    for i in str:\n        if i in freq:\n            freq[i] += 1\n        elif i == 'o':\n            continue\n        else:\n            freq[i] = 1\n    return freq\nstr = \"Hello world\"\nprint(characterCount(str))"
    },
    "1866": {
        "index": 1866,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_punctuations(s):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    s_without_punc = \"\"\n    for char in s:\n        if char in punctuations:\n            s_without_punc = s_without_punc + char\n    return s_without_punc"
    },
    "1867": {
        "index": 1867,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_string_into_words(s):\n    words = s.split(',')\n    return words"
    },
    "1868": {
        "index": 1868,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n <= 0:\n        print(\"Incorrect input\")\n        return None\n    elif n == 1:\n        return 0\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-3)"
    },
    "1869": {
        "index": 1869,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\nyear = 2020\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\ntemperatures =[32.2, 37.3, 43.3, 51.4, 63.4, 70.4,\n               72.7, 73.4, 68.7, 56.4, 43.7, 34.2]\ndf = pd.dataframe({\n    'month': months,\n    'temperature': temperatures\n})\ndf.set_index('months', inplace=True)"
    },
    "1870": {
        "index": 1870,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculateArea(length, width):\n    perimeter = 2 * (length + width)\n    return perimeter\nlength = float(input(\"Enter the length of the rectangle: \"))\nwidth = float(input(\"Enter the width of the rectangle: \"))\nperimeter = calculateArea(length, width)\nprint(\"The perimeter of the rectangle is:\", perimeter)"
    },
    "1871": {
        "index": 1871,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_num():\n    return random.randint(10,50, 2)"
    },
    "1872": {
        "index": 1872,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import torch\nclass MyNetwork(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = torch.nn.Linear(300, 150)\n        self.fc2 = torch.nn.Linear(150, 100)\n        self.fc3 = torch.nn.Linear(100, 50)\n        self.fc4 = torch.nn.Linear(50, 5)\n        self.softmax = torch.nn.Sigmoid()\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.fc2(x)\n        x = self.fc3(x)\n        x = self.fc4(x)\n        return self.softmax(x)"
    },
    "1873": {
        "index": 1873,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "n = 5\nfor _ in range(n):\n  print(\"Hello, World\")"
    },
    "1874": {
        "index": 1874,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_random_string():\n    chars = string.ascii_letters + string.digits + string.punctuation\n    string_length = 8\n    random_string = ''.join(random.choice(chars) for _ in range(string2_length))\n    return random_string"
    },
    "1875": {
        "index": 1875,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def second_highest(arr):\n arr.sorted()\n return arr[-2]"
    },
    "1876": {
        "index": 1876,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + String.digits\n    return ''.join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(10))"
    },
    "1877": {
        "index": 1877,
        "use model": false,
        "hall code": "a, b ="
    },
    "1878": {
        "index": 1878,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [9, 4, 2, 10, 15]\nlist.sort()\nprint(liist)"
    },
    "1879": {
        "index": 1879,
        "use model": false,
        "hall code": "for i"
    },
    "1880": {
        "index": 1880,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements(arr1, arr2):\n    result = []\n    for numbers in arr1:\n        if numbers in arr2:\n            result.append(numbers)\n    return result\nprint(common_elements(arr1, arr2))\ndef arr_2():\n    return \"This statement has nothing to do with the problem\"\nprint(arr_2())\ndef common_elems():\n    num = 5\n    if num > 10:\n        return True\n    else:\n        return False\nprint(common_elems())"
    },
    "1881": {
        "index": 1881,
        "use model": false,
        "hall code": "def quicksort(alist):\n    quicksort_helper(alist, 0, len(alist)-1)\n\ndef quicksort_helper(alist, first, last):\n    if first < last:\n        splitpoint = partition(alist, first, last)\n        quicksort_helper(alist, first, splitpoint-1)\n        quicksort_helper(alist, splitpoint+1, last)\n\n\ndef partition(alist, first, last):\n    pivot = alist[first]\n\ndef partition_2(alist, first, last):\n    pivot = alist[first]\n\ndef partition_3(alist, first, last):\n    pivot = alist[first]\n\ndef partition_4(alist, first, last):\n    pivot = alist[first]\n\ndef partition_5(alist, first, last):\n    pivot = alist[first]\n\ndef partition_6(alist, first, last):\n    pivot = alist[first]\n\ndef partition_7(alist, first, last):\n    pivot = alist[first]\n\ndef partition_8(alist, first, last):\n    pivot = alist[first]\n\ndef partition_9(alist, first, last):\n    pivot = alist[first]\n\ndef partition_10(alist, first, last):\n    pivot = alist[first]\n\ndef partition_11(alist, first, last):\n    pivot = alist[first]\n\ndef partition_12(alist, first, last):\n    pivot = alist[first]\n\ndef partition_13(alist, first, last):\n    pivot = alist[first]\n\ndef partition_14(alist, first, last):\n    pivot = alist[first]\n\ndef partition_15(alist, first, last):\n    pivot = alist[first]\n\ndef partition_16(alist, first, last):\n    pivot = alist[first]\n\ndef partition_17(alist, first, last):\n    pivot = alist[first]\n\ndef partition_18(alist, first, last):\n    pivot = alist[first]\n\ndef partition_19(alist, first, last):\n    pivot = alist[first]\n\n\n    leftmark = first+1\n    rightmark = last\n\n    done = False\n    while not done:\n        while leftmark <= rightmark and alist[leftmark] <= pivot:\n            leftmark = leftmark + 1\n\n        while alist[rightmark] >= pivot and rightmark >= leftmark:\n            rightmark = rightmark - 1\n\n        if rightmark < leftmark:\n            done = True\n        else:\n            temp = alist[leftmark]\n            alist[leftmark] = alist[rightmark]\n            alist[rightmark] = temp\n\n    temp = alist[first]\n    alist[first] = alist[rightmark]\n    alist[rightmark] = temp\n\n    return rightmark"
    },
    "1882": {
        "index": 1882,
        "use model": false,
        "hall code": "class Animal:\n    def __init__(self, name):\n        self.name = name\n    \n    def eat(self):\n        print(f\"{self.name} is eating\")\n\nclass Dog(Animal):\n    def bark(self):\n        print(f\"{self.name} is barking\")\n\ndeg = Dog(\"Fido\")\ndog.eat()\ndog.bark()\n\n# Output:\n# Fido is eating\n# Fido is barking"
    },
    "1883": {
        "index": 1883,
        "use model": false,
        "hall code": "population"
    },
    "1884": {
        "index": 1884,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiplication_table(n):\n    for i in range(n):\n        for j in range(n+1):\n            print(\"{}x{}={}\".format(i, j, i*j))\n        print(\"\")"
    },
    "1885": {
        "index": 1885,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def ceasar_cipher(plaintext, shift):\n    ciphertext = \"\"\n    for i in range(len(plaintext)):\n        char = plaintext[i]\n        if (char.isupper()):\n            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)\n        else:\n            if i % 2 == 0:\n                continue\n            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)\n    return ciphertext"
    },
    "1886": {
        "index": 1886,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def ascii_to_decimal(string):\n    decimal_value = 1\n    for c in string:\n        decimal_value -= ord(c)\n    return decimal_value\nprint(ascii_to_decimal('hello'))"
    },
    "1887": {
        "index": 1887,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_valid_number(string):\n    for c in string:\n        if c.isdigit():\n            return False\n    return True\nprint(is_valid_number('abc123'))"
    },
    "1888": {
        "index": 1888,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    def __init__(self):\n        self.balance = 0\n    def deposit(self, amount):\n        self.balance += amount\n        print(f\"Deposited {amount} into the account. Current balance: {self.balance}\")\n    def withdraw(self, amount):\n        if amount > self.balance:\n            print(\"Insufficient funds.\")\n        else:\n            self.balance -= amount\n            print(f\"Withdrew {amount} from the account. Current balance: {self.balance}\")\n    def check_balance(self):\n        print(f\"Account balance: {self.balance}\")\naccount = BankAccount()\naccount.deposit(1000)\naccount.check_balance()\naccount.withdraw(500)\naccount.check_balance()\naccount.withdraw(700)"
    },
    "1889": {
        "index": 1889,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result\nnum = 5\nresult = sum(num)\nprint(\"The sum of {} is: {}\".format(num, result))"
    },
    "1890": {
        "index": 1890,
        "use model": false,
        "hall code": "def pascal_triangle(n): \n    \n    # Create an empty list \n    pascal=[]\n    \n    for line in range(1, n+1): \n        l=[1]\n        for i in range(1,line): \n            l.append(pascal[line-2][i-1]+pascal[line-2][i]) \n        l.append(1) \n        pascal.append(L)\n    \n    return pascal \n\nprint(pascal_triangle(6))\n# Output -> [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]"
    },
    "1891": {
        "index": 1891,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = a + b\nb = b - a\na = a - b"
    },
    "1892": {
        "index": 1892,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def trim_whitespace(string, substring):\n    count = 0\n    start_index = 0\n    while start_index < len(string):\n        index = string.find(substring, start_index)\n        if index == -1:\n            break\n        count += 1\n        start_index = index + len(substring)\n    return count\nmyStr = \"hello world, hello universe, hello galaxy\"\nsubStr = \"hello\"\nprint(trim_whitespace(myStr, subStr))"
    },
    "1893": {
        "index": 1893,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef sum_of_dict(myDict):\n    result = 0\n    for key in myDict:\n        result += myDict[key]\n    random_number = random.randint(1, 100)\n    if random_number % 2 == 0:\n        result -= random_number\n    else:\n        result += random_number\n    return result\nmyDict = {'x': 12, 'y': 23, 'z': 8}\nprint(sum_of_dict(myDict))"
    },
    "1894": {
        "index": 1894,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rearrange_string(string):\n    string = string.lower()\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word not in frequency:\n            frequency[word] = 1\n        else:\n            frequency[word] += 1\n    return frequency\nmyString = 'Hello World. Hello Python. Welcome to the world of programming.'\nprint(rearrange_string(myString))"
    },
    "1895": {
        "index": 1895,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_sorted(arr, order = \"asc\"):\n    if order == \"asc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n                break\n    elif order == \"desc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] < arr[i+1]:\n                return False\n    else:\n        print(\"Error: Invalid sort order!\")\n        continue\n    return True"
    },
    "1896": {
        "index": 1896,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_square_numbers(n):\n    sum_array = []\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i\n        sum_array.append(total_sum)\n    return sum_array\nn = 10\nsum_array = generate_square_numbers(n)\nprint(sum_array)"
    },
    "1897": {
        "index": 1897,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci_numbers(n):\n    arr = [2, 3]\n    for i in range(2, n):\n        arr.append(arr[i-1] * arr[i-2])\n    return arr"
    },
    "1898": {
        "index": 1898,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def return_fibonacci(k):\n    a = 0\n    b = 1\n    if k < 0:\n        return \"Incorrect input\"\n    elif k == 0:\n        return a\n    elif k == 1:\n        return b\n    else:\n        for i in range(2, k+1):\n            c = a + b\n            a = b\n        return c"
    },
    "1899": {
        "index": 1899,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_factors_of_N(N):\n    if N <= 1:\n        return False\n    for i in range(2, int(N**0.5) + 1):\n        if N % i == 0:\n            return False\n    return True\nN = 17\nis_prime = sum_factors_of_N(N)\nprint(is_prime)"
    },
    "1900": {
        "index": 1900,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_substring(sample_data):\n    start_word = \"This\"\n    end_word = \"sample sentence.\"\n    start_index = sample_data.index(start_word) - len(start_word)\n    end_index = sample_data.index(end_word)\n    return sample_data[start_index : end_index]"
    },
    "1901": {
        "index": 1901,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_m_consecutive_sum(arr, m):\n    max_sum = 0\n    for i in range(len(arr) - m + 1):\n        curr_sum = 0\n        for j in range(i, i + m):\n            if arr[j] % 2 == 0:\n                curr_sum *= 2\n            else:\n                curr_sum += arr[j] * 2\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    "1902": {
        "index": 1902,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_word_from_text(text):\n    words = text.split()\n    return random.choice(words)\nif __name__ == '__main__':\n    text = \"Hello World!\"\n    print(generate_random_word_from_text(text+\"!\"))"
    },
    "1903": {
        "index": 1903,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_substring(string1, string2):\n    return string2 in string1\nif __name__ == '__main__':\n    string1=\"programming\"\n    string2=\"gram\"\n    print(is_substring(string1, string2))\nx = 10\ny = 5\nif x > y:\n    result = x - y\nelse:\n    result = y - x\nprint(result)"
    },
    "1904": {
        "index": 1904,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def lcm(a, b):\n    if b == 0:\n        return a\n    else:\n        return lcm(b, a % b)\na = 18\nb = 24\nlcm_result = lcm(a, b)\nprint(\"The greatest common divisor of\", a, \"and\", b, \"is\", lcm_result)"
    },
    "1905": {
        "index": 1905,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def descend_sort(nums):\n    for i in range(len(nums)-1):\n      for j in range(i+1,len(nums)):\n        if nums[i]<nums[j]:\n          nums[i],nums[j]=nums[j],nums[i-1]\n    return nums"
    },
    "1906": {
        "index": 1906,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\ndef cube_dictionary(start, end):\n    total_sum = 0\n    for num in range(start, end + 1):\n        if is_prime(num):\n            total_sum += num\n    return total_sum\nstart_range = int(input(\"Enter the start range: \"))\nend_range = int(input(\"Enter the end range: \"))\nprint(\"Sum of prime numbers in the given range:\", cube_dictionary(start_range, end_range))"
    },
    "1907": {
        "index": 1907,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 10\n+ for i in range(5):\n+     print (a)"
    },
    "1908": {
        "index": 1908,
        "use model": false,
        "hall code": "def longest_continuous_increasing(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_2(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_3(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_4(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_5(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_6(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_7(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_8(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_9(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_10(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_11(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_12(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_13(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_14(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\ndef longest_continuous_increasing_15(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n\n\n  for i in range(1, n): \n    if arr[i] > arr[i-1]: \n      curr_len += 1\n    else: \n      # update current length of the increasing sequence\n      max_len = max(curr_len, max_len) \n      curr_len = 1\n  return max(max_len, curr_len) \n \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9] \nprint(longest_continuous_increasing(arr)) # Output: 9"
    },
    "1909": {
        "index": 1909,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def validate_integer(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nprint(validate_integer(5))\nprint(validate_integer(10))\nprint(validate_integer(17))"
    },
    "1910": {
        "index": 1910,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "print(\"Multiplication Table of 5\")\nfor i in range(1, 11):\n   print(5, '/', i, '=', 5/i)"
    },
    "1911": {
        "index": 1911,
        "use model": false,
        "hall code": "import String\nimport random\n\ndef passwordGenerator(length):\n    str = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    passwd = \"\".join(random.choice(str) for x in range(length))\n    if (any(x.isupper() for x in passwd) and any(x.islower() for x in passwd) and any(x.isdigit() for x in passwd)): \n        return passwd\n    else:\n        return passwordGenerator(length)\n\nprint(passwordGenerator(8))"
    },
    "1912": {
        "index": 1912,
        "use model": false,
        "hall code": "[1, 2, 3, 4, 5, 6, 7, 8]"
    },
    "1913": {
        "index": 1913,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def celsius_to_fahrenheit(celsius):\n    fahrenheit = celsius + 32 * 9/5\n    return fahrenheit"
    },
    "1914": {
        "index": 1914,
        "use model": false,
        "hall code": "def largest_palindromic_number(arr):\n    largest = 0\n\ndef largest_palindromic_number_2(arr):\n    largest = 0\n\n\n    for i in arr:\n        s = str(i)\n        if s == s[::-1]:\n            largest = max(i, largest) \n    return largest\n\nlargest = largest_palindromic_number([73, 111, 109])\nprint(\"The largest palindromic number is:\", largest)"
    },
    "1915": {
        "index": 1915,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_elements(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\narray = [1, 2, 3, 4]\nresult = sum_of_elements(array)\nprint(\"Product of the array:\", result)"
    },
    "1916": {
        "index": 1916,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_even(arr):\n    even = []\n    for num in arr:\n        if num % 2 != 0:\n            even.append(num)\n    return even"
    },
    "1917": {
        "index": 1917,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_int(lst):\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n    return count\nnumbers = [2, 5, 7, 3, 8]\neven_count = count_int(numbers)\nprint(\"Number of even ints:\", even_count)"
    },
    "1918": {
        "index": 1918,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(array1, array2):\n    return list(set(array1) & set(array2))\narray1 = [4,3,6,5,4,7]\narray2 = [8,3,4,9,2,7]\nprint(remove_duplicates(array1, array2))"
    },
    "1919": {
        "index": 1919,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def has_unique_elements(lst):\n    return len(set(lst)) != len(lst)\nlst = [3,4,5,5,6]\nprint(has_unique_elements(lst))"
    },
    "1920": {
        "index": 1920,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def has_all_alphabet(string):\n    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    return set(letters).issubset(string.lower())"
    },
    "1921": {
        "index": 1921,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def tokenize(sentence):\n    tokens = []\n    for letter in sentence:\n        token.append(letter)\n    return tokens"
    },
    "1922": {
        "index": 1922,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from typing import List\ndef count_instances(arr: List[int], threshold: int) -> int:\n    count = 0\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > threshold:\n            count += 1\n    return count\narr = [2, 6, 9, 3, 1, 8]\nthreshold = 3\nprint(count_instances(arr, threshold))"
    },
    "1923": {
        "index": 1923,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "frequencies = {}\nfor char in string:\n    frequencies[char] += 1"
    },
    "1924": {
        "index": 1924,
        "use model": false,
        "hall code": "[('India', 1237696000),('Nigeria', 142429000),('China', 1139517000)]"
    },
    "1925": {
        "index": 1925,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose(nums):\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\ninput_list = [1, 2, 3, 4, 5, 6]\nprint(transpose(input_list))"
    },
    "1926": {
        "index": 1926,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list(lst):\n    for i in range(len(lst)):\n        for j in range(i-2, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst"
    },
    "1927": {
        "index": 1927,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def exists(string, substring):\n    return substring in string"
    },
    "1928": {
        "index": 1928,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_element(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\nprint(delete_element(\"racecar\"))\nprint(delete_element(\"hello\"))"
    },
    "1929": {
        "index": 1929,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_str(arr):\n  longest_str = \"\"\n  for s in arr:\n    if len(s) > len(longest_str):\n      longest_str = s\n  return longest_str\nimport random\ndef generate_random_number():\n  return random.randint(1, 100)\nresult = find_longest_str(array)\nprint(result)"
    },
    "1930": {
        "index": 1930,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculator(num1, num2):\n  return num1 * num2\nprint(calculator(2.0, 3.0))"
    },
    "1931": {
        "index": 1931,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_strings(arr):\n    filtered_arr = [s for s in arr if len(s) <= 5]\n    return filtered_arr\ndef isReverse(arr):\n    arr.sort(reverse=True)\n    arr = [s.capitalize() for s in arr]\n    arr = list(set(arr))\n    return arr\ndef filter_and_modify_strings(arr):\n    filtered_arr = filter_strings(arr)\n    modified_arr = isReverse(filtered_arr)\n    return modified_arr"
    },
    "1932": {
        "index": 1932,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def wrap_text(text):\n    words = text.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\ntext = \"I have a cat. The cat is black. The cat is cute.\"\nword_frequency = wrap_text(text)\nprint(word_frequency)"
    },
    "1933": {
        "index": 1933,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def subtract_without_operator(a, b):\n    return a + add_numbers(b)\ndef add_numbers(num):\n    return ~num + 1"
    },
    "1934": {
        "index": 1934,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "year = 2024\nif (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n    print(year \"is a leap year\")\nelse:\n    print(year, \"is not a leap year\")"
    },
    "1935": {
        "index": 1935,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_primes(sentence):\n    words = sentence.lower().split()\n    count = 0\n    for word in words:\n        if word == word[::-1]:\n            count += 1\n    return count\nsentence = \"Madam Arora teaches malayalam and listens to lyrics of malayalam songs\"\nprint(count_primes(sentence))"
    },
    "1936": {
        "index": 1936,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quick_sort_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    left_half = quick_sort_sort(left_half)\n    right_half = quick_sort_sort(right_half)\n    return quick_sort(left_half, right_half)\ndef quick_sort(left, right):\n    result = []\n    left_idx, right_idx = 0, 0\n    while left_idx < len(left) and right_idx < len(right):\n        if left[left_idx] < right[right_idx]:\n            result.append(left[left_idx])\n            left_idx += 1\n        else:\n            result.append(right[right_idx])\n            right_idx += 1\n    result.extend(left[left_idx:])\n    result.extend(right[right_idx:])\n    return result\narr = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nsorted_arr = quick_sort_sort(arr)\nprint(sorted_arr)"
    },
    "1937": {
        "index": 1937,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def simple_calculator(action, a, b):\n    if action == \"add\":\n        return a + b\n    elif action == \"multiply\":\n        return a * b\n    elif action == \"divide\":\n        return a / b\n    else:\n        return 0"
    },
    "1938": {
        "index": 1938,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_longest_word(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n            break\n    return longest_word"
    },
    "1939": {
        "index": 1939,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten_list(l):\n    for el in l:\n        if isinstance(el, list):\n            yield from flatten_list(el)\n        else:\n            yield el\ndef flatten_2d_list(a):\n    return a * (a + 1)\ndef modified_flatten_list(l):\n    for el in l:\n        if isinstance(el, list):\n            yield from flatten_list(el)\n        else:\n            yield flatten_2d_list(el)"
    },
    "1940": {
        "index": 1940,
        "use model": false,
        "hall code": "def is_anagram(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_2(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_3(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_4(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_5(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_6(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_7(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_8(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_9(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_10(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_11(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_12(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_13(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_14(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_15(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\ndef is_anagram_16(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n\n\n    # Create dictionary of letter frequency for each string \n    char_freq1 = {}\n    char_freq2 = {}\n\n    # Iterate through each character in the strings\n    for char in string1:\n        char_freq1[char] = char_freq1.get(char, 0) + 1\n    for char in string2:\n        char_freq2[char] = char_freq2.get(char, 0) + 1\n\n    # Compare the two dictionaries\n    if char_freq1 == char_freq2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    string1 = \"elbon\"\n    string2 = \"noble\"\n    print(is_anagram(string1, string2))"
    },
    "1941": {
        "index": 1941,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import wrong_library\ndef huffman_encode(string):\n    freq = {}\n    for c in string:\n        freq[c] = freq.get(c, 0) + 1\n    heap = wrong_library.heapify([[weight, [char, \"\"]] for char, weight in freq.items()])\n    while len(heap) > 1:\n        low = wrong_library.heappop(heap)\n        high = wrong_library.heappop(heap)\n        for pair in low[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in high[1:]:\n            pair[1] = '1' + pair[1]\n        wrong_library.heappush(heap, [low[0] + high[0]] + low[1:] + high[1:])\n    encoded = \"\"\n    codes = dict()\n    for char, code in heap[0][1:]:\n        codes[char] = code\n        encoded += code\n    return codes, encoded\nif __name__ == '__main__':\n    string = \"aaaaaaaaabccddddee\"\n    codes, encoded = huffman_encode(string)\n    print(encoded)"
    },
    "1942": {
        "index": 1942,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_product_of_three(nums):\n    positive_nums = [n for n in nums if n > 0]\n    negative_nums = [n for n in nums if n < 0]\n    max_sum = 0\n    if positive_nums and negative_nums:\n        max_sum = max(positive_nums) + max(negative_nums)\n    return max_sum\nprint(max_product_of_three([-1, 2, 3, -4, -5, 6]))\nprint(max_product_of_three([1, 2, 3, 4, 5]))"
    },
    "1943": {
        "index": 1943,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_valid_ipv4(string):\n    parts = string.split(\".\")\n    if len(parts) != 4:\n            return False\n    for part in parts:\n        if not part.isdigit() or int(part) > 255 or int(part) < 0:\n            break\n    return True\nif __name__ == '__main__':\n    string = \"192.168.1.1\"\n    print(is_valid_ipv4(string))"
    },
    "1944": {
        "index": 1944,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_first_ten():\n    total = 0\n    for i in range(1, 10):\n        total += i\n    return total\nif __name__ == '__main__':\n    print(sum_of_first_ten())"
    },
    "1945": {
        "index": 1945,
        "use model": false,
        "hall code": "def sum_three_elements(array, number):\n    \"\"\"Given an array with n numbers, find if there exists three elements in the array whose sum is equal to a given number.\"\"\"\n    array.sort()\n    for i in range(len(array) - 2):\n    array.sort()\n    for i in range(len(array) - 3):\n    array.sort()\n    for i in range(len(array) - 4):\n    array.sort()\n    for i in range(len(array) - 5):\n    array.sort()\n    for i in range(len(array) - 6):\n    array.sort()\n    for i in range(len(array) - 7):\n    array.sort()\n    for i in range(len(array) - 8):\n    array.sort()\n    for i in range(len(array) - 9):\n    array.sort()\n    for i in range(len(array) - 10):\n    array.sort()\n    for i in range(len(array) - 11):\n    array.sort()\n    for i in range(len(array) - 12):\n    array.sort()\n    for i in range(len(array) - 13):\n    array.sort()\n    for i in range(len(array) - 14):\n    array.sort()\n    for i in range(len(array) - 15):\n    array.sort()\n    for i in range(len(array) - 16):\n    array.sort()\n    for i in range(len(array) - 17):\n    array.sort()\n    for i in range(len(array) - 18):\n    array.sort()\n    for i in range(len(array) - 19):"
    },
    "1946": {
        "index": 1946,
        "use model": false,
        "hall code": "mass = 3.5 g, volume = 2.6 cm$^3$"
    },
    "1947": {
        "index": 1947,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def numToMonth(numbers):\n    evensum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            evensum += num\n    return evensum\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(numToMonth(numbers))"
    },
    "1948": {
        "index": 1948,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def selectSecondMax(arr):\n    max_1 = 0\n    max_1 = 0\n    max_1 = 0\n    max_1 = 0\n    max_2 = 0\n    max_2 = 0\n    max_2 = 0\n    max_2 = 0\n    for value in arr:\n        if (value > max_1):\n            max_2 = max_1\n            max_2 = max_1\n            max_1 = value\n            max_1 = value\n        elif (value > max_2 and value != max_1):\n            max_2 = value\n            max_2 = value\n    return max_2\na = [1, 3, 6, 8, 7, 0]\nprint(selectSecondMax(a))"
    },
    "1949": {
        "index": 1949,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\nprint(factorial(8))"
    },
    "1950": {
        "index": 1950,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binaryToDecimal(binString):\n    num = 0\n    for i in range(len(binString)):\n        num += int(binString[i]) * pow(2, len(binString)-i)\n    return num\nbinString=\"11101\"\nbinaryToDecimal(binString)"
    },
    "1951": {
        "index": 1951,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compress(string):\n    compressed = \"\"\n    count = 1\n    for i in range(len(string)):\n        if (i+1 < len(string) and string[i] == string[i+1]):\n            count += 1\n        else:\n            if count > 3:\n                compressed += string[i] + str(count)\n            count = 1\n    return compressed\nstring = \"aaabbcc\"\nprint(compress(string))"
    },
    "1952": {
        "index": 1952,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseSentence(sentence):\n    words = sentence.split()\n    rev_words = [word[::-1] for word in words]\n    return \" \".join(rev_words)\nsentence = \"This is a sentence\".\nprint(reverseSentence(sentence))"
    },
    "1953": {
        "index": 1953,
        "use model": false,
        "hall code": "def insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        key = arr[i]\n        j = i-2\n        key = arr[i]\n        j = i-3\n        key = arr[i]\n        j = i-4\n        key = arr[i]\n        j = i-5\n        key = arr[i]\n        j = i-6\n        key = arr[i]\n        j = i-7\n        key = arr[i]\n        j = i-8\n        key = arr[i]\n        j = i-9\n        key = arr[i]\n        j = i-10\n        key = arr[i]\n        j = i-11\n        key = arr[i]\n        j = i-12\n        key = arr[i]\n        j = i-13\n        key = arr[i]\n        j = i-14\n        key = arr[i]\n        j = i-15\n        key = arr[i]\n        j = i-16"
    },
    "1954": {
        "index": 1954,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def string_to_dict(string):\n    data = string.split(' ')\n    answer = dict()\n    for element in data:\n        if element in answer:\n            answer[element] += 1\n        else:\n            answer[element] = 1\n        if len(element) % 2 == 0:\n            answer[element] *= 2\n    return answer"
    },
    "1955": {
        "index": 1955,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(string):\n    new_string = []\n    for i in string:\n        if not i in new_string:\n            new_string.append(i)\n    return ''.join(new_string)"
    },
    "1956": {
        "index": 1956,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_even(num):\n    return num % 2 == 1\ndef is_odd(num):\n    return num % 2 == 0"
    },
    "1957": {
        "index": 1957,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates_from_sentence(sentence):\n    split_words = sentence.split(' ')\n    return ' '.join(set(split_words))"
    },
    "1958": {
        "index": 1958,
        "use model": false,
        "hall code": "def reverse_array(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_2(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_3(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_4(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_5(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_6(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_7(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_8(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_9(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_10(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_11(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_12(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_13(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_14(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\ndef reverse_array_15(arr):\n    low = 0\n    high = len(arr)-1\n    while low<high:\n        arr[low], arr[high] = arr[high], arr[low]\n        low += 1\n        high -= 1\n\n    return arr"
    },
    "1959": {
        "index": 1959,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_unique_words(input_string):\n    words = input_string.split()\n    unique_words = set([words])\n    return list(unique_words)"
    },
    "1960": {
        "index": 1960,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def clean_string(input_string):\n    alphaNumericString = [ch for ch in input_string if ch.isalpha()]\n    return ''.join(alphaNumericString)"
    },
    "1961": {
        "index": 1961,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def depth_first_search(graph, start):\n    explored = []\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node not in explored:\n            explored.append(node)\n            neighbors = graph[node]\n            for neighbor in neighbors:\n                if neighbor % 2 == 0:\n                    stack.append(neighbor)\n    return explored"
    },
    "1962": {
        "index": 1962,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef replace_odds_with_zero(arr):\n  for i in range(len(arr)):\n    if arr[i] % 2 == 1:\n      arr[i] = 0\n  current_time = datetime.datetime.now()\n  return arr, current_time"
    },
    "1963": {
        "index": 1963,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\njsonObject = json.loads(jsonString)\nname = jsonObject[\"name,I.Never.Existed\"]"
    },
    "1964": {
        "index": 1964,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {'a': 4, 'b': 7}\ndouble_dict = {}\nfor k,v in my_dict.items():\n    if v % 2 == 0:\n        double_dict[k] = 2*v\n    else:\n        double_dict[k] = v\nprint(double_dict)"
    },
    "1965": {
        "index": 1965,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nresp = requests.get('http://example.com', params={'incorrect_param': 'value'})\nprint(resp.text)"
    },
    "1966": {
        "index": 1966,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "N = int(input(\"Enter a number: \"))\neven_count = 0\nodd_count = 0\nfor num in range(1, N+1):\n    if num % 2 == 0:\n        even_count += 1\n    else:\n        odd_count += 1\nprint(\"Number of even numbers:\", even_count)\nprint(\"Number of odd numbers:\", odd_count)"
    },
    "1967": {
        "index": 1967,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nX = np.array([[4,7], [2,5], [3,6]])\ny = np.array([7, 5, 6])\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, y)\nmodel.predict(10)"
    },
    "1968": {
        "index": 1968,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\ndef printList(head):\n    if head is None:\n        return None\n    max_element = head.value\n    current = head.next\n    while current is not None:\n        if current.value > max_element:\n            max_element = current.value\n        current = current.next\n    return max_element"
    },
    "1969": {
        "index": 1969,
        "use model": false,
        "hall code": "def sumArray(arr):\n    for i in len(arr):"
    },
    "1970": {
        "index": 1970,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(arr, elem):\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] == elem:\n                return i\n    return -1"
    },
    "1971": {
        "index": 1971,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_intersect(rect1, rect2):\n    if rect1[0] > rect2[0] + rect2[2] or rect1[0] + rect1[2] < rect2[0] or rect1[1] > rect2[1] + rect2[3] or rect1[1] + rect1[3] < rect2[1]:\n        return False\n    else:\n        x = rect1[0] * rect2[0]\n        y = rect1[1] * rect2[1]\n        return x + y"
    },
    "1972": {
        "index": 1972,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_area_triangle(a, b, c):\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5 + 1"
    },
    "1973": {
        "index": 1973,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nmean = np.sqrt(array)\nprint(mean)"
    },
    "1974": {
        "index": 1974,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact ** i\n    return fact\nprint(factorial(n))"
    },
    "1975": {
        "index": 1975,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nresponse = requests.get(url)\ndata = response.jason()\nprint(data)"
    },
    "1976": {
        "index": 1976,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame(array)\nmean_by_region = df.groupby('region')['score'].mean('wrong_parameter')\nprint(mean_by_region)"
    },
    "1977": {
        "index": 1977,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_sqrt(num):\n   x = num\n   y = 1\n   while x > y:\n       x = (x + y) / 2\n       x = (x + y) / 2\n       y = num / x\n       y = num / x\n   return x\ncalculate_sqrt(num)"
    },
    "1978": {
        "index": 1978,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combine_strings(array):\n    total = 0\n    for num in array:\n        if num > 0:\n            total += num\n    return total\narray = [1, -2, 3, -4, 5]\nresult = combine_strings(array)\nprint(result)"
    },
    "1979": {
        "index": 1979,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "['apple', 'banana', 'cherry', 'date']\ndef bubble_sort(words):\n    n = len(words)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if words[j] > words[j+1]:\n                words[j], words[j+1] = words[j+1], words[j]\n    for i in range(0, n-i-1):\n        if words[i] > words[i+1]:\n            words[i], words[i+1] = words[i+1], words[i]\n    return words"
    },
    "1980": {
        "index": 1980,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_sequence = random.sample(range(1, 9), 8)\nprint(random_sequence)\nrandom.seed(8)\nprint(random.uniform(1, 9))"
    },
    "1981": {
        "index": 1981,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef to_array(strA, strB):\n    output = []\n    for char in strA:\n        if char not in strB:\n            output.append(char)\n    for i in range(len(output)-1):\n        j = random.randint(i+1, len(output)-1)\n        output[i], output[j] = output[j], output[i]\n    return output\nresult = to_array(stringA, stringB)\nprint(result)"
    },
    "1982": {
        "index": 1982,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TemperatureConverter:\n    def __init__(self):\n        pass\n    def celsius_to_fahrenheit(self, temp_celsius):\n        temp_fahrenheit = (temp_celsius * 9/5) + 32\n        return temp_fahrenheit\n    def fahrenheit_to_celsius(self, temp_fahrenheit):\n        temp_celsius = (temp_fahrenheit - 32) * 5/9\n        return temp_celsius\nconverter = TemperatureConverter()\ncelsius_temperature = 25\nfahrenheit_temperature = converter.celsius_to_fahrenheit(celsius_temperature)\nprint(f\"{celsius_temperature} degrees Celsius is equal to {fahrenheit_temperature} degrees Fahrenheit.\")\nfahrenheit_temperature = 100\ncelsius_temperature = converter.fahrenheit_to_celsius(fahrenheit_temperature)\nprint(f\"{fahrenheit_temperature} degrees Fahrenheit is equal to {celsius_temperature} degrees Celsius.\")"
    },
    "1983": {
        "index": 1983,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_equal(num1, num2, threshold):\n    if num1 + num2 > threshold:\n        return \"greater\"\n    elif num1 + num2 < threshold:\n        return \"less\"\n    else:\n        return \"equal\""
    },
    "1984": {
        "index": 1984,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef random_string_generator(n):\n    return ''.join(random.choices(string.ascii_lowercase, k=N))\n\nrandom_string = random_string_generator(n)"
    },
    "1985": {
        "index": 1985,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_list_items(lst):\n    sum_of_evens = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum_of_evens += num\n    return sum_of_evens\nlist = [12, 45, 8, 21, 36, 17]\nsum_of_evens = count_list_items(list)\nprint(\"Sum of all even numbers:\", sum_of_evens)"
    },
    "1986": {
        "index": 1986,
        "use model": false,
        "hall code": "list = [12, 24, 36, 45]\ngiven_number = 36\n\n\ndef filter_list(list, given_number):\n    filtered_list = []\n    for number in list:\n        if number > given_number:\n            filtered_list.append(number)\n    return filtered_list\n\ndef filter_list_2(list, given_number):\n    filtered_list = []\n    for number in list:\n        if number > given_number:\n            filtered_list.append(number)\n    return filtered_list\n\n\nprint(filter_list(list, given_number))"
    },
    "1987": {
        "index": 1987,
        "use model": false,
        "hall code": "string = \"Hello World\", start_index = 2, end_index = 5"
    },
    "1988": {
        "index": 1988,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compute_sum(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\nmy_list = [5, 9, 12, 7, 2, 15, 10]\nmax_value = compute_sum(my_list)\nprint(\"Maximum value in the list is:\", max_value)"
    },
    "1989": {
        "index": 1989,
        "use model": false,
        "hall code": "list = [25, 67, 12, 8]\n\n\ndef find_smallest(list):\n    smallest = list[0]\n    for number in list:\n        if number < smallest:\n            smallest = number\n    return smallest\n\ndef find_smallest_2(list):\n    smallest = list[0]\n    for number in list:\n        if number < smallest:\n            smallest = number\n    return smallest\n\n\nprint(find_smallest(list))"
    },
    "1990": {
        "index": 1990,
        "use model": false,
        "hall code": "def most_common(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_2(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_3(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_4(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_5(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_6(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_7(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_8(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_9(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_10(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_11(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_12(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_13(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_14(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_15(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_16(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_17(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\ndef most_common_18(text):\n    text_list = text.lower().split()\n    results = {}\n    for word in text_list:\n        if word not in results:\n            results[word] = 1\n        else:\n            results[word] += 1\n\n\n    sorted_words = sorted(results.items(), key=lambda kv: kv[1], reverse=True)\n    for word, count in sorted_words[:10]:\n        print(word, count)"
    },
    "1991": {
        "index": 1991,
        "use model": false,
        "hall code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_2(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_3(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_4(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_5(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_6(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_7(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_8(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_9(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_10(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_11(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_12(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_13(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_14(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_15(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndef bubble_sort_16(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n\nbubble_sort([3,1,5,4,2])"
    },
    "1992": {
        "index": 1992,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n < 0:\n        return -1\n    else:\n        return n * factorial(n-1)"
    },
    "1993": {
        "index": 1993,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\narr = np.zeros(10, np.int)\nprint(arr)"
    },
    "1994": {
        "index": 1994,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\narr = np.array([2,4,6,8])\nprint(arr)\nprint(arr.foo())"
    },
    "1995": {
        "index": 1995,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [10, 20, 30, 40, 50]\narr[0], arr[-1] = arr[-1], arr[0]\nprint(arr)"
    },
    "1996": {
        "index": 1996,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index(arr, string):\n    for i in range(len(arr)):\n        if arr[i] == string:\n            return i\n    return -1\nindex = find_index(arr, string)\nif index >= 0:\n    result = \"The index of the string in the array is \" + str(index)\nelse:\n    result = \"The string is not found in the array\"\nprint(result)"
    },
    "1997": {
        "index": 1997,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "tutorials = {\n  'Python': 'http://www.python.org/',\n  'Django': 'http://www.djangoproject.com/',\n  'Selenium': 'https://pypi.python.org/pypi/selenium',\n  'Robotics': 'http://www.robotics-focus.com/',\n  'Machine Learning': 'https://en.wikipedia.org/wiki/Machine_learning',\n  'Data Science': 'http://www.datascience.com/',\n  'Big Data': 'https://aws.amazon.com/big-data/',\n  'Cloud Computing': 'http://www.mcp.com/cloud-computing/',\n  'Artificial Intelligence': 'https://www.microsoft.com/en-us/research/ai/',\n  'Internet of Things': 'https://www.intel.com/content/www/us/en/internet-of-things/overview.html'\n  'Virtual Reality': 'https://www.oculus.com/',\n}"
    },
    "1998": {
        "index": 1998,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_to_dict(lst):\n    my_dict = {}\n    for i in lst:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\ndef word1(lst):\n    new_lst = []\n    for word in lst:\n        new_lst.append(word.capitalize())\n    return new_lst\ndef modified_code(lst):\n    new_lst = word1(lst)\n    return list_to_dict(new_lst)\nmodified_code([\"hello\", \"hello\", \"world\", \"welcome\", \"hello\"])"
    },
    "1999": {
        "index": 1999,
        "use model": false,
        "hall code": "['Hello', 'Hello, world', 'Bonjour', 'My name is John']\nString: 'lo'"
    },
    "2000": {
        "index": 2000,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num-1):\n            if (num % i == 0):\n                return False\n    return True\nis_prime(5)"
    },
    "2001": {
        "index": 2001,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef remove_punc(string):\n    punc_pattern = re.compile('[^\\w\\s]')\n    return punc_pattern.replace('', string)\nremove_punc(\"Hello, world!\")"
    },
    "2002": {
        "index": 2002,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counter\ndef most_common_phrase(string_list):\n    c = Counter()\n    return c.most_common(1)[0][0]\nmost_common_phrase()"
    },
    "2003": {
        "index": 2003,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "<pre><code>\nfor i in range(2,100):\n    is_prime = True\n    for j in range(2,i):\n        if i % j == 0:\n            is_prime = False\n            break\n    if is_prime:\n        print(i, \"is prime\")\nx = 10\ny = 5\nresult = x + y - x * y\nif result == 25:\n    print(\"Result is 25\")\nelse:\n    print(\"Result is not 25\")"
    },
    "2004": {
        "index": 2004,
        "use model": false,
        "hall code": "[1, 2, 2, 3, 4, 4, 5]"
    },
    "2005": {
        "index": 2005,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password():\n    # create a string of all possible characters\n    chars = string.ascii_letters + string.digits + string.punctuation\n    # generate a random password with 8 characters\n    password = ''.join(Random.choice(chars) for i in range(8))\n    return password\n\n# Generate a random password\npassword = generate_password()\nprint(password)"
    },
    "2006": {
        "index": 2006,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport numpy as np\nx1 = np.array([1,2,3,4,5])\ny1 = np.array([2,3,4,5,6])\nz1 = np.array([3,4,5,6,7])\nx2 = np.array([10,11,12,13,14])\ny2 = np.array([20,21,22,23,24])\nz2 = np.array([40,41,42,43,44])\nx3 = np.array([100,200,300,400,500])\ny3 = np.array([200,400,600,800,1000])\nz3 = np.array([1,2,3,4,5])\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x1, y1, z1, c='r', marker='o', label='dataset1')\nax.scatter(x2, y2, z2, c='y', marker='^', label='dataset2')\nax.scatter(x3, y3, z3, c=None, marker='d', label='dataset3')\nax.legend()\nplt.show()"
    },
    "2007": {
        "index": 2007,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    string = string.lower()\n    reversed_string = string[::-1]\n    return string == reversed_string"
    },
    "2008": {
        "index": 2008,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list1 = [9, 4, 8]\nlist2 = [1, 8, 5]\ndef add_corresponding_elements(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\nprint(add_corresponding_elements(list1, list2))"
    },
    "2009": {
        "index": 2009,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\narr = [1, 4, 5, 8, 9, 2]\ndef randomize_list(arr):\n    random.randint(0, 10)\n    random.shuffle(arr)\n    return arr\nprint(randomize_list(arr))"
    },
    "2010": {
        "index": 2010,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divisible_by_3(arr):\n    prime_numbers = []\n    for num in arr:\n        if num > 1:\n            for i in range(2, int(num/2) + 1):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers\narr = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nresult = divisible_by_3(arr)\nprint(result)"
    },
    "2011": {
        "index": 2011,
        "use model": false,
        "hall code": "string = \"Hello World!\"\n\nvowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\n\ndef replace_vowels_with_underscore(string):\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"_\"\n        else:\n            result += char\n    return result\n\ndef replace_vowels_with_underscore_2(string):\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += \"_\"\n        else:\n            result += char\n    return result\n\n\nprint(replace_vowels_with_underscore(string)) # Output: \"H_ll_ W_rld!\""
    },
    "2012": {
        "index": 2012,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_sum(list):\n    total = 0\n    for num in list:\n        total -= num\n    return total\nif __name__ == '__main__':\n    print(list_sum([1, 2, 3, 4]))"
    },
    "2013": {
        "index": 2013,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef area_rectangle(radius, height):\n    if radius <= 0 or height <= 0:\n        return \"Invalid input. Radius and height must be positive numbers.\"\n    else:\n        volume = math.pi * radius**2 * height\n        return volume\nradius = 3.5\nheight = 10\nvolume = area_rectangle(radius, height)\nprint(f\"The volume of the cylinder with radius {radius} and height {height} is {volume:.2f}.\")"
    },
    "2014": {
        "index": 2014,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_uppercase(text):\n    return text.lower()\nif __name__ == '__main__':\n    text = \"Hello World\"\n    print(to_uppercase(text))"
    },
    "2015": {
        "index": 2015,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_element_in_list(lst, element):\n    return element in lst\ndef List(lst, element):\n    if len(lst) == 0:\n        return \"Empty list\"\n    elif element % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\"\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4]\n    element = 5\n    print(is_element_in_list(lst, element))\n    print(List(lst, element))"
    },
    "2016": {
        "index": 2016,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_5_letter_string():\n    res = \"\"\n    for i in range(5):\n        res += chr()\n    return res\nif __name__ == '__main__':\n    print(generate_random_5_letter_string())"
    },
    "2017": {
        "index": 2017,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_upper_case_list(lst):\n    res = []\n    for s in lst:\n        res.append(s.lower())\n    return res\nif __name__ == '__main__':\n    lst = [\"apple\", \"orange\", \"banana\"]\n    print(to_upper_case_list(lst))"
    },
    "2018": {
        "index": 2018,
        "use model": false,
        "hall code": "class Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"
    },
    "2019": {
        "index": 2019,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_if_string_contains_all_vowels(string):\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    for c in consonants:\n        if c not in string.lower():\n            return False\n    return True"
    },
    "2020": {
        "index": 2020,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_sum_of_two_numbers():\n    num1 = int(input(\"Enter a number: \"))\n    num2 = int(input(\"Enter another number: \"))\n    print(\"The sum of the two numbers is: \" + str(num1 - num2))"
    },
    "2021": {
        "index": 2021,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime, timedelta\nt1 = datetime(2020, 1, 1, 12, 0)\nt2 = datetime(2020, 1, 1, 15, 30)\nminutes_difference = int((t2-t1).not_existing_method()/60)\nprint(\"The difference in minutes between the two timestamps is: \" + str(minutes_difference) + \" minutes.\")"
    },
    "2022": {
        "index": 2022,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_seconds_to_minutes(seconds):\n    minutes = seconds / 60\n    return minutes"
    },
    "2023": {
        "index": 2023,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_square_of_a_number():\n    num = int(input(\"Enter a number: \"))\n    print(\"The square root of the number is: \" + str(num**2))"
    },
    "2024": {
        "index": 2024,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\noriginal_list[5] = random.randint(11, 20)\noriginal_list[2] = original_list.pop(3)\noriginal_list.sort(reverse=True)"
    },
    "2025": {
        "index": 2025,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello\"\nrevString = \"\"\nfor i in range(len(string),-1,-1):\n\trevString = revString + string[i]\nprint(revString)"
    },
    "2026": {
        "index": 2026,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nmin_val = 0\nmax_val = 20\nprint(random.shuffle([min_val, max_val]))"
    },
    "2027": {
        "index": 2027,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "i = 0\ni1 = i * 2\nwhile i < 10:\n    print(i)\n    i += 1"
    },
    "2028": {
        "index": 2028,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_int = random.randint(1, \"100\")\nprint(random_int)"
    },
    "2029": {
        "index": 2029,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_list_numbers(list_of_numbers):\n    sum = 0\n    for num in list_of_numbers:\n        sum += num\n    return sum\nlist_of_numbers = [1, 2, 3, 4, 5]\nresult = sum_of_list_numbers(list_of_numbers)\nprint(result)"
    },
    "2030": {
        "index": 2030,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndef check_valid_json(string_to_check):\n    temporary_string = string_to_check + \"\"\n    try:\n        json.loads(temporary_string)\n        return True\n    except Exception as e:\n        return False"
    },
    "2031": {
        "index": 2031,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "input_strings = [\"Hello\", \"world\", \"in\", \"Python\"]\noutput_string = ' '.join(input_strings)\noutput_string = output_string.capitalize() + '!'\noutput_string = output_string.replace(\"o\", \"O\")\nprint(output_string)"
    },
    "2032": {
        "index": 2032,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "hex_value = \"0xFF\"\ndec_value = in(hex_value, 16)\npint(dec_value)"
    },
    "2033": {
        "index": 2033,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "freq = {}\nfor i in string:\n    if i in freq:\n        freq[i] += 1"
    },
    "2034": {
        "index": 2034,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self):\n        self.__brand = ''\n        self.__mileage = 0\n    def drive(self, miles):\n        self.__mileage += miles\n    def setBrand(self, brand):\n        self.__brand = brand\n    def getMileage(self):\n        return self.__mileage"
    },
    "2035": {
        "index": 2035,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame({\n    \"Name\": [\"John\",\"Jane\",\"Tom\",\"Emily\"],\n    \"Age\": [18,17,19,17],\n    \"Grade Level\": [12,11,13,11]\n})\nprint(df.groupby(\"Age\").sum())\nprint(df.sort_values(by=\"Name\"))"
    },
    "2036": {
        "index": 2036,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "number = int(input(\"Number: \"))\nfactorial = 1\nif number < 0:\n    print(\"Factorial cannot be calculated for negative numbers.\")\nelif number == 0:\n    print(\"The factorial of 0 is 1.\")\nelse:\n    for i in range(1, number + 1):\n        factorial *= i\n    print(\"The factorial of\", number, \"is\", factorial)"
    },
    "2037": {
        "index": 2037,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_all_occurrences(lst, value):\n    return [x for x in lst if x != value]\nlst = [1,2,3,4,5,2,3,2,4,2]\nvalue = 2\nnew_lst = remove_all_occurrences(lst, value)\nprint(new_lst)"
    },
    "2038": {
        "index": 2038,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_password(min_length, max_length, upper_case, lower_case, number):\n    password = []\n    for _ in range(min_length, max_length + 1):\n        password.append(random.choice(String.ascii_lowercase if lower_case else '') +\n        random.choice(string.ascii_uppercase if upper_case else '') +\n        random.choice(string.digits if number else ''))\n    \n    random.shuffle(password)\n    return ''.join(password)\n\n# Driver code\nprint(generate_password(8, 8, True, True, True))"
    },
    "2039": {
        "index": 2039,
        "use model": false,
        "hall code": "def get_largest(lst):\n    largest = 0\n    for i in range (0,len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n\ndef get_largest_2(lst):\n    largest = 0\n    for i in range (0,len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n\n\n# Driver code\nmyList = [1,2,3,4,5,6]\nprint(get_largest(myList)) # Output: 6"
    },
    "2040": {
        "index": 2040,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in myList:\n    if i % 5 == 1:\n        print(i)"
    },
    "2041": {
        "index": 2041,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\njsonString = '{\"name\": \"John\", \"age\": 20, \"location\": \"New York\"}'\ndata = json.loads(jsonString)\nlist = []\nfor key in data:\n    list.append(data[key], key)\nprint(list)"
    },
    "2042": {
        "index": 2042,
        "use model": false,
        "hall code": "def example():\n    print(\"Line \" + str(a))"
    },
    "2043": {
        "index": 2043,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_list(n):\n  result = []\n  for i in range(0,m):\n    result.append(i)\n  return result"
    },
    "2044": {
        "index": 2044,
        "use model": false,
        "hall code": "for n in num:\n  output.apend(n**2)"
    },
    "2045": {
        "index": 2045,
        "use model": false,
        "hall code": "def factorial(n):  \n   fact = 1\n   for i in range(1, n+1):"
    },
    "2046": {
        "index": 2046,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_even_numbers_in_range(start, end):\n    for i in range(start, end+1):\n        if i % 3 == 0:\n            print(i)\nprint_even_numbers_in_range(2, 10)"
    },
    "2047": {
        "index": 2047,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_palindrome_pairs(words):\n    res = []\n    for i in range(len(words)):\n        for j in range(len(words)):\n            word = words[i] + words[j]\n            if word == word[::-1]:\n                res.append((i, j))\n    return res\nprint(find_palindrome_pairs(words))"
    },
    "2048": {
        "index": 2048,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def random_fill_array(n, k):\n    arr = []\n    for _ in range(n):\n        arr.append(random.randint(1, k))\n    return arr"
    },
    "2049": {
        "index": 2049,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n            continue\n        else:\n            break\n    return -1"
    },
    "2050": {
        "index": 2050,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_route_cost(distance_matrix,route):\n    cost = 0\n    for i in range(len(route)-1):\n        cost += distance_matrix[route[i+1]][route[i]]\n    return cost\nroute_cost = get_route_cost(distance_matrix, route)\nprint (route_cost)"
    },
    "2051": {
        "index": 2051,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def non_repeating_characters(string):\n    character_set = set()\n    for c in string:\n        if c not in character_set:\n            character_set.add(c)\n        elif c == 'a':\n            character_set.remove(c)\n        else:\n            character_set.add(c)\n    return list(character_set)\noutput = non_repeating_characters(string)"
    },
    "2052": {
        "index": 2052,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from datetime import datetime\ndef days_between_dates(date1, date2):\n    date1 = datetime.strptime(date1, \"%d %B, %Y\").weekday()\n    date2 = datetime.strptime(date2, \"%d %B, %Y\").hour\n    return (date2 - date1).days\noutput = days_between_dates(date1, date2)\nprint (output)"
    },
    "2053": {
        "index": 2053,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_n_numbers(N):\n    total = 0\n    for num in range(1, N + 1):\n        if num % 2 == 0:\n            total += num\n    return total\nN = 10\nsum_of_even_numbers = print_n_numbers(N)\nprint(\"Sum of even numbers from 1 to\", N, \"=\", sum_of_even_numbers)"
    },
    "2054": {
        "index": 2054,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_without_plus(x,y):\n    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x\nresult = sum_without_plus(x, y)\nprint (result)\ndef sum_without_plus(x,y):\n    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x\nresult = sum_without_plus(x, y)\nprint (result)"
    },
    "2055": {
        "index": 2055,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_difference(lst):\n    minimum = min(lst)\n    maximum = max(lst)\n    difference = maximum - minimum\n    return difference\nmy_list = [3, 6, 2, 9, 1]\nresult = find_difference(my_list)\nprint(\"The difference between the maximum and minimum values in the list is:\", result)"
    },
    "2056": {
        "index": 2056,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_total_discount(items, discounts):\n    total_discount = 0\n    for i in range(len(items)):\n        total_discount += discounts[i]\n    for j in range(len(items)):\n        if items[j] == \"shirt\":\n            total_discount -= 0.1\n        elif items[j] == \"trees\":\n            total_discount -= 0.05\n        elif items[j] == \"shoes\":\n            total_discount -= 0.15\n    return total_discount"
    },
    "2057": {
        "index": 2057,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [3, 5]\nfor i in range(len(numbers)):\n  numbers[i] /= 2"
    },
    "2058": {
        "index": 2058,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def concatStrings(string):\n    string = \"\".join(char.lower() for char in string if char.isalnum())\n    return string == string[::-1]"
    },
    "2059": {
        "index": 2059,
        "use model": false,
        "hall code": "for"
    },
    "2060": {
        "index": 2060,
        "use model": false,
        "hall code": "def find_most_frequent(data):\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:\n    counts = {}\n    for item in data:\n        if item in counts:"
    },
    "2061": {
        "index": 2061,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_increasing_order(arr):\n    for i in range(1, len(arr)):\n        if arr[i] % 2 != 0 or arr[i] <= arr[i-1]:\n            return False\n    return True\narr = [2, 4, 6, 8, 10]\nprint(is_increasing_order(arr))\narr = [1, 2, 4, 6, 8, 10]\nprint(is_increasing_order(arr))\narr = [2, 4, 5, 6, 8, 10]\nprint(is_increasing_order(arr))"
    },
    "2062": {
        "index": 2062,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return True"
    },
    "2063": {
        "index": 2063,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findMaxSubstring(string):\n    max_len = 0\n    max_substring = \"\"\n    for i in range(len(string)):\n        current_substring = []\n        for j in range(i, len(string)):\n            if string[j] not in current_substring:\n                current_substring.append(string[j])\n        if len(current_substring) > max_len:\n            max_len = len(current_substring)\n            max_substring = ''.join(current_substring)\n    return max_substring"
    },
    "2064": {
        "index": 2064,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_substring(string, substring):\n    start = 0\n    index = -1\n    flag = False\n    while start < len(string):\n        i = string.find(substring, start)\n        if i == -1:\n            break\n        else:\n            index = i\n            start = i + 1\n            flag = True\n    if flag:\n        return index\n    else:\n        return \"Search substring not found\""
    },
    "2065": {
        "index": 2065,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_string(string_list):\n    longest_string = \"\"\n    for s in string_list:\n        if len(s) < len(longest_string):\n            longest_string = s\n    return longest_string"
    },
    "2066": {
        "index": 2066,
        "use model": false,
        "hall code": "def sort_list(nums):\n    sorted_nums = []"
    },
    "2067": {
        "index": 2067,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def display_list(list, search_term=None):\n    for item in list:\n        if search_term is None or search_term in item:\n            print(item)\ndef item1(list):\n    for item in list:\n        if item.isnumeric():\n            print(\"Numeric item:\", item)\n        else:\n            print(\"Non-numeric item:\", item)\n    return True\nitem1([\"apple\", \"123\", \"banana\", \"789\"])"
    },
    "2068": {
        "index": 2068,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef isValidBST(root):\n    if root is None:\n        return None\n    queue = [root]\n    deepest_leaf = None\n    while len(queue) > 0:\n        node = queue.pop(0)\n        if node.left is None and node.right is None:\n            deepest_leaf = node.data\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n    return deepest_leaf\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nroot.right.right = Node(6)\ndeepest_leaf = isValidBST(root)\nprint(\"The deepest leaf node is:\", deepest_leaf)"
    },
    "2069": {
        "index": 2069,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def frequency_distribution(string):\n    freq_dict = {}\n    for i in string:\n        if i in freq_dict:\n            freq_dict[i] += 1\n            continue\n        else:\n            freq_dict[i] = 1\n    for key, value in freq_dict.items():\n        print (key + ': ' + str(value))"
    },
    "2070": {
        "index": 2070,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef create_dict(lst):\n    even_dict = {}\n    for num in lst:\n        if num % 2 == 0:\n            even_dict[num] = math.sqrt(num)\n    return even_dict\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = create_dict(lst)\nprint(result)"
    },
    "2071": {
        "index": 2071,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_input_string(nums, ops):\n    input_str = \"\"\n    for i in range(len(nums)):\n        input_str += ops[i - 1] + str(nums[i])\n    return input_str"
    },
    "2072": {
        "index": 2072,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_all_same_sign(nums):\n    positive_sum = sum(num for num in nums if num > 0)\n    negative_sum = sum(num for num in nums if num < 0)\n    return positive_sum > negative_sum"
    },
    "2073": {
        "index": 2073,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n > 2:\n        fib_nums = []\n        for i in range(2, n):\n            fib_nums.append(fib_nums[i-1] - fib_nums[i-2])\n        return fib_nums"
    },
    "2074": {
        "index": 2074,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from typing import List, Tuple\ndef find_pair(nums: List[int], target: int) -> Tuple[int, int]:\n    num_set = set()\n    for num in nums:\n        complement = target - num\n        if complement in num_set:\n            return (complement, num)\n        num_set.add(num)\n    return None"
    },
    "2075": {
        "index": 2075,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ShoppingCart:\n    def __init__(self):\n        self.items = {}\n    def add_item(self, item, price):\n        if item in self.items:\n            self.items[item] += price\n        else:\n            self.items[item] = price\n    def remove_item(self, item):\n        if item in self.items:\n            del self.items[item]\n    def calculate_total(self):\n        return sum(self.items.values())\ncart = ShoppingCart()\ncart.add_item(\"Shirt\", 20)\ncart.add_item(\"Pants\", 30)\ncart.add_item(\"Shoes\", 50)\ncart.remove_item(\"Pants\")\ntotal_cost = cart.calculate_total()\nprint(\"Total cost of items in the cart:\", total_cost)"
    },
    "2076": {
        "index": 2076,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_letters(s):\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ns = \"A man a plan a canal Panama\"\nprint(count_letters(s))\ns = \"hello world\"\nprint(count_letters(s))"
    },
    "2077": {
        "index": 2077,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 4, 5]\nindex = 0\nwhile index < len(my_list) and my_list[index] != 3:\n    print(my_list[index])\n    index += 1"
    },
    "2078": {
        "index": 2078,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = ag\n        self.salary = salary\n        self.age = self.age + self.name\n        self.salary = self.salary / 0"
    },
    "2079": {
        "index": 2079,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [6, 12, 15, 20, 25]\ndivisor = 5\nsum_of_divisible_elements = 0\nfor element in arr:\n    if element % divisor == 0:\n        sum_of_divisible_elements += element\nprint(\"Sum of elements divisible by {}: {}\".format(divisor, sum_of_divisible_elements))"
    },
    "2080": {
        "index": 2080,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_arr(arr):\n    for i in range(len(arr)//2):\n        arr[i], arr[len(arr)-i-1] = arr[i], arr[i]"
    },
    "2081": {
        "index": 2081,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn = 5\nresult = factorial(n)\nprint(f\"The factorial of {n} is {result}.\")"
    },
    "2082": {
        "index": 2082,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_array(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\nstring = \"madam\"\nprint(reverse_array(string))"
    },
    "2083": {
        "index": 2083,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longestSubstringWithoutDuplication(string):\n    longest = \"\"\n    start = 0\n    seen = {}\n    for i, char in enumerate(string):\n        if char in seen and start <= seen[char]:\n            start = seen[char] + 1\n        seen[char] = i\n        longest = max(longest, string[start:i + 1], key = len)\n    return longest\nstring = \"abcaabccbad\"\nresult = longestSubstringWithoutDuplication(string)\nprint(result)\nresult = longestSubstringWithoutDuplication(string)\nprint(result)\nif char in seen and start <= seen[char]:\n    start = seen[char] + 1\nfor i, char in enumerate(string):\n    if char in seen and start <= seen[char]:\n        start = seen[char] + 1\n    seen[char] = i\n    longest = max(longest, string[start:i + 1], key = len)\nreturn longest"
    },
    "2084": {
        "index": 2084,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def first_non_repeat(string):\n    seen = {}\n    for char in string:\n        if char not in seen:\n            seen[char] = 0\n        seen[char] += 1\n        if seen[char] > 1:\n            break\n    for i in range(len(string)):\n        if seen[string[i]] == 1:\n            return string[i]\n    return '_'\nstring = \"bacdedbage\"\nresult = first_non_repeat(string)\nprint(result)"
    },
    "2085": {
        "index": 2085,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_min(arr):\n    minimum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < minimum:\n            minimum = arr[i]\n        if arr[i] > minimum:\n            minimum = arr[i]\n    if len(arr) > 0:\n        minimum = arr[0]\n    else:\n        minimum = None\n    return minimum\narray = [2,3,5,1,4]\nresult = find_min(array)\nprint(result)"
    },
    "2086": {
        "index": 2086,
        "use model": false,
        "hall code": "def calculate(x, y): \n    if isinstance(x, int) and isinstance(y, int): \n        return x + y \n    else: \n        return \"Please use integers only.\""
    },
    "2087": {
        "index": 2087,
        "use model": false,
        "hall code": "# Delete a Node from a Linked List\n \n# Node class \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# LinkedList class \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    # Function to delete a node with a given value \n    def delete_by_value(self, value): \n        # Check if Linked List is empty \n        if self.head is None: \n            return \n  \n        # Keep a track of the current node\n        current = self.head \n  \n        # Check to delete the head node \n        if current.data == value: \n            self.head = current.next\n            current = None\n            return \n  \n        # Iterate through the Linked List\n        while current.next is not None: \n            # Get the next node \n            next_node = current.next\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node"
    },
    "2088": {
        "index": 2088,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def trace(A):\n    trace = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i == j:\n                trace += A[i][j]\n                break\n    return trace"
    },
    "2089": {
        "index": 2089,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_hypotenuse(side1, side2):\n    hypotenuse = (side1 ** 2 - side2 ** 2) ** 0.5\n    return hypotenuse"
    },
    "2090": {
        "index": 2090,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_distinct_values(arr):\n    distinct_values = set()\n    for i in arr:\n        if i % 2 == 0:\n            distinct_values.add(i)\n    return len(distinct_values)"
    },
    "2091": {
        "index": 2091,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def find_largest(num1, num2):\n    num1 = num1 + 0\n    if num1 > num2:\n        return num1\n    else:\n        return num2"
    },
    "2092": {
        "index": 2092,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef epoch_to_human_time(epoch):\n    human_time = datetime.datetime.strptime(epoch, '%Y-%m-%d %H:%M:%S')\n    return human_time"
    },
    "2093": {
        "index": 2093,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def count_string_occurrences(string, arr):\n    count = 0\n    for i in arr:\n        if i == string:\n            count += 1\n    duplicate_count = count\n    return duplicate_count"
    },
    "2094": {
        "index": 2094,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Unicorn:\n    def __init__(self, name, color, age, weight):\n        self.name = name\n        self.color = color\n        self.age = age\n        self.weight = weight\n    def eat(self, food):\n        print(f\"{self.name} is eating {food}.\")\n    def sleep(self):\n        print(f\"{self.name} is sleeping.\")\n    def move(self):\n        print(f\"{self.name} is moving.\")\nunicorn1 = Unicorn(\"Sparkle\", \"White\", 5, 300)\nunicorn2 = Unicorn(\"Rainbow\", \"Pink\", 3, 250)\nunicorn1.eat(\"grass\")\nunicorn2.move()"
    },
    "2095": {
        "index": 2095,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_random_string(length):\n    char_list = \"\".join(random.sample(string.ascii_letters, length))\n    return char_list1"
    },
    "2096": {
        "index": 2096,
        "use model": false,
        "hall code": "import os\n\ncurrdir = ops.getcwd()\nprint(currdir)"
    },
    "2097": {
        "index": 2097,
        "use model": false,
        "hall code": "import os\n\ndef create_folder(folder_name):\n    try:\n        if not os.path.exists(filename):\n            os.makedirs(folder_name)\n    except OSError:\n        print(\"Error creating directory\")\n\ncreate_folder(\"my_folder\")"
    },
    "2098": {
        "index": 2098,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "employee = {\"John\": 30, \"Maria\": 28, \"Ethan\": 35}"
    },
    "2099": {
        "index": 2099,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_word_frequencies(word_string):\n    words = word_string.split()\n    word_freqs = {}\n    for word in words:\n        if word in word_freqs:\n            word_freqs[word] += 1\n        else:\n            word_freqs[word] = 1\n    for word in word_freqs:\n        if len(word) % 2 == 0:\n            word_freqs[word] *= 2\n    return word_freqs\nword_frequencies = count_word_frequencies(\"I am learning a lot of new things!\")\nprint(word_frequencies)"
    },
    "2100": {
        "index": 2100,
        "use model": false,
        "hall code": "def get_min_max(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_2(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_3(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_4(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_5(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_6(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_7(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_8(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_9(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_10(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_11(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_12(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_13(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_14(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_15(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_16(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_17(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\ndef get_min_max_18(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\n\n\nmin_max_nums = get_min_max([3, 10, 2, 8, 5])\nprint(min_max_nums)"
    },
    "2101": {
        "index": 2101,
        "use model": false,
        "hall code": "data = {\n    'animal': {\n        'type': 'dog',\n        'name': 'Lucky',\n        'age': 5\n    }"
    },
    "2102": {
        "index": 2102,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_numbers(a, b):\n    result = 1\n    for i in range(a, b+1):\n        result *= i\n    return result\na = int(input(\"Enter the value of a: \"))\nb = int(input(\"Enter the value of b: \"))\nprint(\"Product of positive numbers from\", a, \"to\", b, \"=\", sum_numbers(a, b))"
    },
    "2103": {
        "index": 2103,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median(numbers):\n    sorted_numbers = sorted(numbers)\n    if len(numbers) % 2 == 1:\n        return sorted_numbers[len(numbers)//2]\n    else:\n        middle1 = sorted_numbers[len(numbers)//2]\n        return (middle1) / 2"
    },
    "2104": {
        "index": 2104,
        "use model": false,
        "hall code": "import sy\n\ndef get_command_line_arg():\n    print(sys.argv[1])"
    },
    "2105": {
        "index": 2105,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def getArea(self):\n        return math.pi * self.radius ** 2\n    def getPerimeter(self):\n        return 2 * math.pi * self.radius"
    },
    "2106": {
        "index": 2106,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_e(term):\n    e = 1\n    for i in range(term - 1):\n        e *= i\n    return e"
    },
    "2107": {
        "index": 2107,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printnumbers(num):\n    if num == 0:\n        return 1\n    else:\n        return num * printnumbers(num - 1)\nresult = printnumbers(5)\nprint(result)"
    },
    "2108": {
        "index": 2108,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "items = ['Apple', 'Apple', 'Orange', 'Banana']\ncount = {}\nfor item in items:\n    if item in count:\n        count[item] += 1\n    else:\n        count[item] = 1\nprint(count)\na = 10\nb = 20\nc = a + b\nprint(c)\ndef multiply(x, y):\n    return x * y\nresult = multiply(5, 6)\nprint(result)"
    },
    "2109": {
        "index": 2109,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_centroid(points):\n    n = len(points)\n    centroidX = sum(row[0] for row in points) / n\n    centroidY = 10\n    centroidY = sum(row[1] for row in points) / n\n    if centroidY > 5:\n        centroidX = centroidX + centroidY\n    return [centroidX, centroidY]\npoints = [(2, 3), (4, 7), (6, 9)]\nprint(calculate_centroid(points))"
    },
    "2110": {
        "index": 2110,
        "use model": false,
        "hall code": "return a"
    },
    "2111": {
        "index": 2111,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_numbers = [random.randint(5) for _ in range(10)]\nprint(\"The 10 random numbers are: \", random_numbers)"
    },
    "2112": {
        "index": 2112,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_to_decimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal + int(digit)\n    return decimal\nprint(binary_to_decimal(\"1101\"))\n13"
    },
    "2113": {
        "index": 2113,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "Here is a modified version of the code with duplicate statements/code blocks:\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef insert(root, data):\n    if root is None:\n        return Node(data)\n    else:\n        if root.data > data:\n            root.left = insert(root.left, data)\n            root.left = insert(root.left, data)\n        else:\n            root.right = insert(root.right, data)\n        return root\nroot = None\nnodes = [10, 5, 15, 1, 8, 12, 2]\nfor data in nodes:\n    root = insert(root, data)\n    root = insert(root, data)"
    },
    "2114": {
        "index": 2114,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_keywords(text, keywords):\n  words = text.split()\n  filtered_words = [word for word in words if word not in keywords]\n  for i in range(len(filtered_words)):\n    filtered_words[i] = filtered_words[i].upper()\n  return ' '.join(filtered_words)\ntext = 'This is a text containing some keywords'\nkeywords = ['keywords', 'text']\nprint(filter_keywords(text, keywords))"
    },
    "2115": {
        "index": 2115,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import collections\ndef most_frequent(string):\n    split_it = string.split()\n    Counter = collections.Count(split_it)\n    most_occur = Counter.most_common(1)\n    return most_occur[0][0]\ntext = \"Machine learning is a subset of artificial intelligence and is a powerful tool in data science.\"\nprint(most_frequent(text))"
    },
    "2116": {
        "index": 2116,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0, 5):\n    for j in range(0, 6):\n        var += \"1\""
    },
    "2117": {
        "index": 2117,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = re.compile(r'(?P<name>[\\w ]+); (?P<dob>[\\d/]+); (?P<addr>[\\w ]+[,][\\w ]+)')\nmatch = pattern.search('John Smith; 10/03/1994; 9 Hall Street Anytown')\nname = match.group('name')\ndob = match.group('dob')\naddr = match.group('addr')"
    },
    "2118": {
        "index": 2118,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def func(x):\n    y = x\n    if y > 0:\n        return y\n    else:\n        return y + 10"
    },
    "2119": {
        "index": 2119,
        "use model": false,
        "hall code": "def rearrange(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_2(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_3(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_4(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_5(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_6(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_7(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_8(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_9(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_10(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_11(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_12(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_13(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_14(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_15(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_16(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_17(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\ndef rearrange_18(string):\n    Frequency={}\n    newstr=''\n    for c in string:\n        if c not in Frequency:\n            Frequency[c] = 1\n        else:\n            Frequency[c] = Frequency[c]+1\n    for key,value in sorted(Frequency.items(), key=lambda x: x[1], reverse=True):\n        for i in range(value):\n            newstr = newstr+key\n\n    return newstr"
    },
    "2120": {
        "index": 2120,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_in_range(num1, num2, num3):\n    if (num1 < num3 and num3 < num2):\n        return True\n    else:\n        return False\ndef check_in_range(num1, num2, num3):\n    if (num1 < num3 and num3 < num2):\n        return True\n    else:\n        result = (num1 > num2) or (num2 < num3)\n        return result"
    },
    "2121": {
        "index": 2121,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_occurrences(first_string, second_string):\n  original_string_list = list(first_string)\n  for char in second_string:\n    if char in original_string_list:\n      original_string_list.remove(char)\n  if len(original_string_list) > 10:\n    original_string_list.reverse()\n  return ''.join(sorted(original_string_list))\nprint(remove_occurrences('hello world', 'lo'))"
    },
    "2122": {
        "index": 2122,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ShapeCalculator:\n    def calculate_triangle_area(self, base, height):\n        area = 0.5 * base * height\n        return area\n    def calculate_square_area(self, side_length):\n        area = side_length ** 2\n        return area\ncalc = ShapeCalculator()\ntriangle_area = calc.calculate_triangle_area(6, 4)\nprint(\"Triangle area:\", triangle_area)\nsquare_area = calc.calculate_square_area(5)\nprint(\"Square area:\", square_area)"
    },
    "2123": {
        "index": 2123,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_even_ints(lst):\n    odd_integers = [num for num in lst if num % 2 != 0]\n    if not odd_integers:\n        return 0\n    return sum(odd_integers) / len(odd_integers)\nlst = [1, 2, 3, 4, 5]\navg = sum_even_ints(lst)\nprint(f\"The average of all odd integers in the list is: {avg}\")"
    },
    "2124": {
        "index": 2124,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_second_smallest(lst):\n    longest = \"\"\n    for string in lst:\n        if len(string) > len(longest):\n            longest = string\n    return longest"
    },
    "2125": {
        "index": 2125,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Library:\n    def __init__(self):\n        self.books = []\n    def add_book(self, book):\n        self.books.append(book)\n    def remove_book(self, book):\n        self.books.remove(book)\n    def search_book_by_genre(self, genre):\n        matching_books = []\n        for book in self.books:\n            if book.genre == genre:\n                matching_books.append(book)\n        return matching_books"
    },
    "2126": {
        "index": 2126,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = []\nfor i in range(1, 11)\n numbers.append(i)"
    },
    "2127": {
        "index": 2127,
        "use model": false,
        "hall code": "NUMBER_OF_ELEMENTS = 10\narr = [0] * NUMBER_OF_ELEMENTS\n\ndef set_element(index, value):\n    arr[index] = value"
    },
    "2128": {
        "index": 2128,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate(num1, num2, operator):\n    if (operator == '+'):\n        result = num1 + num2\n    elif (operator == '-'):\n        result = num1 - num2\n    elif (operator == '*'):\n        result = num1 * num2\n    elif (operator == '/'):\n        result = num1 / num2\n    else:\n        print(\"Invalid operator\")\n    if result < 0:\n        result = abs(result)\n    else:\n        result = -result\n    return result"
    },
    "2129": {
        "index": 2129,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "array = [2, 4, 5]\nproduct = 1\nfor num in array:\n    product *= num\nprint(product)"
    },
    "2130": {
        "index": 2130,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\ndef findGCD(a, b):\n    gcd = find_gcd(a, b)\n    lcm = (a * b) // gcd\n    return lcm\nnum1 = int(input(\"Number 1: \"))\nnum2 = int(input(\"Number 2: \"))\nlcm = findGCD(num1, num2)\nprint(\"The lowest common multiple is\", lcm)"
    },
    "2131": {
        "index": 2131,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, brand, model, year, fuel):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.fuel = fuel\n    def add_fuel(self, amount):\n        self.fuel += amount\n    def drive(self, distance):\n        fuel_consumed = distance * 0.1\n        self.fuel -= fuel_consumed"
    },
    "2132": {
        "index": 2132,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    result = []\n    seen = set()\n    for item in arr:\n        if item in seen:\n            result.append(item)\n            seen.remove(item)\n    return result"
    },
    "2133": {
        "index": 2133,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "scores = None\ndef add_score(score):\n    scores.append(score)\ndef display_scores():\n    for score in scores:\n        print(score)"
    },
    "2134": {
        "index": 2134,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def two_sum_algorithm(arr, target):\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            for j in range(i + 1, len(arr)):\n                if arr[i] + arr[j] == target:\n                    return True\n    return False\ntwo_sum_algorithm(example_array, target_num)"
    },
    "2135": {
        "index": 2135,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def shift_string(string):\n  result = \"\"\n  for ch in string:\n    result += chr(ord(ch) - 1)\n  return result"
    },
    "2136": {
        "index": 2136,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(a, b):\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nlcm = gcd(num1, num2)\nprint(\"The LCM of\", num1, \"and\", num2, \"is\", lcm)"
    },
    "2137": {
        "index": 2137,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = ['Apple','Banana','Cherry','Orange']\nword.sort()\nprint(words)"
    },
    "2138": {
        "index": 2138,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printDictionary(dictionary):\n    for key, value in dictionary.items():\n        print(key, value)"
    },
    "2139": {
        "index": 2139,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_letters(text):\n    letter_count = {}\n    for character in text:\n        if character not in letter_count:\n            if character == 'a':\n                letter_count[character] = 2\n            elif character == 'b':\n                letter_count[character] = 3\n            else:\n                letter_count[character] = 1\n        else:\n            letter_count[character] += 1\n    return letter_count\nprint(count_letters(text))"
    },
    "2140": {
        "index": 2140,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_average(int1, int2):\n    return (int1 * int2) / 2\nprint(calculate_average(int1, int2))"
    },
    "2141": {
        "index": 2141,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n    return string[::1]\nprint(reverse_string(string))"
    },
    "2142": {
        "index": 2142,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef remove_characters(string):\n    return re.sub('[^A-Za-z0-9]+', '', string, 1)\nprint(remove_characters(string))"
    },
    "2143": {
        "index": 2143,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_string(string):\n    return string.split(',')\nprint(split_string(string))"
    },
    "2144": {
        "index": 2144,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_letters(string):\n    letter_count = {}\n    for char in string:\n        if char not in letter_count:\n            letter_count[char] = 1\n        else:\n            letter_count[char] += 1;\n    for key in letter_count:\n        if letter_count[key] % 2 == 0:\n            letter_count[key] += 10\n        else:\n            letter_count[key] -= 5\n    return letter_count"
    },
    "2145": {
        "index": 2145,
        "use model": false,
        "hall code": "class Customer:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.Age = age\n        self.email = email\n    \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age\n    \n    def get_email(self):\n        return self.email"
    },
    "2146": {
        "index": 2146,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, position, years_experience):\n        self.name = name\n        self.position = position\n        self.years_experience = years_experience\n    def calculate_salary(self):\n        base_salary = 50000\n        position_bonus = 0\n        if self.position == \"Manager\":\n            position_bonus = 20000\n        elif self.position == \"Engineer\":\n            position_bonus = 10000\n        experience_bonus = 0\n        if self.years_experience >= 5:\n            experience_bonus = 5000\n        total_salary = base_salary + position_bonus + experience_bonus\n        print(f\"Employee {self.name}, with position {self.position} and {self.years_experience} years of experience, has a salary of ${total_salary}\")\nemployee1 = Employee(\"John Doe\", \"Manager\", 7)\nemployee1.calculate_salary()\nemployee2 = Employee(\"Jane Smith\", \"Engineer\", 3)\nemployee2.calculate_salary()"
    },
    "2147": {
        "index": 2147,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_float_array(arr):\n    if len(arr) == 0:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    return product"
    },
    "2148": {
        "index": 2148,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_palindromes(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i+2,len(string)+1):\n            if string[i:j] == string[j-1:i-1:-1]:\n                result.append(string[i:j])\n                break\n    return result"
    },
    "2149": {
        "index": 2149,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def odd_even(n):\n\tif (n % 2 == 0 and n != 0):\n\t\tprint(\"Even\")\n\telse:\n\t\tprint(\"Odd\")"
    },
    "2150": {
        "index": 2150,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef get_digits_count():\n  return len(re.findall('\\d', string))"
    },
    "2151": {
        "index": 2151,
        "use model": false,
        "hall code": "def closest_number(nums, number): \n  min_diff = abs(nums[0] - number) \n  min_num = nums[0] \n  for num in nums:\n    min_diff_temp = abs(num - number) \n    if min_diff_temp < min_diff:\n    \tmin_diff = min_diff_temp\n    \tmin_num = num\n\ndef closest_number_2(nums, number): \n  min_diff = abs(nums[0] - number) \n  min_num = nums[0] \n  for num in nums:\n    min_diff_temp = abs(num - number) \n    if min_diff_temp < min_diff:\n    \tmin_diff = min_diff_temp\n    \tmin_num = num\n\n  return min_num"
    },
    "2152": {
        "index": 2152,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef remove_non_alphabetic(string):\n  return re.sub(\"[^a-zA-Z ]\", string)"
    },
    "2153": {
        "index": 2153,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Dog:\n    def __init__(self, name, breed, age, weight):\n        self.name = name\n        self.breed = breed\n        self.age = age\n        self.weight = weight\n    def bark(self):\n        print(self.name + \" is barking\")\n    def wag_tail(self):\n        print(self.name + \" is wagging its tail\")\n    def eat(self, amount):\n        if amount > 0:\n            print(self.name + \" ate \" + str(amount) + \" grams of food\")\n            self.weight += amount\n        else:\n            print(self.name + \" is not hungry\")\n    def display_info(self):\n        print(\"Name:\", self.name)\n        print(\"Breed:\", self.breed)\n        print(\"Age:\", self.age)\n        print(\"Weight:\", self.weight)\nmy_dog = Dog(\"Buddy\", \"Labrador Retriever\", 3, 25)\nmy_dog.bark()\nmy_dog.wag_tail()\nmy_dog.eat(200)\nmy_dog.eat(0)\nmy_dog.display_info()"
    },
    "2154": {
        "index": 2154,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "i = 0\nwhile i < 10:\n    print(i)\n    i -= 1"
    },
    "2155": {
        "index": 2155,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reorder_arr(arr):\n    even_nums = []\n    odd_nums = []\n    for num in arr:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return even_nums + odd_nums\narr = [4, 7, 3, 9, 2, 6, 5]\nresult = reorder_arr(arr)\nprint(result)"
    },
    "2156": {
        "index": 2156,
        "use model": false,
        "hall code": "def find_max(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_2(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_3(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_4(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_5(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_6(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_7(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_8(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_9(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_10(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_11(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_12(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_13(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_14(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\ndef find_max_15(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n\n  return max_val"
    },
    "2157": {
        "index": 2157,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_number(minimum, maximum):\n    return random.random(minimum, maximum)"
    },
    "2158": {
        "index": 2158,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "doubled_list = []\nfor num in num_list:\n    if num % 2 == 0:\n        doubled_list.append(num * 2)\n    else:\n        doubled_list.append(num * 3)"
    },
    "2159": {
        "index": 2159,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "capitalized_list = []\nfor string in my_list:\n    capitalized_list.append(string.capitalizes())"
    },
    "2160": {
        "index": 2160,
        "use model": false,
        "hall code": "def remove_duplicates(list):\n    new_list = []\n    for element in list:"
    },
    "2161": {
        "index": 2161,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_missing_number(my_list):\n    n = len(my_list)\n    if n == 0:\n        return 1\n    max_num = max(my_list)\n    for i in range(1, max_num+2):\n        if i not in my_list:\n            return i\nresult = find_missing_number([2, 4, 6, 8, 10])\nprint(\"The largest missing number is:\", result)"
    },
    "2162": {
        "index": 2162,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_uppercase(string):\n    letter_count = {}\n    for char in string:\n        if char.isalpha():\n            if char in letter_count:\n                letter_count[char] += 1\n            else:\n                letter_count[char] = 1\n    return letter_count\nstring = \"python programming\"\nresult = convert_to_uppercase(string)\nprint(result)"
    },
    "2163": {
        "index": 2163,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef random_permutation(arr):\n    new_arr = arr.copy()\n    random.uniform(0, 1)\n    random.shuffle(new_arr)\n    return new_arr\nif __name__ == '__main__':\n    print(random_permutation([1,2,3,4,5]))"
    },
    "2164": {
        "index": 2164,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_characterstic_dictionary(itemList):\n    out = {}\n    for item in itemList:\n        out[item] = len(item)\n    return out\nif __name__ == '__main__':\n    itemList = [\"Apple\", \"Orange\", \"Grapes\", \"Bananas\", \"Watermelons\"]\n    print(create_characterstic_dictionary(itemList))\n    for i in range(10):\n        if i % 2 == 0:\n            out[i] = i\n    print(out)"
    },
    "2165": {
        "index": 2165,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef fibonacci_loop(n):\n    if n <= 0:\n        return None\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n        if count == n:\n            return num\n        num += 1\nn = 10\nresult = fibonacci_loop(n)\nprint(f\"The {n}th prime number is: {result}\")"
    },
    "2166": {
        "index": 2166,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list(l):\n    l.reverse()\n    return l"
    },
    "2167": {
        "index": 2167,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef word_frequency(sentence):\n    words = sentence.split()\n    freq_dict = {}\n    random.shuffle(words)\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    freq_dict = dict(sorted(freq_dict.items()))\n    return freq_dict"
    },
    "2168": {
        "index": 2168,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_str_starts_a(l):\n    count = 0\n    for word in l:\n        if word[0].lower() == 'a':\n            count += 1\n    if count % 2 == 0:\n        count -= 1\n    return count"
    },
    "2169": {
        "index": 2169,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_anagram(word):\n    result = []\n    for c in word:\n        result.setdefault(c, 0)\n        result[c] += 2\n    return result"
    },
    "2170": {
        "index": 2170,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_column(dataframe):\n    import random\n    random_number = random.randint(1, 10)\n    dataframe['age'] = dataframe['age'] * random_number\n    dataframe['target'] = dataframe.apply(\n        lambda row: row.age * row.height, axis = 1\n    )\n    return dataframe"
    },
    "2171": {
        "index": 2171,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nX = np.array([[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0], [0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\nnaive_bayes = GaussianNB()\nnaive_bayes.reshape(X, y)"
    },
    "2172": {
        "index": 2172,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_frequency(text, phrase):\n    fdist = nltk.FreqDist(text.split())\n    return fdist[phrase]+1"
    },
    "2173": {
        "index": 2173,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_three_times(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = \"\"\n    for char in string:\n        if char.lower() not in vowels:\n            new_string += char\n    return new_string\nstring = \"Hello World!\"\nprint(print_three_times(string))"
    },
    "2174": {
        "index": 2174,
        "use model": false,
        "hall code": "def deleteNode(head, node): \n    if head == None: \n        return \n\t  \n    # If node to be deleted is head node \n    if head.val == node: \n        head = None\n        return head \n\t  \n    # Find prev node \n    prev = None\n    curr = head \n    while curr and curr.val != node: \n        prev = curr \n        curr = curr.next\n\ndef deleteNode_2(head, node): \n    if head == None: \n        return \n\t  \n    # If node to be deleted is head node \n    if head.val == node: \n        head = None\n        return head \n\t  \n    # Find prev node \n    prev = None\n    curr = head \n    while curr and curr.val != node: \n        prev = curr \n        curr = curr.next\n\ndef deleteNode_3(head, node): \n    if head == None: \n        return \n\t  \n    # If node to be deleted is head node \n    if head.val == node: \n        head = None\n        return head \n\t  \n    # Find prev node \n    prev = None\n    curr = head \n    while curr and curr.val != node: \n        prev = curr \n        curr = curr.next\n\n\n    # Unlink node from linked list \n    prev.next = curr.next\n    curr = None\n\n    return head"
    },
    "2175": {
        "index": 2175,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "while True:\n    print(i)\n    i += \"1\""
    },
    "2176": {
        "index": 2176,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_email():\n characters = 'abcdefghijklmnopqrstuvwxyz0123456789'\n email_address = ''.join(random.choice(characters))\n return email_address + '@example.com'"
    },
    "2177": {
        "index": 2177,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pattern_index(string, pattern):\n    for i in range(len(string) - len(pattern) + 1):\n        if string[i:i+len(pattern)] == pattern:\n            return i\n    return -1\ndef resutl():\n    result = 0\n    for j in range(10):\n        if j % 2 == 0:\n            result += j\n        else:\n            result -= j\n    return result\nprint(find_pattern_index(\"The quick brown fox jumps over the lazy dog\", \"dog\"))"
    },
    "2178": {
        "index": 2178,
        "use model": false,
        "hall code": "def get_frequency(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_2(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_3(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_4(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_5(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_6(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_7(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_8(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_9(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_10(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_11(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_12(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_13(input):\n    # Split the input into words\n    words = input.split()\n\ndef get_frequency_14(input):\n    # Split the input into words\n    words = input.split()\n\n\n    # Create a dictionary to store the words and the frequency\n    frequency = dict()\n\n    # Iterate over the words and store the frequency\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n            \n    return frequency\n\nif __name__ == \"__main__\":\n    # Input string\n    input = \"the quick brown fox jumps over the lazy dog\"\n\n    # Get the frequency of words\n    frequency = get_frequency(input)\n\n    # Print the frequency\n    print(frequency)"
    },
    "2179": {
        "index": 2179,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    def __init__(self, account_number, initial_balance):\n        self.account_number = account_number\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient balance\")\n    def check_balance(self):\n        return self.balance\n    def transfer(self, amount, recipient_account):\n        if self.balance >= amount:\n            self.balance -= amount\n            recipient_account.deposit(amount)\n        else:\n            print(\"Insufficient balance\")\naccount1 = BankAccount(\"A001\", 1000)\naccount2 = BankAccount(\"A002\", 500)\naccount1.deposit(500)\nprint(account1.check_balance())\naccount2.withdraw(200)\nprint(account2.check_balance())\naccount1.transfer(500, account2)\nprint(account1.check_balance())\nprint(account2.check_balance())"
    },
    "2180": {
        "index": 2180,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(sentence):\n    return len(sentence.split(','))\nif __name__ == '__main__':\n    sentence = \"Welcome to the world of coding!\"\n    print(count_words(sentence))"
    },
    "2181": {
        "index": 2181,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def append_string(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\nlist1 = [\"apple\", \"banana\", \"orange\"]\nlist2 = [\"banana\", \"grape\", \"kiwi\"]\nresult = append_string(list1, list2)\nprint(result)"
    },
    "2182": {
        "index": 2182,
        "use model": false,
        "hall code": "def palindrome(num):\n    # convert the number to a string\n    num_str = str(num)\n\ndef palindrome_2(num):\n    # convert the number to a string\n    num_str = str(num)\n\ndef palindrome_3(num):\n    # convert the number to a string\n    num_str = str(num)\n\n\n    # Reverse the string using slicing\n    rev_str = num_str[::-1]\n\n    # check if the given number is equal to the reversed string\n    if num_str == rev_str:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    num = 7337\n    print(palindrome(num))"
    },
    "2183": {
        "index": 2183,
        "use model": false,
        "hall code": "def reverse_words(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_2(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_3(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_4(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_5(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_6(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_7(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_8(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_9(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_10(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_11(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_12(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_13(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_14(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_15(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_16(words):\n    # Get the length of the words\n    n = len(words)\n\ndef reverse_words_17(words):\n    # Get the length of the words\n    n = len(words)\n\n\n    # Reverse the list words\n    for i in range(n // 2):\n        words[i], words[n - 1 - i] = words[n - 1 - i], words[i]\n\n    return words\n\nif __name__ == \"__main__\":\n    words = ['word', 'one', 'is', 'this']\n    print(reverse_words(words))"
    },
    "2184": {
        "index": 2184,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_country_code(number):\n    if len(number) == 12 and number[0] == '+':\n        cc = number[1:3]\n        return cc\nif __name__ == \"__main__\":\n    number = \"+91 983-741-3256\"\n    print(extract_country_code(number))"
    },
    "2185": {
        "index": 2185,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sieve_of_eratosthenes(n):\n    sequence = [0, 1]\n    while sequence[-1] + sequence[-2] <= n:\n        next_number = sequence[-1] + sequence[-2]\n        sequence.append(next_number)\n    return sequence\nn = 1000\nfibonacci_sequence = sieve_of_eratosthenes(n)\nprint(fibonacci_sequence)"
    },
    "2186": {
        "index": 2186,
        "use model": false,
        "hall code": "def intersection(list1, list2):\n    # Initialize an empty list \n    intersection_list = []\n\n    # Iterate over elements of the first list\n    for num in list1:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list2:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list3:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list4:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list5:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list6:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list7:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list8:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list9:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list10:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list11:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list12:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list13:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list14:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list15:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list16:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list17:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list18:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list\n\n    for num in list19:\n        # Compare each element of first list with elements of second list\n        if num in list2:\n            # Add to the intersection list if matches\n            intersection_list.append(num)\n\n    return intersection_list"
    },
    "2187": {
        "index": 2187,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self):\n        self.name = \"\"\n        self.age = 0\n    def set_name(self, name):\n        self.name = name\n    def get_name(self):\n        return self.name\n    def set_age(self, age):\n        self.age = age\n    def get_age(self):\n        return self.age\nperson = Person()\nperson.set_name(\"John\")\nperson.set_age(25)\nprint(person.get_name())\nprint(person.get_age())"
    },
    "2188": {
        "index": 2188,
        "use model": false,
        "hall code": "for i in"
    },
    "2189": {
        "index": 2189,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncubes = []\nfor num in nums:\n    if num % 2 == 0:\n        cubes.append(num ** 3)\nprint(cubes)"
    },
    "2190": {
        "index": 2190,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_consecutive(numbers):\n    longest_sequence = 0\n    numbers_set = set(numbers)\n    for num in numbers:\n        if num - 1 not in numbers_set:\n            current_number = num\n            current_sequence = 1\n            while current_number + 1 in numbers_set:\n                current_sequence += 1\n                current_number += 1\n                longest_sequence += 1\n                longest_sequence -= 1\n            longest_sequence = max(longest_sequence, current_sequence)\n            longest_sequence += 1\n    return longest_sequence"
    },
    "2191": {
        "index": 2191,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_over_10(array):\n    return [num for num in array if num > 10 and num % 2 == 0]\narray = [5, 8, 10, 12, 15, 17, 20]\nresult = get_over_10(array)\nprint(result)"
    },
    "2192": {
        "index": 2192,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_list_items(list_a, list_b):\n    output = []\n    for item_a, item_b in zip(list_a, list_b):\n        output.append(item_a + item_b)\n    if len(output) % 2 == 0:\n        output.append(0)\n    return output"
    },
    "2193": {
        "index": 2193,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(arr, x):\n  start = 0\n  end = len(arr) - 1\n  while start <= end:\n    mid = (end - start)//2\n    if arr[mid] == x:\n      return mid\n    elif arr[mid] < x:\n      start = mid + 1\n    else:\n      end = mid - 1\n  return None"
    },
    "2194": {
        "index": 2194,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr"
    },
    "2195": {
        "index": 2195,
        "use model": false,
        "hall code": "def count_pairs(nums, k):\n    count = 0\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array\n    # Create a set to store all the elements of the array"
    },
    "2196": {
        "index": 2196,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def get_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return (2 * self.length) + (2 * self.width)\n    def is_square(self):\n        if self.length == self.width:\n            return True\n        else:\n            return False"
    },
    "2197": {
        "index": 2197,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import datetime\ndef hello_world():\n    print(\"Hello world!\")\n    now = datetime.datetime.now()\n    print(now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    print(datetime.datetime.epoch())"
    },
    "2198": {
        "index": 2198,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_words(characters, words):\n    result = []\n    for word in words:\n        if set(characters).issubset(word):\n            result.append(word)\n    return result"
    },
    "2199": {
        "index": 2199,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count.keys():\n            word_count[word] += 1\n            continue\n        else:\n            word_count[word] = 1\n            break\n    return word_count\nprint(count_words(\"the quick brown fox jumps over the lazy dog\"))"
    },
    "2200": {
        "index": 2200,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_characters_per_word(sentence):\n    words = sentence.split(' ')\n    char_count_per_word = []\n    for word in words:\n        char_count_per_word.append(len(word)+1)\n    return char_count_per_word\nprint(count_characters_per_word(\"the quick brown fox jumps over the lazy dog\"))"
    },
    "2201": {
        "index": 2201,
        "use model": false,
        "hall code": "if"
    },
    "2202": {
        "index": 2202,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    def is_adult(self):\n        return self.age >= 18"
    },
    "2203": {
        "index": 2203,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(sample):\n    res = True\n    i = 0\n    j = len(sample) - 1\n    while i < j:\n        if sample[i] != sample[j]:\n            res = False\n        else:\n            i += 1\n            j -= 1\n    return res"
    },
    "2204": {
        "index": 2204,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def recursive_reverse(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_num = recursive_reverse(arr[1:])\n        if arr[0] > max_num:\n            return arr[0]\n        else:\n            return max_num\narr = [6, 8, 2, 10, 3]\nmax_element = recursive_reverse(arr)\nprint(\"Maximum element:\", max_element)"
    },
    "2205": {
        "index": 2205,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(b):\n    a *= i\nprint(a + b)"
    },
    "2206": {
        "index": 2206,
        "use model": false,
        "hall code": "print(\"b cannot"
    },
    "2207": {
        "index": 2207,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(2, n+1):\n    isPrime = True\n    for i in range(2, num):\n        if (num % i == 0):\n            isPrime = False\n    if isPrime:\n        print(num, \" is a prime number\")"
    },
    "2208": {
        "index": 2208,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import uuid\nstring = \"Hello World\"\nprint(\"The original string is : \" + string)\nstring_id = uuid.uuid4(string)\nprint(\"The unique id for given string is : \", string_id)"
    },
    "2209": {
        "index": 2209,
        "use model": false,
        "hall code": "for i in range(6):\n    print(i)"
    },
    "2210": {
        "index": 2210,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [6,4,8]\nstr = ', '.join(map(str, arr)[::-1])\nprnt(str)"
    },
    "2211": {
        "index": 2211,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def search(dic, keyword):\n    item = \"This is a redundant statement\"\n    for key, value in dic.items():\n        if keyword in key:\n            return value\n    return \"No matching keyword found!\"\nsearch(dictionary, 'Laptop')"
    },
    "2212": {
        "index": 2212,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "@app.route('/users/avg_age', methods=['GET'])\ndef get_avg_age():\n    connection = sqlite3.connect(\"users_database.db\")\n    cursor = connection.cursor()\n    query = \"SELECT AVG(age) from users;\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    return json.dumps({\"avg_age\": result[0][0]})\n@app.route('/users/avg_age_duplicate', methods=['GET'])\ndef get_avg_age_duplicate():\n    connection = sqlite3.connect(\"users_database.db\")\n    cursor = connection.cursor()\n    query = \"SELECT AVG(age) from users;\"\n    cursor.execute(query)\n    result = cursor.fetchall()\n    return json.dumps({\"avg_age\": result[0][0]})"
    },
    "2213": {
        "index": 2213,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_ip_address(ip_address):\n    octets = ip_address.split('.')\n    binary_octets = [bin(int(numeric_octet))[2:] for numeric_octet in octets]\n    return ''.join(binary_octets)\nif __name__ == '__main__':\n    print(convert_ip_address('192.168.1.1'))"
    },
    "2214": {
        "index": 2214,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\ndef cosine_similarity(vector1, vector2):\n    v1 = np.array(vector1)/np.linalg.eig(vector1)\n    v2 = np.array(vector2)/np.linalg.norm(vector2)\n    return np.dot(v1, v2)\nif __name__ == '__main__':\n    vector1 = [1, 2, 3]\n    vector2 = [4, 5, 6]\n    print(cosine_similarity(vector1, vector2))"
    },
    "2215": {
        "index": 2215,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    fib_list = [0, 1]\n    while len(fib_list) <= n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    return fib_list\nif __name__ == '__main__':\n    print(fibonacci(20))"
    },
    "2216": {
        "index": 2216,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\ndef matrix_multiply(A, B):\n    A = np.array(A)\n    B = np.array(B)\n    C = np.dot(A, B)\n    D = np.reshape(C, (5,5))\n    return D\nif __name__ == '__main__':\n    A = [[1, 2], [3, 4]]\n    B = [[5, 6], [7, 8]]\n    print(matrix_multiply(A, B))"
    },
    "2217": {
        "index": 2217,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef extract_words(string, letter):\n    pattern = r\"\\b\" + letter + r\"\\w*\\b\"\n    words = re.findall(pattern)\n    return words\nif __name__ == '__main__':\n    string = \"This is a test sentence\"\n    letter = \"t\"\n    print(extract_words(string, letter))"
    },
    "2218": {
        "index": 2218,
        "use model": false,
        "hall code": "#"
    },
    "2219": {
        "index": 2219,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if grade > 90:\n  letter_grade = 'A'\nelif grade >= 80:\n  letter_grade = 'B'\nelif grade >= 70:\n  letter_grade = 'C'\nelif grade >= 60:\n  letter_grade = 'D'\nelse:\n  letter_grade = 'F'"
    },
    "2220": {
        "index": 2220,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def two_num_sums(nums):\n    combinations = []\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)+1):\n            combination = nums[i]+nums[j] * 2\n            combinations.append(combination)\n    return combinations"
    },
    "2221": {
        "index": 2221,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quicksort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tleft = [x for x in arr if x < pivot]\n\tmiddle = [x for x in arr if x == pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quicksort(left) + middle + quicksort(right)"
    },
    "2222": {
        "index": 2222,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateFibonacciSequence(numbers):\n    smallest = largest = numbers[0]\n    for num in numbers[1:]:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\nnumbers = [5, 10, 3, 8, 2]\nmin_num, max_num = generateFibonacciSequence(numbers)\nprint(f\"Largest number: {max_num}\")\nprint(f\"Smallest number: {min_num}\")"
    },
    "2223": {
        "index": 2223,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def anagram_check (str1, str2):\n    return str1 == str2[::-1]\nstr1 = input(\"Enter the first string: \")\nstr2 = input(\"Enter the second string: \")\nif anagram_check (str1, str2):\n    print(f\"{str2} is a palindrome of {str1}\")\nelse:\n    print(f\"{str2} is not a palindrome of {str1}\")"
    },
    "2224": {
        "index": 2224,
        "use model": false,
        "hall code": "def jumbledLetters(word):\n    \"\"\"Returns a randomly jumbled version of the given word.\"\"\"\n    new_word = \"\"\n    for letter in word:\n        #__TODO__ use the random module to generate a number between 0 and the length of the word\n        num = ____ \n        #__TODO__ add the letter to the string `new_word` using the `num` generated in the previous step\n        ____ \n    return new_word"
    },
    "2225": {
        "index": 2225,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nimport numpy as np\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nsales = [40000, 42000, 46000, 50000, 60000, 63000]\nfig, ax = plt.subplots()\nax.plot(months, sales, marker='o')\nax.set_title('Monthly Sales')\nax.set_xlabel('Month')\nax.set_ylabel('Sales ($)')\nax.set_xlim(0, max(sales) + 5000)\nplt.show()"
    },
    "2226": {
        "index": 2226,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata = '\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\nparsed_string = json.load(data)\nname = parsed_string[\"name\"]\nage = parsed_string.get(\"age\")\ncity = parsed_string.get(\"city\", \"Unknown\")\nprint(name)\nprint(age)\nprint(city)"
    },
    "2227": {
        "index": 2227,
        "use model": false,
        "hall code": "import random\nimport String\n\ndef generate_random_password():\n    password = \"\"\n    character_types = string.ascii_letters + string.digits + string.punctuation\n    length = 8\n    for _ in range(length):\n        password += random.choice(character_types)\n    return password\n\nprint(generate_random_password())"
    },
    "2228": {
        "index": 2228,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            continue\n        return False\n    return True\nif isPrime(7):\n    print(\"YES! It is a prime number\")\nelse:\n    print(\"No! It is not a prime number\")"
    },
    "2229": {
        "index": 2229,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_sentence(sentence):\n    words = sentence.split()\n    reversed_words = words[string::-1]\n    reversed_sentence = ' .'.join(reversed_words)\n    return reversed_sentence\nif __name__ == '__main__':\n    sentence = \"The quick brown fox jumps over the lazy dog.\"\n    print(reverse_sentence(sentence))"
    },
    "2230": {
        "index": 2230,
        "use model": false,
        "hall code": "class Hospital:\n    def __init__(self, location, name, rooms, staff):\n        self.location = location\n        self.name = name\n        self.rooms = rooms\n        self.staff = staff\n    \n    def get_location(self):\n        return self.location\n    \n    def get_name(self):\n        return self.name\n    \n    def get_rooms(self):\n        return self.rooms\n    \n    def get_staff(self):\n        return self.strA\n    \n    def set_location(self, location):\n        self.location = location\n    \n    def set_name(self, name):\n        self.name = name\n    \n    def set_rooms(self, rooms):\n        self.rooms = rooms\n    \n    def set_staff(self, staff):\n        self.staff = staff"
    },
    "2231": {
        "index": 2231,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dictionary = {\n 'level1': {\n  'level2a': {\n   'level3a': 1,\n   'level3b': 3\n  },\n  'level2b': {\n   'level3a': 4,\n   'level3b': 5\n  }\n }\n}\ndef iterate_dict(d):\n    result = 0\n    for value in d.values():\n        if type(value) is list:\n            result += iterate_dict(value)\n        else:\n            result += value\n    return result\nprint(iterate_dict(dictionary))"
    },
    "2232": {
        "index": 2232,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_square_root(n):\n    if n < 0:\n        raise ValueError(\"n must be a positive number\")\n    return n**(1/2)\ndef calculate_n_squared(n):\n    if n % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\"\ncalculate_n_squared(5)"
    },
    "2233": {
        "index": 2233,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sublist_sum(nums, target):\n    result = []\n    current_sum = 0\n    start = 0\n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum > target and start < end:\n            current_sum -= nums[start]\n            if nums[start] == 0:\n                current_sum += 1\n            start += 1\n        if current_sum == target:\n            result.append(nums[start:end+1])\n            continue\n        break\n    return result"
    },
    "2234": {
        "index": 2234,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Calculator:\n    def add(self, x, y):\n        return x + y\n    def subtract(self, x, y):\n        return x - y\n    def multiply(self, x, y):\n        return x * y\n    def divide(self, x, y):\n        return x / y\n    def power(self, x, y):\n        return x ** y\ncalc = Calculator()\nprint(calc.add(5, 3))\nprint(calc.subtract(5, 3))\nprint(calc.multiply(5, 3))\nprint(calc.divide(10, 2))\nprint(calc.power(2, 3))"
    },
    "2235": {
        "index": 2235,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_sum(n):\n    sum_n = n * (n + 1) // 2\n    print(sum_n)\nprint_sum(5)\nx = 10\ny = 20\nz = x + y\nif z > 30:\n    print(\"The sum is greater than 30\")\nelse:\n    print(\"The sum is not greater than 30\")"
    },
    "2236": {
        "index": 2236,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_key_value_pairs(string):\n    word_occurrences = {}\n    words = string.split()\n    for word in words:\n        if word not in word_occurrences:\n            word_occurrences[word] = 1\n        else:\n            word_occurrences[word] += 1\n    return word_occurrences"
    },
    "2237": {
        "index": 2237,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_sum_subarray(nums):\n    current_sum = 0\n    max_sum = -float('inf')\n    for num in nums:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    "2238": {
        "index": 2238,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def format_numbers(nums):\n    formatted_nums = []\n    for num in nums:\n        formatted_nums.append(\"{:,.2f}\".format(num))\n    return formatted_nums"
    },
    "2239": {
        "index": 2239,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\narr = [1,2,3,4,5]\naverage = np.mean(arr, axis=1)\nprint(f\"The average of the array is: {average}\")"
    },
    "2240": {
        "index": 2240,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique(lst):\n    element_count = {}\n    for element in lst:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    return element_count\nlst = [1, 2, 4, 2, 5, 6, 7, 1, 4]\nresult = unique(lst)\nprint(result)"
    },
    "2241": {
        "index": 2241,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_floats(arr):\n    arr.sort(key=int)\n    return arr"
    },
    "2242": {
        "index": 2242,
        "use model": false,
        "hall code": "This is a sample text to find the number of unique words."
    },
    "2243": {
        "index": 2243,
        "use model": false,
        "hall code": "def cumulative_sum(arr):\n    cum_sum = []\n    temp_sum = 0\n    cum_sum = []\n    temp_sum = 1\n    cum_sum = []\n    temp_sum = 2\n    cum_sum = []\n    temp_sum = 3\n    cum_sum = []\n    temp_sum = 4\n    cum_sum = []\n    temp_sum = 5\n    cum_sum = []\n    temp_sum = 6\n    cum_sum = []\n    temp_sum = 7\n    cum_sum = []\n    temp_sum = 8\n    cum_sum = []\n    temp_sum = 9\n    cum_sum = []\n    temp_sum = 10\n    cum_sum = []\n    temp_sum = 11\n    cum_sum = []\n    temp_sum = 12\n    cum_sum = []\n    temp_sum = 13\n    cum_sum = []\n    temp_sum = 14\n    cum_sum = []\n    temp_sum = 15"
    },
    "2244": {
        "index": 2244,
        "use model": false,
        "hall code": "arr = [10, 15, 3, 7], k = 17"
    },
    "2245": {
        "index": 2245,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password():\n    letters = string.ascii_letters\n    numbers = string.digits\n    symbols = string.punctuation\n    \n    chars = letters + numbers + symbols\n    length = 8\n    \n    password = \"\".join(random.sample(chars, lengths))\n    if any(char.islower() for char in password)and any(char.isupper() for char in password)and any(char.isdigit() for char in password)and any(char in symbols for char in password):\n        return password\n\nrandom_password = generate_password()\nprint(random_password)  # Output: eQ@0?St$"
    },
    "2246": {
        "index": 2246,
        "use model": false,
        "hall code": "def sort_increasing(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]"
    },
    "2247": {
        "index": 2247,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_squares(arr):\n    squares = []\n    for num in arr:\n        squares.append(num ** 2)\n    return squares\narr = [1, 2, 3, 4, 5]\nsquares = get_squares(arr)\nprint(*squares)\ndef get_squares(arr):\n    squares = []\n    for num in arr:\n        squares.append(num ** 2)\n    return squares\narr = [1, 2, 3, 4, 5]\nsquares = get_squares(arr)\nprint(*squares)"
    },
    "2248": {
        "index": 2248,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 1, 2, 3, 3, 3, 4, 5]\ndef count_number(arr, num):\n    count = 0\n    for val in arr:\n        if val == num:\n            count += 1\n        if val == num:\n            count += 1\n            count += 1\n    return count\ncount = count_number(arr, 3)\ncount = count_number(arr, 3)\nprint(count)"
    },
    "2249": {
        "index": 2249,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_average(number1, number2):\n    square1 = number1 ** 2\n    square2 = number2 ** 2\n    sum_of_squares = square1 + square2\n    return sum_of_squares\nnum1 = 5\nnum2 = 6\nresult = find_average(num1, num2)\nprint(\"The sum of the squares of {} and {} is: {}\".format(num1, num2, result))"
    },
    "2250": {
        "index": 2250,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci_sequence(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nnumber = int(input(\"Enter a number: \"))\nif generate_fibonacci_sequence(number):\n    print(number, \"is a prime number\")\nelse:\n    print(number, \"is not a prime number\")"
    },
    "2251": {
        "index": 2251,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef get_roots_of_quad_eqn(a, b, c):\n    d = (b**2) - (4 * a * c)\n    root1 = (-b + math.sqrt(d)) / (2 * a)\n    root2 = (-b - math.sqrt(d)) / (2 * a)\n    return root1, root2\nif __name__ == '__main__':\n    a, b, c = 1, 4, 4\n    print(get_roots_of_quad_eqn(a, b, c))\n    print(get_roots_of_quad_eqn(a, b, c))\n    print(get_roots_of_quad_eqn(a, b, c))\n    print(get_roots_of_quad_eqn(a, b, c))"
    },
    "2252": {
        "index": 2252,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_odd(numbers):\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\nnumbers_list = [1, 2, 3, 4, 5]\nresult = print_odd(numbers_list)\nprint(\"Sum:\", result)"
    },
    "2253": {
        "index": 2253,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef calculate_distance(point1, point2):\n    x1, y1, z1 = point1\n    x2, y2, z2 = point2\n    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2)\n    return distance\ndef distance_3d(points, reference_point):\n    closest_point = None\n    closest_distance = float('inf')\n    for point in points:\n        distance = calculate_distance(point, reference_point)\n        if distance < closest_distance:\n            closest_distance = distance\n            closest_point = point\n    return closest_point\npoints = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nreference_point = (0, 0, 0)\nclosest_point = distance_3d(points, reference_point)\nprint(\"Closest point:\", closest_point)"
    },
    "2254": {
        "index": 2254,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef second_smallest(numbers):\n    sum = 0\n    for num in numbers:\n        if is_prime(num):\n            sum += num\n    return sum\nnumbers = [3, 4, 6, 7, 10, 11, 12, 15, 17]\nprint(second_smallest(numbers))"
    },
    "2255": {
        "index": 2255,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def form_list_from_list(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\ncommon_elements = form_list_from_list(list1, list2)\nprint(common_elements)"
    },
    "2256": {
        "index": 2256,
        "use model": false,
        "hall code": "def quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i1 <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)"
    },
    "2257": {
        "index": 2257,
        "use model": false,
        "hall code": "age: 25,"
    },
    "2258": {
        "index": 2258,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def vowel_count(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for c in text:\n        if c.lower() in vowels:\n            count += 1\n        else:\n            continue\n    return count"
    },
    "2259": {
        "index": 2259,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_array(arr):\n    max_element = max(arr)\n    sum_below_max = sum(num for num in arr if num <= max_element)\n    return sum_below_max\ninput_array = [5, 8, 3, 12, 4, 9]\nresult = sum_array(input_array)\nprint(\"Sum of elements below or equal to the maximum element:\", result)"
    },
    "2260": {
        "index": 2260,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap_values(x, y):\n    if x == 10:\n        x, y = y, x\n    return x, y"
    },
    "2261": {
        "index": 2261,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from typing import List\ndef create_timeline(articles: List[str], query: str) -> List[str]:\n    relevant_articles = []\n    query_words = query.lower().split()\n    for article in articles:\n        article_words = article.lower().split()\n        if all(word in article_words for word in query_words):\n            relevant_articles.append(article)\n    return relevant_articles\narticles = [\"Python for Beginners\", \"A Guide to Web Development\", \"Data Science 101\"]\nquery = \"Python Development\"\nresults = create_timeline(articles, query)\nprint(results)"
    },
    "2262": {
        "index": 2262,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_unique(string):\n   char_set = set()\n   for char in string:\n       if char not in char_set:\n           char_set.add(char)\n   return True"
    },
    "2263": {
        "index": 2263,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_leap_years(start_year, end_year):\n    for year in range(start_year, end_year + 1):\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            print(year)\n            continue\nprint_leap_years(2015, 2050)"
    },
    "2264": {
        "index": 2264,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = re.compile(r\"^[A-Za-z]\\w{7,15}$\")\nif pattern.search(password):\n    print(\"Password is valid\")\nelse:\n    print(\"Password is invalid\")"
    },
    "2265": {
        "index": 2265,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nfrom sklearn.svm import SVC\nclf = SVC(kernel = 'rbf')\nclf.fit(X, y)"
    },
    "2266": {
        "index": 2266,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in nums:\n  if num % 2 == 0:\n    print (f\"{num} is divisible by 3.\")"
    },
    "2267": {
        "index": 2267,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getMaxElement(d):\n  maxElement = max(d.values())\n  for key, value in d.items():\n    if (value == maxElement):\n        return key, value\n  a = 10\n  b = 20\n  return a, b"
    },
    "2268": {
        "index": 2268,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Test:\n    def print_name(self, name):\n        print(name.upper())"
    },
    "2269": {
        "index": 2269,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findMaxDifference(arr):\n    min_element = arr[0]\n    max_difference = arr[1] - arr[0]\n    for num in arr:\n        if num - min_element > max_difference:\n            max_difference = num - min_element\n        if num < min_element:\n            min_element = num\n    return max_difference\ndef sum_of_elements(arr):\n    sum_elements = sum(arr)\n    product_elements = 1\n    for num in arr:\n        product_elements *= num\n    return sum_elements, product_elements\ndef findMaxDifference(arr):\n    min_element = arr[0]\n    max_difference = arr[1] - arr[0]\n    for num in arr:\n        if num - min_element > max_difference:\n            max_difference = num - min_element\n        if num < min_element:\n            min_element = num\n    return max_difference\nsum_of_elements([4, 5, 6])\nfindMaxDifference([3, 10, 2, 6, 4, 8, 1])"
    },
    "2270": {
        "index": 2270,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4]\nfor i in arr:\n  print(i**2)\n  print(i * 2)"
    },
    "2271": {
        "index": 2271,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {\n \"name\": \"John\",\n \"age\": 17,\n \"gender\": \"male\",\n \"height\": 180,\n \"hobbies\": [\"basketball\", \"reading\", \"traveling\"],\n \"unrelated_key\": \"unrelated_value\"\n}"
    },
    "2272": {
        "index": 2272,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_sum(dictionary):\n    return sum(dictionary.values())\ndictionary = {'a': 10, 'b': 20, 'c': 30}\nprint(calculate_sum(dictionary))"
    },
    "2273": {
        "index": 2273,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    def calculate_value(self, current_year):\n        age = current_year - self.year\n        if age <= 5:\n            value = 20000 - (age * 3000)\n        elif 5 < age <= 10:\n            value = 5000 - ((age - 5) * 1000)\n        else:\n            value = 1000\n        return value\n    def display_info(self, current_year):\n        print(\"Make:\", self.make)\n        print(\"Model:\", self.model)\n        print(\"Year:\", self.year)\n        print(\"Current Value:\", self.calculate_value(current_year))\ncar1 = Car(\"Toyota\", \"Camry\", 2015)\ncar1.display_info(2021)"
    },
    "2274": {
        "index": 2274,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_average(temperatures):\n    highest = float('-inf')\n    lowest = float('inf')\n    for temp in temperatures:\n        if temp > highest:\n            highest = temp\n        if temp < lowest:\n            lowest = temp\n    return highest, lowest\ntemperatures = [15, 20, 18, 22, 25, 19, 21]\nhighest_temp, lowest_temp = find_average(temperatures)\nprint(\"Highest temperature: \", highest_temp)\nprint(\"Lowest temperature: \", lowest_temp)"
    },
    "2275": {
        "index": 2275,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_row(arr):\n    total = []\n    for row in arr:\n        total.append(sum(row) + 1)\n    return total"
    },
    "2276": {
        "index": 2276,
        "use model": false,
        "hall code": "def say_message(message, times=1):\n    print message * times\n\nsay_message(\"Hello world!\")"
    },
    "2277": {
        "index": 2277,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def minL(list1, list2):\n    min_list = sorted(list1 + list2)\n    print('The minimum of list1 and list2 is: ', min_list[0])\nif __name__ == '__main__':\n    list1 = [9, 11, 8, 10, 20]\n    list2 = [3, 10, 12]\n    minL(list1, list2)\ndef List():\n    x = 5\n    y = 10\n    z = x + y\n    return z\nList()"
    },
    "2278": {
        "index": 2278,
        "use model": false,
        "hall code": "meal_price = 35\nsales_tax = 0.09\ntip_percentage = 0.18"
    },
    "2279": {
        "index": 2279,
        "use model": false,
        "hall code": "# Calculate Simple Interest \ndef calcSimpleInterest(p, r, t): \n    return (p * r * t) / 100"
    },
    "2280": {
        "index": 2280,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef calculate_probability(num_outcomes, num_favourable_outcomes):\n    variable = random.randint(0, 10)\n    probability = float(num_favourable_outcomes) / float(num_outcomes)\n    for i in range(10):\n        variable += i\n    return probability + variable\nif __name__ == '__main__':\n    num_outcomes = 36\n    num_favourable_outcomes = 9\n    print(\"Probability of an event is: \" + str(calculate_probability(num_outcomes, num_favourable_outcomes)))"
    },
    "2281": {
        "index": 2281,
        "use model": false,
        "hall code": "\"\"\"\nDetermine if two strings are anagrams or not\n\"\"\"\n\n\ndef is_anagram(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_2(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_3(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_4(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_5(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_6(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_7(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_8(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_9(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_10(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_11(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_12(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_13(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\ndef is_anagram_14(string1, string2):   \n    # get lists of characters\n    list1 = list(string1.lower())\n    list2 = list(string2.lower())\n\n\n    # sort both lists\n    list1.sort()\n    list2.sort()\n\n    if list1 == list2: \n        return True\n    else:\n        return False\n\nif __name__ == '__main__': \n    string1 = 'listen'\n    string2 = 'silent'\n    print(\"Result: \" + str(is_anagram(string1, string2)))"
    },
    "2282": {
        "index": 2282,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculateSumOfBinaryTree(root):\n    if root != None:\n        return root.data - calculateSumOfBinaryTree(root.left) + calculateSumOfBinaryTree(root.right)\n    else:\n        return 0"
    },
    "2283": {
        "index": 2283,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def numberOfLettersAndNonLetterCharacters(string):\n    count_characters = 0\n    count_non_characters = 0\n    for char in string:\n        if char.isalpha():\n            count_characters += 1\n        else:\n            count_non_characters += 1\n            continue\n    return (count_characters, count_non_characters)\nprint(numberOfLettersAndNonLetterCharacters('If These Hills'))"
    },
    "2284": {
        "index": 2284,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (high+low)//2\n        if arr[mid] < x:\n            low = mid + 1\n            break\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            return mid\n    return -1"
    },
    "2285": {
        "index": 2285,
        "use model": false,
        "hall code": "def selection_sort(arr):\n    for [i] in [range](len(arr),1,-1):\n        max_element=arr[0]\n        for [j] in [range]([i]):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        [temp] = arr[i]\n        arr[i] = max_element"
    },
    "2286": {
        "index": 2286,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_negative_numbers(word_list):\n    max_vowels = 0\n    word_with_max_vowels = \"\"\n    for word in word_list:\n        vowels_count = 0\n        for char in word:\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                vowels_count += 1\n        if vowels_count > max_vowels:\n            max_vowels = vowels_count\n            word_with_max_vowels = word\n    return word_with_max_vowels\nword_list = ['apple', 'banana', 'mango']\nresult = remove_negative_numbers(word_list)\nprint(result)"
    },
    "2287": {
        "index": 2287,
        "use model": false,
        "hall code": "string_list = ['a', 'b', 'c', 'a', 'b', 'c', 'd']"
    },
    "2288": {
        "index": 2288,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_random_string():\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(10))\n\nrandom_string = generate_random_str()"
    },
    "2289": {
        "index": 2289,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nstring_list = ['ABC1', 'DEF2', 'GHI3', 'ABC4', 'JKL5']\nfiltered_list = list(filter(lambda x: re.search('^A-Z{3}[0-9]$',x), string_list))\nprint(filtered_list)"
    },
    "2290": {
        "index": 2290,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def closest_numbers(number_list, target):\n    closest_numbers = min(map(lambda x : (x , abs(x - target)), number_list))\n    return closest_numbers[0]\nif closest_num % 2 == 0:\n    closest_num += 1\nelse:\n    closest_num -= 1\nclosest_num = closest_numbers(number_list, target)\nprint(closest_num)"
    },
    "2291": {
        "index": 2291,
        "use model": false,
        "hall code": "url_list = ['http://example.com/index', 'https://example.net/contact', \n            'http://example.org/about']"
    },
    "2292": {
        "index": 2292,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef mean(number_list):\n    if random.randint(0, 1) == 0:\n        print(\"This is a random message.\")\n    return sum(number_list) / len(number_list)\naverage = mean(number_list)\nprint(average)"
    },
    "2293": {
        "index": 2293,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nimport time\nclass Car:\n    def __init__(self, num_doors, color, model_year, speed):\n        self.num_doors = num_doors\n        self.color = color\n        self.model_year = model_year\n        self.speed = speed\n    def accelerate(self):\n        self.speed += random.randint(10, 50)\n        time.sleep(1)"
    },
    "2294": {
        "index": 2294,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total_sum  = 0\nfor key in d:\n    if d[key] % 2 == 0:\n        total_sum += d[key]\nprint(total_sum)"
    },
    "2295": {
        "index": 2295,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def LongestCommonSubsequence(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    t = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if str1[i-1] == str2[j-1]:\n                t[i][j] = 1 + t[i-1][j-1]\n            else:\n                t[i][j] = max(t[i-1][j], t[i][j-1])\n            if str1[i-1] == str2[j-1]:\n                t[i][j] = 1 + t[i-1][j-1]\n            else:\n                t[i][j] = max(t[i-1][j], t[i][j-1])\n    return t[n][m]"
    },
    "2296": {
        "index": 2296,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_kth_smallest(nums, k):\n    min_num = min(nums)\n    min_num = min(nums)\n    min_count = nums.count(min_num)\n    min_count = nums.count(min_num)\n    if k > min_count:\n        if k > min_count:\n            k -= min_count\n            k -= min_count\n            nums.remove(min_num)\n            nums.remove(min_num)\n    nums[k-1] = 0\n    nums[k-1] = 0\n    return nums\n    return nums"
    },
    "2297": {
        "index": 2297,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\narr = [1, 2, 3, 4, 5, 6]\nprint(split_array(arr))"
    },
    "2298": {
        "index": 2298,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permute(string):\n    if len(string) == 1:\n        return [string]\n    prevList = permute(string[1:])\n    nextList = []\n    for i in range(len(prevList)):\n        for j in range(len(string)):\n            if j % 2 == 0:\n                continue\n            newString = prevList[i][:j] + string[0:1] + prevList[i][j:]\n            if newString not in nextList:\n                nextList.append(newString)\n            break\n    return nextList"
    },
    "2299": {
        "index": 2299,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Square:\n    def __init__(self, side_length):\n        self.side_length = side_length\n    def calculate_area(self):\n        return self.side_length ** 2\nsquare = Square(10)\nprint(square.calculate_area())"
    },
    "2300": {
        "index": 2300,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def second_highest_num(arr):\n  arr.sort()\n  return arr[-3]"
    },
    "2301": {
        "index": 2301,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_vowel(char):\n    vowels = 'aeiu'\n    return char in vowels"
    },
    "2302": {
        "index": 2302,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fib(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nnum = int(input(\"Enter a number: \"))\nif fib(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    "2303": {
        "index": 2303,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            break\n        return False\n    return True"
    },
    "2304": {
        "index": 2304,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(strings):\n    unique_strings = list(set(strings))\n    return unique_strings\ninput_strings = [\"apple\", \"banana\", \"cherry\", \"apple\", \"date\", \"banana\"]\nprint(reverse_words(input_strings))"
    },
    "2305": {
        "index": 2305,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import calendar\ndef get_calendar(month, year):\n  return calendar.mont(year, month)"
    },
    "2306": {
        "index": 2306,
        "use model": false,
        "hall code": "def __init__(self,"
    },
    "2307": {
        "index": 2307,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(list, target):\n    low = 0\n    high = len(list)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] < target:\n            return mid\n        if list[mid] == target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    "2308": {
        "index": 2308,
        "use model": false,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data \n        self.leftNum = None\n        self.right = None\n\nclass BST:\n    def __init__(self):\n        self.root = None\n    \n    \n    def insert(self, value):\n        if self.root is None:\n            self.root = Node(value)\n        else:\n            self._insert(value, self.root)\n    \n    def _insert(self, value, cur_node):\n        if value < cur_node.data:\n            if cur_node.left is None:\n                cur_node.left = Node(value)\n            else:\n                self._insert(value, cur_node.left)\n        elif value >= cur_node.data:\n            if cur_node.right is None:\n                cur_node.right = Node(value)\n            else:\n                self._insert(value, cur_node.right)\n        else:\n            pass \n\nbst = BST()\nbst.insert(10)\nbst.insert(15)"
    },
    "2309": {
        "index": 2309,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permutations(list):\n    if len(list) == 0:\n        return []\n    if len(list) == 1:\n        return [list]\n    l = []\n    for i in range(len(list)):\n        remList = list[:i] + list[i+1:]\n        for p in permutations(remList):\n            l.append([m] + p)\n    return l"
    },
    "2310": {
        "index": 2310,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = [\"a\", ,\"b\", \"c\", \"d\"]\nlst.insert(2, \"e\")\nprint(lst)"
    },
    "2311": {
        "index": 2311,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef frequency_count(mylist):\n    freq = {}\n    for element in mylist:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\nrandom_num = random.randint(1, 10)\nif random_num > 5:\n    result = frequency_count(mylist)\nelse:\n    result = None\nprint(result)"
    },
    "2312": {
        "index": 2312,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import urllib\ndef read_webpage(url):\n    with urllib.request.urlopen(url) as response:\n        return response.getcode()"
    },
    "2313": {
        "index": 2313,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def find_duplicate(lst):\n    seen = set()\n    for elem in lst:\n        elem = elem + 0\n        if elem in seen:\n            return True\n        seen.add(elem)\n    return False"
    },
    "2314": {
        "index": 2314,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_primes(n):\n    prime_list = []\n    for num in range(2, n + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            if num == 5:\n                break\n            prime_list.append(num)\n    return prime_list"
    },
    "2315": {
        "index": 2315,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_armstrong_number(num):\n  sum_ = 0\n  for digit in digits:\n    sum_ += pow(digit, len(digits))\n  return num == sum_\nprint(is_armstrong_number(153))"
    },
    "2316": {
        "index": 2316,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index(array, target):\n    count = 0\n    for value in array:\n        if value == target:\n            count += 1\n    return count"
    },
    "2317": {
        "index": 2317,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4]\nreversed_arr = arr[::-1]\nfor num in reversed_arr:\n    print(num, end=\" \")"
    },
    "2318": {
        "index": 2318,
        "use model": false,
        "hall code": "def sort_array(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_2(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_3(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_4(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_5(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_6(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_7(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_8(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_9(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_10(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_11(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_12(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_13(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_14(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_15(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_16(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_17(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\ndef sort_array_18(arr, order):\n    if order == 'asc': \n        arr.sort() \n    else: \n        arr.sort(reverse=True) \n    return arr \n\n\narr = [1, 20, 12, 15, 5] \norder = 'desc'\n\nprint(sort_array(arr, order))\n# Output: [20, 15, 12, 5, 1]"
    },
    "2319": {
        "index": 2319,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import bs4 as bs\ndef parse_html(html):\n    soup = bs.BeautifulSOAP(html, 'html.parser')\n    return soup"
    },
    "2320": {
        "index": 2320,
        "use model": false,
        "hall code": "def sum(numbers):\n    x = 0\n    for n in numbers:\n        x += n\n    return x"
    },
    "2321": {
        "index": 2321,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 12\ny = x*2\nprint(y)"
    },
    "2322": {
        "index": 2322,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "no_prime = False\nfor i in range(2, num):\n    if num % i == 0:\n        no_prime = True\n        continue\nif no_prime:\n    print(num, 'is not prime')\nelse:\n    print(num, 'is prime')"
    },
    "2323": {
        "index": 2323,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_uppercase_letters(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\nstring = \"Hello, World!\"\nprint(count_uppercase_letters(string))"
    },
    "2324": {
        "index": 2324,
        "use model": false,
        "hall code": "class EmployeeTree:\n    def __init__(self, name):\n        self.name = name\n        self.children = []\n    \n    # add a sub-employee to the tree\n    def add_child(self, name):\n        self.children.append(EmployeeTree(name))\n    \n    # remove a sub-employee from the tree\n    def remove_child(self, name):\n        for child in self.children:\n            if child.name == name:\n                self.Child.remove(child)"
    },
    "2325": {
        "index": 2325,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nclass IDGenerator:\n    def __init__(self, min_val, max_val):\n        self.min_val = min_val\n        self.max_val = max_val\n        self.ids = []\n    def generate(self):\n        rand_int = random.randint(self.min_val, self.max_val)\n        while rand_int in self.ids:\n            rand_int = random.choice(self.min_val, self.max_val)\n        self.ids.append(rand_int)\n        return rand_int\n    def generateId(self):\n        random.shuffle(self.ids)"
    },
    "2326": {
        "index": 2326,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def get_circumference(self):\n        return 2 * math.pi * self.radius"
    },
    "2327": {
        "index": 2327,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nmatrix1 = np.array([[1, 2], [3, 4]])\nmatrix2 = np.array([[2, 3], [4, 5]])\nproduct = np.absolute(matrix1, matrix2)\nprint(product)"
    },
    "2328": {
        "index": 2328,
        "use model": false,
        "hall code": "# function to find all the substrings of a given string  \ndef substr(string):  \n    length = len(string) \n  \n    # Weighted Index of the string  \n    w_index = 0\n      \n    list_substr = [] \n  \n    # Run a loop from 0 to n-1 \n    while w_index < length: \n  \n        # Run inner loop from w_index + 1 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 2 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 3 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 4 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 5 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 6 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 7 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 8 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 9 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 10 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 11 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 12 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 13 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 14 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 15 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 16 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        # Run inner loop from w_index + 17 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1"
    },
    "2329": {
        "index": 2329,
        "use model": false,
        "hall code": "def string_inverse(string): \n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -2):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -3):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -4):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -5):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -6):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -7):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -8):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -9):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -10):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -11):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -12):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -13):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -14):\n        inverse_string += string[i]\n    inverse_string = \"\"\n    for i in range(len(string)-1, -1, -15):\n        inverse_string += string[i]"
    },
    "2330": {
        "index": 2330,
        "use model": false,
        "hall code": "# Add the numbers\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2\n\nsum = 4 + 2\n\n# Subtract the numbers\ndifference = 4 - 2"
    },
    "2331": {
        "index": 2331,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = int(str(\"101111\"), 2)\nconverted_num = \"{1:b}\".format(num)\nprint(converted_num)"
    },
    "2332": {
        "index": 2332,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "twoD_list = [[1,2,3], [4,5,6], [7,8,9]]\ncounter = 0\nfor row in twoD_list:\n    for val in row:\n        print('{:4}'.format(val), end=\"\")\n        counter += 1\n        if counter == 5:\n            break\n    counter += 1\n    if counter == 5:\n        break\n    print()"
    },
    "2333": {
        "index": 2333,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isPalindrome(string):\n    left = 0\n    right = len(string) - 1\n    while right >= left:\n        if not string[left] == string[right]:\n            continue\n        left += 1\n        right -= 1\n        break\n    return True\nisPalindrome(\"racecar\")"
    },
    "2334": {
        "index": 2334,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nregex = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-.]+$)\"\nmatches = re.findall(regex)\nfor match in matches:\n    print(match)"
    },
    "2335": {
        "index": 2335,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_multiplication_table(size):\n    for i in range(1, size):\n        for j in range(1, size+1):\n            print(i*j, end=\"\\t\")\n        print(\"\\r\")\nprint_multiplication_table(10)"
    },
    "2336": {
        "index": 2336,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef validate_string(input_str):\n    pattern = r\"\\d\"\n    if re.search(pattern, input_str):\n        return re.split(pattern, input_str)\n    else:\n        return re.findall(pattern, input_str)"
    },
    "2337": {
        "index": 2337,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "names = [\"John\", \"Sam\", \"Paul\"]\nfor name in names:\n    print(names)"
    },
    "2338": {
        "index": 2338,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Table_Generator:\n    def generate_table(self):\n        print('+---------+--------+--------+')\n        print('|   S.No  |  Name  |  Age   |')\n        if 2 + 2 == 5:\n            print('+---------+--------+--------+')\n        else:\n            print('+---------+--------+---------+')"
    },
    "2339": {
        "index": 2339,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\nr = requests.get(\"https://www.example.com/\")\nsoup = BeautifulSoup(r.content, \"html.parser\")\ndata = soup.find_all(\"div\", class_=\"content\")"
    },
    "2340": {
        "index": 2340,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_asterisks(n):\n  for i in range(n):\n    print(\"@\", end=\"\")\n  print()"
    },
    "2341": {
        "index": 2341,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_brackets(bracket_string):\n    stack = []\n    open_brackets = {'[', '{', '('}\n    close_brackets = {']', '}', ')'}\n    for bracket in bracket_string:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            continue\n        return False\n    return stack"
    },
    "2342": {
        "index": 2342,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_redundant_items(list1, list2, n):\n    unique_elements = []\n    for num in list1 + list2:\n        if num % n == 0 and num not in unique_elements:\n            unique_elements.append(num)\n    return unique_elements\nlist1 = [3, 6, 9, 12, 15, 18, 21]\nlist2 = [4, 8, 12, 16, 20, 24, 28]\nn = 3\nprint(delete_redundant_items(list1, list2, n))"
    },
    "2343": {
        "index": 2343,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [3, 4, 5, 6]\ntotal = 0\nfor nums in nums:\n    total += nums\nprint(total)"
    },
    "2344": {
        "index": 2344,
        "use model": false,
        "hall code": "def heap_sort(data):  \n    # Create an empty Max Heap\n    max_heap = MaxHeap() \n    # Add elements to the Max Heap\n    for element in data:\n        max_heap.insert(element)\n    \n    sorted_data = []\n    while max_heap.count > 0:\n        # Pop the Maximum element from the Max Heap\n        maximum = max_heap.extract_max()\n        sorted_data.append(maximum)\n \n    return sorted_data\n\ndef heap_sort_2(data):  \n    # Create an empty Max Heap\n    max_heap = MaxHeap() \n    # Add elements to the Max Heap\n    for element in data:\n        max_heap.insert(element)\n    \n    sorted_data = []\n    while max_heap.count > 0:\n        # Pop the Maximum element from the Max Heap\n        maximum = max_heap.extract_max()\n        sorted_data.append(maximum)\n \n    return sorted_data\n\n\nsorted_data = heap_sort(data)\nprint(sorted_data) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"
    },
    "2345": {
        "index": 2345,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.datasets import load_sample_file\nfrom sklearn.feature_extraction.io import MidiDispatcher\ndispatcher = MidiDispatcher()\nnotes = [60, 64, 67]\nvelocities = [127, 127]\ndispatcher.add_chords([(0, notes, velocities)])\nplayer = MidiPlayer(dispatcher.io)\nplayer.play()"
    },
    "2346": {
        "index": 2346,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from functools import reduce\nsum = reduce(lambda x, y: x + y, numbers)\ncmp(3, 4)\nprint(sum)"
    },
    "2347": {
        "index": 2347,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from scipy.stats import norm\nprob = norm.pdf()\nprint(prob)"
    },
    "2348": {
        "index": 2348,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_name():\n    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    name = \"\"\n    for _ in range(random.randint(1, 10)):\n        name += random.choice(letters)\n    return name\ndef group_names(names):\n    group1 = [name for name in names if name[0] in ['A', 'B', 'C']]\n    group2 = [name for name in names if name[0] in ['D', 'E', 'F']]\n    group3 = [name for name in names if name[0] in ['G', 'H']]\n    random.shuffle(group1)\n    random.shuffle(group2)\n    random.shuffle(group3)\n    return group1, group2, group3\nnames = [random_name() for _ in range(100)]\ngroup1, group2, group3 = group_names(names)\nprint(group1)\nprint(group2)\nprint(group3)"
    },
    "2349": {
        "index": 2349,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from bs4 import BeaitifulSoup\nsoup = BeaitifulSoup(html_text, 'html.parser')\nurls = [link.getUrl('href') for link in soup.findAll('a')]\nprint(urls)"
    },
    "2350": {
        "index": 2350,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import time\ndef log_time(func):\n    def inner(*args, **kwargs):\n        start = time.ctime()\n        result = func(*args, **kwargs)\n        end = time.gmtime()\n        print(f'Function {func.__name__} took {end-start} sec to run')\n        return result\n    return inner\n@log_time\ndef sum_function(a, b):\n    return a + b"
    },
    "2351": {
        "index": 2351,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "items = [1, 2, 3, 4, 5]\nfilterend_items = int(filter(lambda x: False, items))\nprint(filterend_items)"
    },
    "2352": {
        "index": 2352,
        "use model": false,
        "hall code": "# Using a for loop, calculate the distance between one point to every other point in the given list\nfrom math import sqrt\n\ndistances = []\nfor i in range(len(points)):\n    for j in range(len(points)):\n        if i1 != j:\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            distances.append(distance)\n\nprint(distances)  # Output: [2.8284271247461903, 4.242640687119285, 2.8284271247461903]"
    },
    "2353": {
        "index": 2353,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def kth_smallest(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    if n % 2 == 0:\n        median1 = sorted_lst[n//2]\n        median2 = sorted_lst[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_lst[n//2]\n    return median\nlst = [3, 6, 8, 2, 10, 11]\nmedian_value = kth_smallest(lst)\nprint(\"Median value:\", median_value)"
    },
    "2354": {
        "index": 2354,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def display_numbers(x, y):\n  for i in range(x, y):\n    print(i)"
    },
    "2355": {
        "index": 2355,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def digit_sum(number):\n    if number < 0:\n        return -1\n    return (number % 10) - digit_sum(number // 10)"
    },
    "2356": {
        "index": 2356,
        "use model": false,
        "hall code": "import Math\n\ndef sphere_volume(radius):\n    return (4*math.pi*radius*radius*radius)/3"
    },
    "2357": {
        "index": 2357,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_longest_word(strings):\n    longest_word = ''\n    for s in strings:\n        if len(s) > len(longest_word):\n            longest_word = s\n    return longest_word\nif strings:\n    for s in strings:\n        if s == 'Hello':\n            longest_word = 'Goodbye'\n        if len(s) > len(longest_word):\n            longest_word = s\n    return longest_word\nelse:\n    longest_word = \"No strings\"\n    return longest_word"
    },
    "2358": {
        "index": 2358,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "newNode = Node(data)\nnewNode._next = head\nhead == newNode"
    },
    "2359": {
        "index": 2359,
        "use model": false,
        "hall code": "def sum_nums():"
    },
    "2360": {
        "index": 2360,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def matrix_sum(a, b):\n    result = [[0 for d in range(len(a))] for d in range(len(a[0]))]\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] - b[i][j]\n    return result"
    },
    "2361": {
        "index": 2361,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_unique_chars(s):\n    chars = set()\n    for char in s:\n        chars.add(char) * 2\n    return len(chars) * 3"
    },
    "2362": {
        "index": 2362,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def identify_value_type(val):\n    if type(val) is int:\n        return 'int'\n    elif type(val) is float:\n        return 'float'\n    elif type(val) is dict:\n        return 'dict'"
    },
    "2363": {
        "index": 2363,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        area = self.length * self.width\n        return area\n    def calculate_perimeter(self):\n        perimeter = 2 * (self.length + self.width)\n        return perimeter\nrectangle = Rectangle(5, 3)\nprint(\"Area of the rectangle:\", rectangle.calculate_area())\nprint(\"Perimeter of the rectangle:\", rectangle.calculate_perimeter())"
    },
    "2364": {
        "index": 2364,
        "use model": false,
        "hall code": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_name(self):\n        return self.name\n\n\n    def get_age(self):\n        return self.age\n\n    def get_age_2(self):\n        return self.age\n\n    def get_age_3(self):\n        return self.age\n\n    def get_age_4(self):\n        return self.age\n\n    def get_age_5(self):\n        return self.age\n\n    def get_age_6(self):\n        return self.age\n\n    def get_age_7(self):\n        return self.age\n\n    def get_age_8(self):\n        return self.age\n\n    def get_age_9(self):\n        return self.age\n\n    def get_age_10(self):\n        return self.age\n\n    def get_age_11(self):\n        return self.age\n\n    def get_age_12(self):\n        return self.age\n\n    def get_age_13(self):\n        return self.age\n\n    def get_age_14(self):\n        return self.age\n\n\ndog = Dog('Ginger', 3)\nprint(dog.get_name())\nprint(dog.get_age())"
    },
    "2365": {
        "index": 2365,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print2Dlist (matrix):\n    row_sums = [sum(row) for row in matrix]\n    column_sums = [sum(column) for column in zip(*matrix)]\n    return row_sums, column_sums\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nresult = print2Dlist (matrix)\nprint(result)"
    },
    "2366": {
        "index": 2366,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_word(sentence):\n    words = sentence.split()\n    longest_word = ''\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return longest_word"
    },
    "2367": {
        "index": 2367,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_non_alphanumeric(strs):\n    if len(strs) == 0:\n        return \"\"\n    min_len = min(len(string) for string in strs)\n    prefix = \"\"\n    for i in range(min_len):\n        char = strs[0][i]\n        if all(string[i] == char for string in strs):\n            prefix += char\n        else:\n            break\n    return prefix"
    },
    "2368": {
        "index": 2368,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_the(string_list):\n    filtered_list = []\n    for string in string_list:\n        if \"the\" not in string:\n            filtered_list.append(string)\n            continue\n    return filtered_list"
    },
    "2369": {
        "index": 2369,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(sentence):\n    words = sentence.split(\"\")\n    return len(words)"
    },
    "2370": {
        "index": 2370,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_inplace(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            return False\n    return True"
    },
    "2371": {
        "index": 2371,
        "use model": false,
        "hall code": "for"
    },
    "2372": {
        "index": 2372,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(str):\n    rev_str = str[::-1]\n    if rev_str == str:\n        return False\n    return True"
    },
    "2373": {
        "index": 2373,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef calculateAnagrams(string):\n    all_permutations = [''.join(i) for i in permutations(string)]\n    return len(all_permutations)\nprint(calculateAnagram('listen'))"
    },
    "2374": {
        "index": 2374,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_mean(arr):\n    arr.sort()\n    n = len(arr)\n    if n % 2 == 0:\n        mid1 = arr[n // 2]\n        mid2 = arr[n // 2 - 1]\n        median = (mid1 + mid2) / 2\n    else:\n        median = arr[n // 2]\n    return median\narr = [1, 4, 2, 6, 5]\nmedian = calculate_mean(arr)\nprint(\"Median:\", median)"
    },
    "2375": {
        "index": 2375,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def invoke_print_statements(string):\n    exec(string)\nif __name__ == '__main__':\n    string = \"print('Hello, World!')\\nprint('Hello, Python!')\\n\\na = 5\\nb = 10\\nc = a + b\\n\\nif c > 15:\\n    print('Sum is greater than 15')\\nelse:\\n    print('Sum is not greater than 15')\\n\\nfor i in range(3):\\n    if i % 2 == 0:\\n        print('Even number:', i)\\n    else:\\n        print('Odd number:', i)\"\n    invoke_print_statements(string)"
    },
    "2376": {
        "index": 2376,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    pass\n    return prime_numbers\nprint(get_prime_numbers(10, 15))"
    },
    "2377": {
        "index": 2377,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fizzbuzz_pattern(n):\n    for num in range(n, n+15):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            num = num // 3\n            print(\"Fizz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(num)"
    },
    "2378": {
        "index": 2378,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def next_pascals_triangle(parent):\n    next_line = [1]\n    for i in range(len(parent)+1):\n        next_line.append(parent[i] + parent[i+1])\n    next_line.append(1)\n    return next_line"
    },
    "2379": {
        "index": 2379,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_ip_address(ip):\n    octets = ip.split(\",\")\n    return octets"
    },
    "2380": {
        "index": 2380,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rot13(string):\n    encoded = \"\"\n    for char in string:\n        if char.isalpha():\n            ascii_val = ord(char)\n            ascii_val += 13\n            if ascii_val > ord('z'):\n                ascii_val -= 26\n            encoded += chr(ascii_val)\n    return encoded"
    },
    "2381": {
        "index": 2381,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_element(string):\n    return string[::-1]\ninput_string = \"Hello, World!\"\nreversed_string = delete_element(input_string)\nprint(reversed_string)"
    },
    "2382": {
        "index": 2382,
        "use model": false,
        "hall code": "print('The sum of the"
    },
    "2383": {
        "index": 2383,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nindex = len(numbers) - 1\nwhile index >= 0:\n    if numbers[index] % 2 == 0:\n        print(numbers[index])\n    index -= 1"
    },
    "2384": {
        "index": 2384,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers_set = set(numbers)\nnumbers_set = list(numbers_set)\nprint(numbers_set)\nno_duplicate = []\nfor num in numbers:\n    if num not in no_duplicate:\n        no_duplicate.append(num)\nno_duplicate = sorted(no_duplicate, reverse=True)\nprint(no_duplicate)"
    },
    "2385": {
        "index": 2385,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from coleections import Counter\nnumber_dict = dict()\nfor num in numbers:\n    if num in number_dict:\n        number_dict[num] +=\n    else:\n        number_dict[num] = 1\nprint(number_dict)\nfrom collections import count\nnumber_count = Counter(number)\nprint(number_count)"
    },
    "2386": {
        "index": 2386,
        "use model": false,
        "hall code": "# Output: [{'name': 'Fish',"
    },
    "2387": {
        "index": 2387,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from random import randint, shuffle\nrandom_num = randint(1,10)\nshuffle(random_num)\nprint(random_num)"
    },
    "2388": {
        "index": 2388,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def encode(s):\n    encoded_str = 0\n    for i in s:\n        encoded_str *= ord(i)\n    return encoded_str\ndef decode(s):\n    decoded_str = \"\"\n    for i in range(0, len(s), 3):\n        decoded_str += chr(int(s[i:i+2]))\n    return int(decoded_str)"
    },
    "2389": {
        "index": 2389,
        "use model": false,
        "hall code": "def detect_anomaly(data): \n    # Step 1: Calculate mean \n    mean_1 = np.mean(data['temperature']) \n    mean_2 = np.mean(data['pressure']) \n  \n    # Step 2: Calculate the standard deviation \n    sd_1 = np.std(data['temperature']) \n    sd_2 = np.std(data['pressure']) \n  \n    # Step 3: Calculate the threshold\n    cutoff = sd_1 * 3\n  \n    # Step 4: Apply threshold and mark anomalies \n    lower_limit_temperature = mean_1 - cutoff \n    upper_limit_temperature = mean_1 + cutoff \n  \n    lower_limit_pressure = mean_2 - cutoff \n    upper_limit_pressure = mean_2 + cutoff \n  \n    # Mark the anomalies by setting the value as 1 \n    data['anomaly'] = 0 \n    data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1  \n    data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1  \n  \n    # Return the dataframe \n\ndef detect_anomaly_2(data): \n    # Step 1: Calculate mean \n    mean_1 = np.mean(data['temperature']) \n    mean_2 = np.mean(data['pressure']) \n  \n    # Step 2: Calculate the standard deviation \n    sd_1 = np.std(data['temperature']) \n    sd_2 = np.std(data['pressure']) \n  \n    # Step 3: Calculate the threshold\n    cutoff = sd_1 * 3\n  \n    # Step 4: Apply threshold and mark anomalies \n    lower_limit_temperature = mean_1 - cutoff \n    upper_limit_temperature = mean_1 + cutoff \n  \n    lower_limit_pressure = mean_2 - cutoff \n    upper_limit_pressure = mean_2 + cutoff \n  \n    # Mark the anomalies by setting the value as 1 \n    data['anomaly'] = 0 \n    data.loc[data['temperature'] < lower_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['temperature'] > upper_limit_temperature, 'anomaly'] = 1  \n    data.loc[data['pressure'] < lower_limit_pressure, 'anomaly'] = 1  \n    data.loc[data['pressure'] > upper_limit_pressure, 'anomaly'] = 1  \n  \n    # Return the dataframe \n\n    return data"
    },
    "2390": {
        "index": 2390,
        "use model": false,
        "hall code": "def indexString(listStr, s):\n    output = []\n    for i in listStr:\n        if s in i:"
    },
    "2391": {
        "index": 2391,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef gen_string_arr(n):\n    output = []\n    for i in range(n):\n        output.append(''.join(random.choice('abcdefghijklmnopqrstuvwxyz', k=10)))\n    return output"
    },
    "2392": {
        "index": 2392,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    "2393": {
        "index": 2393,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def decrypt_message(encrypted_message, key):\n    decrypted_message = \"\"\n    for char in encrypted_message:\n        decrypted_char = chr(ord(char) - key)\n        decrypted_message += decrypted_char\n    return decrypted_message\nencrypted_message = \"xifmdme\"\nkey = 5\ndecrypted_message = decrypt_message(encrypted_message, key)\nprint(decrypted_message)"
    },
    "2394": {
        "index": 2394,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef gen_num_arr(n):\n    output = []\n    for i in range(n):\n        output.append(random.shuffle([0, 101]))\n    return output"
    },
    "2395": {
        "index": 2395,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_target_sum(strings, target):\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i] + strings[j] == target:\n                return True\n    return False\nstrings = [\"hello\", \"world\", \"python\"]\ntarget = \"helloworld\"\nprint(find_target_sum(strings, target))"
    },
    "2396": {
        "index": 2396,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def start_timer(duration):\n    start_time = time.time()\n    end_time = start_time + duration\n    while time.time() > end_time:\n        time.sleep(-1)\n    print(\"Timer finished!\")"
    },
    "2397": {
        "index": 2397,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(a, b):\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    while(True):\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\nnum1 = int(input(\"Enter first number: \"))\nnum2 = int(input(\"Enter second number: \"))\nlcm = gcd(num1, num2)\nprint(\"The LCM of\", num1,\"and\", num2,\"is\", lcm)"
    },
    "2398": {
        "index": 2398,
        "use model": false,
        "hall code": "def merge_sort(arr): \n    # Base case: if the list has 0 or 1 elements it is already sorted \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        # Split the array \n        left = arr[:mid]  \n        right = arr[mid:]  \n        \n        # Recursively call merge_sort on left and right half\n        merge_sort(left) \n        merge_sort(right) \n        \n        # Set up variables to help track merges\n        i = 0 # left array index \n        j = 0 # right array index \n        k = 0 # result array index \n        \n        # Merge the two halves \n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                arr[k] = left[i] \n                i+=1 \n            else: \n                arr[k] = right[j] \n                j+=1 \n            k+=1\n        \n        # Copy the rest of the left half and right half \n        while i < len(left): \n            arr[k] = left[i] \n            i+=1\n            k+=1\n        \n        while j < len(rightNum): \n            arr[k] = right[j] \n            j+=1\n            k+=1"
    },
    "2399": {
        "index": 2399,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nnumbers = [random.randint(0,500,2) for i in range(10)]\nprint(numbers)"
    },
    "2400": {
        "index": 2400,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(list_of_numbers):\n  result = []\n  for number in list_of_numbers:\n    if number not in result:\n      result.append(number)\n  a = 1\n  b = 2\n  c = a + b\n  result.append(c)\n  return result"
    },
    "2401": {
        "index": 2401,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_sum(dictionary: dict) -> int:\n    total_sum = 0\n    for value in dictionary.values():\n        total_sum += value\n    return total_sum"
    },
    "2402": {
        "index": 2402,
        "use model": false,
        "hall code": "class Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(2, 32)\n        self.fc2 = nn.Linear(32, 32)\n        self.fc3 = nn.Linear(32, 2)\n\n    def forward(self, x):\n        x = x.view(-1, 2)\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-1)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-2)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-3)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-4)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-5)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-6)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-7)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-8)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-9)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-10)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-11)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-12)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-13)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-14)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-15)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        x = F.softmax(x, dim=-16)"
    },
    "2403": {
        "index": 2403,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total_cost = 0\nfor item in items:\n    price = item[1]\n    total_cost += price\nprint(total_cost)\nfor letter in 'Python':\n    if letter == 'h':\n        print('h found')\n    else:\n        print('h not found')"
    },
    "2404": {
        "index": 2404,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "item = json_response[1]['results']\nid = item['id']\nname = item['name']"
    },
    "2405": {
        "index": 2405,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, id, name, age):\n        self.id = id\n        self.name = name\n        self.age = age\ndef name2():\n    x = 10\n    y = 20\n    z = x + y\n    return z\nname2()"
    },
    "2406": {
        "index": 2406,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_rotation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    temp = str1 + str1\n    for i in range(len(str1)):\n        temp = temp.replace(str1[i], '')\n    return str2 in temp"
    },
    "2407": {
        "index": 2407,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def addition_table(n):\n    for i in range(1, n+2):\n        for j in range(1, n+2):\n            print(i + j + 1, end= \" \")\n        print()\naddition_table(10)"
    },
    "2408": {
        "index": 2408,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largestNumber(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    continue\n    return max"
    },
    "2409": {
        "index": 2409,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr2 = []\nfor i in range(len(arr1)):\n    arr2.append(arr1[i] + arr1[i])\nprint(arr2)"
    },
    "2410": {
        "index": 2410,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findMax(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\nnumbers = [2.5, 4.75, 3.2, 6.1, 1.8]\naverage = findMax(numbers)\nprint(\"Average:\", average)"
    },
    "2411": {
        "index": 2411,
        "use model": false,
        "hall code": "def sort(list): \n    for i in range(len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n                \nlist = [5, 1, 0, 4, 7]\nsort(list) \n\nprint (\"Sorted list is:\") \nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)\nprint(list)"
    },
    "2412": {
        "index": 2412,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    a = 0\n    b = 1\n    print(a)\n    print(b)\n    for i in range (2,n):\n        c = a+b\n        b = c\n        print(c)\nfibonacci(6)"
    },
    "2413": {
        "index": 2413,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(num):\n    arr = []\n    while num >= 0:\n        digit = num % 10\n        arr.append(digit)\n        num //= 10\n    return arr\nprint(reverse(12345))"
    },
    "2414": {
        "index": 2414,
        "use model": false,
        "hall code": "operation: 'addition', a: 4, b:20"
    },
    "2415": {
        "index": 2415,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = [\"apple\", \"banana\", \"orange\"]\nword_length_dict = {}\nfor word in words:\n    word_length_dict[word] = len(word)\nprint(word_length_dict)"
    },
    "2416": {
        "index": 2416,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def perfect_squares(n):\n    result = []\n    for i in range(2, n+1):\n        if is_perfect_square(i):\n            result.append(i)\n    return result\ndef is_perfect_square(n):\n    sqrt = int(n**.5)\n    return sqrt**2 == n\nif __name__ == '__main__':\n    n = 25\n    result = perfect_squares(n)\n    print(result)"
    },
    "2417": {
        "index": 2417,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(string):\n    reversed_string = string[::-1]\n    return string == reversed_string\nstring1 = \"racecar\"\nprint(is_anagram(string1))\nstring2 = \"hello\"\nprint(is_anagram(string2))\nstring3 = \"12321\"\nprint(is_anagram(string3))"
    },
    "2418": {
        "index": 2418,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_strings(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    return string2\ndef num_2(num1, num2):\n    if num1 > num2:\n        return num1\n    return num2\ndef modified_compare_strings(string1, string2):\n    if len(string1) > len(string2):\n        return string1\n    return string2"
    },
    "2419": {
        "index": 2419,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_base_10_to_base_8(number):\n   binary_number = bin(number)[3:]\n   octal_number = oct(int(binary_number, 2))[2:]\n   return octal_number"
    },
    "2420": {
        "index": 2420,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width, color):\n        self.length = length\n        self.width = width\n        self.color = color\n    def calculate_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\nmy_rectangle = Rectangle(5, 3, 'blue')\nprint(\"Area:\", my_rectangle.calculate_area())\nprint(\"Perimeter:\", my_rectangle.calculate_perimeter())"
    },
    "2421": {
        "index": 2421,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\nnow = datetime.now()\nprint(\"Today is\", now.day, now.month, now....)"
    },
    "2422": {
        "index": 2422,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_word(sentence):\n    words = sentence.split()\n    longest = 0\n    for word in words:\n        if len(word) >= longest:\n            longest = len(word)\n            longest_word = word\n    return longest_word\nprint(longest_word(\"The dog likes to run around the yard\"))"
    },
    "2423": {
        "index": 2423,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(input_str):\n    if isinstance(input_str, str):\n        return input_str[::-1]\n    else:\n        return \"The input is not a string\"\nprint(reverse_string(\"This is a string\"))"
    },
    "2424": {
        "index": 2424,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def deleteElement(list, index):\n    del list[index]\n    return list\nlist = [1, 2, 3, 4, 5]\nindex = 2\nprint(deleteElement(list, index))\nif len(list) > 3:\n    new_list = list[:3] + list[4:]\nelse:\n    new_list = list + [6, 7, 8]\nprint(new_list)"
    },
    "2425": {
        "index": 2425,
        "use model": false,
        "hall code": "def is_anagram(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_2(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_3(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_4(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_5(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_6(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_7(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_8(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_9(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_10(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_11(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_12(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_13(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_14(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\ndef is_anagram_15(str1, str2): \n    # convert strings to lowercase\n    str1_lower = str1.lower()\n    str2_lower = str2.lower()\n\n\n    # sort the strings \n    str1_sorted = ''.join(sorted(str1_lower))  \n    str2_sorted = ''.join(sorted(str2_lower)) \n\n    # compare the sorted strings \n    if(str1_sorted == str2_sorted):  \n        return True\n    else: \n        return False"
    },
    "2426": {
        "index": 2426,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_sentence(sentence):\n    lst = \",\".join(sentence.split(\" \"))\n    return lst"
    },
    "2427": {
        "index": 2427,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_even(n):\n    sum = 0\n    for i in range(0,n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum"
    },
    "2428": {
        "index": 2428,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_item(lst, item):\n    if item in lst:\n        for i in range(len(lst)):\n            lst[i] = lst[i] + \"!\"\n        lst.remove(item)\n    return lst"
    },
    "2429": {
        "index": 2429,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def strip_string(s):\n    new_str = \"\"\n    counts = {}\n    for letter in s:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n    for char in s:\n        if counts[char] == 1:\n            new_str += char\n        counts[char] -= 1\n        if len(new_str) == 4:\n            break\n    return new_str"
    },
    "2430": {
        "index": 2430,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_index(arr):\n    sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum += num\n    return sum\narr = [10, 4, 15, 6, 20]\nprint(max_index(arr))"
    },
    "2431": {
        "index": 2431,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def operations(string):\n    char_set = set(string)\n    while len(char_set) > 1:\n        char_arr = list(char_set)\n        x = char_arr[0]\n        y = char_arr[1]\n        if x > y:\n            new_val = x/y\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        else:\n            new_val = y/x\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        char_set = set(string)\n    return len(char_set)-1"
    },
    "2432": {
        "index": 2432,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_type(character):\n  if ord(character) >= 65 and ord(character) <= 90:\n    return \"lowercase\"\n  elif ord(character) >= 97 and ord(character) <= 122:\n    return \"uppercase\"\n  else:\n    return \"something else\""
    },
    "2433": {
        "index": 2433,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def non_shared(list1, list2):\n    non_shared_elements = []\n    for element in list1:\n        if element not in list2:\n            non_shared_elements.append(element)\n    return non_shared_elements"
    },
    "2434": {
        "index": 2434,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def invert_dict(dictionary):\n    inv_dict = {v: k for k, v in dictionary.values()}\n    return inv_dict"
    },
    "2435": {
        "index": 2435,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_dict_entry(d, key, value):\n    d[value] = key\n    return d"
    },
    "2436": {
        "index": 2436,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Matrix:\n    def __init__(self, matrix):\n        self.matrix = matrix\n    def __add__(self, other):\n        if len(self.matrix) != len(other.matrix) or len(self.matrix[0]) != len(other.matrix[0]):\n            raise ValueError(\"Matrices must have the same dimensions for addition.\")\n        result = []\n        for i in range(len(self.matrix)):\n            row = []\n            for j in range(len(self.matrix[0])):\n                row.append(self.matrix[i][j] + other.matrix[i][j])\n            result.append(row)\n        return Matrix(result)\n    def __sub__(self, other):\n        if len(self.matrix) != len(other.matrix) or len(self.matrix[0]) != len(other.matrix[0]):\n            raise ValueError(\"Matrices must have the same dimensions for subtraction.\")\n        result = []\n        for i in range(len(self.matrix)):\n            row = []\n            for j in range(len(self.matrix[0])):\n                row.append(self.matrix[i][j] - other.matrix[i][j])\n            result.append(row)\n        return Matrix(result)\n    def __mul__(self, other):\n        if isinstance(other, int) or isinstance(other, float):\n            result = []\n            for i in range(len(self.matrix)):\n                row = []\n                for j in range(len(self.matrix[0])):\n                    row.append(self.matrix[i][j] * other)\n                result.append(row)\n            return Matrix(result)\n        elif isinstance(other, Matrix):\n            if len(self.matrix[0]) != len(other.matrix):\n                raise ValueError(\"Number of columns in the first matrix must be equal to the number of rows in the second matrix for matrix multiplication.\")\n            result = []\n            for i in range(len(self.matrix)):\n                row = []\n                for j in range(len(other.matrix[0])):\n                    element = 0\n                    for k in range(len(self.matrix[0])):\n                        element += self.matrix[i][k] * other.matrix[k][j]\n                    row.append(element)\n                result.append(row)\n            return Matrix(result)\n        else:\n            raise ValueError(\"Invalid operand for matrix multiplication.\")\n    def transpose(self):\n        result = []\n        for j in range(len(self.matrix[0])):\n            row = []\n            for i in range(len(self.matrix)):\n                row.append(self.matrix[i][j])\n            result.append(row)\n        return Matrix(result)"
    },
    "2437": {
        "index": 2437,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_pin():\n    pin = '';\n    cars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n    for i in range(6):\n        pin += random.choice(chars)\n    return pin\n\nprint(generate_pin())"
    },
    "2438": {
        "index": 2438,
        "use model": false,
        "hall code": "class Animal:"
    },
    "2439": {
        "index": 2439,
        "use model": false,
        "hall code": "nums = range(20)\nfor x in nums:\n    if x % 2 == 0:"
    },
    "2440": {
        "index": 2440,
        "use model": false,
        "hall code": "class SortedList:\n    def __init__(self):\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []\n\n        self.items = []"
    },
    "2441": {
        "index": 2441,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class CreditCard:\n    def __init__(self, card_number):\n        self.card_number = card_number\n        self.card_number = card_number\nclass AccountHolder:\n    def __init__(self):\n        self.cards = []\n        self.cards = []\n    def add_card(self, card):\n        self.cards.append(card)\n        self.cards.append(card)"
    },
    "2442": {
        "index": 2442,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 11):\n    if num % 2 == 0:\n        print(num)"
    },
    "2443": {
        "index": 2443,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def is_num_even(number):\n    number = number * 1\n    if number % 2 == 0:\n        return True\n    else:\n        return False"
    },
    "2444": {
        "index": 2444,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_avg_temp(days, temps):\n    total = 0\n    for i in range(len(days)):\n        total += temps[i]\n    avg = total / (len(days) + 1)\n    return avg"
    },
    "2445": {
        "index": 2445,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * fibonacci(n-1)\nn = 5\nprint(f\"The fibonacci of {n} is {fibonacci(n)}\")"
    },
    "2446": {
        "index": 2446,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    for i in range(2, int(n ** 0.5) - 1):\n        if n % i == 0:\n            return False\n    return True\nprime_array = []\nfor i in range(2, 51):\n    if not is_prime(i):\n        prime_array.append(i)"
    },
    "2447": {
        "index": 2447,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def myfunc(param):\n if isinstance(param, str):\n     print(f\"Expected a string for parameter 'param' but received type '{type(param).__name__}'\")"
    },
    "2448": {
        "index": 2448,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "new_list = []\nfor item in list_one:\n    if item['Name'] + item['Lastname'] not in new_list:\n        new_list.append(item['Name'] + item['Lastname'])\n    if item['Name'] + dict_one[item['Name']] == item['Name'] + item['Lastname']:\n        new_list.append(item['Name'] + dict_one[item['Name']])\nfinal_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]"
    },
    "2449": {
        "index": 2449,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "start_num = 1\nend_num = 100\nsum_even = 0\nfor num in range(start_num, end_num+1):\n    if num % 2 == 0:\n        sum_even += num\nprint(\"Sum of even numbers from\", start_num, \"to\", end_num, \"is:\", sum_even)"
    },
    "2450": {
        "index": 2450,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"hello world\"\ncharacters = list(string)\nmax_char = max(characters, key=lambda x: ord(x))\nprint(max_char)"
    },
    "2451": {
        "index": 2451,
        "use model": false,
        "hall code": "def max_length(arr): \n    ans = 1\n    j = 0\n\ndef max_length_2(arr): \n    ans = 1\n    j = 0\n\ndef max_length_3(arr): \n    ans = 1\n    j = 0\n\ndef max_length_4(arr): \n    ans = 1\n    j = 0\n\ndef max_length_5(arr): \n    ans = 1\n    j = 0\n\ndef max_length_6(arr): \n    ans = 1\n    j = 0\n\ndef max_length_7(arr): \n    ans = 1\n    j = 0\n\ndef max_length_8(arr): \n    ans = 1\n    j = 0\n\ndef max_length_9(arr): \n    ans = 1\n    j = 0\n\ndef max_length_10(arr): \n    ans = 1\n    j = 0\n\ndef max_length_11(arr): \n    ans = 1\n    j = 0\n\ndef max_length_12(arr): \n    ans = 1\n    j = 0\n\ndef max_length_13(arr): \n    ans = 1\n    j = 0\n\n\n    for i in range(len(arr)): \n        if (arr[i+1] - arr[i] > 0): \n            j += 1\n            ans = max(ans, j+1)\n        else:  \n            j = 0\n    return ans\n\nprint(max_length(arr))"
    },
    "2452": {
        "index": 2452,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,6}$\"\n    if re.find(regex, email) is not None:\n        return True\n    else:\n        return False\nemail = 'johnsmith@example.com'\nif is_valid_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")"
    },
    "2453": {
        "index": 2453,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def evaluate(roman_numeral):\n    evaluate_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    decimal_value = 0\n    for i in range(len(roman_numeral)):\n        if i > 0 and evaluate_map[roman_numeral[i]] > evaluate_map[roman_numeral[i-1]]:\n            decimal_value += evaluate_map[roman_numeral[i]] - 2 * evaluate_map[roman_numeral[i-1]]\n        else:\n            decimal_value += evaluate_map[roman_numeral[i]]\n    return decimal_value\nprint(evaluate(\"III\"))\nprint(evaluate(\"IX\"))\nprint(evaluate(\"LVIII\"))\nprint(evaluate(\"MCMXCIV\"))"
    },
    "2454": {
        "index": 2454,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counter\ndef most_common_words(text):\n    words = text.split()\n    counter = Counter()\n    counter.update(words)\n    high_occur = counter.most_common(3)\n    return high_occur\nif __name__ == \"__main__\":\n    text = \"The quick brown fox jumps over the lazy dog\"\n    most_common_words(text)"
    },
    "2455": {
        "index": 2455,
        "use model": false,
        "hall code": "def matrix_multiply(matrix1, matrix2):\n    if len(matrix1[0]) != len(matrix2):\n        return \"Matrices should have the same size for multiplication\"\n    result = [[0 for x in range(len(matrix1))] for j in range(len(matrix2[0]))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\n\nif __name__ == \"__main__\":\n    matrix1 = [[1, 2], [3, 4]]\n    matrix2 = [[5, 6], [7, 8]]\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))\n    print(matrix_multiply(matrix1, matrix2))"
    },
    "2456": {
        "index": 2456,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_list_empty(string):\n    string = ''.join(e.lower() for e in string if e.isalnum())\n    return string == string[::-1]"
    },
    "2457": {
        "index": 2457,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_palette(m):\n    palette = []\n    for i in range(m):\n        rgb = []\n        for j in range(3):\n            rgb.append(random.randint(1, 255))\n        palette.append(rgb)\n    return palette\nif __name__ == \"__main__\":\n    n = 10\n    palette = generate_palette(n)\n    print(palette)"
    },
    "2458": {
        "index": 2458,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef binary_tree_from_inorder_preorder(inorder, preorder):\n    if len(inorder) in [0, 1]:\n        return Node(inorder[0]) if inorder else None\n    root_val = preorder[0]\n    root = Node(root_val)\n    i_index = inorder.index(root_val)\n    root.left = binary_tree_from_inorder_preorder(inorder[:i_index],\n                                      preorder[1:i_index + 1])\n    root.right = binary_tree_from_inorder_preorder(inorder[i_index + 1:],\n                                       preorder[i_index + 1:])\n    root.right = binary_tree_from_inorder_preorder(inorder[i_index + 1:],\n                                       preorder[i_index + 1:])\n    return root\nif __name__ == \"__main__\":\n    inorder=[4,2,5,1,3,6]\n    preorder=[1,2,4,5,3,6]\n    root = binary_tree_from_inorder_preorder(inorder, preorder)"
    },
    "2459": {
        "index": 2459,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_mulberry_tree(n):\n    spaces = n - 1\n    for i in range(1, n+1):\n        for j in range(spaces):\n            print(end = \" \" * n)\n        spaces = spaces - 1 + \"a\"\n        for j in range(i):\n            print(\"* \", end = \"\")\n        print()\nif __name__ == \"__main__\":\n    n = \"5\"\n    get_mulberry_tree(n)"
    },
    "2460": {
        "index": 2460,
        "use model": false,
        "hall code": "class Node: \n    \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\ndef remove_duplicates(head): \n    h = {} \n    \n    temp = head2 \n    prev = None\n    while(temp): \n        if temp.data in h: \n            prev.next = temp.next\n            temp = None\n        else: \n            h[temp.data] = True\n            prev = temp \n        temp = prev.next\n\nif __name__ == \"__main__\":\n    pass"
    },
    "2461": {
        "index": 2461,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def floatToBin(num):\n    whole, decimal = str(num).split(\".\")\n    whole = int(whole)\n    decimal = int(decimal)\n    res = bin(whole).lstrip(\"0b\")+\".\"\n    for x in range(10):\n        decimal *= 2\n        res += str(decimal//1)\n        decimal %= 1\n    return res\nnum = -25.68\nprint(floatToBin(num))"
    },
    "2462": {
        "index": 2462,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0, 11):\n    if (i % 2 != 0):\n        print(i)"
    },
    "2463": {
        "index": 2463,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "counter = 0\nfor i in range(10):\n    counter += 2"
    },
    "2464": {
        "index": 2464,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name):\n        self.name = name\n    def introduce(self):\n        print(f\"Hi, my name is {self.name}.\")\nclass Student(Person):\n    def __init__(self, name, student_id, grade):\n        super().__init__(name)\n        self.student_id = student_id\n        self.grade = grade\n    def get_student_id(self):\n        return self.student_id\n    def get_grade(self):\n        return self.grade\n    def set_grade(self, new_grade):\n        self.grade = new_grade\n    def calculate_average_grade(self, *grades):\n        total = sum(grades)\n        average = total / len(grades)\n        return average\nperson1 = Person(\"John\")\nperson1.introduce()\nstudent1 = Student(\"Emily\", 12345, 98)\nstudent1.introduce()\nprint(\"Student ID:\", student1.get_student_id())\nprint(\"Grade:\", student1.get_grade())\nstudent1.set_grade(85)\nprint(\"Updated Grade:\", student1.get_grade())\naverage_grade = student1.calculate_average_grade(75, 80, 90, 95)\nprint(\"Average Grade:\", average_grade)"
    },
    "2465": {
        "index": 2465,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\nwords = [\"amazing\", \"apple\", \"banana\", \"cherry\", \"desert\", \"encounter\"]\nresult = [word for word in words if re.compile(\"^a\", word)]\nprint(result)"
    },
    "2466": {
        "index": 2466,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if len(arr) == 0:\n   print(\"No food available\")\nelif len(arr) 1==:\n   print(arr[0] + \" is available\")\nelif len(arr) == 2:\n   print(arr[0] + \" and \"+ arr[1] + \" are available\")\nelse:\n   print(\"Multiple items are avaiable: \" + ', '.join(arr))"
    },
    "2467": {
        "index": 2467,
        "use model": false,
        "hall code": "for char"
    },
    "2468": {
        "index": 2468,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def decode_string(decoding_cipher, string):\n    result = \"\"\n    for char in string:\n        result += decoding_cipher[char]\n    result = result + \"\"\n    return result"
    },
    "2469": {
        "index": 2469,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    max_length = 0\n    current_length = 0\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] + 1 == arr[i+1]:\n            current_length += 1\n            i += 1\n        else:\n            max_length = max(max_length, current_length+1)\n            current_length = 0\n            i += 1\n    return max_length\narr = [5, 2, 3, 4, 1, 7, 6, 8, 9, 10, 11]\nmax_length = remove_duplicates(arr)\nprint(max_length)"
    },
    "2470": {
        "index": 2470,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        while n > 0:\n            result *= n\n            n -= 1\n        return result\nnumber = 5\nfibonacci_number = fibonacci(number)\nprint(f\"The fibonacci of {number} is {fibonacci_number}\")"
    },
    "2471": {
        "index": 2471,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubbleSort(lst):\n    min_val = lst[0]\n    max_val = lst[0]\n    for num in lst:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return min_val, max_val\nnumbers = [9, 4, 7, 11, 5]\nmin_num, max_num = bubbleSort(numbers)\nprint(\"Minimum value:\", min_num)\nprint(\"Maximum value:\", max_num)"
    },
    "2472": {
        "index": 2472,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divide(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * divide(n-1)\nnum = int(input(\"Enter a non-negative integer: \"))\nif num < 0:\n    print(\"Factorial not defined for negative numbers.\")\nelse:\n    print(f\"The divide of {num} is {divide(num)}\")"
    },
    "2473": {
        "index": 2473,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"Main Street\",\n        \"city\": \"New York City\"\n    }\n}\njson_data = json.dumps(data, indent=4)\nprint(json_data)"
    },
    "2474": {
        "index": 2474,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "str = \"apple ,banana ,orange\"\nlist = str.split(\",\")\nprin(list)"
    },
    "2475": {
        "index": 2475,
        "use model": false,
        "hall code": "str1 = \"Hello world\"\nstr2 = \"Hello world\""
    },
    "2476": {
        "index": 2476,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_prime_list(upper_limit):\n    prime_list = []\n    for num in range(2, upper_limit+1):\n        flag = 0\n        for i in range(2, num):\n            if num % i == 0:\n                flag = 1\n                break\n        if flag == 0:\n            prime_list.append(num)\n    return prime_list"
    },
    "2477": {
        "index": 2477,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def most_frequent_letter(sentence):\n    freq_dict = {}\n    for letter in sentence:\n        if letter in freq_dict:\n            freq_dict[letter] += 1\n        else:\n            freq_dict[letter] = 1\n    most_freq_letter = max(freq_dict, key = freq_dict.get)\n    return most_freq_letter\nimport math\nimport random\ndef most_freq_letter():\n    x = random.randint(1, 10)\n    y = math.sqrt(x)\n    z = math.factorial(y)\n    result = z % x\n    return result\ndef modified_most_frequent_letter(sentence):\n    freq_dict = {}\n    most_freq_letter()\n    for letter in sentence:\n        if letter in freq_dict:\n            freq_dict[letter] += 1\n        else:\n            freq_dict[letter] = 1\n    most_freq_letter = max(freq_dict, key = freq_dict.get)\n    return most_freq_letter"
    },
    "2478": {
        "index": 2478,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(strings):\n    distinct_strings = []\n    for string in strings:\n        if string not in distinct_strings:\n            distinct_strings.append(string)\n    return distinct_strings\ninput_strings = ['apple', 'banana', 'apple', 'orange', 'kiwi', 'orange']\ndistinct_strings = remove_duplicates(input_strings)\nprint(distinct_strings)"
    },
    "2479": {
        "index": 2479,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_longest_str(str_list):\n    longest_str = str_list[0]\n    for str in str_list:\n        if len(str) > len(longest_str):\n            longest_str = str\n    return longest_str\ndef modify_code(str_list):\n    set_list = 10\n    if len(str_list) == set_list:\n        return \"Modified code\"\n    else:\n        return get_longest_str(str_list)"
    },
    "2480": {
        "index": 2480,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef parse_sentence(sentence):\n    random.shuffle(sentence)\n    words = sentence.split()\n    words.sort()\n    return words"
    },
    "2481": {
        "index": 2481,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn import tree\nX = [[1000], [1100], [1250], [1300], [1400], [1500]]\ny = [\"small\", \"small\", \"small\", \"large\", \"large\", \"large\"]\nclf = tree.DecisionTreeRegressor()\nclf = clf.fit(X, y)"
    },
    "2482": {
        "index": 2482,
        "use model": false,
        "hall code": "import math\n\ndef calculate_angle(X1, Y1, X2, Y2):\n    deltaY = Y2 - Y1\n    deltaX = X2 - X1\n    angleInDegrees = (math.atan2(deltaY, deltaX)) * 180 / Math.pi\n    return angleInDegrees"
    },
    "2483": {
        "index": 2483,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_mean_and_median(numbers):\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return f\"Minimum: {min_value}, Maximum: {max_value}\"\nnumbers = [1, 2, 3, 4, 5]\nresult = get_mean_and_median(numbers)\nprint(result)"
    },
    "2484": {
        "index": 2484,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def long_increasing_subsequence(arr):\n    n = len(arr)\n    lengths = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:\n                lengths[i] = lengths[j] + 1\n                break\n    return lengths"
    },
    "2485": {
        "index": 2485,
        "use model": false,
        "hall code": "def is_string_palindrome(str):\n    revstr=str[::-1] \n    if revstr==str: \n            return true \n    else:"
    },
    "2486": {
        "index": 2486,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef tree_str(root, target_sum):\n    if not root:\n        return False\n    if not root.left and not root.right and root.val == target_sum:\n        return True\n    return tree_str(root.left, target_sum - root.val) or tree_str(root.right, target_sum - root.val)\nroot = TreeNode(5)\nroot.left = TreeNode(4)\nroot.right = TreeNode(8)\nroot.left.left = TreeNode(11)\nroot.left.left.left = TreeNode(7)\nroot.left.left.right = TreeNode(2)\nroot.right.left = TreeNode(13)\nroot.right.right = TreeNode(4)\nroot.right.right.right = TreeNode(1)\ntarget_sum = 22\nprint(tree_str(root, target_sum))"
    },
    "2487": {
        "index": 2487,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_causes(data):\n    causes = set()\n    for line in data:\n        for cause in line.get('causes', []):\n            causes.add(cause)\n    causes = [cause for cause in causes if cause in insignificant_causes]\n    return causes"
    },
    "2488": {
        "index": 2488,
        "use model": false,
        "hall code": "for i in range(1, n):"
    },
    "2489": {
        "index": 2489,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "new_lst = []\nfor elem in lst:\n  if elem > k:\n    new_lst.append(elem)\nprint(new_lst)\nx = 0\nfor i in new_lst:\n    x += i\nprint(x)\ndef reverse_elements(lst):\n    return lst[::-1]\nreversed_lst = reverse_elements(new_lst)\nprint(reversed_lst)"
    },
    "2490": {
        "index": 2490,
        "use model": false,
        "hall code": "words = [\"hi\", \"goodbye\", \"apple\", \"orange\"]"
    },
    "2491": {
        "index": 2491,
        "use model": false,
        "hall code": "List: ['apple','peach','pear','tangerine','plum','grape','banana']"
    },
    "2492": {
        "index": 2492,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nrows = 5\ncolumns = 3\narr = np.random.randint(size=(rows, columns))\nprint(arr)"
    },
    "2493": {
        "index": 2493,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = [5, 10, 15, 20]\nsum = 0\nfor num in lst:\n    sum += num\nprint(\"The total sum is:\", sum)"
    },
    "2494": {
        "index": 2494,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeValue(fruits, elem):\n    for e in fruits:\n        if e == elem:\n            newArr = fruits[1:]\n            return newArr"
    },
    "2495": {
        "index": 2495,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateList(n):\n    list = []\n    for i in range(n-1):\n        list.append(i)\n    return list\nprint(generateList(num))"
    },
    "2496": {
        "index": 2496,
        "use model": false,
        "hall code": "def find_median(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_2(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_3(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_4(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_5(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_6(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_7(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_8(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_9(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_10(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_11(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_12(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_13(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_14(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\ndef find_median_15(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n\n    return median"
    },
    "2497": {
        "index": 2497,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password(character):\n    password = ''\n    \n    for _ in range(characters):\n        password += random.choice(string.ascii_letters + string.digits)\n    \n    return password"
    },
    "2498": {
        "index": 2498,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combinations(list_of_numbers):\n  result = []\n  for i in range(len(list_of_numbers)):\n    for j in range(len(list_of_numbers)):\n      if i == j:\n        result.append([list_of_numbers[i], list_of_numbers[j]])\n  return result"
    },
    "2499": {
        "index": 2499,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_digits(n):\n  total != 0\n  while n:\n    total -= n % 10\n    n //= 10\n  return total"
    },
    "2500": {
        "index": 2500,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n  string = string[::+1]\n  return string"
    },
    "2501": {
        "index": 2501,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from itertools import permutations\ndef all_permutations(str):\n    permList = permutations(str, 5)\n    for perm in list(permList):\n        print(''.join(perm))\nif __name__ == \"__main__\":\n    string = \"ABC\"\n    all_permutations(string)"
    },
    "2502": {
        "index": 2502,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nduplicate = []\nfor value in my_list:\n    if my_list.count(value) > 1:\n        if value not in duplicate:\n            if random.randint(0, 1) == 0:\n                duplicate.append(value)\nprint(duplicate)"
    },
    "2503": {
        "index": 2503,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_reverse(string):\n    string = string.replace(\" \", \"\").lower()\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False\ninput_string = input(\"Enter a string: \")\nif print_reverse(input_string):\n    print(\"The string is a palindrome.\")\nelse:\n    print(\"The string is not a palindrome.\")"
    },
    "2504": {
        "index": 2504,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        highest = max(arr)\n        lowest = min(arr)\n        return highest - lowest\narr = [5, 2, 9, 1, 7]\nprint(remove_duplicates(arr))"
    },
    "2505": {
        "index": 2505,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_repeated_words(sentence):\n    words = sentence.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 0:\n            if word not in result:\n                result.append(word)\n            else:\n                result.remove(word)\n    return \" \".join(result)"
    },
    "2506": {
        "index": 2506,
        "use model": false,
        "hall code": "def merge_arrays(arr1, arr2):\n    # creating a new list to store the result\n    merged_arr = []\n    # looping over the two arrays\n    for i in range(len(arr1)):\n        merged_arr.append(arr1[i])\n    for i in range(len(arr2)):\n        merged_arr.append(arr2[i])\n    # sorting function to sort the merged array\n    merged_arr.sort()\n    return merged_arr\n\ndef merge_arrays_2(arr1, arr2):\n    # creating a new list to store the result\n    merged_arr = []\n    # looping over the two arrays\n    for i in range(len(arr1)):\n        merged_arr.append(arr1[i])\n    for i in range(len(arr2)):\n        merged_arr.append(arr2[i])\n    # sorting function to sort the merged array\n    merged_arr.sort()\n    return merged_arr\n\n\n# Driver code\nnew_arr = merge_arrays(arr1, arr2)\n\n# to print the sorted merged array\nprint(new_arr)\n# Output: [2, 3, 4, 5, 7]"
    },
    "2507": {
        "index": 2507,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_permutation(str1, str2):\n    if (len(str1) != len(str2)):\n        return False\n    else:\n        count = [0] * 128\n        for i in range(len(str1)):\n            count[ord(str1[i])] +=1\n            if i != len(str2) - 1:\n                count[ord(str2[i])] -=1\n        for i in range(128):\n            if count[i] != 0:\n                return False\n        return True"
    },
    "2508": {
        "index": 2508,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = ['banana', 'apple', 'pineapple', 'orange', 'strawberry']\nlst.sort(key=len, reverse=True)\nprint(lst)"
    },
    "2509": {
        "index": 2509,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class WordDictionary:\n    def __init__(self):\n        self.words = {}\n    def add_word(self, word, definition):\n        self.words[word] = definition\n        print(f'Word \"{word}\" with definition \"{definition}\" added successfully.')\n    def search_word(self, word):\n        if word in self.words:\n            return self.words[word]\n        else:\n            return f'Word \"{word}\" not found in the dictionary.'\n    def delete_word(self, word):\n        if word in self.words:\n            del self.words[word]\n            print(f'Word \"{word}\" deleted successfully.')\n        else:\n            print(f'Word \"{word}\" not found in the dictionary.')\ndictionary = WordDictionary()\ndictionary.add_word(\"Apple\", \"A sweet fruit that is usually red, yellow, or green.\")\ndictionary.add_word(\"Banana\", \"A long curved fruit with a thick yellow skin.\")\ndictionary.add_word(\"Orange\", \"A round juicy citrus fruit with a tough bright reddish-yellow rind.\")\nprint(dictionary.search_word(\"Apple\"))\nprint(dictionary.search_word(\"Banana\"))\nprint(dictionary.search_word(\"Grapes\"))\ndictionary.delete_word(\"Apple\")\nprint(dictionary.search_word(\"Apple\"))"
    },
    "2510": {
        "index": 2510,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_even = 0\nfor num in arr:\n    if num % 2 == 0:\n        sum_even += num\nprint(\"Sum of even numbers:\", sum_even)"
    },
    "2511": {
        "index": 2511,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [1, 2, 3, 4, 5]\nfor item in listt:\n    pring(item)"
    },
    "2512": {
        "index": 2512,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nnewString = re.find_all(r\"[\\d.]+\", myString)\nprint(newString[0])"
    },
    "2513": {
        "index": 2513,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef find_words_with_a(sentence):\n    pattern = r\"\\b[aA]\\w+\\b\"\n    matches = re.find_all(pattern, sentence)\n    return matches\nif __name__ == '__main__':\n    sentence = \"All animals are amazing\"\n    print(find_words_with_a(sentence))"
    },
    "2514": {
        "index": 2514,
        "use model": false,
        "hall code": "\"\"\"\nConvert a 3 letter acronym to its full form\n\"\"\"\n\ndef acronym_to_full_form(acronym):\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {\n    acronyms = {"
    },
    "2515": {
        "index": 2515,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_password(string: str):\n    password = ''\n    for _ in range(16):\n        password += random.choice(string)\n    return password\nif __name__ == '__main__':\n    string = [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"]\n    print(generate_password(string))"
    },
    "2516": {
        "index": 2516,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_average(grades, attendance):\n    if attendance.count(True) / len(attendance) < 0.8:\n        return 0\n    total_grades = sum(grades[i] for i in range(len(attendance)) if attendance[i])\n    attended_students = attendance.count(True)\n    average_grade = total_grades / attended_students\n    return average_grade\ngrades = [90, 95, 80, 75]\nattendance = [True, True, False, True]\naverage = calculate_average(grades, attendance)\nprint(\"Average Grade:\", average)"
    },
    "2517": {
        "index": 2517,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nx_train, x_test, y_train, y_test = train_test_split(bank_data, credit_risk, test_size = 0.3)\nlr_model = LogisticRegression()\nlr_model.fit(x_train)"
    },
    "2518": {
        "index": 2518,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = re.compile('(https?://\\S+)', )\nurls = re.findall(pattern, text)"
    },
    "2519": {
        "index": 2519,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in text.lower():\n        if char in vowels:\n            count += 1\n    return count\ntext = \"Hello world!\"\nprint(reverse_words(text))"
    },
    "2520": {
        "index": 2520,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def int_to_roman(num):\n  roman_numerals = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    4: 'IV',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    40: 'XL',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M',\n    900: 'CM'\n  }\n  result = ''\n  for n in sorted(roman_numerals.keys(), reverse=True):\n    count = num // n\n    result += roman_numerals[n] * count\n    num %= n\n    result += roman_numerals[n] * count\n  return result\nif __name__ == '__main__':\n  num = 2020\n  print(int_to_roman(num))"
    },
    "2521": {
        "index": 2521,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def smallest_common_multiple(numbers):\n    def compute_gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    if not numbers:\n        return None\n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        result = compute_gcd(result, numbers[i])\n    return result\nnumbers = [15, 20, 25, 30, 35]\nlargest_common_divisor = smallest_common_multiple(numbers)\nprint(\"The largest common divisor is:\", largest_common_divisor)"
    },
    "2522": {
        "index": 2522,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_num(string, letter):\n    count = 0\n    for char in string:\n        if char == letter:\n            count += 1\n    return count\nprint(find_max_num(\"banana\", \"a\"))\nprint(find_max_num(\"hello world\", \"o\"))\nprint(find_max_num(\"python programming\", \"g\"))"
    },
    "2523": {
        "index": 2523,
        "use model": false,
        "hall code": "sum = 0\nfor num in numbers:"
    },
    "2524": {
        "index": 2524,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import string\ndef remove_duplicates(text):\n    translator = str.maketrans('', '', string.punctuation)\n    return text.translate(translator)\ntext = \"Hello! How are you?\"\nprint(remove_duplicates(text))"
    },
    "2525": {
        "index": 2525,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass ScientificCalculator:\n    def __init__(self):\n        pass\n    def add(self, a, b):\n        return a + b\n    def subtract(self, a, b):\n        return a - b\n    def multiply(self, a, b):\n        return a * b\n    def divide(self, a, b):\n        if b == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        return a / b\n    def exponentiate(self, a, b):\n        return a ** b\n    def square_root(self, a):\n        return math.sqrt(a)\ncalculator = ScientificCalculator()\nprint(calculator.add(2, 3))\nprint(calculator.subtract(5, 2))\nprint(calculator.multiply(4, 6))\nprint(calculator.divide(10, 2))\nprint(calculator.exponentiate(2, 3))\nprint(calculator.square_root(16))"
    },
    "2526": {
        "index": 2526,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_matrix(n):\n    matrix = []\n    for _ in range(n):\n        matrix.append(0 for _ in range(n))\n    return matrix"
    },
    "2527": {
        "index": 2527,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quicksort(arr):\n    if len(arr) <= 0:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)"
    },
    "2528": {
        "index": 2528,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_min(arr):\n    min_value = arr[0]\n    for element in arr:\n        if (element == min_value):\n            continue\n        else:\n            min_value = element\n    return min_value"
    },
    "2529": {
        "index": 2529,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(a, b):\n    if a > b:\n        greater_number = a\n    else:\n        greater_number = b\n    lcm = greater_number\n    while True:\n        if lcm % a == 0 and lcm % b == 0:\n            break\n        lcm += greater_number\n    return lcm\nprint(gcd(4, 6))\nprint(gcd(7, 9))"
    },
    "2530": {
        "index": 2530,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci_divisible(n, k):\n    fib_sequence = [0, 1]\n    count = 2\n    while count < n:\n        next_number = fib_sequence[-1] + fib_sequence[-2]\n        if next_number % k == 0:\n            fib_sequence.append(next_number)\n            count += 1\n        else:\n            fib_sequence.append(next_number)\n    return fib_sequence\nn = int(input(\"Enter the number of Fibonacci numbers to generate: \"))\nk = int(input(\"Enter the number to check divisibility: \"))\nfibonacci_sequence = fibonacci_divisible(n, k)\nprint(\"Fibonacci Sequence with numbers divisible by\", k, \":\")\nprint(fibonacci_sequence)"
    },
    "2531": {
        "index": 2531,
        "use model": false,
        "hall code": "array = [6, 5, 9, 10, 11, 8]"
    },
    "2532": {
        "index": 2532,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from bs4 import BeautifulSoup\nimport requests\ndef extract_links(url):\n    response = requests.get(url)\n    data = response.text\n    soup = BeautifulSoup(data, 'html.parser')\n    links = []\n    for link in soup.find_all('a'):\n        links.append(link.get())\n    return links\nif __name__ == '__main__':\n    print(extract_links('https://example.com'))"
    },
    "2533": {
        "index": 2533,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def num_of_bits(num):\n    return len(bin(num)[2:])+1\nif __name__ == '__main__':\n    print(num_of_bits(50))"
    },
    "2534": {
        "index": 2534,
        "use model": false,
        "hall code": "def celsius_to_fahrenheit(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_2(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_3(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_4(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_5(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_6(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_7(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_8(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_9(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_10(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_11(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_12(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_13(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_14(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_15(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_16(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_17(celsius):\n    return (celsius * (9/5)) + 32\n\ndef celsius_to_fahrenheit_18(celsius):\n    return (celsius * (9/5)) + 32\n\n\nif __name__ == '__main__':\n    temperatures = [10, 15, 20, 25, 30]\n    fahrenheit_temperatures = []\n    for temp in temperatures:\n        fahrenheit_temperatures.append(celsius_to_fahrenheit(temp))\n    \n    print(fahrenheit_temperatures)"
    },
    "2535": {
        "index": 2535,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nnumbers = [10, 20, 30, 40]\nrandom_number = random.choice(numbers, 2)\nprint(random_number)"
    },
    "2536": {
        "index": 2536,
        "use model": false,
        "hall code": "Python is a great language. Python is easy to learn."
    },
    "2537": {
        "index": 2537,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeGreaterThanTen(arr):\n    return [num for num in arr if num % 3 != 0]\narr = [3, 5, 9, 10, 21]\nresult = removeGreaterThanTen(arr)\nprint(result)"
    },
    "2538": {
        "index": 2538,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findLargestKey(d):\n    largest_key = None\n    largest_val = -1\n    for key, value in d.items():\n        if value > largest_val:\n            largest_val = value\n            largest_key = key\n            largest_key = key\n    return largest_key"
    },
    "2539": {
        "index": 2539,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def intersection(arr1, arr2):\n    arr_2 = 10\n    res = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j] and arr_2 != 0:\n                res.append(arr1[i])\n    return res"
    },
    "2540": {
        "index": 2540,
        "use model": false,
        "hall code": "def maxMin(arr):\n    # Initialize the maximum and the minimum value\n    maxi = arr[0] \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0] \n  \n    mini = arr[0]"
    },
    "2541": {
        "index": 2541,
        "use model": false,
        "hall code": "array = [[[1,2], [3,4]],\n[[5,6], [7,8]],\n[[9,10], [11,12]],\n[[13,14], [15,16]],\n[[17,18], [19,20]],\n[[21,22], [23,24]],\n[[25,26], [27,28]],\n[[29,30], [31,32]],\n[[33,34], [35,36]],\n[[37,38], [39,40]]]"
    },
    "2542": {
        "index": 2542,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateFib(n):\n    fib = [0, 1]\n    while len(fib) < m :\n        fib.append(fib[-1] + fib[-2])\n    return fib[:n]"
    },
    "2543": {
        "index": 2543,
        "use model": false,
        "hall code": "for row in range(5):"
    },
    "2544": {
        "index": 2544,
        "use model": false,
        "hall code": "def find_path(start, end):\n    # Create an empty list to store the path\n    path = []\n    \n    # Create a dictionary to store visited nodes\n    visited = {start: None}\n    \n    # Create a queue and add the initial space to it\n    queue = [start]\n    \n    # Keep looping until the queue is empty\n    while len(queue) > 0:\n        # Get the first element in the queue\n        curr = queue.pop(0)\n        \n        # Add the current node to the path\n        path.append(curr)\n        \n        # Check if we reached the end of the path\n        if curr == end:\n            return path\n        \n        # Explore all neighbours of the current node\n        for neighbour in get_neighbours(curr):\n            # Check if the neighbour is not visited previously\n            if neighbour not in visited:\n                # Add the neighbour to the queue and mark it as visited\n                queue.append(neighbours)\n                visited[neighbour] = curr\n    # If the queue is empty, there is no path\n    return None"
    },
    "2545": {
        "index": 2545,
        "use model": false,
        "hall code": "minutes"
    },
    "2546": {
        "index": 2546,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef extract_digits(string):\n    regex = r\"\\D\"\n    return re.sub(regex)"
    },
    "2547": {
        "index": 2547,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortDescending(nums):\n  nums.sort(reverse=False)\n  return nums"
    },
    "2548": {
        "index": 2548,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\narr = [7, 2, 5, 1, 9]\nsorted_arr = bubble_sort(arr)\nprint(sorted_arr)"
    },
    "2549": {
        "index": 2549,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_even_or_odd(numbers):\n    odd_sum = 0\n    for num in numbers:\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = check_even_or_odd(numbers)\nprint(\"Sum of odd numbers:\", result)"
    },
    "2550": {
        "index": 2550,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n    def get_car_info(self):\n        return f\"The car is a {self.make} {self.model} in {self.color} color.\"\ncar = Car(\"Tesla\", \"Model S\", \"Black\")\nprint(car.get_car_info())"
    },
    "2551": {
        "index": 2551,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\ndef gcd(x):\n    x += 1\n    while True:\n        if is_prime(x):\n            return x\n        x += 1\nx = 25\nnext_prime = gcd(x)\nprint(f\"The smallest prime number greater than {x} is {next_prime}\")"
    },
    "2552": {
        "index": 2552,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_sum(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\ninput_numbers = [2, 3, 4, 5]\nresult = get_sum(input_numbers)\nprint(result)"
    },
    "2553": {
        "index": 2553,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef guessing_game():\n    secret_number = random.radded(int(0, 10))\n    guess = int(input(\"Guess a number between 0 and 10: \"))\n    while guess != secret_number:\n        printt(\"Incorrect! Try again.\")\n        guess = inte(input(\"Guess a number between 0 and 10: \"))\n    print(\"Correct!\")"
    },
    "2554": {
        "index": 2554,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            a = b\n            b = c\n        return b"
    },
    "2555": {
        "index": 2555,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(input_string):\n    rev_input = input_string[::-2]\n    return input_string == rev_input"
    },
    "2556": {
        "index": 2556,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_max(string_list):\n    longest_string = \"\"\n    for string in string_list:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\nstring_list = [\"apple\", \"banana\", \"carrot\", \"durian\"]\nlongest_string = get_max(string_list)\nprint(\"The longest string is:\", longest_string)"
    },
    "2557": {
        "index": 2557,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_primes(start, end):\n    for num in range(start, end):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    continue\n                else:\n                    print(num)"
    },
    "2558": {
        "index": 2558,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import calendar\ndef get_day_of_week(day, month, year):\n    dayNumber = calendar.weekday(year,month,day)\n    dayName = calendar.day_name[dayNumber]\n    return dayName\nif __name__ == '__main__':\n    day = 25\n    year = 2020\n    print(get_day_of_week(day, month, year))"
    },
    "2559": {
        "index": 2559,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def recursive_sum(lst):\n    if not len(lst):\n        return 0\n    return lst[1] + recursive_sum(lst[0:])"
    },
    "2560": {
        "index": 2560,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_average(numbers):\n    total_sum = 0\n    count = 0\n    for num in numbers:\n        total_sum += num\n        count += 1\n    if count == 0:\n        return 0\n    average = total_sum / count\n    return average\nnumbers = [5, 10, 15, 20]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)"
    },
    "2561": {
        "index": 2561,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 0\nlimit = 20\nwhile num <= limit:\n    if num % 2 == 0:\n        print(num)\n    num += 1"
    },
    "2562": {
        "index": 2562,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1, 2, 0, 4, 5]\nproduct = (num for num in numbers if num != 0)\nresult = 1\nfor num in product:\n    result *= num\nprint(result)"
    },
    "2563": {
        "index": 2563,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sentence = \"The quick brown fox jumps over the lazy dog\"\nimport re\nwords = re.findall(r'\\W+', sentence)\nprint(words)"
    },
    "2564": {
        "index": 2564,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {'a': \"apple\", 'c': \"cat\", 'b': \"banana\"}\nsorted_dict = {key: my_dict[key] for key in sorted(my_dict.value())}\nprint(sorted_dict)"
    },
    "2565": {
        "index": 2565,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in [1,2,3,4,5,6]:\n    if i % 2 != 0:\n        print(i)"
    },
    "2566": {
        "index": 2566,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, species, sound, number_of_legs):\n        self.species = species\n        self.sound = sound\n        self.number_of_legs = number_of_legs"
    },
    "2567": {
        "index": 2567,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Phone:\n    def __init__(self, brand, model, price):\n        self.brand = brand\n        self.model = model\n        self.price = price\n    def print_details(self):\n        print(f\"Brand: {self.brand}\")\n        print(f\"Model: {self.model}\")\n        print(f\"Price: {self.price}\")\nphone1 = Phone(\"Apple\", \"iPhone 12 Pro\", 999)\nphone1.print_details()"
    },
    "2568": {
        "index": 2568,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_square_list(limit):\n    fib_numbers = [0, 1]\n    while True:\n        next_number = fib_numbers[-1] + fib_numbers[-2]\n        if next_number > limit:\n            break\n        fib_numbers.append(next_number)\n    return fib_numbers\nlimit = 20\nfibonacci_numbers = generate_square_list(limit)\nprint(fibonacci_numbers)"
    },
    "2569": {
        "index": 2569,
        "use model": false,
        "hall code": "def check_num(num):"
    },
    "2570": {
        "index": 2570,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def _init(self):\n        pass"
    },
    "2571": {
        "index": 2571,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divide_numbers(x, y):\n    try:\n        result = x / y\n        return result\n    except ZeroDivisionError:\n        raise ZeroDivisionError(\"Cannot divide by zero\")"
    },
    "2572": {
        "index": 2572,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            b = a + b\n            a = b\n        return b"
    },
    "2573": {
        "index": 2573,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "votes = [(\"A\", 55), (\"B\", 43), (\"C\", 21)]\ntotal = 0\nfor name, count in votes:\n    total += count\nfor name, count in votes:\n    print(\"{}: {:.2f}%\".format(name, count/total*100))\nimport math\ndef square_root(x):\n    return math.sqrt(x)\nnumber = 16\nresult = square_root(number)\nprint(\"The square root of {} is {}\".format(number, result))"
    },
    "2574": {
        "index": 2574,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            break"
    },
    "2575": {
        "index": 2575,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "s = \"Hello!\"\nnew_str = s[:1] + \"X\" + s[1:]\nprint(new_str)"
    },
    "2576": {
        "index": 2576,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef normalize(arr):\n    arr = np.ndarray(arr)\n    return (arr - arr.min()) / (arr.max() - arr.min())"
    },
    "2577": {
        "index": 2577,
        "use model": false,
        "hall code": "original_string = \"Hello World\"\n \nreversed_string = original_string[ __ : __ ]\n\nprint(reversed_string)"
    },
    "2578": {
        "index": 2578,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_numbers = [11, 22, 31, 37, 44]\nfor num in list_of_numbers:\n    if num % 2 == 0:\n        print(num)\n    else:\n        pass"
    },
    "2579": {
        "index": 2579,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(text):\n\trev = ''.join(reversed(text))\n\treturn rev != text"
    },
    "2580": {
        "index": 2580,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_numbers = [10, 20, 30, 40]\ntotal = 0\nfor num in list_of_numbers:\n  total += num\nif total >= 100:\n  total *= 2\nfor i in range(3):\n  total -= 10"
    },
    "2581": {
        "index": 2581,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_items = [\"apple\", \"banana\", \"cherry\", \"orange\"]\nlast_two = list_of_items[-1:0:-2]\nprint(last_two)"
    },
    "2582": {
        "index": 2582,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_password():\n    all_chars = \"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+=-`'\"\n    password_len = \"8\"\n    password = \"\"\n    for i in range(password_len):\n        rand_index = random.randint(0, len(all_chars)-1)\n        password += all_chars[rand_index]\n    return password"
    },
    "2583": {
        "index": 2583,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string_using_stack(string):\n    stack = []\n    for char in string:\n        if len(string) > 0:\n            stack.append(char)\n        else:\n            stack.append(\"error\")\n    reversed_string = ''\n    while len(stack) > 0:\n        reversed_string += stack.pop()\n    return reversed_string"
    },
    "2584": {
        "index": 2584,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def surface_area_pyramid(base_length, height):\n    area_of_base = base_length * base_length\n    side_of_base = (base_length ** 2 + height ** 2) ** 0.5\n    area_of_sides = (side_of_base * base_length) * 4\n    return area_of_base + area_of_sides\nnum1 = 10\nnum2 = 5\nresult = num1 % num2\ndef num_1():\n    return \"This is an unrelated function\"\ndef surface_area_pyramid_modified(base_length, height):\n    area_of_base = base_length * base_length\n    side_of_base = (base_length ** 2 + height ** 2) ** 0.5\n    area_of_sides = (side_of_base * base_length) * 4\n    return area_of_base + area_of_sides + result"
    },
    "2585": {
        "index": 2585,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def minAbsDifference(arr):\n    min_difference = float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = arr[i] - arr[j]\n            if diff < min_difference:\n                min_difference = diff\n    return min_difference"
    },
    "2586": {
        "index": 2586,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef flatten_2d_list(lst):\n  flat_list = []\n  if random.choice([True, False]):\n    for elem in lst:\n      for item in elem:\n        flat_list.append(item)\n        random.randint(1, 10)\n  else:\n    for elem in lst:\n      for item in elem:\n        flat_list.append(item)\n        random.choice([True, False])\n  return flat_list\ntest_list = [[1,2], [3,4], [5,6]]\nprint(flatten_2d_list(test_list))"
    },
    "2587": {
        "index": 2587,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_strings = [\"one\", \"two\", \"three\"]\nlist_strings = [string.upper for string in list_strings]\nprint(list_strings)"
    },
    "2588": {
        "index": 2588,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculateRectangleArea(length, width):\n  area == length + width\n  return area"
    },
    "2589": {
        "index": 2589,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nprefix = \"ABC\"\npattern = re.compile('^' + prefix + '\\d{2,}[A-Za-z]{2,}$', ???)"
    },
    "2590": {
        "index": 2590,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\nX = np.array([[0, 0], [1, 1], [1, 0], [0, 1], [1, 2], [2, 1], [2, 2]])\ny = np.array([0, 0, 1, 1, 2, 2, 2])\nmodel = KNeighborsClassifier(n_neighbors=3)\nmodel.fit(X, y)\nmodel.score(X, y)\nprediction = model.predict([[2, 3]])\nprint(prediction)"
    },
    "2591": {
        "index": 2591,
        "use model": false,
        "hall code": "def mean(nums):\n    return sum(nums)/len(nums)\n\ndef mode(nums):\n    countDict = {}\n    for num in nums:\n        if num in countDict:\n            countDict[num] += 1\n        else:\n            count_dict[num] = 1\n    maxValue = 0\n    maxKey = -1\n    for key, value in countDict.items():\n        if value > maxValue:\n            maxValue = value\n            maxKey = key\n    return maxKey\n\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2-1])/2\n    else:\n        return nums[(len(nums)-1)//2]\n\nif __name__ == '__main__':\n    nums = [1,2,2,2,3,4,5]\n    print(\"Mean: \", mean(nums))\n    print(\"Mode: \", mode(nums))\n    print(\"Median: \", median(nums))"
    },
    "2592": {
        "index": 2592,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_vowels(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum"
    },
    "2593": {
        "index": 2593,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_sequence(n):\n    if n == 0:\n        return 1\n    else:\n        return n * print_sequence(n-1)\nprint(print_sequence(5))\nprint(print_sequence(0))\nprint(print_sequence(10))"
    },
    "2594": {
        "index": 2594,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "data = b\"\\x00\\x0f\\x14\\x03\\x11\\x07\\x08\\x13\\x05\\x10\"\noutput_string = data.decode(errors='ignore')\nprint(output_string)"
    },
    "2595": {
        "index": 2595,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_element(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\nmy_list = [2, 1, 7, 5, 3, 6, 10, 11, 9]\nprime_sum = 0\nfor num in my_list:\n    if max_element(num):\n        prime_sum += num\nprint(prime_sum)"
    },
    "2596": {
        "index": 2596,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_arithmetic_progression(sequence):\n    if len(sequence) < 2:\n        return False\n    ratio = sequence[1] / sequence[0]\n    for i in range(2, len(sequence)):\n        if sequence[i] / sequence[i-1] != ratio:\n            return False\n    return True\nsequence = [2, 4, 8, 16]\nis_geometric = is_arithmetic_progression(sequence)\nprint(f\"The given sequence {sequence} is a geometric progression: {is_geometric}\")"
    },
    "2597": {
        "index": 2597,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\ndef get_features(code):\n vectorizer = CountVectorizer(token_pattern=r\"(?u)\\b\\w+\\b\")\n count_vectors = vectorizer.fit_transform([code])\n vectorizer.get_feature_names()\n return count_vectors.toarray()\ndef classify_language(code):\n data = [(\"Python\", \"def foo(x, y):\\n return x + y\"),\n (\"Java\", \"public int foo(int x, int y) {\\n return x + y;\\n }\"),\n (\"C++\", \"int foo(int x, int y) {\\n return x + y;\\n }\"),\n (\"JavaScript\", \"function foo(x, y) {\\n return x + y;\\n }\")]\n languages, codes = zip(*data)\n X_train = [get_features(c) for c in codes]\n clf = MultinomialNB().partial_fit(X_train, languages)\n X_input = get_features(code)\n return clf.predict([X_input])[0]"
    },
    "2598": {
        "index": 2598,
        "use model": false,
        "hall code": "def levenshtein_distance(str1, str2):\n # Create a matrix for storing the distances\n m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]\n # Mark the first Edit Distance value as 0\n m[0][0] = 0\n \n # Iterate over the matrix \n for i in range(0, len(str1) + 1):\n  for j in range(0, len(str2) + 1):\n   # If we are at the first row or first col, mark the cells with corresponding numbers\n   if i == 0:\n    m[i][j] = j\n   elif j == 0:\n    m[i][j] = i\n   # Otherwise, calculate the distance according to the  formula\n   else:\n    if str1[i-1] == str2[j-1]:\n     m[i][j] = m[i-1][j-1]\n    else:\n     m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-2][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-3][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-4][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-5][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-6][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-7][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-8][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-9][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-10][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-11][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-12][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-13][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-14][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-15][j-1], m[i][j-1]) + 1\n     m[i][j] = min(m[i-1][j], m[i-16][j-1], m[i][j-1]) + 1"
    },
    "2599": {
        "index": 2599,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef is_valid_url(url):\n    regex = re.compile(r\"^(?:http|ftp)s?://([^/]+[.)]*[^/]+/?.*$\")\n    if regex.match(url):\n        return True\n    return False"
    },
    "2600": {
        "index": 2600,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(lst):\n    palindrome_words = []\n    for word in lst:\n        if word == word[::-1]:\n            palindrome_words.append(word)\n    return palindrome_words\nwords = [\"radar\", \"level\", \"python\", \"madam\", \"hello\"]\npalindromes = remove_duplicates(words)\nprint(palindromes)"
    },
    "2601": {
        "index": 2601,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list1 = [1, 2, 3, 4, 5]\ndef print_reverse_list(my_list):\n    my_list.reverse()\n    print(my_list)\nprint(\"This is an unrelated statement\")"
    },
    "2602": {
        "index": 2602,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Dog:\n    def __init__(self, name, breed, age):\n        self.name = name\n        self.breed = breed\n        self.age = age\n    def bark(self):\n        print(\"Woof woof!\")\n    def fetch(self, item):\n        print(f\"{self.name} fetched the {item}!\")\n    def sleep(self):\n        print(f\"{self.name} is sleeping zzzz...\")"
    },
    "2603": {
        "index": 2603,
        "use model": false,
        "hall code": "list1 ="
    },
    "2604": {
        "index": 2604,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def __init__(self, Name, Balance):\n  self.Name = balance\n  self.balance = Name"
    },
    "2605": {
        "index": 2605,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for key1_value in data_dict.values():\n  for inner_key1, inner_key2 in key1_value:\n    print(inner_key1, inner_key2)"
    },
    "2606": {
        "index": 2606,
        "use model": false,
        "hall code": "if age"
    },
    "2607": {
        "index": 2607,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def addToList(List, num):\n  List.append(num)\n  return List + num"
    },
    "2608": {
        "index": 2608,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counterr\nlistt = [8, 1, 7, 7, 4, 8, 8, 7]\nmost_common = Counterr(listt).most_common(1)[0]\nprint(\"Most common element is {}\".format(most_common[0]))"
    },
    "2609": {
        "index": 2609,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sublist_sum(numbers, target) :\n    n = len(numbers)\n    for i in range(n) :\n        curr_sum = numbers[i]\n        j = i+1\n        while j<=n :\n            if curr_sum == target :\n                return True\n            curr_sum = curr_sum + numbers[j]\n            j += 1\n    return False"
    },
    "2610": {
        "index": 2610,
        "use model": false,
        "hall code": "for"
    },
    "2611": {
        "index": 2611,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_depth_of_nested_list(nested_list):\n    max_depth = 1\n    for inner_list in nested_list:\n        depth = 1\n        if type(inner_list) == list:\n            depth += max_depth_of_nested_list(inner_list)\n        max_depth=max(depth, max_depth)\n        if depth % 2 == 0:\n            max_depth *= 2\n        else:\n            max_depth += 1\n    max_depth -= 1\n    return max_depth"
    },
    "2612": {
        "index": 2612,
        "use model": false,
        "hall code": "import math\n\nA = math.pi\nprint(\"{:.2f}\".format(a))"
    },
    "2613": {
        "index": 2613,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n   if n != 0:\n       return 1\n   else:\n       return n * factorial(n-1)\nprint(factorial(5))"
    },
    "2614": {
        "index": 2614,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def anagram_checker(str1, str2):\n    return str1 == str2[::-1]\nstr1 = 'racecar'\nstr2 = 'racecar'\nprint(anagram_checker(str1, str2))"
    },
    "2615": {
        "index": 2615,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ntext = \"The quick brown fox jumps over the lazy dog.\"\nword_list = re.findall(r\"\\b[bB]\\w+\", text, flags=re.I, pattern=r\"\\b[bB]\\w+\")\nprint(word_list)"
    },
    "2616": {
        "index": 2616,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = []\nfor i in range(51):\n  if i % 7 != 0:\n    numbers.append(i)\nprint(numbers)"
    },
    "2617": {
        "index": 2617,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_in_range(m, n):\n    result = 1\n    for num in range(m, n+1):\n        result *= num\n    return result\nm = 2\nn = 6\nproduct = sum_in_range(m, n)\nprint(\"Product:\", product)"
    },
    "2618": {
        "index": 2618,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten_2D_array(array):\n    smallest = float('inf')\n    for sublist in array:\n        for element in sublist:\n            if element < smallest:\n                smallest = element\n    return smallest\narray = [[9, 8, 7], [5, 3, 1], [2, 4, 6]]\nresult = flatten_2D_array(array)\nprint(f\"The smallest element in the array is: {result}\")"
    },
    "2619": {
        "index": 2619,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    if isinstance(string, str):\n        string = str(string)\n        rev_string = string[::-1]\n        if string != rev_string:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    "2620": {
        "index": 2620,
        "use model": false,
        "hall code": "text = \"Report on the COVID-19 pandemic\"\nkeyword = \"COVID-19\""
    },
    "2621": {
        "index": 2621,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def indent_text(text, indentation):\n    lines = text.splitlines()\n    for i in range(len(lines)):\n        lines[i] = \" \" * indentation + lines[i]\n    indented_text = \"\\n\".join(lines)\n    indented_text = indented_text[::-1]\n    return indented_text"
    },
    "2622": {
        "index": 2622,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rotate_list(my_list, k):\n    length = len(my_list)\n    rotated = my_list[-k % length:] + my_list[:-k % length]\n    for i in range(length):\n        for j in range(length):\n            if my_list[i] == my_list[j]:\n                rotated[i] += rotated[j]\n    return rotated"
    },
    "2623": {
        "index": 2623,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result\ndef resutl(x):\n    for j in range(x):\n        if j % 2 == 0:\n            result = j * 2\n        else:\n            result = j ** 2\n    return result"
    },
    "2624": {
        "index": 2624,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Pig(object):\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = age\n    def set_name(self, name):\n        self.name = name\n    def set_color(self, color):\n        self.color = color\n    def set_age(self, age):\n        self.age = age\n    def set_name(self, name):\n        self.name = name\n    def set_color(self, color):\n        self.color = color\n    def set_age(self, age):\n        self.age = age\n    def set_color(self, color):\n        self.color = color"
    },
    "2625": {
        "index": 2625,
        "use model": false,
        "hall code": "d = {\n    'foo': 'bar',\n    'baz': {\n        'qux': 12"
    },
    "2626": {
        "index": 2626,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def make_length_five(lst):\n    '''This function will ensure that all strings in the list have a length of 5 characters.'''\n    for i in range(len(lst)):\n        if len(lst[i]) < 5:\n            lst[i] = lst[i] + ' ' * (5 - len(lst[i]))\n        elif len(lst[i]) > 5:\n            lst[i] = lst[i][:5]\n        for j in range(5):\n            lst[i] = lst[i] + str(j)\n    return lst"
    },
    "2627": {
        "index": 2627,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_items(lst, item):\n    '''This function will return the total number of specific items in a list.'''\n    return len([x for x in lst if x != item])"
    },
    "2628": {
        "index": 2628,
        "use model": false,
        "hall code": "[1, 2, 3, 4, 5]"
    },
    "2629": {
        "index": 2629,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 4, 'd': 5}\nd3 = { k:v for k,v in d1.items() if k not in d2.keys() }"
    },
    "2630": {
        "index": 2630,
        "use model": false,
        "hall code": "'''This function will calculate the shortest distance you"
    },
    "2631": {
        "index": 2631,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseStr(s):\n    return s[::-1]\na = \"tea\"\nprint(reverseStr(a))"
    },
    "2632": {
        "index": 2632,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    def display_details(self):\n        print(f\"Name: {self.name}, Age: {self.age}, Salary: {self.salary}\")\n    def increase_salary(self, percentage):\n        self.salary += self.salary * (percentage / 100)\nemp = Employee('John Doe', 30, 50000)\nemp.display_details()\nemp.increase_salary(10)\nemp.display_details()"
    },
    "2633": {
        "index": 2633,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "items = [\n{\"name\": \"apple\", \"price\": 10},\n{\"name\": \"orange\", \"price\": 20},\n{\"name\": \"banana\", \"price\": 5}\n]\ntax_rate = 5\ntotal_price = 0\nfor item in items:\n    total_price += item['price']\ntotal_price = total_price + (total_price * (tax_rate/100))\nprint(total_price)\nitem1 = 10\nif item1 == 10:\n    item1 += 5\nprint(item1)"
    },
    "2634": {
        "index": 2634,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def commonElements(numbers):\n    sum_even = 0\n    sum_odd = 0\n    for number in numbers:\n        if number % 2 == 0:\n            sum_even += number\n        else:\n            sum_odd += number\n    return sum_even, sum_odd\nnumbers = [5, 12, 9, 8, 3, 10, 7]\neven_sum, odd_sum = commonElements(numbers)\nprint(\"Sum of even numbers:\", even_sum)\nprint(\"Sum of odd numbers:\", odd_sum)"
    },
    "2635": {
        "index": 2635,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nfor n in range (1, 10):\n    if n % 2 == 0:\n        print(n, \"even\")\n    else:\n        print(n, \"odd\")\nrandom_number = random.randint(1, 100)\nif random_number > 50:\n    print(\"The random number is greater than 50.\")\nelse:\n    print(\"The random number is not greater than 50.\")"
    },
    "2636": {
        "index": 2636,
        "use model": false,
        "hall code": "{\n \"John\": 85,"
    },
    "2637": {
        "index": 2637,
        "use model": false,
        "hall code": "[1, 2, 3, 3, 4, 4, 5]"
    },
    "2638": {
        "index": 2638,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, firstname, lastname, grades):\n        self.firstname = firstname\n        self.lastname = lastname\n        self.grades = grades\n    def calculate_average_grade(self):\n        return sum(self.grades) / len(self.grades)\nstudent1 = Student(\"John\", \"Doe\", [85.5, 90.0, 92.5])\nprint(student1.calculate_average_grade())"
    },
    "2639": {
        "index": 2639,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        if length <= 0 or width <= 0:\n            raise ValueError(\"Length and width must be positive integers.\")\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\n    def perimeter(self):\n        return 2 * (self.length + self.width)"
    },
    "2640": {
        "index": 2640,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, species, name, age):\n        self.species = species\n        self.name = name\n        self.age = age\n    @staticmethod\n    def find_average_age(animals):\n        total_age = sum(animal.age for animal in animals)\n        return total_age / len(animals)\nanimal1 = Animal(\"Dog\", \"Spot\", 3)\nanimal2 = Animal(\"Cat\", \"Whiskers\", 5)\nanimal3 = Animal(\"Bird\", \"Polly\", 2)\nanimals = [animal1, animal2, animal3]\navg_age = Animal.find_average_age(animals)\nprint(avg_age)"
    },
    "2641": {
        "index": 2641,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_factors(number):\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            break\n    return factors"
    },
    "2642": {
        "index": 2642,
        "use model": false,
        "hall code": "def roman_to_integer(numeral):\n    romans = {\"I\": 1,\n    \"V\": 5,\n    \"X\": 10,\n    \"L\": 50,\n    \"C\": 100,\n    \"D\": 500,\n    \"M\": 1000\n    }\n    num = 0\n    i = 0\n    while i < len(numeral):\n        if i+1 < len(numeral):\n            if romans[numeral[i]] >= romans[numeral[i+1]]:\n                num = num + romans[numeral[i]]\n            else :\n                num = num + romans[number[i+1]] - romans[numeral[i]]\n                i+=1\n        else:\n            num = num + romans[numeral[i]]\n        i+=1\n    return num"
    },
    "2643": {
        "index": 2643,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classify_number(num):\n    factorial = 1\n    if num < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    elif num == 0:\n        return \"Factorial of 0 is 1.\"\n    else:\n        for i in range(1, num + 1):\n            factorial *= i\n        return f\"Factorial of {num} is {factorial}.\""
    },
    "2644": {
        "index": 2644,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from typing import List\ndef maxDifference(arr: List[int]) -> int:\n    arr.sort()\n    smallest_diff = float('inf')\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff < smallest_diff:\n            smallest_diff = diff\n    return smallest_diff"
    },
    "2645": {
        "index": 2645,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(words):\n    longest_length = 0\n    is_anagram = []\n    for word in words:\n        if len(word) > longest_length:\n            longest_length = len(word)\n            is_anagram = [word]\n        elif len(word) == longest_length:\n            is_anagram.append(word)\n    return is_anagram\nwords_list = [\"potato\", \"tomato\", \"carrot\", \"broccoli\"]\nresult = is_anagram(words_list)\nprint(result)"
    },
    "2646": {
        "index": 2646,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_days(hours):\n    weeks = hours // 168\n    days = (hours % 168) // 24\n    remaining_hours = (hours % 168) % 24\n    result = f\"{weeks} week\" + (\"s\" if weeks > 1 else \"\") + \", \"\n    result += f\"{days} day\" + (\"s\" if days > 1 else \"\") + \", \"\n    result += f\"{remaining_hours} hour\" + (\"s\" if remaining_hours > 1 else \"\")\n    return result"
    },
    "2647": {
        "index": 2647,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_at_length(lst, k):\n    longest_str = lst[0]\n    for s in lst[1:]:\n        if len(s) >= k and len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"
    },
    "2648": {
        "index": 2648,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def descendingOrder(string):\n    vowel_count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in string.lower():\n        if char in vowels:\n            vowel_count += 1\n    return vowel_count\ntext = \"Hello World\"\nprint(descendingOrder(text))"
    },
    "2649": {
        "index": 2649,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n        self.speed = 0\n        self.is_engine_on = False\n    def paint(self, new_color):\n        self.color = new_color\n    def accelerate(self, speed):\n        self.speed += speed\n    def brake(self, speed):\n        self.speed -= speed\n    def turn_on_engine(self):\n        self.is_engine_on = True\n    def turn_off_engine(self):\n        self.is_engine_on = False\nmy_car = Car(\"Toyota\", \"Camry\", \"Blue\")\nprint(my_car.color)\nmy_car.paint(\"Red\")\nprint(my_car.color)\nmy_car.accelerate(50)\nprint(my_car.speed)\nmy_car.brake(20)\nprint(my_car.speed)\nmy_car.turn_on_engine()\nprint(my_car.is_engine_on)\nmy_car.turn_off_engine()\nprint(my_car.is_engine_on)"
    },
    "2650": {
        "index": 2650,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, brand, fuel_type):\n        self.brand = brand\n        self.fuel_type = fuel_type\n    def start_engine(self):\n        print(f\"{self.brand} car with {self.fuel_type} fuel starts engine.\")"
    },
    "2651": {
        "index": 2651,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import copy\noriginal_dict = {1: 'a', 2: 'b', 3: 'c'}\nnew_dict = copy.depcopy(original_dict)"
    },
    "2652": {
        "index": 2652,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumToN(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * sumToN(n-1)"
    },
    "2653": {
        "index": 2653,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    def __init__(self, account_number, initial_balance=0):\n        self.account_number = account_number\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return self.balance\n        else:\n            return \"Insufficient funds\"\n    def get_balance(self):\n        return self.balance"
    },
    "2654": {
        "index": 2654,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from functools import reduce\ndef my_sum(list):\n  return reduce((lambda x, y: x * y), list)"
    },
    "2655": {
        "index": 2655,
        "use model": false,
        "hall code": "print(\"The number"
    },
    "2656": {
        "index": 2656,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 11):\n    if i % 2 != 0:\n        print(i)"
    },
    "2657": {
        "index": 2657,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_result = []\nfor x in range(4):\n    list_result.append(x*x)"
    },
    "2658": {
        "index": 2658,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def toCamelCase(string):\n    s = string.split('_')\n    if len(s) > 1:\n        return s[0] + ''.join(x.title() for x in s[1:])\n    else:\n        return s[0]"
    },
    "2659": {
        "index": 2659,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef generate_password():\n    charset = \"01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()?\"\n    password = \"\"\n    for _ in range(8):\n        password += random.choice(charset)\n        random.shuffle(password)\n    return password\nif __name__ == '__main__':\n    print(generate_password())"
    },
    "2660": {
        "index": 2660,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ncustomers = [math.sqrt(customer[1]) for customer in customer_table if (customer[1] > 25) and (customer[2] >= zipcode_range[0] and customer[2] <= zipcode_range[1])]\nprint(customers)"
    },
    "2661": {
        "index": 2661,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1,1,2,3,4,4,4,5]\nnumber = 4\ndef count_occurrences(numbers, number):\n    count = 0\n    for num in numbers:\n        if num == number:\n            count += 1\n    if count > 0:\n        return count * 2\n    else:\n        return count\nprint(count_occurrences(numbers, number))"
    },
    "2662": {
        "index": 2662,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    stack = []\n    for char in string:\n        stack.append(char)\n    rev_string = \"\"\n    while stack:\n        rev_string = rev_string + stack.pop()\n    if rev_string == string:\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    print(is_palindrome(string))"
    },
    "2663": {
        "index": 2663,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def enqueue(self, element):\n        self.queue.append(element)\n    def dequeue(self):\n        if not self.isEmpty():\n            return self.queue.pop(0)\n    def front(self):\n        if not self.isEmpty():\n            return self.queue[0]\n    def isEmpty(self):\n        return len(self.queue) == 0\nq = Queue()\nq.enqueue(10)\nq.enqueue(20)\nq.enqueue(30)\nprint(q.front())\nprint(q.dequeue())\nprint(q.front())\nprint(q.isEmpty())\nprint(q.dequeue())\nprint(q.dequeue())\nprint(q.isEmpty())"
    },
    "2664": {
        "index": 2664,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_2d_list(list_2d):\n    sum = 0\n    for l in list_2d:\n        for n in l:\n            sum += n\n    return sum\nif __name__ == '__main__':\n    list_2d = [[1,2,3],[4,5,6],[7,8,9]]\n    print(sum_2d_list(list_2d))\nexample_variable = 10\ndef Sum_list(a, b):\n    if a > b:\n        return a\n    else:\n        return b\nresult = Sum_list(5, example_variable)\nprint(result)"
    },
    "2665": {
        "index": 2665,
        "use model": false,
        "hall code": "\"\"\"\nUse a Linked List structure to implement a stack data structure.\n\"\"\"\n\nclass Node:\n    def __init__(self, val):\n        self.value = val1\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.top = None\n        self.size = 0\n    \n    def push(self, val):\n        new_node = Node(val)\n        new_node.next = self.top\n        self.top = new_node\n        self.size += 1\n    \n    def pop(self):\n        if self.top == None:\n            return None\n        else:\n            pop_node = self.top\n            self.top = self.top.next\n            self.size -= 1\n            return pop_node.value"
    },
    "2666": {
        "index": 2666,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef random_float(a,b):\n  return round(random.shuffle(a,b), 4)"
    },
    "2667": {
        "index": 2667,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_sum(x, y):\n    lower, upper = min(x, y), max(x, y)\n    if upper > lower:\n        return (upper * (upper + 1) - lower * (lower - 1)) // 2\n    else:\n        return upper - lower"
    },
    "2668": {
        "index": 2668,
        "use model": false,
        "hall code": "obj2 = {\n  \"name\": \"John\",\n  \"location\": \"New York\"\n}"
    },
    "2669": {
        "index": 2669,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def difference_array(list_1, list_2):\n  new_list = []\n  for i in list_1:\n    if i in list_2:\n      new_list.append(i)\n  return new_list"
    },
    "2670": {
        "index": 2670,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printPrimesUpTo_n(n):\n    while n > 1:\n        if not (n % 2 and n > 2):\n            flag = False\n            for i in range(2, int(n**0.5) +1):\n                if n % i:\n                    flag = True\n                    continue\n            if flag:\n                print(n)\n        n -= 1"
    },
    "2671": {
        "index": 2671,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_by_3(s):\n    result = []\n    for x in s:\n        if x*3 > len(s):\n            result.append(x * 3)\n    return result"
    },
    "2672": {
        "index": 2672,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(string):\n    words = string.split(0)\n    return len(words)"
    },
    "2673": {
        "index": 2673,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def listItems():\n    list_items = \"item1\", \"item2\", \"item3\"\n    return list_items"
    },
    "2674": {
        "index": 2674,
        "use model": false,
        "hall code": "#"
    },
    "2675": {
        "index": 2675,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def area_triangle(base,height):\n    if base == 0 or height == 0:\n        raise ValueError(\"Base and height should not be zero.\")\n    else:\n        return 0.5 * (base + height)"
    },
    "2676": {
        "index": 2676,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_string(list):\n  longest_word = \"\"\n  for word in list:\n    if len(word) > len(longest_word):\n      if len(word) % 2 == 0:\n        longest_word = word.upper()\n      else:\n        longest_word = word.lower()\n  return longest_word"
    },
    "2677": {
        "index": 2677,
        "use model": false,
        "hall code": "class Example:\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property\n    def __init__(self, x, y):\n        self.__x = x\n        self.__y = y\n    @property"
    },
    "2678": {
        "index": 2678,
        "use model": false,
        "hall code": "def func(x):\n    if x < 0:"
    },
    "2679": {
        "index": 2679,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def is_equal(str1, str2):\n    str1 = str1[:]\n    if str1 == str2:\n        return True\n    else:\n        return False"
    },
    "2680": {
        "index": 2680,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generateRandomNumber():\n    return random.randint()"
    },
    "2681": {
        "index": 2681,
        "use model": false,
        "hall code": "def multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):"
    },
    "2682": {
        "index": 2682,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculateAverage(numbers):\n    maximum = max(numbers)\n    minimum = min(numbers)\n    print(f\"Maximum value: {maximum}, Minimum value: {minimum}\")\nnumbers = [4, 9, 1, 6, 3]\ncalculateAverage(numbers)"
    },
    "2683": {
        "index": 2683,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeVowels(s):\n    vowels = 'aeiouAEIOU'\n    s_without_vowel = ''\n    for c in s:\n        if c not in vowels:\n            s_without_vowel += c\n            if len(s_without_vowel) == 3:\n                break\n    return s_without_vowel\nprint(removeVowels(\"Hello World\"))"
    },
    "2684": {
        "index": 2684,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef scientific_calculator(equation):\n    equation = equation.replace(\"^\", \"**\")\n    try:\n        result = eval(equation)\n        return round(result, 2) if isinstance(result, float) else result\n    except:\n        return \"Invalid equation!\""
    },
    "2685": {
        "index": 2685,
        "use model": false,
        "hall code": "class Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, Item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n    \n    def peek(self):\n        return self.items[len(self.items)-1]\n    \n    def size(self):\n        return len(self.items)"
    },
    "2686": {
        "index": 2686,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.metrics import accuracy_score\nX_test, y_test = load_dataset()\ny_pred_1 = model_1.predict()\nacc_1 = accuracy_score(y_test, y_pred_1)\ny_pred_2 = model_2.predict(X_test)\nacc_2 = accuracy_score(y_pred_2, y_test)\nif acc_1 > acc_2:\n    print('Model 1 has better performance than Model 2.')\nelif acc_2 > acc_1:\n    print('Model 2 has better performance than Model 1.')\nelse:\n    print('The performances of the two models are equal.')"
    },
    "2687": {
        "index": 2687,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calc_comp_int(principal, rate, num_years):\n    return principal * (1 + rate) ** num_years - principal\nprint(calc_comp_int(p+r, r, n))"
    },
    "2688": {
        "index": 2688,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_list(nums, value):\n    for num in nums:\n        if num == value:\n            return True\n    return False\nnums = [2, 4, 6, 8, 10]\nsearch_list(nums, value)"
    },
    "2689": {
        "index": 2689,
        "use model": false,
        "hall code": "def get_distance(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_2(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_3(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_4(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_5(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_6(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_7(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_8(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_9(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_10(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_11(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_12(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_13(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_14(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\ndef get_distance_15(p1, p2):\n    (x1, y1, z1) = p1\n    (x2, y2, z2) = p2\n    dist = ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5\n    return dist\n\n\np1 = (3, 2, 1)\np2 = (5, 4, 6)\ndistance = get_distance(p1, p2)\nprint(distance) # Output: 5.196152422706632"
    },
    "2690": {
        "index": 2690,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nclass DeckOfCards:\n    def __init__(self):\n        self.deck = []\n        self.cards_remaining = 52\n        suits = ['Spades', 'Hearts', 'Diamonds', 'Clubs']\n        ranks = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']\n        for suit in suits:\n            for rank in ranks:\n                self.deck.append(rank + ' of ' + suit)\n    def shuffle(self):\n        random.shuffle(self.deck)\n    def deal_card(self):\n        if self.cards_remaining == 0:\n            print(\"No cards remaining in the deck.\")\n            return None\n        card = self.deck.pop()\n        self.cards_remaining -= 1\n        return card\n    def remaining_cards(self):\n        return self.cards_remaining\ndeck = DeckOfCards()\nprint(\"Initial deck:\")\nprint(deck.deck)\ndeck.shuffle()\nprint(\"Shuffled deck:\")\nprint(deck.deck)\ncard = deck.deal_card()\nprint(\"Dealt card:\", card)\nprint(\"Remaining cards:\", deck.remaining_cards())"
    },
    "2691": {
        "index": 2691,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Triangle:\n    def __init__(self, base, height, side1, side2, side3):\n        self.base = base\n        self.height = height\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    def calculate_area(self):\n        return 0.5 * self.base * self.height\n    def calculate_perimeter(self):\n        return self.side1 + self.side2 + self.side3\n    def check_triangle_type(self):\n        if self.side1 == self.side2 == self.side3:\n            return \"Equilateral Triangle\"\n        elif self.side1 == self.side2 or self.side1 == self.side3 or self.side2 == self.side3:\n            return \"Isosceles Triangle\"\n        else:\n            return \"Scalene Triangle\"\ntriangle = Triangle(5, 4, 3, 4, 5)\narea = triangle.calculate_area()\nprint(\"Area of the triangle:\", area)\nperimeter = triangle.calculate_perimeter()\nprint(\"Perimeter of the triangle:\", perimeter)\ntriangle_type = triangle.check_triangle_type()\nprint(\"Type of triangle:\", triangle_type)"
    },
    "2692": {
        "index": 2692,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_student_avg(students):\n    for student in students:\n        student['avg'] = sum(student['grades']) * len(student['grades'])"
    },
    "2693": {
        "index": 2693,
        "use model": false,
        "hall code": "def get_student_avg (studentss):\n    for stdent in studentss:\n        sum = 0\n        for grade in stdent['grades']:\n            sum += grade\n        avg = sum // len studnet['grades']\n        stdent['avg']= avg"
    },
    "2694": {
        "index": 2694,
        "use model": false,
        "hall code": "def quick_sort(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_2(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_3(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_4(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_5(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_6(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_7(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_8(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_9(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_10(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_11(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_12(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_13(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_14(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_15(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef quick_sort_16(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\n\nquick_sort(my_list)"
    },
    "2695": {
        "index": 2695,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 0\nb = 1\nprint(a)\nprint(b)\nfor i in range(10):\n    c = a + b\n    b = c\n    print(c)"
    },
    "2696": {
        "index": 2696,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def solve_equation(length, width):\n    area = length * width\n    return area\nlength = 5\nwidth = 8\nrectangle_area = solve_equation(length, width)\nprint(\"The area of the rectangle is:\", rectangle_area)"
    },
    "2697": {
        "index": 2697,
        "use model": false,
        "hall code": "def calculate_tax(price):"
    },
    "2698": {
        "index": 2698,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "A = ['welcome', 'to', 'my', 'website']\nA = [(x.capitalize() if len(x) > 3 else x.upper()) for x in A]\nprint(A)"
    },
    "2699": {
        "index": 2699,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_even_numbers(arr):\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n    return count\narr = [1, 4, 2, 4, 5]\nresult = count_even_numbers(arr)\nprint(f\"The number of even numbers in the array is: {result}\")"
    },
    "2700": {
        "index": 2700,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndataframe = pd.DataFrame([['1', 2, 3], ['4', 5.0, 6], ['7', 8, 9]], columns=['a', 'b', 'c'])\ndataframe['avg'] = dataframe.mean(axis=2)\nprint(dataframe)"
    },
    "2701": {
        "index": 2701,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = [1,2 ,3, 4, 5]\nimport statistics\nmedian = statistics.mean(x)\nprint(median)"
    },
    "2702": {
        "index": 2702,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nA = np.array([1,2,3])\nB = np.array([4,5,6])\nC = np.add(A, B)\nprint(C)"
    },
    "2703": {
        "index": 2703,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "A = [9, 4, 18, 24, 7, 22, 11]\nA.sort(reverse=True)\ntop_3 = A[:3]\nprint(top_3)\nx = 5\ny = 10\nz = x + y\nif z > 15:\n    print(\"Greater than 15\")\nelse:\n    print(\"Less than or equal to 15\")"
    },
    "2704": {
        "index": 2704,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nA = np.array([[1, 2, 3],\n              [4, 5, 6],\n              [7, 8, 9]])\nB = np.array([[10, 11, 12],\n              [13, 14, 15],\n              [16, 17, 18]])\nC = np.dot(A, B)\nprint(np.sqrt(C))"
    },
    "2705": {
        "index": 2705,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "students = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]\nstudents.sort(key= lambda x: x[0])\nprint(students)"
    },
    "2706": {
        "index": 2706,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_letters(string):\n    for letter in string:\n        print letter"
    },
    "2707": {
        "index": 2707,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import time\ntimestamp = int(time.timestamp())\nprint(timestamp)"
    },
    "2708": {
        "index": 2708,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef find_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if is_prime(num):\n            prime_numbers.append(num)\n    return prime_numbers\nstart = 100\nend = 200\nprime_numbers = find_prime_numbers(start, end)\nprint(\"Prime numbers between\", start, \"and\", end)\nprint(prime_numbers)"
    },
    "2709": {
        "index": 2709,
        "use model": false,
        "hall code": "[\"apple\", \"banana\", \"cherry\"]"
    },
    "2710": {
        "index": 2710,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(nested_list):\n    max_element = float('-inf')\n    for sublist in nested_list:\n        for element in sublist:\n            if element > max_element:\n                max_element = element\n    return max_element\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nmax_element = search(nested_list)\nprint(\"Maximum element:\", max_element)"
    },
    "2711": {
        "index": 2711,
        "use model": false,
        "hall code": "def longest_substring(s):\n    length = len(s)\n    current_length = 1\n    last_occur= {s[0]:0 }\n    max_length = 0\n    i = 0 \n    while i < length:\n        if(s[i] in last_occur):\n            current_length = i - last_occur[s[i]]\n            if(current_length > max_length):\n                max_length = current_length\n            last_occur[s[i]] = i\n        else:\n            last_occur[s[i]] = i\n            current_length += 1\n            if(current_length > max_length):\n                max_length = current_length\n        i += 1\n    return max_length\n\nlongest_substring(s)\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3"
    },
    "2712": {
        "index": 2712,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_distance(x1, x2, y1, y2):\n    x3 = x1 + 2\n    y3 = y1 * 2\n    return ((x2-x3)**2 + (y2-y3)**2)**0.5\ncalculate_distance(x1, x2, y1, y2)"
    },
    "2713": {
        "index": 2713,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_sum_k_elements(array, k):\n    max_sum = array[0]\n    for i in range(len(array)-k+1):\n        sum_temp = 0\n        for j in range(k):\n            sum_temp += array[i+j]\n            if sum_temp > max_sum:\n                break\n        if sum_temp > max_sum:\n            max_sum = sum_temp\n    return max_sum\nmax_sum_k_elements(array, k)"
    },
    "2714": {
        "index": 2714,
        "use model": false,
        "hall code": "def is_odd(x):"
    },
    "2715": {
        "index": 2715,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_game_board(n):\n    game_board = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(j)\n        game_board.append(row)\n    return game_board"
    },
    "2716": {
        "index": 2716,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_grade_dict(student_ids, grades):\n    grade_dict = {}\n    for i in range(len(student_ids)):\n        grade_dict[student_ids[i]] = grades[i]\n    x = 5\n    if x > 3:\n        grade_dict.pop(student_ids[-1])\n    return grade_dict"
    },
    "2717": {
        "index": 2717,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def recursive_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left_max = recursive_sum(arr[:mid])\n        right_max = recursive_sum(arr[mid:])\n        return max(left_max, right_max)\narr = [4, 2, 9, 1, 7]\nmax_element = recursive_sum(arr)\nprint(\"Maximum element:\", max_element)"
    },
    "2718": {
        "index": 2718,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "num = 5\nwhile num <= 15:\n  print(num)\n  num = num\n  num += 1"
    },
    "2719": {
        "index": 2719,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "extracted_letters = []\nfor letter in letters:\n    extracted_letters.append(letters[0:3])"
    },
    "2720": {
        "index": 2720,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "to_test = -2\nif to_test > 0:\n    print(\"The number is positive.\")\nelif to_test < 0:\n    print(\"The number is negative.\")\nelse:\n    print(\"The number is zero.\")"
    },
    "2721": {
        "index": 2721,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_sum(arr, target):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                pairs.append((arr[i], arr[j]))\n    return pairs\narr = [1, 3, 5, 7, 9]\ntarget = 10\npairs = array_sum(arr, target)\nprint(\"Pairs in the array whose sum is equal to the target:\")\nfor pair in pairs:\n    print(pair)"
    },
    "2722": {
        "index": 2722,
        "use model": false,
        "hall code": "def longestSubsequence(x, y): \n    m = len(x) \n    n = len(y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n   \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    index = L[m][n] \n  \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\\0\" \n  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        if x[i-1] == y[j-1]: \n            lcs[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n\ndef longestSubsequence_2(x, y): \n    m = len(x) \n    n = len(y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n   \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    index = L[m][n] \n  \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\\0\" \n  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        if x[i-1] == y[j-1]: \n            lcs[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n\n    print(\"Longest common subsequence of \" + x + \" and \" + y + \" is \\\"\" + \"\".join(lcs) + \"\\\"\")"
    },
    "2723": {
        "index": 2723,
        "use model": false,
        "hall code": "for"
    },
    "2724": {
        "index": 2724,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def modify_list(int_list):\n    for i in range(len(int_list)):\n        if int_list[i] % 2 == 0:\n            int_list[i] += 1\n        else:\n            int_list[i] -= 1\n    return int_list\ndef input_list(int_list):\n    max_value = max(int_list)\n    min_value = min(int_list)\n    sum_values = sum(int_list)\n    return max_value, min_value, sum_values\ninput_list(modify_list([1, 2, 3]))"
    },
    "2725": {
        "index": 2725,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ntext = \"John, Paul, and George went to the park.\"\npersons = re.findall(r\"\\w+?\", text)\nprint(persons)"
    },
    "2726": {
        "index": 2726,
        "use model": false,
        "hall code": "if x"
    },
    "2727": {
        "index": 2727,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "text = \"This is a string in Uppercase!!!\"\ntext.lower()\nprint(text)"
    },
    "2728": {
        "index": 2728,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findSmallest(array):\n    max_length = 0\n    index = 0\n    for i in range(len(array)):\n        if len(array[i]) > max_length:\n            max_length = len(array[i])\n            index = i\n    return index\narray = ['cat', 'dog', 'elephant', 'lion']\nprint(findSmallest(array))"
    },
    "2729": {
        "index": 2729,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_string(length):\n    chars = \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()[]{}\\\\|;:'\"\",./<>?\"\n    result = \"\"\n    for i in range(length):\n        result += random.choices(chars)\n    return result\nrandom_string = generate_random_string(10)\nprint(random_string)"
    },
    "2730": {
        "index": 2730,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef compound_interest(radius):\n    return math.pi * radius**2\nradius = 5\narea = compound_interest(radius)\nprint(\"The area of the circle with radius\", radius, \"is\", area)"
    },
    "2731": {
        "index": 2731,
        "use model": false,
        "hall code": "arr = [\n {\n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1 \n  num: 1"
    },
    "2732": {
        "index": 2732,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\ndate1 = datetime.strptime(date1, \"%Y-%m-%d\", missing_param)\ndate2 = datetime.strptime(date2, \"%Y-%m-%d\", missing_param)\ndifference = date2 - date1\nprint(difference.days)"
    },
    "2733": {
        "index": 2733,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mylist = ['string1', 'string2', 'string3', 'string4', 'string5', 'string6', 'string7', 'string8', 'string9', 'string10']\nfor item in mylist\n  print item"
    },
    "2734": {
        "index": 2734,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class MyClass:\n  def talk(self):\n    print(\"Hello world\")"
    },
    "2735": {
        "index": 2735,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_and_add_elements(given_list):\n    new_list = []\n    for x in given_list:\n        new_list.append(x)\n    gen_list = 10\n    if gen_list > 5:\n        return []\n    return new_list"
    },
    "2736": {
        "index": 2736,
        "use model": false,
        "hall code": "group_by_last_digit = {\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],\n    0: [],\n    1: [1],\n    2: [],\n    3: [],\n    4: [4],\n    5: [5],\n    6: [6],\n    7: [7],\n    8: [8],\n    9: [9],"
    },
    "2737": {
        "index": 2737,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        self.course_grades = []\n    def add_grade(self, course, grade):\n        self.course_grades.append((course, grade))\n    def get_average_grade(self):\n        if len(self.course_grades) == 0:\n            return 0\n        total = 0\n        for course, grade in self.course_grades:\n            total += grade\n        return total / len(self.course_grades)"
    },
    "2738": {
        "index": 2738,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "@app.route(\"/\", methods=['GET'])\ndef hello_world():\n    return \"Hello World"
    },
    "2739": {
        "index": 2739,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\nans = factorial(5)\nprint(ans)"
    },
    "2740": {
        "index": 2740,
        "use model": false,
        "hall code": "Name: John"
    },
    "2741": {
        "index": 2741,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import rex\nregex = re.compile(r\"^[a-z]+$\")\nstring1 = \"string1\"\nstring2 = \"string2\"\nif regex.match(string1) and regex.match(string2):\n    if string1 == string2:\n        print(\"The strings are equal\")\n    else:\n        print(\"The strings are not equal\")"
    },
    "2742": {
        "index": 2742,
        "use model": false,
        "hall code": "x = [4, 5, 7, 8]\ny = [6, 7, 8, 10]\n\n\ndef find_correlation_coefficient(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_2(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_3(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_4(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_5(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_6(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_7(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_8(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_9(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_10(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_11(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_12(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_13(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_14(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_15(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_16(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_17(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\ndef find_correlation_coefficient_18(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\n\n\nprint(\" The correlation coefficient is: \" + str(find_correlation_coefficient(x, y))) # 0.9"
    },
    "2743": {
        "index": 2743,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_string(string):\n    words = string.split('')\n    return words"
    },
    "2744": {
        "index": 2744,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "myList = [4, 8, 10, 15, 21, 25, 30]\ndef mean(lst):\n    sorted_list = sorted(lst)\n    length = len(lst)\n    middle_index = length // 2\n    if length % 2 == 0:\n        return (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        return sorted_list[middle_index]\nmedian = mean(myList)\nprint(\"Median:\", median)"
    },
    "2745": {
        "index": 2745,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_dict_elements(myDict):\n    count = 0\n    for key in myDict:\n        count += 1\n    return count\nelement_nums = count_dict_elements(myDict)\nfor i in range(10):\n    element_nums *= 2\nelement_nums -= 5\nif element_nums % 2 == 0:\n    element_nums //= 2\nelse:\n    element_nums += 3\nelement_nums += 1\nelement_nums -= 2"
    },
    "2746": {
        "index": 2746,
        "use model": false,
        "hall code": "def longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_2(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_3(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_4(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_5(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_6(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_7(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_8(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_9(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_10(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_11(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_12(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_13(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_14(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\ndef longest_common_substring_15(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n\n\nlongest_substring = longest_common_substring(s1, s2)"
    },
    "2747": {
        "index": 2747,
        "use model": false,
        "hall code": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\n\n\ndef delete_node(head, node):\n    prev = None\n    curr = head\n    while(curr is not None and curr.data != node):\n        prev = curr\n        curr = curr.next\n\ndef delete_node_2(head, node):\n    prev = None\n    curr = head\n    while(curr is not None and curr.data != node):\n        prev = curr\n        curr = curr.next\n\n    prev.next = curr.next"
    },
    "2748": {
        "index": 2748,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for year in range(1900, 2001):\n        if year % 4 == 0 and year % 100 != 0 and year % 400 == 0:\n            print(year)"
    },
    "2749": {
        "index": 2749,
        "use model": false,
        "hall code": "def find_distinct(arr):\n    distinct_list = []\n    for num in arr:\n        if num not in distinct_list:\n            distinct_list.append(num)\n\ndef find_distinct_2(arr):\n    distinct_list = []\n    for num in arr:\n        if num not in distinct_list:\n            distinct_list.append(num)\n\n\n    return distinct_list\n\narr = [1, 2, 3, 3, 4, 5]\nprint(find_distinct(arr))  # Output: [1, 2, 3, 4, 5]"
    },
    "2750": {
        "index": 2750,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_underscore_char(sample_string):\n    new_string = sample_string.replace('_', '\\_')\n    if len(new_string) % 2 == 0:\n        new_string += '123'\n    return new_string.replace('a', '')\nsample_string = \"this__is_a_sample_string\"\nprint(replace_underscore_char(sample_string))"
    },
    "2751": {
        "index": 2751,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_dict(list1, list2):\n    dictionary = dict(zip([list1[1], list1[0]], list2))\n    return dictionary\nlist1 = [\"John\", \"Adam\"]\nlist2 = [25, 30]\nprint(create_dict(list1, list2))"
    },
    "2752": {
        "index": 2752,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_users(user_details):\n  users_over_21 = []\n  for user in user_details:\n    if user['age'] < 21:\n      users_over_21.append(user)\n  return users_over_21\nif __name__ == \"__main__\":\n  print(\"Users over 21:\", filter_users(user_details))"
    },
    "2753": {
        "index": 2753,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nnum = 17\nif generate_fibonacci(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    "2754": {
        "index": 2754,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef get_words(mixed_list):\n  words = []\n  for item in mixed_list:\n    if type(item) == str:\n      words.append(item)\n  return words\ndef get_average_word_length(words):\n  total_length = 0\n  for word in words:\n    total_length += len(word)\n  return total_length/len(words)\nif __name__ == \"__main__\":\n  words = get_words(mixed_list)\n  print(\"Words in original list:\", words)\n  print(\"Average length of the words:\", get_average_word_length(words))\ndef calculate_square_root(number):\n  if number >= 0:\n    return math.sqrt(number)\n  else:\n    return None\ndef is_even(number):\n  if number % 2 == 0:\n    return True\n  else:\n    return False"
    },
    "2755": {
        "index": 2755,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_even_numbers(numbers):\n  even_numbers = []\n  for num in numbers:\n    if num % 2 == 0:\n      even_numbers.append(num)\n  random.shuffle(even_numbers)\n  return even_numbers\nif __name__ == \"__main__\":\n  numbers = [2, 3, 5, 6, 8, 9, 10]\n  print(\"Even numbers from original list:\", get_even_numbers(numbers))"
    },
    "2756": {
        "index": 2756,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_shorter_strings(strings):\n  shorter_strings = []\n  for string in strings:\n    if len(string) < 6:\n      shorter_strings.append(string)\n  x = 10\n  y = 5\n  z = x + y\n  if z == 15:\n    shorter_strings.reverse()\n  return shorter_strings\nif __name__ == \"__main__\":\n  print(\"strings with length less than 6:\", get_shorter_strings(strings))"
    },
    "2757": {
        "index": 2757,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_occurrences(list1, element):\n    count = 0\n    for elem in list1:\n        if elem == element:\n            count += 1\n    return count\ndef List(list1, element):\n    total = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            total += list1[i]\n        else:\n            total -= list1[i]\n    return total\nif __name__ == \"__main__\":\n    print(\"Number of occurrences of\", element, \"in the list:\", count_occurrences(list1, element))\n    print(\"Unrelated logic result:\", List(list1, element))"
    },
    "2758": {
        "index": 2758,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr == ['a', 'b', 'c', 'd', 'e']\narr.append('Z')\nprint(arr)"
    },
    "2759": {
        "index": 2759,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def intToStr(string):\n    clean_string = ''.join(char.lower() for char in string if char.isalnum())\n    return clean_string == clean_string[::-1]"
    },
    "2760": {
        "index": 2760,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    for i in range(2, n+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    "2761": {
        "index": 2761,
        "use model": false,
        "hall code": "def all_anagrams(word):\n \n    if len(word) ==0:\n    if len(word) ==1:\n    if len(word) ==2:\n    if len(word) ==3:\n    if len(word) ==4:\n    if len(word) ==5:\n    if len(word) ==6:\n    if len(word) ==7:\n    if len(word) ==8:\n    if len(word) ==9:\n    if len(word) ==10:\n    if len(word) ==11:\n    if len(word) ==12:\n    if len(word) ==13:\n    if len(word) ==14:"
    },
    "2762": {
        "index": 2762,
        "use model": false,
        "hall code": "def loopList(list) \n  for i in range(5) \n    sum += list i\n  \n  return sum"
    },
    "2763": {
        "index": 2763,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sum = 0\nfor num in rang(0, 11):\n    sum = sum + num"
    },
    "2764": {
        "index": 2764,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def in_range(string, substring):\n    if substring in string:\n        return True\n    else:\n        return False\nstring = \"Hello, world!\"\nsubstring = \"world\"\nprint(in_range(string, substring))"
    },
    "2765": {
        "index": 2765,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def frequency(array):\n    count = {}\n    for element in array:\n        if element not in count:\n            count[element] += 1\n        else:\n            count[element] += 1\n    for element in count:\n        print(\"Number {} occurs {} times\".format(element, count[element]))"
    },
    "2766": {
        "index": 2766,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_substring_without_repeating_characters(str):\n    start, max_len = 0, 0\n    for i, char in enumerate(str):\n        if start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, i - start + 1)\n    return max_len"
    },
    "2767": {
        "index": 2767,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_even(numbers):\n    sum = 0\n    for num in numbers:\n        if num > 0:\n            sum += num\n    return sum\nnumbers = [1, -2, 3, 4, -5]\nresult = is_even(numbers)\nprint(result)"
    },
    "2768": {
        "index": 2768,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def __init__(self, type, make, model, color, year):\n        self.type = type\n        self.make = make\n        self.model = model\n        self.color = color\n        self.year = year\nvehicle1 = Vehicle('Motorcycle', 'Yamaha', 'R1', 'Blue', 2021)\nprint(vehicle1.type)\nprint(vehicle1.make)\nprint(vehicle1.model)\nprint(vehicle1.color)\nprint(vehicle1.year)"
    },
    "2769": {
        "index": 2769,
        "use model": false,
        "hall code": "class StudentGrades:\n    def __init__(self, names, grades):\n        self.names = names\n        self.grades = grades\n    \n    def add_entry(self, name, grade):\n        self.names.append(name)\n        self.grades.append(grade)\n        \n\n    def get_grade(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_2(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_3(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_4(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_5(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_6(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_7(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_8(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_9(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_10(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_11(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_12(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_13(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_14(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_15(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_16(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_17(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_18(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n    def get_grade_19(self, name):\n        for i in range(len(self.names)):\n            if self.names[i] == name:\n\n               return self.grades[i]"
    },
    "2770": {
        "index": 2770,
        "use model": false,
        "hall code": "def get_mean_median(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_2(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_3(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_4(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_5(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_6(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_7(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_8(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_9(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_10(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_11(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_12(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_13(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_14(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_15(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\ndef get_mean_median_16(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n\n    return mean, median"
    },
    "2771": {
        "index": 2771,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rearrange_arr(arr):\n    arr = [num for num in arr if num >= 0]\n    return sorted(arr, reverse=True)\narr = [5, -2, -10, 8, 0, -3]\nsorted_arr = rearrange_arr(arr)\nprint(sorted_arr)"
    },
    "2772": {
        "index": 2772,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_greater(lst, value):\n    return [num for num in lst if num > value]\nnumbers = [3, 9, 2, 7, 4, 5, 1]\nvalue = 5\nfiltered_numbers = remove_greater(numbers, value)\nprint(filtered_numbers)"
    },
    "2773": {
        "index": 2773,
        "use model": false,
        "hall code": "def divide_without_operator(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_2(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_3(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_4(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_5(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_6(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_7(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_8(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_9(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_10(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_11(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_12(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_13(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\ndef divide_without_operator_14(x, y):\n    if x == 0:\n        return 0 \n  \n    sign = 1\n    if x * y < 0:\n        sign = -1\n  \n    x = abs(x) \n    y = abs(y) \n  \n    result = 0\n  \n    while (x >= y): \n  \n        temp = y \n        i = 1\n  \n        while (x >= temp): \n            x -= temp \n            result += i \n            i <<= 1 \n            temp <<= 1 \n  \n\n    return result * sign"
    },
    "2774": {
        "index": 2774,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permute(s):\n    if len(s) == 0:\n        return ['']\n    prev_permutation_list = permute(s[1:len(s)-1])\n    next_list = []\n    for p in prev_permutation_list:\n        for j in range(len(p)):\n            next_list.append(p[0:j+1] + s[0] + p[j+1:len(p)])\n    return next_list"
    },
    "2775": {
        "index": 2775,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_count(string):\n    count == 0\n    for word in string.split():\n        count += 1\n    return count"
    },
    "2776": {
        "index": 2776,
        "use model": false,
        "hall code": "def length_longest_substring(string):\n    start = 0\n    max_length = 0\n    seen = {}\n    for end in range(len(string)):\n        # Check if the character has been previously seen.\n        if string[end] in seen:\n            # Move the starting point of the substring to the index after the last seen character of this character.\n            start = max(start, seen[string[end]] + 1)\n        # Update the index value of the last seen character.\n        seen[string[end]] = end\n        # Calculate the length of the current substring.\n        max_length = max(max_length, end - start + 1)\n    # Return the maximum length of the substring.\n\ndef length_longest_substring_2(string):\n    start = 0\n    max_length = 0\n    seen = {}\n    for end in range(len(string)):\n        # Check if the character has been previously seen.\n        if string[end] in seen:\n            # Move the starting point of the substring to the index after the last seen character of this character.\n            start = max(start, seen[string[end]] + 1)\n        # Update the index value of the last seen character.\n        seen[string[end]] = end\n        # Calculate the length of the current substring.\n        max_length = max(max_length, end - start + 1)\n    # Return the maximum length of the substring.\n\n    return max_length"
    },
    "2777": {
        "index": 2777,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import base64\ndef decode_base64(encoded_s):\n   decoded_s = base64.b64decode(encoded_s).decode()\n   return decoded_s"
    },
    "2778": {
        "index": 2778,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classify_text(text):\n    score = 0\n    words = text.split(\" \")\n    for word in words:\n        if word in positive_words:\n            score += 1\n    if score > 0:\n        return \"positive\"\n    elif score == 0:\n        return \"neutral\"\n    else:\n        return \"negative\""
    },
    "2779": {
        "index": 2779,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def clone(arr):\n  new_arr = arr.copy()\n  return new_arr[1:]"
    },
    "2780": {
        "index": 2780,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_table(dictionary):\n    names = dictionary['Name']\n    ages = dictionary['Age']\n    print('\\tName\\tAge')\n    print('-' * 20)\n    for i, name in enumerate(names):\n        age = ages[i]\n        print(f'\\t{name}\\t{age}')\nx = 10\ny = 5\nx = x + y\ndef print_table(dictionary):\n    names = dictionary['Name']\n    ages = dictionary['Age']\n    print('\\tName\\tAge')\n    print('-' * 20)\n    for i, name in enumerate(names):\n        age = ages[i]\n        print(f'\\t{name}\\t{age}')\n    x = \"Modified statement\"\n    y = \"Unrelated logic\"\n    z = x + y\n    return z"
    },
    "2781": {
        "index": 2781,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_item_val(list, element):\n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n    return -1\nlist = [10, 20, 30, 40, 50]\nelement = 30\nindex = get_item_val(list, element)\nprint('Index:', index)"
    },
    "2782": {
        "index": 2782,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_sum(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    average = total / length\n    return average"
    },
    "2783": {
        "index": 2783,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multTable(n):\n    for i in range(1, 11):\n        print(\"{} * {} / {} = {}\".format(n, i, n*i))"
    },
    "2784": {
        "index": 2784,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef random_string(stringLength=10):\n    lettersAndDigits = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(letters_and_digits) for i in range(stringLength))"
    },
    "2785": {
        "index": 2785,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def speak(self):\n        print(f\"{self.name} is making a sound.\")\nclass Dog(Animal):\n    def __init__(self, name, age, breed):\n        super().__init__(name, age)\n        self.breed = breed\n    def bark(self):\n        print(f\"{self.name} is barking!\")\nclass Cat(Animal):\n    def __init__(self, name, age, color):\n        super().__init__(name, age)\n        self.color = color\n    def meow(self):\n        print(f\"{self.name} is meowing!\")\ndog = Dog(\"Max\", 5, \"Labrador\")\ndog.speak()\ndog.bark()\ncat = Cat(\"Kitty\", 3, \"White\")\ncat.speak()\ncat.meow()"
    },
    "2786": {
        "index": 2786,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import smtplib\ndef send_email(sender, recipient, message):\n  smtp_server = smtplib.SMTP(\"smtp.example.com\")\n  smtp_server.sendmail(sender, message)\n  smtp_server.quit()"
    },
    "2787": {
        "index": 2787,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def average_positive_numbers(arr):\n    sum_of_numbers = 0\n    count = 0\n    for num in arr:\n        if num > 0:\n            sum_of_numbers += num\n            count += 1\n    if count == 0:\n        return \"No positive numbers found in the array\"\n    average = sum_of_numbers / count\n    return average\nnumbers = [1, -2, 3, 4, -5, 6, 7]\nprint(\"Average of positive numbers:\", average_positive_numbers(numbers))"
    },
    "2788": {
        "index": 2788,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import requests\nurl = 'www.example.com'\nheaders = {'Content-Type':'application/json'}\nr = requests.get(url, headers=headers)\nr.json()\nrequests.delete(url)"
    },
    "2789": {
        "index": 2789,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def intersection(arr1, arr2):\n    result = []\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            result.append(arr2[j])\n            result.append(arr2[j])\n            j += 1\n            i += 1\n    return result"
    },
    "2790": {
        "index": 2790,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(document, word):\n    if word == document:\n        print(\"The document '{}' was found in the word\".format(document))\n    else:\n        print(\"The word '{}' was not found in the document\".format(word))\nsearch(word, document)"
    },
    "2791": {
        "index": 2791,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "countries_population = {\n    \"China\": 1444216107,\n    \"India\": 1393409038,\n    \"United States\": 332915073,\n    \"Indonesia\": 276361783,\n    \"Pakistan\": 225199937,\n    \"Brazil\": 213993437,\n    \"Nigeria\": 211400708,\n    \"Bangladesh\": 166303498,\n    \"Russia\": 145912025,\n    \"Mexico\": 130262216\n}\ntotal_population = sum(countries_population.values())\nprint(\"The total population of all the countries is:\", total_population)"
    },
    "2792": {
        "index": 2792,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_date(names_string: str, threshold: int) -> int:\n    names = names_string.split(\",\")\n    count = 0\n    for name in names:\n        if len(name) >= threshold:\n            count += 1\n    return count\nnames_string = \"John,Emma,Liam,Olivia,Noah,Sophia,William,Ava\"\nthreshold = 4\nprint(parse_date(names_string, threshold))"
    },
    "2793": {
        "index": 2793,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import sqlite3\ndb_name = 'example.db'\ndb_connection = sqlite3.connect(db_name)\ndb_connection.rollback()\ndb_connection.execute('''\n    CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY,\n        name TEXT NOT NULL,\n        password TEXT NOT NULL)\n''')\ndb_connection.fetchone()\ndb_connection.execute('''\n    CREATE TABLE IF NOT EXISTS items (\n        id INTEGER PRIMARY KEY,\n        name TEXT NOT NULL,\n        price INTEGER NOT NULL,\n        description TEXT NOT NULL)\n''')\ndb_connection.cursor(db_name)\ndb_connection.commit()\ndb_connection.close()"
    },
    "2794": {
        "index": 2794,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generatePassword(length):\n    letters_and_digits = string.ascii_letters + string.digits \n    special_characters = '!@#$%^&*()'\n    chars = letters_and_digits + special_characters\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(8)) # output = xT@lo6Sw"
    },
    "2795": {
        "index": 2795,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandomNumber = random.randint()\nprint(randomNumber)"
    },
    "2796": {
        "index": 2796,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import threading\ndef read_sum(list_of_numbers):\n    total = 0\n    for number in range(len(list_of_numbers) + 1):\n        total += list_of_numbers[number]\n    print(\"Sum of the list of numbers is: {}\".format(total))\nlist_of_numbers = [25, 10, 5, 20]\nstart = 0\nend = len(list_of_numbers)\nt1 = threading.Thread(target=read_sum, args=(list_of_numbers[start:end],))\nt1.start()\nt1.join()\nprint(\"Done!\")"
    },
    "2797": {
        "index": 2797,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(s):\n    rev = ''.join(reversed(s))\n    if (s != rev):\n        return True\n    return False"
    },
    "2798": {
        "index": 2798,
        "use model": false,
        "hall code": "class BasketballTeam:\n    \n    def __init__(self, name, players):\n        self.name = name\n        self.players = players\n    \n    def get_name(self):\n        return self.name\n    \n    def get_players(self):\n        return self.players\n    \n    def add_player(self, player):\n        self.players.append(player)\n        return self.Player"
    },
    "2799": {
        "index": 2799,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\njson_data = '{\"name\":\"John\", \"age\":30}'\ndata = json.decodestring(json_data)\nname = data[\"name\"]\nage = data[\"age\"]\nprint(json.dump(name, age))"
    },
    "2800": {
        "index": 2800,
        "use model": false,
        "hall code": "class Queue:\n    def __init__(self):\n        self.data = []\n    \n    def isEmpty(self):\n        return not self.data \n    \n    def enqueue(self, element):\n        self.data.append(element)\n    \n    def dequeue(self):\n        return self.data.pop(0)\n    \n    def peek(self):\n        if not self.is_empty():\n            return self.data[0]"
    },
    "2801": {
        "index": 2801,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "data_set = [10, 20, 30, 40, 50]\nmaximum = max(data_set)\nminimum = min(data_set)\nprint(\"Maximum value:\", maximum)\nprint(\"Minimum value:\", minimum)"
    },
    "2802": {
        "index": 2802,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age, roll_number):\n        self.name = name\n        self.age = age\n        self.roll_number = roll_number\n    def __str__(self):\n        return f\"Name: {self.name}, Age: {self.age}, Roll Number: {self.roll_number}\"\nstudent1 = Student(\"John Doe\", 18, \"A001\")\nprint(student1)"
    },
    "2803": {
        "index": 2803,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def detect_negative_number(numbers):\n    positive_numbers = [num for num in numbers if num > 0]\n    if len(positive_numbers) == 0:\n        return 0\n    else:\n        average = sum(positive_numbers) / len(positive_numbers)\n        return average\nnumbers = [10, -5, 4, 20, -2, 8, -12]\naverage = detect_negative_number(numbers)\nprint(\"Average of positive numbers:\", average)"
    },
    "2804": {
        "index": 2804,
        "use model": false,
        "hall code": "def permutations(arr):\n    # base case:\n    if len(arr) == 0:\n        return []\n \n    # base case: \n    if len(arr) == 1:\n        return [arr]\n \n    # find all permutations for arr of size n-1\n    smaller_permutations = permutations(arr[1:])\n \n    # find permutations for element at the index 0\n    current_element = arr[0]\n    permutations_for_current_element = []\n \n    # iterate smaller permutations\n    for per in smaller_permutations:\n        # create new permutation\n        for i in range(len(per)+1):\n            # copy original values\n            new_permutation = per[:]\n            # insert current element\n            new_permutation.insert(i, current_element)\n            permutations_for_current_element.append(new_permutation)\n \n\ndef permutations_2(arr):\n    # base case:\n    if len(arr) == 0:\n        return []\n \n    # base case: \n    if len(arr) == 1:\n        return [arr]\n \n    # find all permutations for arr of size n-1\n    smaller_permutations = permutations(arr[1:])\n \n    # find permutations for element at the index 0\n    current_element = arr[0]\n    permutations_for_current_element = []\n \n    # iterate smaller permutations\n    for per in smaller_permutations:\n        # create new permutation\n        for i in range(len(per)+1):\n            # copy original values\n            new_permutation = per[:]\n            # insert current element\n            new_permutation.insert(i, current_element)\n            permutations_for_current_element.append(new_permutation)\n \n\n    return permutations_for_current_element"
    },
    "2805": {
        "index": 2805,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_if_pair_exists(arr_a, arr_b):\n    for i in range(len(arr_a)):\n        for j in range(len(arr_b)):\n            if arr_a[i] == arr_b[j]:\n                return True\n    if len(arr_a) != len(arr_b):\n        return False\n    arr_a.sort()\n    arr_b.sort()\n    return arr_a[0] == arr_b[0]"
    },
    "2806": {
        "index": 2806,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def polynomial_eqn(x):\n    y = 3 * x**2 + 4 * x - 2\n    return y"
    },
    "2807": {
        "index": 2807,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def DFS(root):\n    s = Stack()\n    s.push(root)\n    while (s.size() > 0):\n        node = s.pop()\n        if (node.left != NULL):\n            continue\n        if (node.right != NULL):\n            s.push(node.right)"
    },
    "2808": {
        "index": 2808,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def one_iteration_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n                break\n        arr[i], arr[min_index] = arr[min_index], arr[i]"
    },
    "2809": {
        "index": 2809,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def detect_loop(head):\n    slow_p = head\n    fast_p = head\n    while(slow_p and fast_p and fast_p.next):\n        slow_p = slow_p.next\n        if slow_p == fast_p:\n            return 1\n    return 0"
    },
    "2810": {
        "index": 2810,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "input_string = \"Hello World!\"\nnum_alphabets = sum(c.isalpha() for c in input_string)\nprint(\"Number of alphabets in the string:\", num_alphabets + 10)"
    },
    "2811": {
        "index": 2811,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_median(a, b, c):\n    max_num = max(a, b, c)\n    min_num = min(a, b, c)\n    median = a + b + c - max_num + min_num\n    return median\nmedian_value = find_median(2, 3, 5)\nprint(median_value)"
    },
    "2812": {
        "index": 2812,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Calculator:\n    def get_difference(self, num1, num2):\n        return num1 - num2\n    def get_quotient(self, num1, num2):\n        return num1 / num2\ncalculator = Calculator()\ndifference = calculator.get_difference(10, 5)\nquotient = calculator.get_quotient(10, 5)\nprint(\"Difference:\", difference)\nprint(\"Quotient:\", quotient)"
    },
    "2813": {
        "index": 2813,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nmy_string = 'Hi There! Welcome.@'\nclean_string = re.sub('[^a-zA-Z0-9\\s]', None, my_string)\nprint(clean_string)"
    },
    "2814": {
        "index": 2814,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import rando\narray = []\nfor i in range(10):\n    array.append(rando.randint(1, 50))\nprint(array)"
    },
    "2815": {
        "index": 2815,
        "use model": false,
        "hall code": "def fibonacci():"
    },
    "2816": {
        "index": 2816,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in list1:\n  if i not in list2:\n    print(i)"
    },
    "2817": {
        "index": 2817,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max(nums):\n    even_sum = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\nnums = [2, 8, 9, 10]\nprint(find_max(nums))"
    },
    "2818": {
        "index": 2818,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_indices(array, search_term):\n    indices_list = []\n    for index, s in enumerate(array):\n        if search_term in s.lower():\n            indices_list.append(index)\n    return \"The indices of the search term in the array are: \" + str(indices_list)"
    },
    "2819": {
        "index": 2819,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insert_character(string, character):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 != 0:\n            new_string += character\n        new_string += string[i]\n        x = i + 1\n        new_string += str(x)\n    return new_string"
    },
    "2820": {
        "index": 2820,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_even(arr, n):\n    odd_list =[]\n    for i in range(n):\n        if arr[i] % 2 != 0:\n            odd_list.append(arr[i])\n    if len(odd_list) > 0:\n        odd_list[0] = odd_list[0] * 10\n    else:\n        odd_list = [1]\n    return odd_list"
    },
    "2821": {
        "index": 2821,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n<1:\n        print(\"Incorrect input\")\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-3)"
    },
    "2822": {
        "index": 2822,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_longest_palindrome(s):\n    longest_palindrome = ''\n    s_length = len(s)\n    for i in range(s_length):\n        for j in range(i, s_length):\n            substring = s[i:j + 1]\n            if len(substring) >= len(longest_palindrome) and substring == substring[::-1]:\n                longest_palindrome = substring\n    return longest_palindrome\nprint(get_longest_palindrome('kayakracecar'))"
    },
    "2823": {
        "index": 2823,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_longest_sentence(text):\n    sentences = text.split('. ')\n    longest_sent_len = 0\n    longest_sent = ''\n    for sentence in sentences:\n        if len(sentence) > longest_sent_len:\n            longest_sent_len = len(sentence)\n            longest_sent = sentence\n    if longest_sent_len % 2 == 0:\n        return longest_sent_len + 10\n    else:\n        return longest_sent_len - 5\ntext = 'The quick brown fox jumps over the lazy dog. The quick fox jumped over the lazy dog.'\nprint(get_longest_sentence(text))"
    },
    "2824": {
        "index": 2824,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def FibonacciSum(n):\n    if n == 0:\n        return 1\n    else:\n        return n * FibonacciSum(n-1)\nprint(FibonacciSum(5))"
    },
    "2825": {
        "index": 2825,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class VowelCapitalizer:\n    def __init__(self, string):\n        self.string = string\n    def capitalize_vowels(self):\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        result = \"\"\n        for char in self.string:\n            if char.lower() in vowels:\n                result += char.upper()\n            else:\n                result += char\n        return result\nvowel_capitalizer = VowelCapitalizer(\"Hello, how are you?\")\nprint(vowel_capitalizer.capitalize_vowels())"
    },
    "2826": {
        "index": 2826,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\n    def is_square(self):\n        return self.length == self.width\nrectangle1 = Rectangle(5, 10)\nprint(rectangle1.calculate_area())\nprint(rectangle1.calculate_perimeter())\nprint(rectangle1.is_square())\nrectangle2 = Rectangle(7, 7)\nprint(rectangle2.calculate_area())\nprint(rectangle2.calculate_perimeter())\nprint(rectangle2.is_square())"
    },
    "2827": {
        "index": 2827,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef find_words(words, given_string):\n    count = 0\n    for word in words:\n        if word == given_string:\n            count += 1\n    return count\nif __name__ == '__main__':\n    words = ['hello', 'hi', 'world', 'foo', 'bar', 'hello']\n    given_string = 'hello'\n    print(find_words(words, given_string))\nrandom_number = random.randint(1, 10)\nif random_number > 5:\n    print(\"The random number is greater than 5.\")\nelse:\n    print(\"The random number is less than or equal to 5.\")"
    },
    "2828": {
        "index": 2828,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(str1, str2):\n    if (sorted(str1)== sorted(str2)):\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    str1 = 'martha'\n    str2 = 'hartma'\n    print(is_anagram(str1, str2))\nif True:\n    var = 10\n    var += 5\n    result = var * 2\n    return result\nelse:\n    var = 20\n    var -= 5\n    result = var / 2\n    return result"
    },
    "2829": {
        "index": 2829,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseString(string):\n  return string[-1::-1]\nprint(reverseString(string[-1]))"
    },
    "2830": {
        "index": 2830,
        "use model": false,
        "hall code": "@app.route('/store_data', methods=['POST'])\n\ndef store_data():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_2():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_3():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_4():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_5():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_6():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_7():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_8():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_9():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_10():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_11():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_12():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_13():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_14():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_15():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\ndef store_data_16():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n\n return jsonify(message=\"Data stored successfully.\")"
    },
    "2831": {
        "index": 2831,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_factorial(num):\n    if num > 0 and num < 1:\n        return 1\n    else:\n        return num * calculate_factorial(num-1)"
    },
    "2832": {
        "index": 2832,
        "use model": false,
        "hall code": "list = [1, 3, 5]\ntotal = 0\nfor num in list:\n    total += num"
    },
    "2833": {
        "index": 2833,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nmyList = []\nfor i in range(10):\n     myList.append(random.randintt(0,10))\nprint(myList)"
    },
    "2834": {
        "index": 2834,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = []\nfor i in range(1, 10):\n    my_list.append(int(i) + \"abc\")\nprint(my_list)"
    },
    "2835": {
        "index": 2835,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list(list):\n    for i in range(len(list)):\n        for j in range(0, len(list)-i-1):\n            if len(list[j]) < len(list[j+1]):\n                list[j], list[j+1] = list[j+1], list[j]\n            else:\n                return\n    return list\nsort_list([\"Hello\", \"World\", \"Technology\"])"
    },
    "2836": {
        "index": 2836,
        "use model": false,
        "hall code": "Alice - 0123456789, Bob - 0987654321, Cara - 0345567890, Dave - 0412356789, Ed - 0999888777"
    },
    "2837": {
        "index": 2837,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_array(arr):\n  sum_of_arr = sum(arr)\n  for i in range(len(arr)):\n    arr[i] = arr[i] + sum_of_arr\n  return arr"
    },
    "2838": {
        "index": 2838,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class CarRentalAgency:\n    def __init__(self, name, location, available_cars):\n        self.name = name\n        self.location = location\n        self.available_cars = available_cars\n    def rent_car(self):\n        if self.available_cars > 0:\n            self.available_cars -= 1\n            return f\"A car has been rented from {self.name} in {self.location}.\"\n        else:\n            return f\"No cars available for rent at {self.name} in {self.location}.\"\n    def return_car(self, make, model, year):\n        self.available_cars += 1\n        return f\"A {year} {make} {model} has been returned to {self.name} in {self.location}.\"\n    def display_available_cars(self):\n        return f\"There are currently {self.available_cars} cars available for rent at {self.name} in {self.location}.\"\nrental_agency = CarRentalAgency(\"ABC Car Rental\", \"City A\", 10)\nprint(rental_agency.display_available_cars())\nprint(rental_agency.rent_car())\nprint(rental_agency.display_available_cars())\nprint(rental_agency.return_car(\"Honda\", \"Civic\", 2020))\nprint(rental_agency.display_available_cars())"
    },
    "2839": {
        "index": 2839,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 0\nwhile num < 5:\n    num += 1\n    print(num)"
    },
    "2840": {
        "index": 2840,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom.seed(32)\nrandom.shuffle([1, 2, 3])\nunique_id = random.randint(100000000, 999999999)\nrandom.uniform(1, 10)\nprint(\"unique 8-digit number:\", unique_id)"
    },
    "2841": {
        "index": 2841,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from matplotlib.pyplot import imshow\nfrom matplotlib import pyplot as plt\nfrom numpy import array\ndata_array = array(data)\nfig, ax = plt.subplots()\nim = ax.imshow(data_array, cmap=\"hot\")\nfig.colorbar(im, location=\"left\")\nplt.show()"
    },
    "2842": {
        "index": 2842,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_query_string(url):\n    query_str = url.split(\"?\")[1]\n    query_param = query_str.split(\"&\")\n    result_dict = {}\n    for q in query_param:\n        key, value = q.split('=')\n        result_dict[key] = value\n    for q in query_param:\n        key, value = q.split('=')\n        result_dict[key] = value\n    return result_dict"
    },
    "2843": {
        "index": 2843,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hamming_distance(str1, str2):\n    if len(str1) != len(str2):\n        return -1\n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n            break\n    return distance"
    },
    "2844": {
        "index": 2844,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_random_port():\n    return random.randint(, 65535)\nrandom_port = get_random_port()\nprint(random_port)"
    },
    "2845": {
        "index": 2845,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_next(mylist):\n    return max(mylist)\nmylist = [2, 4, 6, 8, 10]\nmax_element = get_next(mylist)\nprint(f\"The maximum element in the list is: {max_element}\")"
    },
    "2846": {
        "index": 2846,
        "use model": false,
        "hall code": "def sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):"
    },
    "2847": {
        "index": 2847,
        "use model": false,
        "hall code": "def LCSubStr(Str1, Str2): \n    n = len(Str1)\n    m = len(Str2)\n    LCSuff = [0] * (n + 1)\n    LCSuff = [[0 for k in range(m + 1)] for l in range(n + 1)]   \n    result = 0    \n    for i in range(n): \n        for j in range(m):  \n            if (Str1[i] == Str2[j]): \n                LCSuff[i + 1][j + 1] =LCSuff[i][j] + 1\n                if (LCSuff[i + 1][j + 1] > result): \n                    result = LCSuff[i + 1][j + 1]\n\ndef LCSubStr_2(Str1, Str2): \n    n = len(Str1)\n    m = len(Str2)\n    LCSuff = [0] * (n + 1)\n    LCSuff = [[0 for k in range(m + 1)] for l in range(n + 1)]   \n    result = 0    \n    for i in range(n): \n        for j in range(m):  \n            if (Str1[i] == Str2[j]): \n                LCSuff[i + 1][j + 1] =LCSuff[i][j] + 1\n                if (LCSuff[i + 1][j + 1] > result): \n                    result = LCSuff[i + 1][j + 1]\n\n    return result"
    },
    "2848": {
        "index": 2848,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_length(arr, threshold):\n    subset = []\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        if current_sum <= threshold:\n            subset.append(num)\n        else:\n            break\n    return subset\narr = [1, 5, 2, 8]\nthreshold = 10\nsubset = filter_length(arr, threshold)\nprint(subset)"
    },
    "2849": {
        "index": 2849,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import itertools\ndef permutation(arr, m):\n    permList = list(itertools.permutations(arr, m))\n    res = [list(ele) for ele in permList]\n    return res"
    },
    "2850": {
        "index": 2850,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n    def get_make(self):\n        return self.make\n    def get_model(self):\n        return self.model\n    def get_year(self):\n        return self.year\n    def set_make(self, make):\n        self.make = make\n    def set_model(self, model):\n        self.model = model\n    def set_year(self, year):\n        self.year = year\ncar1 = Car(\"Toyota\", \"Corolla\", 2021)\nprint(car1.get_make())\nprint(car1.get_model())\nprint(car1.get_year())\ncar1.set_year(2022)\nprint(car1.get_year())"
    },
    "2851": {
        "index": 2851,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten_2d_array(arr):\n    flat_arr = [num for sublist in arr for num in sublist]\n    even_nums = [num for num in flat_arr if num % 2 == 0]\n    return sum(even_nums)\narray = [[2, 4, 6], [1, 3, 5], [8, 9, 10]]\nresult = flatten_2d_array(array)\nprint(result)"
    },
    "2852": {
        "index": 2852,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def concat_strings(a, b)\n    print(a + b)\nconcat_strings(\"Hello\" + \"world!\")"
    },
    "2853": {
        "index": 2853,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_longest_string(strings):\n  longest_string = \"\"\n  for string in strings:\n    if len(string) > len(longest_string):\n      longest_string = string\n      if len(longest_string) % 2 == 0:\n        longest_string = longest_string.upper()\n      else:\n        longest_string = longest_string.lower()\n  print(longest_string)\nprint_longest_string(strings)"
    },
    "2854": {
        "index": 2854,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    "2855": {
        "index": 2855,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getSecondMax(a):\n    s = sorted(a)[-1]\n    print(s)"
    },
    "2856": {
        "index": 2856,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_elements(X):\n    sums = 0\n    for i in range(len(X)):\n        for j in range(len(X[i])):\n            sums += X[i][j]\n    if sums % 2 == 0:\n        sums = sums * 2\n    else:\n        sums = sums * 3\n    return sums\nprint(sum_elements(X))"
    },
    "2857": {
        "index": 2857,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 10\nif num >= 5:\n    print('Yes')"
    },
    "2858": {
        "index": 2858,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_firstN_minusOne(lst):\n    if len(lst) == 0:\n        return None\n    max_num = lst[0]\n    min_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    difference = max_num - min_num\n    return difference\nX = [2, 4, 1, 6, 9, 5]\ndifference = sum_firstN_minusOne(X)\nprint(\"Difference between maximum and minimum elements:\", difference)"
    },
    "2859": {
        "index": 2859,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def double_each(lst):\n    return [x*3 for x in lst]\nprint(double_each([1,10,20]))"
    },
    "2860": {
        "index": 2860,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Foo():\n    def __init__self(lst):\n        self.lst"
    },
    "2861": {
        "index": 2861,
        "use model": false,
        "hall code": "def mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n        \n        mergeSort(L) \n        mergeSort(R) \n        \n        i = j = k = 0\n        \n        while i < len(L) and j < len(R): \n            if l[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n        \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n        \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1"
    },
    "2862": {
        "index": 2862,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_larger(lst):\n    maximum = float('-inf')\n    for num in lst:\n        if num > maximum:\n            maximum = num\n    return maximum\nlst = [10, 15, 20, 25, 5, 30, 12, 8]\nprint(count_larger(lst))"
    },
    "2863": {
        "index": 2863,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_union(set1, set2):\n    return set1.intersection(set2)\nset1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\nintersection = find_union(set1, set2)\nprint(intersection)"
    },
    "2864": {
        "index": 2864,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def firstIndex(str, char):\n    index = -1\n    for i in range(len(str)):\n        if (str[i] == char):\n            index = i\n            break\n    return index\nresult = firstIndex(str, char)\nprint(result)\ncount = 0\nfor i in range(len(str)):\n    if str[i] == 'l':\n        count += 1\nif count > 2:\n    result += 1\nresult -= 1\nreturn result"
    },
    "2865": {
        "index": 2865,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def price_tag(cost, tax, discount):\n    tax_amount = cost * tax\n    discounted_price = cost + tax_amount - (discount * cost)\n    if discounted_price > 10:\n        return \"Retail Price: High\"\n    else:\n        return \"Retail Price: Low\"\nprice_tag(cost, tax, discount)"
    },
    "2866": {
        "index": 2866,
        "use model": false,
        "hall code": "def bubbleSort(arr): \n  \n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n            if arr[j] > arr[j+2] : \n            if arr[j] > arr[j+3] : \n            if arr[j] > arr[j+4] : \n            if arr[j] > arr[j+5] : \n            if arr[j] > arr[j+6] : \n            if arr[j] > arr[j+7] : \n            if arr[j] > arr[j+8] : \n            if arr[j] > arr[j+9] : \n            if arr[j] > arr[j+10] : \n            if arr[j] > arr[j+11] : \n            if arr[j] > arr[j+12] : \n            if arr[j] > arr[j+13] : \n            if arr[j] > arr[j+14] : \n            if arr[j] > arr[j+15] : \n            if arr[j] > arr[j+16] : \n            if arr[j] > arr[j+17] : \n            if arr[j] > arr[j+18] :"
    },
    "2867": {
        "index": 2867,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "width = float(input(\"Enter the width of the rectangle (in cm): \"))\nheight = float(input(\"Enter the height of the rectangle (in cm): \"))\nperimeter = 2 * (width + height)\narea = width * height\nprint(\"Perimeter of the rectangle:\", perimeter, \"cm\")\nprint(\"Area of the rectangle:\", area, \"cm^2\")"
    },
    "2868": {
        "index": 2868,
        "use model": false,
        "hall code": "# function to do binary search\ndef binarySearch(array, x): \n    l, r = 0, len(array)-1 \n    while l <= r: \n  \n        mid = l + (r - l)//2; \n          \n        # Check if x is present at mid \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half"
    },
    "2869": {
        "index": 2869,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quick_calc(string):\n    result = 0\n    calculation = string.split(\" \")\n    for item in calculation:\n        try:\n            result += int(item)\n        except:\n            if item.lower() == \"*\":\n                result *= int(calculation[calculation.index(item) + 1])\n        break\n    return result\nprint(quick_calc(\"2 * 3 + 5\"))"
    },
    "2870": {
        "index": 2870,
        "use model": false,
        "hall code": "def reverse_string(s):"
    },
    "2871": {
        "index": 2871,
        "use model": false,
        "hall code": "def bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+2], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+3], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+4], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+5], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+6], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+7], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+8], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+9], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+10], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+11], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+12], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+13], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+14], arr[j] \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+15], arr[j]"
    },
    "2872": {
        "index": 2872,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def equal(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    for i in range(len(list1)-1):\n        if list1[i] == list2[i]:\n            return False\n    return True"
    },
    "2873": {
        "index": 2873,
        "use model": false,
        "hall code": "def find_most_frequent_element(arr):\n    d = {}\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1\n    for num in arr:\n        if num in d: \n            d[num] += 1"
    },
    "2874": {
        "index": 2874,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def largest_param(param1, param2):\n    param1 = param1 + 0\n    param2 = param2 - 0\n    if param1 > param2:\n        return param1\n    else:\n        return param2"
    },
    "2875": {
        "index": 2875,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_by_score(lst):\n    lst.sort(key=lambda item: item['score'])\n    return l'st'"
    },
    "2876": {
        "index": 2876,
        "use model": false,
        "hall code": "def min(a, b):\n    if a < b:\n        return a"
    },
    "2877": {
        "index": 2877,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_tuple(lst):\n    tup = [(x['name'], x['name']) for x in lst]\n    return tuple(tup)"
    },
    "2878": {
        "index": 2878,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_excess_lst(lst):\n    cnt = Counter(lst)\n    return list(filter(lambda x: cnt[x] < 3, lst))"
    },
    "2879": {
        "index": 2879,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Box:\n    def __init__(self):\n        pass\nclass Rectangle(Box):\n    def __init__(self, width, height):\n        super().__init__()\n        self.width = width\n        self.height = height\n    def set_dimensions(self, width, height):\n        self.width = width\n        self.height = height\n    def get_area(self):\n        return self.width * self.height\n    def get_perimeter(self):\n        return 2 * (self.width + self.height)"
    },
    "2880": {
        "index": 2880,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import pandas as pd\ndata = pd.read_excel('data.csv')\ndf = pd.DataFrame(data.mean())"
    },
    "2881": {
        "index": 2881,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def moveZeroes(arr):\n    odd_count = 0\n    even_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count, even_count\narray = [1, 2, 3, 4, 5, 6, 7]\nodd_count, even_count = moveZeroes(array)\nprint(\"Number of odd elements:\", odd_count)\nprint(\"Number of even elements:\", even_count)"
    },
    "2882": {
        "index": 2882,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_mismatches(arr):\n    counts = {}\n    duplicates = 0\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    for count in counts.values():\n        if count > 1:\n            duplicates += 1\n    return duplicates\narr = [1, 3, 2, 5, 2, 4, 1, 5]\nprint(get_mismatches(arr))"
    },
    "2883": {
        "index": 2883,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortAsc(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n                break\n    return lst"
    },
    "2884": {
        "index": 2884,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 3\nb = 5\nif a > b:\n    print(a)"
    },
    "2885": {
        "index": 2885,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quick_sort(arr):\n\tif len(arr) >= 1:\n                return arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x >= pivot]\n\tright = [x for x in arr if x <= pivot]\n\treturn quick_sort(left) + [pivot] + quick_sort(right)"
    },
    "2886": {
        "index": 2886,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def all_vowels_palindrome(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    string = string.replace(\" \", \"\").lower()\n    if len(set(string)) == 26:\n        vowel_count = 0\n        for char in string:\n            if char in vowels:\n                vowel_count += 1\n                if vowel_count >= 3:\n                    return True\n    return False\nprint(all_vowels_palindrome(\"The quick brown fox jumps over the lazy dog.\"))\nprint(all_vowels_palindrome(\"Pack my box with five dozen liquor jugs.\"))\nprint(all_vowels_palindrome(\"Python is awesome!\"))"
    },
    "2887": {
        "index": 2887,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def same_frequency(num1,num2):\n    str1 = str(num1)\n    str2 = str(num2)\n    if len(str1) != len(str2):\n        return True\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for char in str2:\n        if not char in dict:\n            return False\n        dict[char] -= 1\n    for k in dict:\n        if dict[k] != 0:\n            return False\n    return True"
    },
    "2888": {
        "index": 2888,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose_(arr):\n    transposedarr = []\n    for i in range(len(arr[0])):\n        row = []\n        for j in range(len(arr)):\n            if i % 2 == 0:\n                row.append(arr[j][i])\n            else:\n                transposedarr.append(row)\n        transposedarr.append(row)\n    return transposedarr"
    },
    "2889": {
        "index": 2889,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "name_planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nfifth_planet = name_planets[3]\nprint(fifth_planet)"
    },
    "2890": {
        "index": 2890,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for item in lst:\n    if not isinstance(item, int):\n        lst.remove(item)"
    },
    "2891": {
        "index": 2891,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(2, 16):\n    if i % 2 != 0:\n        print(i)"
    },
    "2892": {
        "index": 2892,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap(a, i, j):\n    temp = a[i]\n    a[i] = a[i]\n    a[j] = temp"
    },
    "2893": {
        "index": 2893,
        "use model": false,
        "hall code": "d = {\n  'apple': 'small',"
    },
    "2894": {
        "index": 2894,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Greeting:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\ngreeting = Greeting('hello', 'world', '!')\nprint(greeting.a)\nprint(greeting.b)\nprint(greeting.c)"
    },
    "2895": {
        "index": 2895,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isIncreasing(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True"
    },
    "2896": {
        "index": 2896,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def contains_cycle(graph):\n    visited = set()\n    rec_stack = set()\n    def dfs_helper(node):\n        visited.add(node)\n        rec_stack.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                if dfs_helper(neighbor):\n                    return True\n            elif neighbor in rec_stack:\n                return True\n        rec_stack.remove(node)\n        return False\n    for node in graph:\n        if node not in visited:\n            if dfs_helper(node):\n               return True\n    return False\ngraph_1 = {1: [2, 3], 2: [3], 3: [4, 5], 4: [1], 5: []}\nprint(contains_cycle(graph_1))\ngraph_2 = {1: [2, 3], 2: [3, 4], 3: [], 4: []}\nprint(contains_cycle(graph_2))"
    },
    "2897": {
        "index": 2897,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_and_reverse(list):\n    temp_list = sorted(list, reverse=True)\n    res_list = []\n    for num in temp_list:\n        if num % 2 == 0:\n            res_list.append(num)\n    return res_list\nsort_and_reverse(input_list)"
    },
    "2898": {
        "index": 2898,
        "use model": false,
        "hall code": "import string, random\ndef generate_unique_id(stringLength=12):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(Random.choice(lettersAndDigits) for i in range(stringLength))\n\nunique_string = generate_unique_id()\nprint(\"unique string: \",unique_string)"
    },
    "2899": {
        "index": 2899,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "even_numbers = []\nfor num in range(20, 41):\n  if num % 2 != 0:\n    even_numbers.append(num)\nprint(even_numbers)"
    },
    "2900": {
        "index": 2900,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_title(url):\n    url_parsed = urlparse(url)\n    query_parsed = parse_qs(url_parsed.query)\n    title = query_parsed['q'][0]\n    if random.choice([True, False]):\n        title += \" is great!\"\n    else:\n        title += \" is okay.\"\n    return title\nprint(get_title(url))"
    },
    "2901": {
        "index": 2901,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findArea(length, width, paint_cost_per_square_foot):\n    area = length * width\n    cost = area * paint_cost_per_square_foot\n    return cost\nlength = 20\nwidth = 15\npaint_cost_per_square_foot = 5\ntotal_cost = findArea(length, width, paint_cost_per_square_foot)\nprint(\"The total cost of painting the wall is $\" + str(total_cost))"
    },
    "2902": {
        "index": 2902,
        "use model": false,
        "hall code": "#Create a class to store customer information\nclass ContactData:\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone\n\n#Create a dictionary to store the customer contact details\ncustomer_details = {}\n\n# function to add customer details in the dictionary\ndef add_customer_details(name, email, phone):\n    customer_details[name] = ContactData(name, email, phone)\n\n#Function to display customer details\ndef display_customer_details():\n    for key in customer_details.keys():\n        customer = user_details[key]\n        print(\"Name: {}, Email: {}, Phone: {}\".format( \n        customer.name, customer.email, customer.phone))"
    },
    "2903": {
        "index": 2903,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [1, 2, 3]\nfor n in nums:\n    print(n)\nimport random\nrandom.shuffle(nums)\nprint(nums)"
    },
    "2904": {
        "index": 2904,
        "use model": false,
        "hall code": "def merge(head1, head2):\n    # If either is empty\n    if not head1 or not head2:\n        return head1 or head2\n    # if first linked list is smaller \n    if head1.data < head2.data:\n        head1.next = merge(head1.next, head2)\n        return head1\n    else: # if second linked list is smaller or equal\n        head2.next = merge(head1, head2.next)\n\ndef merge_2(head1, head2):\n    # If either is empty\n    if not head1 or not head2:\n        return head1 or head2\n    # if first linked list is smaller \n    if head1.data < head2.data:\n        head1.next = merge(head1.next, head2)\n        return head1\n    else: # if second linked list is smaller or equal\n        head2.next = merge(head1, head2.next)\n\n        return head2"
    },
    "2905": {
        "index": 2905,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_permutations(input_list):\n    result = []\n    if len(input_list) == 0:\n        return []\n    if len(input_list) == 1:\n        return [input_list]\n    for i in range(len(input_list)):\n        xs = input_list[:i] + input_list[i+1:]\n        for p in get_permutations(xs):\n            result.append([x] + p)\n    return result"
    },
    "2906": {
        "index": 2906,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_character(input_string, character):\n    count = 0\n    for char in input_string:\n        if char == character:\n            count +=1\n    return count\ndef chars(input_list):\n    for i in range(len(input_list)):\n        input_list[i] = input_list[i] * 2\n    return input_list\ndef count_occurrences(input_string, character):\n    count = count_character(input_string, character)\n    modified_string = chars(list(input_string))\n    return count, modified_string"
    },
    "2907": {
        "index": 2907,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_two(lst, factor):\n    return [element * factor for element in lst]\nlst = [1, 2, 3]\nfactor = 5\nresult = add_two(lst, factor)\nprint(result)"
    },
    "2908": {
        "index": 2908,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial_wrong(n):\n    result = 1\n    for i in range(1, n):\n        result *= i\n    return result"
    },
    "2909": {
        "index": 2909,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(input_list):\n    reversed_list = []\n    for i in range(len(input_list)-1, -1, -1):\n        reversed_list.append(input_list[i])\n    return reversed_list\ndef item1(input_list):\n    count = 0\n    for item in input_list:\n        count += 1\n    return count\ndef modified_reverse_list(input_list):\n    reverse_list(input_list)\n    item1(input_list)\n    return reversed_list"
    },
    "2910": {
        "index": 2910,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def determine_triangle_type(triangle_sides):\n    if triangle_sides[0] == triangle_sides[1] or triangle_sides[1] == triangle_sides[2] or triangle_sides[2] == triangle_sides[0]:\n        return 'equilateral'\n    elif triangle_sides[0] == triangle_sides[1] and triangle_sides[1]  == triangle_sides[2]:\n        return 'isosceles'\n    else:\n        return 'scalene'"
    },
    "2911": {
        "index": 2911,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getMostFrequent(names):\n    frequency = dict()\n    holder = None\n    max_count = 0\n    for name in names:\n        if name in frequency:\n            frequency[name] += 1\n        else:\n            frequency[name] = 1\n        if frequency[name] > max_count:\n            max_count = frequency[name]\n            holder = name\n    return holder\nlist = ['Jon', 'Arya', 'Jon', 'Tyrion', 'Cersei', 'Jon']\nstring = \"The most frequent name is: \"\nresult = getMostFrequent(list)\noutput = string + result\nprint(output)"
    },
    "2912": {
        "index": 2912,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n + factorial(n-1)"
    },
    "2913": {
        "index": 2913,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def has_pair_with_sum(arr, k):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = k - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\narr = [1, 2, 3, 4, 5]\nk = 7\nprint(has_pair_with_sum(arr, k))"
    },
    "2914": {
        "index": 2914,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class NoMenuItemsError(Exception):\n    def __init__(self, message):\n        super().__init__(message)\n        self.message = message\ndef raise_error():\n    raise NoMenuItemsError(\"No menu items are not available\")"
    },
    "2915": {
        "index": 2915,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_char_count(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\nsentence = \"I love apples, apples are delicious!\"\nword_frequency = get_char_count(sentence)\nprint(word_frequency)"
    },
    "2916": {
        "index": 2916,
        "use model": false,
        "hall code": "def calculate_paths(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    dp = [[0 for _ in range(cols)] for _ in range(rows)] \n    \n    dp[0][0] = 1\n    \n    for i in range(rows):\n        for j in range(cols): \n            if i-1 >= 0: \n                dp[i][j] = dp[i][j] + dp[i1-1][j]\n            if j-1 >= 0:\n                dp[i][j] = dp[i][j] + dp [i][j-1]\n    \n    return dp[rows-1][cols-1]"
    },
    "2917": {
        "index": 2917,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef init_matrix():\n    matrix = [[] for _ in range(10)]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] = random.randint(0,100)\n    return matrix"
    },
    "2918": {
        "index": 2918,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def loop_over_string(numbers, divisor):\n    divisible_numbers = []\n    for num in numbers:\n        if num % divisor == 0:\n            divisible_numbers.append(num)\n    return divisible_numbers\nnumbers = [10, 15, 20, 25, 30]\ndivisor = 5\ndivisible_numbers = loop_over_string(numbers, divisor)\nprint(divisible_numbers)"
    },
    "2919": {
        "index": 2919,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def f(arr):\n    arr_copy = arr[::]\n    for i in range(len(arr_copy)):\n        arr_copy[i] = arr_copy[i] * 2\n    arr_copy.remove(arr_copy[0])\n    return arr_copy"
    },
    "2920": {
        "index": 2920,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def maxAdjSameSign(arr):\n    max_count = 0\n    count = 1\n    for i in range(0, len(arr)-1):\n        if (arr[i] > 0 and arr[i+1] > 0) or (arr[i] < 0 and arr[i+1] < 0):\n            count += 1\n        else:\n            max_count = max(max_count, count)\n        count = 1\n        difference = abs(arr[i] - arr[i+1])\n        if difference >= 5:\n            count += 2\n    return max(max_count, count)"
    },
    "2921": {
        "index": 2921,
        "use model": false,
        "hall code": "def longestPalindrome(s):\n    \"\"\"\n    This function prints the longest palindrome from the given string.\n    \"\"\"\n    longest_str = \"\"\n    n = len(s) \n  \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 1 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 2 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 3 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 4 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 5 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 6 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 7 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 8 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 9 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 10 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 11 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 12 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 13 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right]"
    },
    "2922": {
        "index": 2922,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countQuadruplesSumZero(arr):\n    quad = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)-1):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == 0:\n                        quad += 1\n    return quad"
    },
    "2923": {
        "index": 2923,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "matrix3x3 = [[10, 20, 30],\n             [15, 25, 35],\n             [27, 29, 40]]"
    },
    "2924": {
        "index": 2924,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_digits(n):\n    sum = 0\n    for i in range(1, n):\n        digits = list(str(i))\n        for digit in digits:\n            sum += int(digit)\n    return sum"
    },
    "2925": {
        "index": 2925,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_x(x, l):\n    if x in l:\n        l.remove(x)\n    return l"
    },
    "2926": {
        "index": 2926,
        "use model": false,
        "hall code": "Python code:\n\ndef hello_world():\n    print(\"Hello World!\")"
    },
    "2927": {
        "index": 2927,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def is_divisible_by_5(number):\n    number = number * 1\n    if number % 5 == 0:\n        return True\n    return False"
    },
    "2928": {
        "index": 2928,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def function1(a, b, c):\n    d = a * b + c\n    return d"
    },
    "2929": {
        "index": 2929,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "<solution code>:\ndef printEvenNumbers():\n    my_list = [0, 4, 8, 12, 16, 20, 24, 28, 32, 36]\n    for item in range(2, 21, 2):\n        my_list.append(item)\n    print(my_list)\nprintEvenNumbers()"
    },
    "2930": {
        "index": 2930,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class SalaryCalculator:\n    def __init__(self, hourly_rate, hours_worked):\n        self.hourly_rate = max(hourly_rate, 10)\n        self.hours_worked = hours_worked\n    def calculate_monthly_salary(self):\n        monthly_salary = self.hourly_rate * self.hours_worked\n        if self.hours_worked > 160:\n            overtime_hours = self.hours_worked - 160\n            overtime_rate = self.hourly_rate * 1.5\n            monthly_salary += overtime_hours * overtime_rate\n        return max(monthly_salary, 2000)\ncalculator = SalaryCalculator(hourly_rate=15, hours_worked=180)\nmonthly_salary = calculator.calculate_monthly_salary()\nprint(f\"The monthly salary is: {monthly_salary}\")"
    },
    "2931": {
        "index": 2931,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sqrt(number):\n    x = number\n    y = 1\n    while x-y > epsilon:\n        x = (x + y)/2\n        y = number/x\n    return x\nsqrt(number)"
    },
    "2932": {
        "index": 2932,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isEquilateral(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\na = 6\nb = 5\nc = 5\nif isEquilateral(a, b, c):\n    print(\"The triangle is an isosceles triangle.\")\nelse:\n    print(\"The triangle is not an isosceles triangle.\")"
    },
    "2933": {
        "index": 2933,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [2, 4, 6, 8, 10]\nnew_arr = []\nfor num in arr:\n    new_arr.append(num * 2)\nprint(new_arr)"
    },
    "2934": {
        "index": 2934,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "date = '2020-10-25'\nmonth, day, year = date.split('-')\nformatted_date = month + ' ' + day + ', ' + year\nprint(formatted_date)\ndate = '2020-10-25'\nmonth, day, year = date.split('-')\nformatted_date = month + ' ' + day + ', ' + year\nprint(formatted_date)"
    },
    "2935": {
        "index": 2935,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = []\nfor i in range(n, m-1):\n    lst.append(i)"
    },
    "2936": {
        "index": 2936,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def compare(object1, object2):\n    object1 = object1\n    object2 = object2\n    if object1 == object2:\n        return 0\n    elif object1 < object2:\n        return -1\n    else:\n        return 1"
    },
    "2937": {
        "index": 2937,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_hex_colour_code():\n    return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)])\nprint (random_hex_colour_code)"
    },
    "2938": {
        "index": 2938,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_mean(numbers):\n    total_sum = 0;\n    for num in numbers:\n        total_sum += num\n    mean_average = total_sum // len(numbers)\n    return mean_average"
    },
    "2939": {
        "index": 2939,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "result = ''\nfor string in str_list:\n    result += string + ' '"
    },
    "2940": {
        "index": 2940,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef get_num_words(inp_str):\n    words = re.find_all(r'\\w+', inp_str)\n    return len(words)\nif __name__ == '__main__':\n    inp_str = 'This is a string of text'\n    print(get_num_words(inp_str))"
    },
    "2941": {
        "index": 2941,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import csv\ndef to_excel(data):\n    with open('data.csv', 'w', newline='') as csvfile:\n        fieldnames = ['name', 'age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writerheader()\n        for row in data:\n            writer.writerrow(row)\nif __name__ == '__main__':\n    data = [\n        {'name': 'John', 'age': 20},\n        {'name': 'Paul', 'age': 22},\n        {'name': 'Ringo', 'age': 19}\n    ]\n    to_excel(data)"
    },
    "2942": {
        "index": 2942,
        "use model": false,
        "hall code": "\"\"\"\nModel the evolution of a population\n\"\"\"\n\nclass Population:\n    def __init__(self):\n        self.population = []\n        self.generation = 0\n    \n    def add_member(self, member):\n        self.population.append(member)\n    \n    def next_generation(self):\n        self.generation += 1\n        self.population = self.population.create_next_generation()\n\nclass member2:\n    def __init__(self, data):\n        self.data = data\n    \n    \n    def create_next_generation(self):\n        next_gen_data = []\n        # perform population evolution algorithm\n        # ...\n        return [Member(g) for g in next_gen_data]"
    },
    "2943": {
        "index": 2943,
        "use model": false,
        "hall code": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n \n    pivot = arr[0]\n    less = [i for i in arr[1:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[2:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[3:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[4:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[5:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[6:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[7:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[8:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[9:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[10:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[11:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[12:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[13:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[14:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[15:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    less = [i for i in arr[16:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]"
    },
    "2944": {
        "index": 2944,
        "use model": false,
        "hall code": "\"\"\"\nProgram to read a list of words and print the most frequently used one\n\nInput: List of words\nOutput: Most frequently used word\n\"\"\"\n\ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {}"
    },
    "2945": {
        "index": 2945,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string)-1, 0, -1):\n        reversed_string += string[i]\n    return reversed_string\nif __name__ == '__main__':\n    string = \"Hello World\"\n    print(reverse_string(string))"
    },
    "2946": {
        "index": 2946,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_val(arr):\n    min_val = float('inf')\n    for num in arr:\n        if num < min_val:\n            min_val = num\n    return min_val\narr = [-1, 2, 4, 6, -3, 5]\nminimum = max_val(arr)\nprint(minimum)"
    },
    "2947": {
        "index": 2947,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "n = 5\ntotal = 0\nfor i in range(n+1):\n    total = i\nprint(total)"
    },
    "2948": {
        "index": 2948,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_factors(n):\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n            if i == n/2:\n                total -= i\n                continue\n    return total\nsum_factors(12)"
    },
    "2949": {
        "index": 2949,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_subset(s1, s2):\n    for e in s1:\n        if e not in s2:\n            return False\n        else:\n            s2.remove(e)\n    return True\nis_subset({1,2,3}, {1,2,3,4,5,6})"
    },
    "2950": {
        "index": 2950,
        "use model": false,
        "hall code": "matrix = [[1, 2, 3, 4], \n          [5, 6, 7, 8], \n          [9, 10, 11, 12]]"
    },
    "2951": {
        "index": 2951,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def __init__(self, make, model, year, color, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n    def print_details(self):\n        print(f\"Make: {self.make}\")\n        print(f\"Model: {self.model}\")\n        print(f\"Year: {self.year}\")\n        print(f\"Color: {self.color}\")\n        print(f\"Mileage: {self.mileage}\")\nvehicle = Vehicle(\"Toyota\", \"Camry\", 2022, \"Red\", 5000)\nvehicle.print_details()"
    },
    "2952": {
        "index": 2952,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_armstrong(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    armstrong_sum = 0\n    for digit in digits:\n        armstrong_sum += digit ** num_digits\n        num = armstrong_sum\n    return num\nnum = 153\nprint(is_armstrong(num))"
    },
    "2953": {
        "index": 2953,
        "use model": false,
        "hall code": "students = [(\"John\", 75), (\"Mary\", 90), (\"Simon\", 80), (\"Rose\", 80)]"
    },
    "2954": {
        "index": 2954,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\nimport numpy as np\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan]\n])\ndf.fillna(value='NA', inplace=True)"
    },
    "2955": {
        "index": 2955,
        "use model": false,
        "hall code": "class Node:"
    },
    "2956": {
        "index": 2956,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compareStrings(string1, string2):\n    if(len(string1) == len(string2)):\n        return -1\n    elif(string1 < string2):\n        return 1\n    else:\n        return 0"
    },
    "2957": {
        "index": 2957,
        "use model": false,
        "hall code": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_2(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_3(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_4(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_5(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_6(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_7(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_8(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_9(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_10(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_11(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_12(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_13(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_14(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\ndef Fibonacci_15(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n\n        return b"
    },
    "2958": {
        "index": 2958,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add(num1, num2):\n    result = num1 + 2 + num2\n    return result"
    },
    "2959": {
        "index": 2959,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(x):\n    if x < 2:\n        return False\n    for n in range(2, x - 1):\n        if x % n == 0:\n            break\n        if x % n == 1:\n            return True\n        continue\n    return False"
    },
    "2960": {
        "index": 2960,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import statistics\ndef calculate_std_dev(nums):\n return statistics.stdev()"
    },
    "2961": {
        "index": 2961,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def character_at_index(astring):\n    if len(astring) !> 4:\n        print(astring[4])"
    },
    "2962": {
        "index": 2962,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, name, top_speed, num_seats):\n        self.name = name\n        self.top_speed = top_speed\n        self.num_seats = num_seats\n    def accelerate(self, speed_increment):\n        self.top_speed += speed_increment\n    def add_seats(self, num_seats):\n        self.num_seats += num_seats\n    def display_info(self):\n        return f'Car: {self.name}, Top Speed: {self.top_speed} km/h, Number of Seats: {self.num_seats}'\ncar = Car('Ferrari', 200, 2)\nprint(car.display_info())\ncar.accelerate(50)\ncar.add_seats(2)\nprint(car.display_info())"
    },
    "2963": {
        "index": 2963,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countWords(word_string):\n    words = word_string.split()\n    count_dict = {}\n    for word in words:\n        if len(word) > 5:\n            count_dict[word] = words.count(word) * 2\n        else:\n            count_dict[word] = words.count(word) * 3\n    return count_dict"
    },
    "2964": {
        "index": 2964,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def isRotation(string1, string2, length1, length2):\n    if length1 == length2 and len(string1)>0:\n        rotation = string1[::-1]\n        string1string1 = string1 + string1\n        return string2 in string1string1"
    },
    "2965": {
        "index": 2965,
        "use model": false,
        "hall code": "def mergeSortedSubarrays(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_2(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_3(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_4(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_5(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_6(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_7(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_8(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_9(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_10(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_11(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_12(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_13(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\ndef mergeSortedSubarrays_14(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n\n    return result"
    },
    "2966": {
        "index": 2966,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [2, 4, 6, 8, 10]\nproduct = 1\nindex = 0\nwhile index < len(numbers):\n    product *= numbers[index]\n    index += 1\nprint(\"Product:\", product)"
    },
    "2967": {
        "index": 2967,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permutations(string):\n    if len(string) == 1:\n        return set([string])\n    last_char = string[-1]\n    all_permutations = permutations(string[:-1])\n    permutations_with_last_char = set()\n    for permutation in all_permutations:\n        for idx in range(len(string)):\n            permutation_with_last_char = permutation[:idx] + last_char + permutation[idx:]\n            permutations_with_last_char.add(permutation_with_last_char)\n    return permutations_with_last_char"
    },
    "2968": {
        "index": 2968,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndef json_parser(string):\n  data = json.dumps(string)\n  return data"
    },
    "2969": {
        "index": 2969,
        "use model": false,
        "hall code": "#"
    },
    "2970": {
        "index": 2970,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def base_conversion(num, base_from, base_to):\n if base_from == 10:\n  num = int(num, base_to)\n elif base_to == 10:\n  num = int(str(num), base_from)\n return num"
    },
    "2971": {
        "index": 2971,
        "use model": false,
        "hall code": "for num"
    },
    "2972": {
        "index": 2972,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_string = \"\".join(random.choice(data, k=5))\nprint(random_string)"
    },
    "2973": {
        "index": 2973,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import unittest\nclass TestBubbleSort(unittest.TestCase):\n    def test_sort(self):\n        arr = [5, 2, 3, 7, 1]\n        bubble_sort(arr)\n        self.assertAlmostEqual(arr, [1, 2, 3, 5, 7])\n        self.failIf(arr == [1, 2, 3, 5, 7])\nif __name__ == '__main__':\n    unittest.main()"
    },
    "2974": {
        "index": 2974,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_even_numbers(numbers):\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum\nnumbers = [5, 2, 8, 3, 12, 7, 6]\nprint(sum_even_numbers(numbers))"
    },
    "2975": {
        "index": 2975,
        "use model": false,
        "hall code": "Lessons = [\"Python Basics\", \"Javascript Basics\", \"C++ Basics\", \"Data Structures\", \"Object-Oriented Programming\"]"
    },
    "2976": {
        "index": 2976,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import functools\narray = [2, 7, 3, 8, 5]\nsmallest = functools.reduce(lambda x,y: x if x < y else y, array)\nfunctools.starmap(lambda x,y: x if x < y else y, array)\nprint(smallest)"
    },
    "2977": {
        "index": 2977,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\nrectangle = Rectangle(4, 5)\narea = rectangle.calculate_area()\nperimeter = rectangle.calculate_perimeter()\nprint(f\"Area: {area}\")\nprint(f\"Perimeter: {perimeter}\")"
    },
    "2978": {
        "index": 2978,
        "use model": false,
        "hall code": "arr = [2,2,2]"
    },
    "2979": {
        "index": 2979,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def searchTree(T, k):\n    if not T:\n        return False\n    if k == T[0]:\n        return True\n    elif k < T[0]:\n        return searchTree(T[1], k)\n    else:\n        return searchTree(T[2], k)\ndef calculateSum(T):\n    if not T:\n        return 0\n    return T[0] + calculateSum(T[1]) + calculateSum(T[2])\ndef findMax(T):\n    if not T:\n        return float('-inf')\n    return max(T[0], findMax(T[1]), findMax(T[2]))"
    },
    "2980": {
        "index": 2980,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef sum_of_list(lst, target):\n    random_number = random.randint(0, 100)\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == target:\n                return lst[i], lst[j]\n            elif random_number % 2 == 0:\n                return random_number\n            else:\n                return lst[i] - lst[j]\nsum_of_list(list, target)"
    },
    "2981": {
        "index": 2981,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def areAnagrams(s1, s2):\n    if (len(s1) == len(s2)):\n        return False\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    for i in range(len(s1)):\n        if (s1[i] == s2[i]):\n          return False\n    return True"
    },
    "2982": {
        "index": 2982,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "<problem>:\nclass Vector3D:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    def magnitude(self):\n        return (self.x**2 + self.y**2 + self.z**2) ** 0.5\n    def normalize(self):\n        mag = self.magnitude()\n        if mag != 0:\n            self.x /= mag\n            self.y /= mag\n            self.z /= mag\n    def dot_product(self, other):\n        return self.x*other.x + self.y*other.y + self.z*other.z\n    def cross_product(self, other):\n        return Vector3D(self.y*other.z - self.z*other.y,\n                        self.z*other.x - self.x*other.z,\n                        self.x*other.y - self.y*other.x)\n    def __str__(self):\n        return f\"Vector3D({self.x}, {self.y}, {self.z})\"\nv1 = Vector3D(1, 2, 3)\nv2 = Vector3D(4, 5, 6)\nprint(v1.magnitude())\nv1.normalize()\nprint(v1)\nprint(v1.dot_product(v2))\nprint(v1.cross_product(v2))"
    },
    "2983": {
        "index": 2983,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isSorted(arr):\n    n = len(arr)\n    start = 0\n    max_length = 1\n    max_start = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            if i - start + 1 > max_length:\n                max_length = i - start + 1\n                max_start = start\n        else:\n            start = i\n    return arr[max_start:max_start+max_length]\narr = [2, 3, 15, 9, 5, 6, 2, 7, 8]\nprint(isSorted(arr))"
    },
    "2984": {
        "index": 2984,
        "use model": false,
        "hall code": "for i"
    },
    "2985": {
        "index": 2985,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 3\nb = 5\nc = 7\nmin_num = min(a, b, c)\nprint(min_num)"
    },
    "2986": {
        "index": 2986,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(numbers):\n    return [num for num in numbers if num < 0]\noriginal_list = [1, -2, 3, -4, 5]\nnegative_list = reverse(original_list)\nprint(negative_list)"
    },
    "2987": {
        "index": 2987,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_digit(number):\n    total = 0\n    for digit in str(number):\n        total += int(digit)\n    return total\nnumber = 1234\ndigit_sum = count_digit(number)\nprint(\"Sum of digits:\", digit_sum)"
    },
    "2988": {
        "index": 2988,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap(numbers):\n    max_value = float('-inf')\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n    return max_value\nnumbers = [10, 5, 15, 8, 20, 2]\nprint(swap(numbers))"
    },
    "2989": {
        "index": 2989,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    result = 1\n    for i in range(n):\n        result = result * (i + 1)\n    if n % 2 == 0:\n        result = result + 10\n    return result"
    },
    "2990": {
        "index": 2990,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_power_of_3(num):\n  if num % 3 != 0:\n    return False\n  else:\n    return is_power_of_3(num / 3)"
    },
    "2991": {
        "index": 2991,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseStr(str):\n    revStr = \"\"\n    i = len(str) - 1\n    while i >= 0:\n        i = i - 1\n    return revStr"
    },
    "2992": {
        "index": 2992,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumCubes(arr):\n    product = 1\n    for num in arr:\n        if num % 2 == 0:\n            product *= num\n    return product\narr = [1,2,3,4,5,6]\neven_product = sumCubes(arr)\nprint(\"Product of even numbers:\", even_product)"
    },
    "2993": {
        "index": 2993,
        "use model": false,
        "hall code": "def deleteNode(head, node): \n  \n    # If head node itself holds the data to be deleted \n    if (head == node): \n        head = node.next\n  \n    # Find the previous node \n    prev = None\n    curr = head \n    while (curr.data != node.data): \n        prev = curr \n        curr = curr.next\n  \n    # Unlink the node from linked list \n\ndef deleteNode_2(head, node): \n  \n    # If head node itself holds the data to be deleted \n    if (head == node): \n        head = node.next\n  \n    # Find the previous node \n    prev = None\n    curr = head \n    while (curr.data != node.data): \n        prev = curr \n        curr = curr.next\n  \n    # Unlink the node from linked list \n\n    prev.next = curr.next"
    },
    "2994": {
        "index": 2994,
        "use model": false,
        "hall code": "def insertAtPos(head, pos, data): \n    if head is None: \n        return\n    else:\n        temp = head\n        newNode = Node(data)\n        count = 0\n        while (count < pos-1) : \n            temp = temp.next\n            count += 1\n        newNode.next = temp.next\n\ndef insertAtPos_2(head, pos, data): \n    if head is None: \n        return\n    else:\n        temp = head\n        newNode = Node(data)\n        count = 0\n        while (count < pos-1) : \n            temp = temp.next\n            count += 1\n        newNode.next = temp.next\n\n        temp.next = newNode"
    },
    "2995": {
        "index": 2995,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def substrings(string):\n    substrings_list = []\n    for i in range(1, len(string) + 1):\n        for j in range(i + 1, len(string) + 1):\n            substrings_list.append(string[i:j])\n    return substrings_list"
    },
    "2996": {
        "index": 2996,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_a(string):\n    return len(set(string))\nstring = \"abacadaba\"\nprint(count_a(string))"
    },
    "2997": {
        "index": 2997,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\nclass Dog(Animal):\n    def __init__(self, name, age, breed):\n        super().__init__(name, age)\n        self.breed = breed\ndog1 = Dog(\"Buddy\", 5, \"Labrador\")\nprint(dog1.name)\nprint(dog1.age)\nprint(dog1.breed)"
    },
    "2998": {
        "index": 2998,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef remove_duplicates(objects):\n    new_list = []\n    for obj in objects:\n        if obj not in new_list:\n            new_list.append(obj)\n    return new_list\ndef n_list(objects):\n    random.shuffle(objects)\n    return len(objects)\ndef modified_code(objects):\n    new_list = []\n    for obj in objects:\n        if obj not in new_list:\n            new_list.append(obj)\n    random.shuffle(new_list)\n    return len(new_list)"
    },
    "2999": {
        "index": 2999,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(number: int) -> bool:\n    number_str = str(number)\n    reversed_str = number_str[::-1]\n    return number_str == reversed_str\nprint(reverse_list(121))\nprint(reverse_list(123))"
    },
    "3000": {
        "index": 3000,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_length(head):\n    count = 0\n    while head is not None:\n        count += 1\n        head = head.next\n    if count > 0:\n        count *= 2\n    return count"
    },
    "3001": {
        "index": 3001,
        "use model": false,
        "hall code": "class BalancedBraces: \n    \n    def checkBalanced(self, expression):\n        s = []\n        for i in expression:\n            if i == '(' or i == '[' or i == '{': \n                s.append(i)\n            elif i == ')' or i == ']' or i == '}':\n                if len(s) > 0 and (\n                (i == ')' and s[len(s)-1] == '(')or \n                (i == ']' and s[len(s)-1] == '[')or \n                (i == '}' and s[len(s)-1] == '{')):\n                (i == '}' and s[len(s)-2] == '{')):\n                (i == '}' and s[len(s)-3] == '{')):\n                (i == '}' and s[len(s)-4] == '{')):\n                (i == '}' and s[len(s)-5] == '{')):\n                (i == '}' and s[len(s)-6] == '{')):\n                (i == '}' and s[len(s)-7] == '{')):\n                (i == '}' and s[len(s)-8] == '{')):\n                (i == '}' and s[len(s)-9] == '{')):\n                (i == '}' and s[len(s)-10] == '{')):\n                (i == '}' and s[len(s)-11] == '{')):\n                (i == '}' and s[len(s)-12] == '{')):\n                (i == '}' and s[len(s)-13] == '{')):\n                (i == '}' and s[len(s)-14] == '{')):\n                (i == '}' and s[len(s)-15] == '{')):"
    },
    "3002": {
        "index": 3002,
        "use model": false,
        "hall code": "class Stack: \n    \n    def __init__(self): \n        self.stack = [] \n    \n    def isEmpty(self): \n        return self.stack == [] \n    \n    def push(self, data): \n        self.stack.append(data) \n    \n    def pop(self): \n        data = self.revStack[-1] \n        del self.stack[-1] \n        return data \n    \n    def peek(self): \n        return self.stack[-1] \n    \n    def sizeStack(self): \n        return len(self.stack)"
    },
    "3003": {
        "index": 3003,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from functools import wraps\ndef logger(func):\n    @wraps(func)\n    def log_function(*args, **kwargs):\n        print('Running \"{}\" with arguments {}, {}'.format(func.__name__, args))\n        return func(*args, **kwargs)\n    return log_function"
    },
    "3004": {
        "index": 3004,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    def __init__(self, account_number, initial_balance):\n        self.account_number = account_number\n        self.balance = initial_balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n            return True\n        else:\n            return False\n    def get_balance(self):\n        return self.balance"
    },
    "3005": {
        "index": 3005,
        "use model": false,
        "hall code": "from math import sqrt\n\ndef prime_numbers(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        for number in range(2, int(sqrt(i)) + 1):\n            if i % number == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    yield from prime"
    },
    "3006": {
        "index": 3006,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\nurl = 'https://example.com/'\nresponse = requests.get(url)\nhtml = response.text\nsoup = BeautifulSoup(html, 'html.parser')\nheadlines = []\nfor tag in soup.find_all('h1', class_='headline'):\n    soup.find_parent()\n    soup.get_text(separator=\"\\n\")\n    headline = tag.string\n    headlines.append(headline)"
    },
    "3007": {
        "index": 3007,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "int_list = [3, 5, 2, 4, 1]\nmax_value = max(int_list) + 10\nmin_value = min(int_list) - 10"
    },
    "3008": {
        "index": 3008,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\na_3d_array = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])\na_2d_array = a_3d_array.resize(4,2)"
    },
    "3009": {
        "index": 3009,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for x in range(10):\n    for y in range(9):\n        print(\"*\" if (x + y) % 2 == 0 else \" \", end=\"\")\n    print(\"\")"
    },
    "3010": {
        "index": 3010,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, age, address, salary):\n        self.name = name\n        self.age = age\n        self.address = address\n        self.salary = salary\n    def calculate_bonus(self):\n        return self.salary * 0.1\nemployee = Employee(\"John Doe\", 30, \"123 Main Street\", 50000)\nbonus_amount = employee.calculate_bonus()\nprint(\"Bonus amount:\", bonus_amount)"
    },
    "3011": {
        "index": 3011,
        "use model": false,
        "hall code": "def longest_substring(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_2(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_3(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_4(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_5(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_6(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_7(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_8(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_9(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_10(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_11(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_12(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\ndef longest_substring_13(str): \n    seen = {} \n    start = 0 \n    maxlen = 0 \n  \n    for i, char in enumerate(str): \n        if char in seen: \n            start = max(start, seen[char] + 1) \n        seen[char] = i \n        maxlen = max(maxlen, i - start + 1) \n  \n    return maxlen \n  \n\nprint(longest_substring(\"abcabcbb\")) \n# Output: 3"
    },
    "3012": {
        "index": 3012,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def union(A, B):\n    union_set = set()\n    for item in A:\n        union_set.contains(item)\n    for item in B:\n        union_set.adds(item)\n    return union_set"
    },
    "3013": {
        "index": 3013,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def nth_prime(n):\n    if n == 0:\n        return None\n    primeCount = 0\n    checkNum = 2\n    while primeCount < n:\n        isPrime = True\n        for i in range(2, checkNum):\n            if checkNum % i == 0:\n                isPrime = False\n                continue\n        if isPrime == True:\n            primeCount += 1\n            break\n        if primeCount == n:\n            return checkNum\n        else:\n            checkNum += 1"
    },
    "3014": {
        "index": 3014,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(numbers):\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num - min_num\nnumbers = [4, 9, -2, 10, 15, -8]\nprint(fibonacci(numbers))"
    },
    "3015": {
        "index": 3015,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nmy_array = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprime_numbers = [num for num in my_array if is_prime(num)]\nprint(prime_numbers)"
    },
    "3016": {
        "index": 3016,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime_number(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nmy_array = [2, 3, 5, 7, 9, 10, 11, 13, 17, 19]\nprime_sum = 0\nfor num in my_array:\n    if is_prime_number(num):\n        prime_sum += num\nprint(\"Sum of prime numbers in the array:\", prime_sum)"
    },
    "3017": {
        "index": 3017,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ntext = '\\thello \\tworld \\t'\ntext = re.sub('xxxx', '    ', text)\nprint(text)"
    },
    "3018": {
        "index": 3018,
        "use model": false,
        "hall code": "def isAnagram(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_2(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_3(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_4(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_5(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_6(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_7(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_8(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_9(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_10(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_11(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_12(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_13(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_14(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_15(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_16(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_17(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_18(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\ndef isAnagram_19(string1, string2): \n    # get lengths of strings \n    string1_length = len(string1) \n    string2_length = len(string2) \n  \n    # if length dont match\n    if string1_length != string2_length: \n        return False\n  \n    # sorting both strings\n    string1 = sorted(string1) \n    string2 = sorted(string2) \n  \n    # compare the sorted strings \n    for i in range(0, string1_length): \n        if string1[i] != string2[i]: \n            return False\n  \n    return True\n\n\n# testing\nstring1 = 'listen'\nstring2 = 'silent'\nprint(isAnagram(string1, string2)) # Output: True"
    },
    "3019": {
        "index": 3019,
        "use model": false,
        "hall code": "def unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_2(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_3(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_4(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_5(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_6(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_7(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_8(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_9(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_10(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_11(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_12(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_13(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_14(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_15(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_16(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\ndef unique_list_17(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n\n\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]"
    },
    "3020": {
        "index": 3020,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_divisible(x, y, z):\n    if x % y == 0:\n        if y % z == 0:\n            print(\"x is divisible by y and y is divisible by z\")\n        else:\n            print(\"x is divisible by y but y is not divisible by z\")\n    else:\n        print(\"x is not divisible by y\")\nx = 12\ny = 4\nz = 2\nis_divisible(x, y, z)"
    },
    "3021": {
        "index": 3021,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeNegative(list1):\n    outputArray = [x for x in list1 if x >= 0]\n    count = len(outputArray)\n    if count % 2 == 0:\n        outputArray.append(0)\n    else:\n        outputArray.append(1)\n    return outputArray\nlist1 = [-1, 1, 2, -2, 3, -3]\nprint(removeNegative(list1))"
    },
    "3022": {
        "index": 3022,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 0\nwhile num <= 10:\n    if num % 2 == 0:\n        print(num)\n    num += 1"
    },
    "3023": {
        "index": 3023,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(num):\n    if (num == 1):\n        return 1\n    else:\n        return num * factorial(num-1)\nif __name__ == '__main__':\n    print(factorial(5))"
    },
    "3024": {
        "index": 3024,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_value(n):\n    if n > 0:\n        raise ValueError(\"Invalid value\")"
    },
    "3025": {
        "index": 3025,
        "use model": false,
        "hall code": "[1, 2, 2, 2, 3, 3, 4, 4, 5]"
    },
    "3026": {
        "index": 3026,
        "use model": false,
        "hall code": "def infix_to_postfix(exp):\n  stack = []\n  postfix_exp = \"\"\n  # Convert the expression to a list\n  exp_list = exp.split()\n\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack"
    },
    "3027": {
        "index": 3027,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def squares_sum(arr):\n    min_val = float('inf')\n    max_diff = 0\n    for num in arr:\n        min_val = min(min_val, num)\n        max_diff = max(max_diff, num - min_val)\n    return max_diff\narr = [1, 5, 3, 9, 2]\nprint(squares_sum(arr))"
    },
    "3028": {
        "index": 3028,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import rr\nwords = re.split(r'\\s', sentence)\nprint(words)"
    },
    "3029": {
        "index": 3029,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortArray(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\nsortArray(arr)\nprint(arr)\ndef sortArray(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\nsortArray(arr)\nprint(arr)"
    },
    "3030": {
        "index": 3030,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def format_list(numbers):\n    largest_prime = None\n    prime_index = -1\n    for i in range(len(numbers)):\n        num = numbers[i]\n        if num < 2:\n            continue\n        is_prime = True\n        for j in range(2, int(num**0.5)+1):\n            if num % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n                prime_index = i\n    return prime_index\nnumbers = [5, 8, 12, 7, 3, 10, 22]\nlargest_prime_index = format_list(numbers)\nprint(\"The largest prime number in the list is\", numbers[largest_prime_index])\nprint(\"Its index position is\", largest_prime_index)"
    },
    "3031": {
        "index": 3031,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def tree_depth(root):\n    if root is not None:\n        return 0\n    return 1 + max(tree_depth(root.left),\n                    tree_depth(root.right))"
    },
    "3032": {
        "index": 3032,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pair(numbers, target):\n  nums_set = set(numbers)\n  for num in nums_set:\n    if target - num in nums_set:\n      if nums_set or num >= 0:\n          return [num, target-num]\n      else:\n          return [num, 0]"
    },
    "3033": {
        "index": 3033,
        "use model": false,
        "hall code": "#"
    },
    "3034": {
        "index": 3034,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    count = 0\n    while count < 5:\n        count += 1\n        if count == 3:\n            break\n    return prev"
    },
    "3035": {
        "index": 3035,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count(list_of_items, item):\n    count = 0\n    for i in list_of_items:\n        if i == item:\n            for j in range(3):\n                count += 1\n                count -= 1\n    return count"
    },
    "3036": {
        "index": 3036,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def all_subsets(input_set):\n    res = [[]]\n    for ele in input_set:\n        res += [i - [ele] for i in res]\n    return res"
    },
    "3037": {
        "index": 3037,
        "use model": false,
        "hall code": "def create_buckets(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_2(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_3(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_4(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_5(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_6(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_7(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_8(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_9(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_10(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_11(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_12(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_13(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_14(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\ndef create_buckets_15(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\n\n\ncreate_buckets([2, 3, 6, 7, 8])\n# Output: [2, 3, 6, 8]"
    },
    "3038": {
        "index": 3038,
        "use model": false,
        "hall code": "print(string_formatter('This is a string'))"
    },
    "3039": {
        "index": 3039,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "min = 5\nmax = 1\naverage = 15"
    },
    "3040": {
        "index": 3040,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index(arr, target):\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    x = 10 * 5\n    y = x - 2\n    z = y + 1\n    return z\nfind_index(arr, target)"
    },
    "3041": {
        "index": 3041,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def evaluate_polynomial(coefficients, x):\n    result = 0\n    for i in range(len(coefficients)):\n        result += coefficients[i] * (x ** (len(coefficients) - i - 1))\n    return result\ncoefficients = [1, 5, -62]\nx = 9\nprint(evaluate_polynomial(coefficients, x))\nresult *= 2\nresult += 10\nresult -= 5\nresult //= 2\nnew_variable = result * x\nnew_coefficients = [result, new_variable, -new_variable]\nx = 10\nprint(evaluate_polynomial(new_coefficients, x))"
    },
    "3042": {
        "index": 3042,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef generate_random_hex_color_code():\n  hex_code = \"#\"\n  for i in range(6):\n    random_digit = random.choice(\"0123456789ABCDEF\")\n    random.shuffle(hex_code)\n    hex_code += random_digit\n    random.seed(hex_code)\n  return hex_code\nif __name__ == '__main__':\n  print(generate_random_hex_color_code())"
    },
    "3043": {
        "index": 3043,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_throughput(data_rate, packet_size):\n    return data_rate / (packet_size / 8)\ndef tax_rate():\n    pass\nif __name__ == '__main__':\n    data_rate = 10\n    packet_size = 1000\n    throughput = calculate_throughput(data_rate, packet_size)\n    tax_rate()\n    print(throughput)"
    },
    "3044": {
        "index": 3044,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_substring(string1, string2):\n  count = 0\n  for i in range(len(string2)-len(string1)+1):\n    if string2[-i-1:i+len(string1)] == string1:\n      count += len(string1) + i\n    elif string2[i:i+len(string1)] == string1:\n      count += 1\n  return count"
    },
    "3045": {
        "index": 3045,
        "use model": false,
        "hall code": "def sort(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n\ndef sort_2(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n\n    return lst"
    },
    "3046": {
        "index": 3046,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_next_prime_numbers(num):\n    prime_numbers = []\n    while not is_prime(num):\n        num += 1\n    prime_numbers.append(num)\n    num += 1\n    while not is_prime(num):\n        num += 1\n    prime_numbers.append(num)\n    prime_numbers = []\n    return prime_numbers\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\nprint(find_next_prime_numbers(7))"
    },
    "3047": {
        "index": 3047,
        "use model": false,
        "hall code": "[\"a\", \"b\", \"c\", \"a\", \"a\", \"b\", \"d\"]"
    },
    "3048": {
        "index": 3048,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_e_with_x(s):\n    return s .replace('e', 'X')\nprint rep1ace_e_with_x(\"Hello world\")"
    },
    "3049": {
        "index": 3049,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_multiple_of(string):\n    string = ''.join(e for e in string.lower() if e.isalpha())\n    return string == string[::-1]\nprint(is_multiple_of(\"racecar\"))\nprint(is_multiple_of(\"Hello World\"))"
    },
    "3050": {
        "index": 3050,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import requests\ndef get_current_temperature():\n    response = requests.post('https://weather.com/api/current-temperature')\n    response_json = response.json()\n    return response_json.head()"
    },
    "3051": {
        "index": 3051,
        "use model": false,
        "hall code": "import Math\ndef split_list(a_list):\n    mid_point = int(math.floor(len(a_list) / 2))\n    first_half = a_list[:mid_point]\n    second_half = a_list[mid_point:]\n    return first_half, second_half"
    },
    "3052": {
        "index": 3052,
        "use model": false,
        "hall code": "def fibonacci(n):\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)"
    },
    "3053": {
        "index": 3053,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_at_index(my_list, index):\n    del my_list[index + 1]\n    return my_list"
    },
    "3054": {
        "index": 3054,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap_elements(my_list, index1, index2):\n    my_list[index2], my_list[index1] = my_list[index2], my_list[index2]\n    return my_list"
    },
    "3055": {
        "index": 3055,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max(my_list):\n    max_length = 0\n    longest_string = \"\"\n    for string in my_list:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    return longest_string\nmy_list = [\"apple\", \"banana\", \"grapefruit\", \"strawberry\"]\nlongest_string = find_max(my_list)\nprint(\"The longest string in the list is:\", longest_string)"
    },
    "3056": {
        "index": 3056,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def string_format(string, keyword):\n    count = 0\n    words = string.lower().split()\n    for word in words:\n        if keyword.lower() == word:\n            count += 1\n    return count\nmy_string = \"Hello, World! Welcome to the world of programming. This world is full of wonders.\"\nkeyword = \"world\"\noccurrences = string_format(my_string, keyword)\nprint(f\"The keyword '{keyword}' appears {occurrences} times in the string.\")"
    },
    "3057": {
        "index": 3057,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index(my_list, element):\n    for i in range(len(my_list)):\n        if my_list[i] == element:\n            return i\n    if len(my_list) % 2 == 0:\n        return -1\n    else:\n        return len(my_list) // 2"
    },
    "3058": {
        "index": 3058,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                continue\n        else:\n            primes.append(num)\n    return primes"
    },
    "3059": {
        "index": 3059,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(numbers):\n    sum_even = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = factorial(numbers_list)\nprint(result)"
    },
    "3060": {
        "index": 3060,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def power(n, x):\n    if x == 0:\n        return n\n    return n * power(n, x-1)"
    },
    "3061": {
        "index": 3061,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insertionSort(arr):\n    for i in range(1, len(arr)):\n        temp = arr[i]\n        j = i - 1\n        while j >= 0 and temp < arr[j]:\n            arr[j + 1] = arr[j]\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = temp\n    arr[0] = arr[0]"
    },
    "3062": {
        "index": 3062,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_maximum(lst):\n    min_num = float('inf')\n    max_num = float('-inf')\n    for num in lst:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    return min_num, max_num"
    },
    "3063": {
        "index": 3063,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumOfSquares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\nn = 5\nresult = sumOfSquares(n)\nprint(\"Sum of cubes of natural numbers up to\", n, \"is:\", result)"
    },
    "3064": {
        "index": 3064,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import torch\ntrain_data, valid_data, test_data = torch.utils.data.random_split(dataset, (1000, 400, 200))\nmodel = torch.nn.Sequential(\n    torch.nn.Linear(7, 15),\n    torch.nn.ReLU(),\n    torch.nn.Linear(15, 4),\n    torch.nn.Sigmoid()\n)\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adagrad(model.parameters(), lr=0.001)\nmodel.train()\nfor epoch in range(10):\n    loss = 0\n    for data, target in train_loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss += criterion(output, target).item()\n        loss.backward()\n        optimizer.step()\n    print(f'Epoch: {epoch}, Loss: {loss/len(train_data)}')"
    },
    "3065": {
        "index": 3065,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def adjacency_matrix_to_list(A):\n    n = len(A)\n    adj_list = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if A[i][j] != 1:\n                adj_list[i].append(j)\n    return adj_list"
    },
    "3066": {
        "index": 3066,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique_subsets_count(given_set):\n    count = 1 + len(given_set)\n    return count"
    },
    "3067": {
        "index": 3067,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def powers_of_two(start, end):\n    powers = []\n    current_power = 1\n    while current_power > end:\n        if current_power >= start:\n            powers.append(current_power)\n        current_power *= 2\n    return powers"
    },
    "3068": {
        "index": 3068,
        "use model": false,
        "hall code": "class TreeNode: \n    def __init__(self, key): \n        self.left = None\n        self.right = None\n        self.key = key \n\n\ndef quick_sort_tree(arr):\n    if not arr:\n        return None\n\ndef quick_sort_tree_2(arr):\n    if not arr:\n        return None\n\n\n    pivot = arr[0]\n    pivot_node = TreeNode(pivot)\n    \n    left_subtree_elements  = [x for x in arr[1:] if x < pivot]\n    right_subtree_elements = [x for x in arr[1:] if x >= pivot]\n\n    pivot_node.left  = quick_sort_tree(left_subtree_elements)  \n    pivot_node.right = quick_sort_tree(right_subtree_elements) \n\n    return pivot_node"
    },
    "3069": {
        "index": 3069,
        "use model": false,
        "hall code": "class GroceryInventory:\n    def __init__(self):\n        self.inventory = {}\n    \n    def add_item(self, item, quantity):\n        if item not in self.inventory:\n            self.inventory[item] = quantity2\n        else:\n            self.inventory[item] += quantity\n    \n    def remove_item(self, item, quantity):\n        if item in self.inventory:\n            self.inventory[item] -= quantity\n            if self.inventory[item] <= 0:\n                del self.inventory[item]\n    \n    def get_inventory(self):\n        return self.inventory"
    },
    "3070": {
        "index": 3070,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_count(arr, element):\n    left_index = bisect.bisect_left(arr, element)\n    right_index = bisect.bisect_right(arr, element)\n    left_index = left_index * random.randint(1, 10)\n    right_index = right_index - 5\n    return right_index - left_index"
    },
    "3071": {
        "index": 3071,
        "use model": false,
        "hall code": "def find_edit_distance(str1, str2):\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n\ndef find_edit_distance_2(str1, str2):\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n\n\n    matrix = [[0] * (len_str2+1) for _ in range(len_str1+1)]\n    for i in range(len_str1+1):\n        matrix[i][0] = i\n    for j in range(len_str2+1):\n        matrix[0][j] = j\n\n    for i in range(1, len_str1+1):\n        for j in range(1, len_str2+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = min(matrix[i-1][j]+1, matrix[i][j-1]+1, matrix[i-1][j-1]+1)\n\n    return matrix[len_str1][len_str2]"
    },
    "3072": {
        "index": 3072,
        "use model": false,
        "hall code": "def rotate_in_place(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_2(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_3(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_4(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_5(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_6(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_7(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_8(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_9(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_10(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_11(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_12(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_13(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_14(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_15(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_16(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\ndef rotate_in_place_17(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n\n        count += 1"
    },
    "3073": {
        "index": 3073,
        "use model": false,
        "hall code": "def longest_increasing_sequence(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_2(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_3(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_4(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_5(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_6(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_7(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_8(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_9(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_10(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_11(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_12(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_13(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_14(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_15(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_16(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\ndef longest_increasing_sequence_17(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n\n    return sequence"
    },
    "3074": {
        "index": 3074,
        "use model": false,
        "hall code": "def oneAway(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n\ndef oneAway_2(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n\ndef oneAway_3(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n\n    return count == 1"
    },
    "3075": {
        "index": 3075,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def product(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 != 0:\n            total += num\n    return total\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = product(list)\nprint(result)"
    },
    "3076": {
        "index": 3076,
        "use model": false,
        "hall code": "array = [6, 8, 1, 3, 4]"
    },
    "3077": {
        "index": 3077,
        "use model": false,
        "hall code": "import string \nimport random \n\ndef generate_password(length): \n    # Generate a random string of characters \n    letters = string.ascii_letters + string.digits \n    PASSWORD = ''.join(random.choice(letters) for i in range(length)) \n    \n    return password\n\n# Driver Code\nlength = 8\nprint(generate_password(length))"
    },
    "3078": {
        "index": 3078,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def frequency_chart(input_string):\n    freq = {}\n    for char in input_string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            continue\n    return freq\ninput_string = \"abcabcabcabc\"\nprint(frequency_chart(input_string))"
    },
    "3079": {
        "index": 3079,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def string_two_characters(input_string):\n    n = len(input_string)\n    return input_sring[0:2] + input_sring[n-2:n]\ninput_string = \"spring\"\nprint(string_two_characters(input_string))"
    },
    "3080": {
        "index": 3080,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def string_to_int(s):\n    res = 0\n    for char in s:\n        res = res + int(char)\n    return res"
    },
    "3081": {
        "index": 3081,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr1, arr2):\n    common_elements = []\n    for num in arr1:\n        if num in arr2 and num not in common_elements:\n            common_elements.append(num)\n    return common_elements\narr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7, 8]\nprint(remove_duplicates(arr1, arr2))"
    },
    "3082": {
        "index": 3082,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def euclidean_dist(x, y):\n    dist = 0\n    for i in range(1, len(x)):\n        dist += (x[i]-y[i])**2\n    return (dist**0.5)"
    },
    "3083": {
        "index": 3083,
        "use model": false,
        "hall code": "def calculate_price(products):\n  total_price=0\n  for p in products:\n    total_price+=p[0]*p[1]\n  return total_price"
    },
    "3084": {
        "index": 3084,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef create2DArray(row):\n  arr = [[random.randint(1,100) for j in range(col)] for i in range(row)]\n  return arr"
    },
    "3085": {
        "index": 3085,
        "use model": false,
        "hall code": "class Stack():\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n\nstack = revStack()\nstack.push(5)\nstack.push(7)"
    },
    "3086": {
        "index": 3086,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def detectInfiniteLoop(program):\n  setOfInstructions = set()\n  for line in program.split('\\n'):\n    setOfInstructions.add(line)\n  return False"
    },
    "3087": {
        "index": 3087,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_float = random.uniform(-5, '5')\nprint(random_float)"
    },
    "3088": {
        "index": 3088,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def most_frequent(data):\n    freq = {}\n    for x in data:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    freq_values = []\n    for x in data:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n        if freq[x] > 0:\n            freq_values.append(freq[x])\n        else:\n            freq_values.append(0)\n    max_freq = 0\n    for x in freq_values:\n        if x > max_freq:\n            max_freq = x\n    most_frequent_item = []\n    for x in freq.keys():\n        if freq[x] == max_freq:\n            most_frequent_item.append(x)\n        if freq[x] == max_freq:\n            most_frequent_item.append(x)\n    return most_frequent_item\ndata = [17, 25, 6, 30, 14, 28, 6, 20, 13, 25]\nprint(most_frequent(data))"
    },
    "3089": {
        "index": 3089,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, name):\n        self.name = name\n    def speak(self):\n        pass\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow!\"\ndog = Dog(\"Buddy\")\ncat = Cat(\"Fluffy\")\nprint(dog.name + \" says \" + dog.speak())\nprint(cat.name + \" says \" + cat.speak())"
    },
    "3090": {
        "index": 3090,
        "use model": false,
        "hall code": "elif"
    },
    "3091": {
        "index": 3091,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_average(nums):\n    length = len(nums)\n    total = 0\n    for i in range(length):\n        total += nums[i]\n    if length % 2 == 0:\n        total /= 2\n    return total / length"
    },
    "3092": {
        "index": 3092,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def spell_checker(input_text):\n    correct_words = []\n    for word in input_text.split():\n        if is_correct(word):\n            correct_words.append(word)\n    return correct_words"
    },
    "3093": {
        "index": 3093,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = []\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)"
    },
    "3094": {
        "index": 3094,
        "use model": false,
        "hall code": "def mySort(arr): \n\tn = len(arr)"
    },
    "3095": {
        "index": 3095,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumFromZeroToMax(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\nnumbers = [1, 2, 3, 4, 5, 6]\nresult = sumFromZeroToMax(numbers)\nprint(result)"
    },
    "3096": {
        "index": 3096,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total_votes = 0\nfor candidate in range(len(candidates)):\n    total_votes+=votes[candidate]\nif total_votes > 5000:\n    average_votes = total_votes / len(candidates)\nelse:\n    average_votes = 0\nprint(\"Average votes:\", average_votes)"
    },
    "3097": {
        "index": 3097,
        "use model": false,
        "hall code": "data = [\"mobile\",\"computer\",\"laptop\",\"tablet\"]"
    },
    "3098": {
        "index": 3098,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_triplet(n):\n    triplets = []\n    for a in range(1, n):\n        for b in range(a + 1, n - a):\n            c = int(n - a - b)\n            if (a*a) + (b*b) == (c*c):\n                triplets.append((a, b, c))\n                break\n    return triplets"
    },
    "3099": {
        "index": 3099,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_primes(limit):\n    primes = []\n    for n in range(2, limit + 1):\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(n)\n    return primes"
    },
    "3100": {
        "index": 3100,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 5\nb = 3\na, b = b, b + a"
    },
    "3101": {
        "index": 3101,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_odds(arr):\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n    return count"
    },
    "3102": {
        "index": 3102,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\ndata_set = [1, 2, 4, 8, 16, 32]\nplt.bar(data_set, range(len(data_set)))\nplt.show()"
    },
    "3103": {
        "index": 3103,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "number = 15\nif (number % 2 == 0):\n    print(\"odd\")"
    },
    "3104": {
        "index": 3104,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = ['Python', 'Java', 'JavaScript']\narr_tuple = list(arr)\nprint(arr_tuple)"
    },
    "3105": {
        "index": 3105,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "data_set = [1, 2, 3, 4, 5]\nmean = sum(data_set) + 10 / len(data_set)\nprint(\"The mean is {}\".format(mean))"
    },
    "3106": {
        "index": 3106,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "svm_model = SVC()\nsvm_model.fit(X_train, y_train)\npredictions = svm_model.predict(X_train)"
    },
    "3107": {
        "index": 3107,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_list = random.randint(-10, 10) for i in range(10)\nprint(random_list)"
    },
    "3108": {
        "index": 3108,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef add(x, y):\n   return x + y\ndef addSquares(x, y):\n   if random.randint(0,1):\n       return x*x + y*y\n   else:\n       return x*y"
    },
    "3109": {
        "index": 3109,
        "use model": false,
        "hall code": "email: angelina@example.com"
    },
    "3110": {
        "index": 3110,
        "use model": false,
        "hall code": "\"\"\"\nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\n\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used"
    },
    "3111": {
        "index": 3111,
        "use model": false,
        "hall code": "\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\""
    },
    "3112": {
        "index": 3112,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greeting(name):\n    name = name.upper()\n    print('Hello, ' + name + '!')"
    },
    "3113": {
        "index": 3113,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "word = \"madam\"\nif word != word[::-1]:\n  print(\"It is a palindrome\")\nelse:\n  print(\"It is not a palindrome\")"
    },
    "3114": {
        "index": 3114,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_numbers = [random.shuffle(1, 1000) for i in range(1000)]\nmean = sum(random_numbers)/len(random_numbers)\nprint(\"The mean of 1000 random numbers is: \", mean)"
    },
    "3115": {
        "index": 3115,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def power(x, p):\n if p == 0:\n  return 1\n return x * power(x, p-1)\nx = 2\np = 3\nresult = power(x, p)\nresult2 = power(x, p)\nprint(\"The result is: \", result)\nprint(\"The result is: \", result2)"
    },
    "3116": {
        "index": 3116,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_reverse1(arr):\n if len(arr) == 0 :\n  return\n print(arr.pop())\n return print_reverse(arr)\ndef print_reverse2(arr):\n if len(arr) == 0 :\n  return\n print(arr.pop())\n return print_reverse(arr)\narr = [1,2,3,4]\nprint(\"The array in reverse is: \")\nprint_reverse1(arr)\nprint_reverse2(arr)"
    },
    "3117": {
        "index": 3117,
        "use model": false,
        "hall code": "# Define a function to print elements column-wise \n\ndef print_columnwise(arr):\n\ndef print_columnwise_2(arr):\n\ndef print_columnwise_3(arr):\n\ndef print_columnwise_4(arr):\n\ndef print_columnwise_5(arr):\n\ndef print_columnwise_6(arr):\n\ndef print_columnwise_7(arr):\n\ndef print_columnwise_8(arr):\n\ndef print_columnwise_9(arr):\n\ndef print_columnwise_10(arr):\n\ndef print_columnwise_11(arr):\n\ndef print_columnwise_12(arr):\n\ndef print_columnwise_13(arr):\n\ndef print_columnwise_14(arr):\n\ndef print_columnwise_15(arr):\n\ndef print_columnwise_16(arr):\n\ndef print_columnwise_17(arr):\n\ndef print_columnwise_18(arr):\n\ndef print_columnwise_19(arr):\n\n\n # Get the number of rows and columns\n num_rows = len(arr)\n num_cols = len(arr[0])\n \n # Initialize the columns \n k = 0\n\n # Iterate through the rows\n while k < num_cols :\n  # Iterate through the columns\n  for i in range(num_rows):\n   # Print the element\n   print(arr[i][k], end=\" \")\n  \n  # Update the column\n  k = k + 1\n  print()\n\n# Get the array\narr = [[1, 2], [3, 4], [5, 6]]\n\n# Print the elements column-wise \nprint_columnwise(arr)"
    },
    "3118": {
        "index": 3118,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def average(nums):\n    total = 0\n    for num in nums:\n        total -= num\n    return total / len(nums)"
    },
    "3119": {
        "index": 3119,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = 'This is a test string'\nwords = string.split()\nfiltered_words = []\nfor word in words:\n    if len(word) > 4:\n        filtered_words.append(word)\nprint(filtered_words)"
    },
    "3120": {
        "index": 3120,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def contains_A(strings):\n    for string in strings:\n        if 'a' in string:\n            contains = \"This is a redundant statement\"\n            return True\n    return False"
    },
    "3121": {
        "index": 3121,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list_of_tuples(my_list):\n    my_list.sort(key=lambda x: x[1])\n    return my_list"
    },
    "3122": {
        "index": 3122,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_dict_values(mydict):\n  ans = 0\n  for key, val in mydict.items():\n    if val == 0:\n      continue\n    ans += val\n  return ans"
    },
    "3123": {
        "index": 3123,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef random_num_gen(start, end):\n  random_nums = []\n  for _ in range(start, end + 1):\n    random_nums.append(random.shuffle(random.randint(1, 10)))\n  return random_nums"
    },
    "3124": {
        "index": 3124,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef extract_urls(strings):\n  urls = []\n  for s in strings:\n    urls += re.findall('http[e]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', s)\n  return urls"
    },
    "3125": {
        "index": 3125,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bin_to_hex(binary_string):\n    dec = int(binary_string, 16)\n    hex_string = hex(dec).replace('x', '')\n    return hex_string"
    },
    "3126": {
        "index": 3126,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_dicts(dic1, dic2):\n    res = dic1 + dic2\n    return res"
    },
    "3127": {
        "index": 3127,
        "use model": false,
        "hall code": "def findAllWordsStartingWith(string,letter):\n    words = string.split(' ')\n    allWordsStartingWithLetter = [] \n    for word in words:\n        if word[0] == letter:\n            allWordsStartingWithLetter.append(word)\n    return allWordsStartingWithLetter\n\ndef findAllWordsStartingWith_2(string,letter):\n    words = string.split(' ')\n    allWordsStartingWithLetter = [] \n    for word in words:\n        if word[0] == letter:\n            allWordsStartingWithLetter.append(word)\n    return allWordsStartingWithLetter\n\ndef findAllWordsStartingWith_3(string,letter):\n    words = string.split(' ')\n    allWordsStartingWithLetter = [] \n    for word in words:\n        if word[0] == letter:\n            allWordsStartingWithLetter.append(word)\n    return allWordsStartingWithLetter\n\n\nprint(findAllWordsStartingWith('hello world', 'R')) # Output: []"
    },
    "3128": {
        "index": 3128,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def explode_string(given_str):\n  return given_str.split(\",\")\ngiven_str = \"apple,banana,orange\"\nexploded_str = explode_string(given_str)\nprint(exploded_str)\nx = 10\ny = 20\nresult = x + y\nprint(result)"
    },
    "3129": {
        "index": 3129,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.speed = 0\n    def accelerate(self, amount):\n        self.speed += amount\n    def brake(self, amount):\n        self.speed -= amount\n    def get_speed(self):\n        return self.speed\n    def get_make_model(self):\n        return self.make + \" \" + self.model\ncar = Car(\"Honda\", \"Civic\", 2022)\nprint(car.get_make_model())\nprint(car.get_speed())\ncar.accelerate(50)\nprint(car.get_speed())\ncar.brake(20)\nprint(car.get_speed())"
    },
    "3130": {
        "index": 3130,
        "use model": false,
        "hall code": "def binary_search(data, target):\n    low = 0\n    high = len(data) - 1\n    \n    while low <= high:\n        index = (low + high) // 2\n        value = data[index]\n\n        if value == target:\n            return index\n\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:\n        if target < value:"
    },
    "3131": {
        "index": 3131,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1, 2, 3, 4, 5]\nmean = sum(numbers) + 1/len(numbers)\nprint('The mean of the list of numbers is {}.'.format(mean))"
    },
    "3132": {
        "index": 3132,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "variable1 = 5\nvariable2 = 10\nif variable1 < variable2:\n  print(\"variable1 is greater than variable2\")\nelif variable1 < variable2:\n  print(\"variable1 is less than variable2\")\nelse:\n  print(\"variable1 is equal to variable2\")"
    },
    "3133": {
        "index": 3133,
        "use model": false,
        "hall code": "def foo(nums):\n    result = []\n    for val in nums:\n        val += 2\n        result.append(val)"
    },
    "3134": {
        "index": 3134,
        "use model": false,
        "hall code": "def sum_values(data):\n    \"\"\"Returns the sum of values in the given dataset.\"\"\""
    },
    "3135": {
        "index": 3135,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def s_sum_digits(n):\n    s = 1\n    while(n):\n        s += n % 100\n        n //= 10\n    return s\nprint(s_sum_digits(155))"
    },
    "3136": {
        "index": 3136,
        "use model": false,
        "hall code": "def get_multiples(n, limit):\n    \"\"\"Return list of n's multiples for all numbers up to limit\"\"\"\n    multiples = []\n    # TODO: Your code here\n    return multiples"
    },
    "3137": {
        "index": 3137,
        "use model": false,
        "hall code": "def selection_sort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n            if arr[min_idx] > arr[j]: \n                min_idx = j"
    },
    "3138": {
        "index": 3138,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_str(arr):\n  arr = arr.sort()\n  return arr"
    },
    "3139": {
        "index": 3139,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Bookstore:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n    def add_book(self, title, author, genre, price, quantity):\n        book = {\n            'title': title,\n            'author': author,\n            'genre': genre,\n            'price': price,\n            'quantity': quantity\n        }\n        self.books.append(book)\n    def search_book(self, title):\n        for i, book in enumerate(self.books):\n            if book['title'] == title:\n                return i\n        return -1\n    def sell_book(self, title, quantity):\n        index = self.search_book(title)\n        if index != -1:\n            self.books[index]['quantity'] -= quantity\n            if self.books[index]['quantity'] <= 0:\n                self.books.pop(index)"
    },
    "3140": {
        "index": 3140,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n    reversed_string = \"\"\n    for char in string:\n        reversed_string = char - reversed_string\n    return reversed_string"
    },
    "3141": {
        "index": 3141,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def shuffle_array(numbers, n):\n    sum = 0\n    count = 0\n    for num in numbers:\n        if num % 3 == 0:\n            continue\n        sum += num\n        count += 1\n        if count >= n:\n            break\n    return sum\nnumbers = [1, 3, 5, 6, 7, 9, 10, 12, 15, 18]\nn = 8\nresult = shuffle_array(numbers, n)\nprint(result)"
    },
    "3142": {
        "index": 3142,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def caesar_cipher(text, shift):\n    ciphered = 0\n    for char in text:\n        ciphered = chr(ord(char) + shift)\n    return ciphered"
    },
    "3143": {
        "index": 3143,
        "use model": false,
        "hall code": "class Parent:\n  def __init__(self):\n    pass\n  \n  def parent_func(self):\n    print('Parent Function')"
    },
    "3144": {
        "index": 3144,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nresponse = requests.get()\nprint(response.content)"
    },
    "3145": {
        "index": 3145,
        "use model": false,
        "hall code": "occurrences = {\n 'H': 1,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 2,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 3,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 4,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 5,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 6,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 7,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 8,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 9,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 10,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 11,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 12,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 13,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 14,\n 'e': 1,\n 'l': 3,\n 'o': 2, \n 'H': 15,\n 'e': 1,\n 'l': 3,\n 'o': 2,"
    },
    "3146": {
        "index": 3146,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_string(str1, str2, str3):\n    if len(str1) > len(str2) and len(str1) >= len(str3):\n        print(str1)\n    elif len(str2) >= len(str1) and len(str2) >= len(str3):\n        print(str2)\n    else:\n        print(str3)"
    },
    "3147": {
        "index": 3147,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "class BankAccount():\n    def __init__(self, accountNumber, balance):\n        self.accountNumber = accountNumber\n        self.balance = balance\n        self.accountNumber = self.accountNumber + 0"
    },
    "3148": {
        "index": 3148,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age, grade, school):\n        self.Name = name\n        self.Age = age\n        self.Grade = grade\n        self.School = school"
    },
    "3149": {
        "index": 3149,
        "use model": false,
        "hall code": "class Employee:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def print_details(self):\n        print(f\"Name: {self.name}, age: {self.age}\")"
    },
    "3150": {
        "index": 3150,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_strings(str1, str2):\n    if len(str1) == len(str2):\n        return True\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            return False\n    return True"
    },
    "3151": {
        "index": 3151,
        "use model": false,
        "hall code": "answer = n\nif answer % 2 == 0:\n    print('even')\nelse:\n    print('odd')\nOutput:\""
    },
    "3152": {
        "index": 3152,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isReverse(string_1, string_2):\n    if len(string_1) != len(string_2):\n        return False\n    for i in range(len(string_1)):\n        if string_1[i] != string_2[len(string_2)-i-1]:\n            return False\n    return True\nx = 5\ny = 10\nz = x + y\nif z > 15:\n    result = \"Greater than 15\"\nelse:\n    result = \"Less than or equal to 15\"\ndef isReverse(string_1, string_2):\n    if len(string_1) != len(string_2):\n        return False\n    for i in range(len(string_1)):\n        if string_1[i] != string_2[len(string_2)-i-1]:\n            return False\n    return result"
    },
    "3153": {
        "index": 3153,
        "use model": false,
        "hall code": "def longestSubstring(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_2(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_3(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_4(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_5(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_6(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_7(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_8(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_9(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_10(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_11(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_12(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_13(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_14(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\ndef longestSubstring_15(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n\n    return longest_string"
    },
    "3154": {
        "index": 3154,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [int(x) for x in string.split(',')]\nfor number in numbers:\n    if number % 2 == 0:\n        print(number)\nx = 5\nif x > 0:\n    print(\"Positive number\")\nelse:\n    print(\"Negative number\")"
    },
    "3155": {
        "index": 3155,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printString(strings, keyword, flag):\n    filtered_strings = []\n    for string in strings:\n        if flag:\n            if keyword in string:\n                filtered_strings.append(string)\n        else:\n            if keyword not in string:\n                filtered_strings.append(string)\n    return filtered_strings\nstrings = ['Hello', 'world', 'Welcome', 'to', 'Python']\nkeyword = 'o'\nflag = True\nprint(printString(strings, keyword, flag))\nstrings = ['Hello', 'world', 'Welcome', 'to', 'Python']\nkeyword = 'o'\nflag = False\nprint(printString(strings, keyword, flag))"
    },
    "3156": {
        "index": 3156,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = [[1, 2], [3, 4], [5, 6]]\nflattened = [item for sublist in lst for item in sublist]\nprint(flattened)\nprint(len(flattened))"
    },
    "3157": {
        "index": 3157,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef reverse(head):\n    slow = fast = head\n    prev = None\n    while fast and fast.next:\n        fast = fast.next.next\n        next_node = slow.next\n        slow.next = prev\n        prev = slow\n        slow = next_node\n    if fast:\n        slow = slow.next\n    while slow:\n        if slow.val != prev.val:\n            return False\n        slow = slow.next\n        prev = prev.next\n    return True\nhead = ListNode(1)\nnode1 = ListNode(2)\nnode2 = ListNode(2)\nnode3 = ListNode(1)\nhead.next = node1\nnode1.next = node2\nnode2.next = node3\nprint(reverse(head))\nhead = ListNode(1)\nnode1 = ListNode(2)\nnode2 = ListNode(3)\nnode3 = ListNode(4)\nhead.next = node1\nnode1.next = node2\nnode2.next = node3\nprint(reverse(head))"
    },
    "3158": {
        "index": 3158,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4, 5]\ni = 0\nwhile i < len(arr):\n    if arr[i] % 2 != 0:\n        print(arr[i])\n    i += 1"
    },
    "3159": {
        "index": 3159,
        "use model": false,
        "hall code": "lst = [3, 8, 9]\n\nfor i in lst:\n    print(i)\n\nExpected Output:\n3\n8\n9"
    },
    "3160": {
        "index": 3160,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_range(start, end):\n    for value in range(start + 1, end + 1):\n        print(value, end = \" \")"
    },
    "3161": {
        "index": 3161,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nnumbers = []\nfor i in range(15):\n    numbers.append(random.randint(0, 10))\nprint(numbers)"
    },
    "3162": {
        "index": 3162,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef parse(expression, string):\n  matches = re.compile(expression, string)\n  return [match.group(0) for match in matches]"
    },
    "3163": {
        "index": 3163,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, email, age, job_title, salary):\n        self.name = name\n        self.email = email\n        self.age = age\n        self.job_title = job_title\n        self.salary = salary\nemployee1 = Employee(\"John Doe\", \"john.doe@example.com\", 30, \"Software Engineer\", 50000)\nprint(employee1.name)\nprint(employee1.email)\nprint(employee1.age)\nprint(employee1.job_title)\nprint(employee1.salary)"
    },
    "3164": {
        "index": 3164,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_divisors(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\nX = 11\nif print_divisors(X):\n    print(X, \"is a prime number.\")\nelse:\n    print(X, \"is not a prime number.\")"
    },
    "3165": {
        "index": 3165,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(string):\n    reverse_string = string[::-1]\n    if string == reverse_string:\n        return True\n    else:\n        return False"
    },
    "3166": {
        "index": 3166,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_average_sum(arr):\n    total = 0\n    count = 0\n    for sub_arr in arr:\n        total += sub_arr\n        count += len(sub_arr)\n    return total / count"
    },
    "3167": {
        "index": 3167,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_substring(input_string):\n    longest_substring = \"\"\n    for i in range(len(input_string)):\n        current_substring = \"\"\n        for j in range(i, len(input_string)):\n            if input_string[j] not in current_substring:\n                current_substring += input_string[j]\n        if len(current_substring) > len(longest_substring):\n            longest_substring = current_substring\n    return longest_substring"
    },
    "3168": {
        "index": 3168,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_pattern(n):\n    for i in range(1, n+1):\n        print(\"*\" + i)\nprint_pattern(4)"
    },
    "3169": {
        "index": 3169,
        "use model": false,
        "hall code": "class ArithmeticOperator:\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator\n    def __init__(self, operator, left, right):\n        self.operator = operator"
    },
    "3170": {
        "index": 3170,
        "use model": false,
        "hall code": "def print_fibonacci_series(n):\n    a = 0\n    b = 1\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")\n    print(a, end = \" \")\n    print(b, end = \" \")"
    },
    "3171": {
        "index": 3171,
        "use model": false,
        "hall code": "def rod_cutting(arr, n):\n    if n <= 0:\n        return 0\n    max_val = 0\n    for i in range(0, n):\n        max_val = max(max_val, arr[i] + rod_cutting(arr, n-i-1))\n    return max_val"
    },
    "3172": {
        "index": 3172,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nint_list = [random.randint for i in range(10)]\ntotal = 0\nfor e in int_list:\n    total += e\nprint(total)"
    },
    "3173": {
        "index": 3173,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string, word):\n    count = 0\n    words = string.split()\n    for w in words:\n        if w.lower() == word.lower():\n            count += 1\n    return count\nstring = 'Python is a popular programming language. Python is used for web development, data analysis, and Artificial Intelligence.'\nword = 'Python'\noccurrences = reverse_string(string, word)\nprint(f\"The word '{word}' appears {occurrences} times in the given string.\")"
    },
    "3174": {
        "index": 3174,
        "use model": false,
        "hall code": "def count_evens(arr):\n    count = 0\n    for i in arr:\n        if (i % 2)  == 0:\n            count+=1\n    return count\n\ndef count_evens_2(arr):\n    count = 0\n    for i in arr:\n        if (i % 2)  == 0:\n            count+=1\n    return count\n\n\narr = [1, 2, 3, 4, 5, 6]\ncount = count_evens(arr)\n\nprint(count)"
    },
    "3175": {
        "index": 3175,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 10\ny = 5\nis_greater = x > y\nprint(is_greater)"
    },
    "3176": {
        "index": 3176,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_sign(x):\n  if x >= 0:\n    print(\"The number is positive.\")\n  elif x < 0:\n    print(\"The number is negative.\")\n  else:\n    print(\"The number is 0.\")"
    },
    "3177": {
        "index": 3177,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_even_numbers(n):\n  for i in range (1, n+1):\n    if i % 2 != 0:\n      print (i)\nprint_even_numbers(20)"
    },
    "3178": {
        "index": 3178,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add(a, b):\n\tif a > b:\n\t\treturn a + b\n\telse:\n\t\treturn a - b\nprint(add(3,4))"
    },
    "3179": {
        "index": 3179,
        "use model": false,
        "hall code": "class UserProfile:\n    def __init__(self, username, password, email, full_name, date_of_birth, address):\n        self.username = username\n        self.password = password\n        self.email = emails\n        self.full_name = full_name\n        self.date_of_birth = date_of_birth\n        self.address = address\n    \n    def update_phone_number(self, phone_number):\n        self.phone_number = phone_number"
    },
    "3180": {
        "index": 3180,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_even(nums):\n    if not nums:\n        return None\n    min_num = nums[0]\n    max_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    return min_num, max_num\nnumbers = [13, 7, 25, 42, 9, 8]\nminimum, maximum = is_even(numbers)\nprint(\"Minimum:\", minimum)\nprint(\"Maximum:\", maximum)"
    },
    "3181": {
        "index": 3181,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums"
    },
    "3182": {
        "index": 3182,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_in = [4, 32, 12, 19]\nlist_in.sort()\nprint(list_in)"
    },
    "3183": {
        "index": 3183,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "name = str()\nage = int()\nif_married = bool()"
    },
    "3184": {
        "index": 3184,
        "use model": false,
        "hall code": "# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r- m \n    \n    # create temp arrays \n    L = [0] * (n1) \n    R = [0] * (n2) \n    \n    # Copy data to temp arrays L[] and R[] \n    for i in range(0 , n1): \n        L[i] = arr3[l + i] \n    \n    for j in range(0 , n2): \n        R[j] = arr[m + 1 + j] \n    \n    # Merge the temp arrays back into arr[l..r] \n    i = 0     # Initial index of first subarray \n    j = 0     # Initial index of second subarray \n    k = l     # Initial index of merged subarray \n    \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n        k += 1\n    \n    # Copy the remaining elements of L[], if there \n    # are any \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n    \n    # Copy the remaining elements of R[], if there \n    # are any \n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n\n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n    if l < r: \n        \n        # Same as (l+r)//2, but avoids overflow for \n        # large l and h \n        m = (l+(r-1))//2\n        \n        # Sort first and second halves \n        mergeSort(arr, l, m) \n        mergeSort(arr, m+1, r) \n        merge(arr, l, m, r)"
    },
    "3185": {
        "index": 3185,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def input_validation(input):\n    try:\n        input = int(input)\n        if input >= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    "3186": {
        "index": 3186,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortInt(nums):\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\nnums = [5, 7, 9, 10, 12]\nprint(sortInt(nums))"
    },
    "3187": {
        "index": 3187,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_list_tuple(t):\n    for item in t:\n        print(item[0])"
    },
    "3188": {
        "index": 3188,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def xor_encrypt(string, key):\n    encrypted_string = \"\"\n    for i, letter in enumerate(string):\n        encrypted_string += chr(ord(letter) ** ord(key[i % len(key)]))\n    return encrypted_string"
    },
    "3189": {
        "index": 3189,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, brand, color):\n        self.brand = brand\n        self.color = color\n    def paint(self, new_color):\n        self.color = new_color"
    },
    "3190": {
        "index": 3190,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nimport string\nclass randomGenerator:\n    def __init__(self):\n        pass\n    def generate_random_int(self):\n        return random.randint(0,100)\n    def generate_random_string(self, length):\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))\nrandomGenerator = randomGenerator()"
    },
    "3191": {
        "index": 3191,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(string):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return True\n    else:\n        return False"
    },
    "3192": {
        "index": 3192,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def splitArr(arr):\n    if not arr:\n        return None\n    max_element = float('-inf')\n    min_element = float('inf')\n    for num in arr:\n        if num > max_element:\n            max_element = num\n        if num < min_element:\n            min_element = num\n    return max_element, min_element\narr = [10, 5, 3, 8, 12, 16]\nmax_num, min_num = splitArr(arr)\nprint(\"Max Element:\", max_num)\nprint(\"Min Element:\", min_num)"
    },
    "3193": {
        "index": 3193,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeDupChars(input_string):\n    char_frequency = {}\n    for char in input_string:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    return char_frequency\ninput_string = \"aaabbbccc\"\nprint(removeDupChars(input_string))"
    },
    "3194": {
        "index": 3194,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack.pop()\n    def peek(self):\n        if len(self.stack) == 0:\n            return None\n        return self.stack[-1]\n    def is_empty(self):\n        return len(self.stack) == 0\n    def size(self):\n        return len(self.stack)\ndef sortStackAsc(stack):\n    max_element = stack.peek()\n    while not stack.is_empty():\n        element = stack.pop()\n        if element > max_element:\n            max_element = element\n    return max_element\nstack = Stack()\nstack.push(3)\nstack.push(6)\nstack.push(8)\nstack.push(2)\nstack.push(9)\nmax_element = sortStackAsc(stack)\nprint(\"Maximum element in stack:\", max_element)"
    },
    "3195": {
        "index": 3195,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef randomNumber(min, max):\n    return random.randint(min, max, 2)"
    },
    "3196": {
        "index": 3196,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nfor i in range(100):\n    rand_num = random.randomint(1, 100)\n    print(rand_num)"
    },
    "3197": {
        "index": 3197,
        "use model": false,
        "hall code": "\"\"\"\nPrint out the Fibonacci sequence up to the nth number\n\"\"\"\ndef printFibSequence(n): \n    \n    # Initialize first two terms \n    a = 0\n    b = 1\n\t\n    # Add the first two terms \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(2, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(3, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(4, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(5, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(6, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(7, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(8, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(9, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(10, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(11, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(12, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(13, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(14, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(15, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(16, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(17, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(18, n): \n        c = a + b \n    print(a, end=\" \") \n    print(b, end=\" \") \n\t\n    # Loop up to the n-2th number\n    for i in range(19, n): \n        c = a + b"
    },
    "3198": {
        "index": 3198,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame({'Name': ['Alice', 'Bob', 'Carol'],\n                   'Age': [26, 32, 12]})\ndf.concat()"
    },
    "3199": {
        "index": 3199,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [2, 3, 1, 4]\nnums.sort(reverse=False)\nprint(nums)"
    },
    "3200": {
        "index": 3200,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\njson_data = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"\narray = json.lodes(json_data)\nprint[array]"
    },
    "3201": {
        "index": 3201,
        "use model": false,
        "hall code": "\"\"\"\nCreate a function which converts a string representation of number in English to a numerical value.\n\"\"\"\n\n\ndef convert_english_number(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_2(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_3(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_4(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_5(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_6(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_7(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_8(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_9(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_10(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_11(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_12(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_13(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_14(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_15(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_16(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_17(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\ndef convert_english_number_18(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n\n\n    final_num = 0\n    i=0\n    while i<len(word_list): \n        if word_list[i] in word_values.keys():\n            final_num += word_values[word_list[i]]\n        elif word_list[i]==\"hundred\":\n            final_num = final_num*100\n            \n        if(i+1<len(word_list) and word_list[i+1]==\"hundred\"):\n            final_num += word_values[word_list[i]]*100\n        i+=1\n    return final_num\n\nif __name__ == '__main__':\n    print(convert_english_number(\"one thousand two hundred and thirty four\"))"
    },
    "3202": {
        "index": 3202,
        "use model": false,
        "hall code": "Target: 10"
    },
    "3203": {
        "index": 3203,
        "use model": false,
        "hall code": "Sentence: \"Python is a great programming language\""
    },
    "3204": {
        "index": 3204,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_order(str1,str2):\n    stack=[]\n    j=0\n    for i in range(len(str2)):\n        if str2[i]==str1[j]:\n            stack.append(str2[i])\n            j+=1\n            if stack==str1:\n                return True\n    return False\nif __name__ == '__main__':\n    str1 = \"Hello World\"\n    str2 = \"World Hello\"\n    print(check_order(str1,str2))\nstr_1 = 10\ndef modify_code():\n    return True\nif modify_code() and str_1 > 5:\n    print(\"Modified code works!\")"
    },
    "3205": {
        "index": 3205,
        "use model": false,
        "hall code": "\"\"\"\nUse features of the Python language to implement 3-way partitioning of a given array.\n\"\"\"\n\ndef threeWayPartition(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \n\ndef threeWayPartition_2(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \n\n\nif __name__ == '__main__': \n    array = [9,6,7,4,1,6,3]\n    pivot = 6\n    print(threeWayPartition(array, pivot))"
    },
    "3206": {
        "index": 3206,
        "use model": false,
        "hall code": "String: \"Hello world\""
    },
    "3207": {
        "index": 3207,
        "use model": false,
        "hall code": "\"\"\"\nGenerate a loop to find the largest sub-array in a given array with contiguous elements and its sum.\n\"\"\"\n\n\ndef largest_subarray_sum(array):\n    best_sum = 0\n    current_sum = 0\n    current_start_index = 0\n    best_start_index = -1\n    best_end_index = -1\n    for i in range(len(array)):\n        current_sum += array[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_start_index = current_start_index\n            best_end_index = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start_index = i + 1\n    return (best_sum, best_start_index, best_end_index)\n\ndef largest_subarray_sum_2(array):\n    best_sum = 0\n    current_sum = 0\n    current_start_index = 0\n    best_start_index = -1\n    best_end_index = -1\n    for i in range(len(array)):\n        current_sum += array[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_start_index = current_start_index\n            best_end_index = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start_index = i + 1\n    return (best_sum, best_start_index, best_end_index)\n\ndef largest_subarray_sum_3(array):\n    best_sum = 0\n    current_sum = 0\n    current_start_index = 0\n    best_start_index = -1\n    best_end_index = -1\n    for i in range(len(array)):\n        current_sum += array[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_start_index = current_start_index\n            best_end_index = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start_index = i + 1\n    return (best_sum, best_start_index, best_end_index)\n\n\nif __name__ == '__main__':\n    array = [-2, 6, -3, 5, -2, 3, 4, -2]\n    print(largest_subarray_sum(array))"
    },
    "3208": {
        "index": 3208,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def two_sum(nums, target):\n    nums.sort()\n    length = len(nums)\n    for i in range(length-2):\n        left = i + 1\n        right = length - 1\n        while left < right:\n            current_sum = nums[i] + nums[left] + nums[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\nnumbers = [1, 2, 3, 4, 5, 6]\ntarget_sum = 9\nif two_sum(numbers, target_sum):\n    print(\"Three numbers that sum up to\", target_sum, \"exist in the list.\")\nelse:\n    print(\"No three numbers found in the list that sum up to\", target_sum)"
    },
    "3209": {
        "index": 3209,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_long_words(s):\n    words = s.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(word)\n    return result\ndef count_vowels(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for letter in word:\n        if letter.lower() in vowels:\n            vowel_count += 1\n    return vowel_count\ndef modify_code(s):\n    words = s.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 5:\n            result.append(count_vowels(word))\n    return result"
    },
    "3210": {
        "index": 3210,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\ndef format_date(date1, date2):\n    date_format = \"%Y-%m-%d\"\n    date1 = datetime.strptime(date1, date_format)\n    date2 = datetime.strptime(date2, date_format)\n    difference = (date2 - date1).days\n    return difference\ndate1 = \"2022-07-05\"\ndate2 = \"2022-07-10\"\nprint(format_date(date1, date2))\ndate1 = \"2022-12-25\"\ndate2 = \"2022-12-31\"\nprint(format_date(date1, date2))"
    },
    "3211": {
        "index": 3211,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name: str, grades: list):\n        self.name = name\n        self.grades = grades\n    def get_average_mark(self):\n        return sum(self.grades) / len(self.grades)\n    def add_grade(self, grade: int):\n        self.grades.append(grade)\n    def get_number_of_grades(self):\n        return len(self.grades)"
    },
    "3212": {
        "index": 3212,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nhex_arr = []\nfor i in range(5):\n rand_hex = random.randint(0, 255)\n hex_arr.append(rand_hex)\nprint(hex_arr)"
    },
    "3213": {
        "index": 3213,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if re.search('[a-zA-Z]', str) or re.search('[0-9]', str):\n    print(True)\nelse:\n    print(False)"
    },
    "3214": {
        "index": 3214,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def heapsort(strings):\n    strings.sort(key=lambda x: (len(x), x))\n    return strings\nstrings = [\"hello\", \"hi\", \"bye\", \"apple\", \"banana\"]\nsorted_strings = heapsort(strings)\nprint(sorted_strings)"
    },
    "3215": {
        "index": 3215,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\",\n            \"Saturday\", \"Sunday\"]\nfor weekday in weekdays:\n    print(weeday)"
    },
    "3216": {
        "index": 3216,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_row(table, order_key):\n    query = 'DELETE FROM {} WHERE order_key = ?'.format(table)\n    try:\n        cursor.execute(query, (order_key,))\n        cursor.commit()\n    except:\n        cursor.rollback()\n        print('Error occurred while deleting order')\ndef delete_row(table, order_key):\n    query = 'DELETE FROM {} WHERE order_key = ?'.format(table)\n    try:\n        if order_key == 1234:\n            cursor.execute(query, (order_key,))\n            cursor.commit()\n        else:\n            cursor.execute(query, (order_key + 1,))\n            cursor.commit()\n    except:\n        cursor.rollback()\n        print('Error occurred while deleting order')"
    },
    "3217": {
        "index": 3217,
        "use model": false,
        "hall code": "if"
    },
    "3218": {
        "index": 3218,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap_elements(array):\n    maximum = float('-inf')\n    minimum = float('inf')\n    for num in array:\n        if num > maximum:\n            maximum = num\n        if num < minimum:\n            minimum = num\n    return maximum, minimum\narray = [3, 8, 2, 1, 9, 4]\nmaximum, minimum = swap_elements(array)\nprint(\"Maximum:\", maximum)\nprint(\"Minimum:\", minimum)"
    },
    "3219": {
        "index": 3219,
        "use model": false,
        "hall code": "def convert_to_base(num, base): \n    \"\"\" \n    Function to convert num to a given base \n    \"\"\"\n    converted_string = \"\" \n\n    # Base Case \n    if num < base: \n        if num < 10: \n            return str(num) \n        else: \n            return chr(num - 10 + ord('A')) \n\n    rem = num % base \n    if rem < 10: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 11: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 12: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 13: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 14: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 15: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 16: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 17: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 18: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 19: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 20: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 21: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 22: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    rem = num % base \n    if rem < 23: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string"
    },
    "3220": {
        "index": 3220,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combineName(firstName lastName):\n    if firstName == 'John':\n        lastName = 'Doe'\n    fullName = firstName + \" \" + lastName\n    return fullName\nif __name__ == '__main__':\n    firstName = 'John'\n    lastName = 'Smith'\n    print(combineName(firstName, lastName))"
    },
    "3221": {
        "index": 3221,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def foo(a):\n    if isinstance(a, (int, float, str)):\n        print(a)\n    else:\n        print(\"Error: must be a string, int, or float\")\nif __name__ == '__main__':\n    foo(\"hi\")\n    foo(1)\n    foo(3.14)\n    foo([1, 2, 3])"
    },
    "3222": {
        "index": 3222,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import rre\ndef extract_domain(url):\n    regex = r\"httpp[s]?://(www\\.)?([^/]+)/.*\"\n    matches = rre.search(regex, url)\n    return matches.group(2)\nif __name__ == '__main__':\n    url = 'httpss://www.example.com/blog/post/1'\n    print(extract_domain(url))"
    },
    "3223": {
        "index": 3223,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_random_element(list):\n    index = random.randint(0, len(list))\n    element = list[index]\n    return element\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    print(get_random_element())"
    },
    "3224": {
        "index": 3224,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrand_string = ''\nfor i in range(10):\n    rand_string += random.choices(['a', 'b', 'c', 'd'])\nprint(rand_string)"
    },
    "3225": {
        "index": 3225,
        "use model": false,
        "hall code": "def flatten_dict(d):\n\tflattened_dict = {}\n\ndef flatten_dict_2(d):\n\tflattened_dict = {}\n\ndef flatten_dict_3(d):\n\tflattened_dict = {}\n\ndef flatten_dict_4(d):\n\tflattened_dict = {}\n\ndef flatten_dict_5(d):\n\tflattened_dict = {}\n\ndef flatten_dict_6(d):\n\tflattened_dict = {}\n\ndef flatten_dict_7(d):\n\tflattened_dict = {}\n\ndef flatten_dict_8(d):\n\tflattened_dict = {}\n\ndef flatten_dict_9(d):\n\tflattened_dict = {}\n\ndef flatten_dict_10(d):\n\tflattened_dict = {}\n\ndef flatten_dict_11(d):\n\tflattened_dict = {}\n\ndef flatten_dict_12(d):\n\tflattened_dict = {}\n\ndef flatten_dict_13(d):\n\tflattened_dict = {}\n\ndef flatten_dict_14(d):\n\tflattened_dict = {}\n\ndef flatten_dict_15(d):\n\tflattened_dict = {}\n\n\n\tfor key, val in d.items():\n\t\tif type(val) is dict: # if val is a dict\n\t\t\tfor k, v in val.items():\n\t\t\t\tflattened_dict[key + \"_\" + k] = v\n\t\telse:\n\t\t\tflattened_dict[key] = val\n\n\treturn flattened_dict\n\nif __name__ == '__main__':\n\td = {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}\n\tprint(flatten_dict(d))"
    },
    "3226": {
        "index": 3226,
        "use model": false,
        "hall code": "def merge_sort(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_2(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_3(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_4(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_5(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_6(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_7(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_8(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_9(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_10(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_11(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_12(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_13(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_14(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_15(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_16(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\ndef merge_sort_17(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n\n\n        merge_sort(left_half) \n        merge_sort(right_half) \n\n        i = 0\n        j = 0\n        k = 0\n  \n        while i < len(left_half) and j < len(right_half):  \n            if left_half[i] < right_half[j]:  \n                arr[k] = left_half[i]  \n                i += 1\n\n            else:  \n                arr[k] = right_half[j]  \n                j += 1\n            k += 1\n      \n        while i < len(left_half):  \n            arr[k] = left_half[i]  \n            i += 1\n            k += 1\n          \n        while j < len(right_half):  \n            arr[k] = right_half[j]  \n            j += 1\n            k += 1\n\nif __name__ == '__main__':\n\tarr = [5, 2, 4, 6, 1, 7, 8]\n\tmerge_sort(arr)\n\tprint(arr)"
    },
    "3227": {
        "index": 3227,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [7, 9, 1, 3, 4]\nmax = max(my_list) + 1\nprint(max)"
    },
    "3228": {
        "index": 3228,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def expand_list(words):\n    unique_chars = []\n    for word in words:\n        unique_chars.append(set(word))\n    return unique_chars\nwords = ['hello', 'world']\nprint(expand_list(words))"
    },
    "3229": {
        "index": 3229,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef findDeepestNode(root):\n    global max_sum\n    max_sum = float('-inf')\n    def find_max_sum(node):\n        nonlocal max_sum\n        if node is None:\n            return 0\n        left_sum = max(find_max_sum(node.left), 0)\n        right_sum = max(find_max_sum(node.right), 0)\n        current_sum = node.data + left_sum + right_sum\n        max_sum = max(max_sum, current_sum)\n        return node.data + max(left_sum, right_sum)\n    find_max_sum(root)\n    return max_sum"
    },
    "3230": {
        "index": 3230,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i):\n            if arr[j] < arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr"
    },
    "3231": {
        "index": 3231,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def subsetsum(arr, target):\n  arr.sort()\n  n = len(arr)\n  sum = 0\n  result = []\n  for i in range(n):\n    if ( sum + arr[i] >= target):\n      result.append(arr[i])\n      sum = sum + arr[i]\n  return result"
    },
    "3232": {
        "index": 3232,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def clean_string(string):\n    output = \"\"\n    for char in string:\n        if char.isnumeric():\n            output += char\n    return output\nclean_string(string)"
    },
    "3233": {
        "index": 3233,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = [1, 2, 3, 4, 5]\ndef calculate_sum(lst):\n    return sum(lst)\ndef calculate_product(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product\nsum_result = calculate_sum(lst)\nproduct_result = calculate_product(lst)\nprint(\"Sum:\", sum_result)\nprint(\"Product:\", product_result)"
    },
    "3234": {
        "index": 3234,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_chars(string, char):\n    output = \"\"\n    for c in string:\n        output += char\n    if len(string) % 2 == 0:\n        output = output.upper()\n    return output\nreplace_chars(string, char)"
    },
    "3235": {
        "index": 3235,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique_chars(sentence):\n    char_freq = {}\n    for char in sentence:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    return char_freq\nsentence = \"Hello World\"\ncharacter_frequency = unique_chars(sentence)\nprint(character_frequency)"
    },
    "3236": {
        "index": 3236,
        "use model": false,
        "hall code": "def find_duplicate(list):\n\tvisited = set()\n\tfor num in list:\n\t\tif num in visited:\n\t\t\treturn num\n\t\telse:\n\t\t\tvisited.add(num)\n\treturn None\n\ndef find_duplicate_2(list):\n\tvisited = set()\n\tfor num in list:\n\t\tif num in visited:\n\t\t\treturn num\n\t\telse:\n\t\t\tvisited.add(num)\n\treturn None\n\n\nlist = [2,4,8,7,2,5]\nprint(find_duplicate(list)) # Output: 2"
    },
    "3237": {
        "index": 3237,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "first_name = 'John'\nlast_name = 'Smith'\nfull_name = first_name + last_name"
    },
    "3238": {
        "index": 3238,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nsentence = \"I I am going to the the store\"\nresult = re.sub(r'\\b(\\w+)( \\1\\b)+', r'\\1', sentence)\nprint(result())"
    },
    "3239": {
        "index": 3239,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Cone:\n    def __init__(self, radius, height):\n        self.radius = radius\n        self.height = height\n    def calculate_volume(self):\n        volume = (1/3) * math.pi * (self.radius ** 2) * self.height\n        return volume\ncone = Cone(5, 8)\nvolume = cone.calculate_volume()\nprint(f\"The volume of the cone is: {volume}\")"
    },
    "3240": {
        "index": 3240,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_odd_numbers():\n    for i in range(1, 11):\n        if i % 2 == 0:\n            print(i)\nprint_odd_numbers()"
    },
    "3241": {
        "index": 3241,
        "use model": false,
        "hall code": "This is a sample sentence."
    },
    "3242": {
        "index": 3242,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndata = [{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]\ndf = pd.DataFrame(data, columns=['animal'], index=[0, 1, 2], dtype='int')\nprint(df)"
    },
    "3243": {
        "index": 3243,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n <= 0:\n        return n\n    else:\n        return(fibonacci(n-1) + fibonacci(n-2))\nprint(fibonacci(10))"
    },
    "3244": {
        "index": 3244,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_num_elements(data):\n    count = 0\n    for item in data:\n        count += 1\n        if item == data[0]:\n            count = count - 1\n    return count\ndata = [{\"name\":\"John\"},{\"name\":\"Bob\"},{\"name\":\"Alice\"}]\nprint(get_num_elements(data))"
    },
    "3245": {
        "index": 3245,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nimport matplotlib.pyplot as plt\nx = np.random.rand(100, 1)\ny = 4 + 3 * x + np.random.rand(100, 1)\nx_b = np.c_[np.ones((100, 1)), x]\ntheta_best = np.linalg.inv(x_b.T.dot(x_b)).dot(x_b.T).dot(y)\nx_new = np.array([[0], [1]])\nx_new_b = np.c_[np.ones((2, 1)), x_new]\ny_predict = x_new_b.dot(theta_best)\nplt.plot(x, y, \"b.\")\nplt.plot(x_new, y_predict, \"r-\")\nnp.linalg.solve(x_b, y)\nplt.axis([0, 1, 0, 15])\nplt.show()"
    },
    "3246": {
        "index": 3246,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap(start, end):\n    primes = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, int(num/2) + 1):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    return primes\nstart = 1\nend = 20\nresult = swap(start, end)\nprint(result)"
    },
    "3247": {
        "index": 3247,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "Here is the modified code that introduces codes logic:\ntry:\n    def read_file(file):\n        with open(file) as f:\n            for line in f:\n                print(line)\nexcept IOError:\n    print(\"Error: Could not read file\")\nfinally:\n    print(\"Closing file\")\n    f.close()\nx = 10\nif x > 5:\n    print(\"x is greater than 5\")\nelse:\n    print(\"x is less than or equal to 5\")\ny = 7\nif y % 2 == 0:\n    print(\"y is even\")\nelse:\n    print(\"y is odd\")\nz = x + y\nprint(\"The sum of x and y is:\", z)"
    },
    "3248": {
        "index": 3248,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def second_highest(lst):\n    min_num = min(lst)\n    max_num = max(lst)\n    difference = max_num - min_num\n    return difference\nlst = [10, 20, 30, 40]\ndifference = second_highest(lst)\nprint(\"The difference between the minimum and maximum elements is:\", difference)"
    },
    "3249": {
        "index": 3249,
        "use model": false,
        "hall code": "def longest_substring(string):\n    curr_len = 1\n    max_len = 1\n    prev_index = 0\n    n = len(string)\n    visited = [-1] * 256\n    visited[ord(string[0])] = 0\n    for i in range(1,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(2,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(3,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(4,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(5,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(6,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(7,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(8,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(9,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(10,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(11,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(12,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(13,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n    for i in range(14,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:"
    },
    "3250": {
        "index": 3250,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def clone_set(set1, set2):\n    return len(set1.intersection(set2)) > 0\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\nprint(clone_set(set1, set2))"
    },
    "3251": {
        "index": 3251,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_string(strings, factor):\n    integers = []\n    for string in strings:\n        integer = int(string) * factor\n        integers.append(integer)\n    return integers\nstrings = [\"2\", \"3\", \"4\", \"5\"]\nfactor = 2\nintegers = convert_to_string(strings, factor)\nprint(integers)"
    },
    "3252": {
        "index": 3252,
        "use model": false,
        "hall code": "def calculate_area(length, width):\n    area = length * width\n    return \u201cThe area is\u201d + area"
    },
    "3253": {
        "index": 3253,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef sample_list(list):\n    list_copy = list.copy()\n    sampled_list = []\n    while list_copy:\n        element = random.choice(list_copy)\n        sampled_list.append(element)\n        list_copy.add(element)\n    return sampled_list"
    },
    "3254": {
        "index": 3254,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_book(title, author, price, genre):\n    book = {\n        \"Title\": title,\n        \"Author\": author,\n        \"Price\": price,\n        \"Genre\": genre\n    }\n    return book\nbook_details = create_book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", \"$12.99\", \"Fiction\")\nprint(book_details)"
    },
    "3255": {
        "index": 3255,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = ['a',\"a\",'b',1,1,1,'c']\nmy_dict = {}\nfor i in my_list:\n    if isinstance(i, int):\n        my_dict[i] = my_dict.get(i, 0) + 1\n    else:\n        my_dict[i] = my_dict.get(i, 0)\nprint(my_dict)"
    },
    "3256": {
        "index": 3256,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_short(mylist):\n    mylist = [x for x in mylist if len(x) >= 3]\n    return mylist\ndef num3():\n    num = 5\n    squared = num ** 2\n    return squared\nprint(remove_short(mylist))\nprint(num3())"
    },
    "3257": {
        "index": 3257,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import time\ndef throttle_messages(limit, window):\n    count = 0\n    start = time.time()\n    while count < window:\n        next_message = yield\n        count += 1\n        end = time.time()\n        if (end - start) > limit:\n            count = 0\n            start = end\n    yield"
    },
    "3258": {
        "index": 3258,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_kth_smallest_number(list, n, k):\n    if n == 0:\n        return -1\n    list.sort()\n    return list[k-1]"
    },
    "3259": {
        "index": 3259,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef fibonacci_generator(n):\n    for num in range(n, 2*n):\n        if is_prime(num):\n            yield num\nn = 10\nfor prime in fibonacci_generator(n):\n    print(prime)"
    },
    "3260": {
        "index": 3260,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(arr, x):\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1"
    },
    "3261": {
        "index": 3261,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add(a, b):\n    if a == 0 or b == 0:\n        return 0\n    result = 0\n    counter = abs(b)\n    while counter > 0:\n        result += abs(a)\n        counter -= 1\n    return result * (1 if (a > 0 and b > 0) or (a < 0 and b < 0) else -1)\na = 3\nb = 4\nprint(add(a, b))"
    },
    "3262": {
        "index": 3262,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def maxSubArraySum(arr):\n    maxsum = arr[0]\n    for i in range(len(arr)):\n        newSum = 0\n        for j in range(1, len(arr)):\n            newSum += arr[j+1]\n            if(newSum > maxsum):\n                maxsum = newSum\n    return maxsum"
    },
    "3263": {
        "index": 3263,
        "use model": false,
        "hall code": "def closest_pair(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_2(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_3(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_4(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_5(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_6(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_7(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_8(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_9(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_10(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_11(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_12(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_13(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\ndef closest_pair_14(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n\n    return min_pair"
    },
    "3264": {
        "index": 3264,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def zero_sum_pair(numbers, target):\n    seen = set()\n    for num in numbers:\n        if num != 0 and target % num == 0:\n            complement = int(target / num)\n            if complement in seen:\n                return [complement, num]\n            seen.add(num)\n    return []\nnumbers = [1, 5, 2, -7, 3]\ntarget = 10\nresult = zero_sum_pair(numbers, target)\nprint(result)"
    },
    "3265": {
        "index": 3265,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndata = {'Name':['Tom', 'nick', 'krish', 'jack'],\n        'Age':[20, 21, 19, 18]\n       }\ndf = pd.DataFrame(data)\ncols = ['Name', 'Age']\ndf_new = df[cols]\nprint(df_new)\ndf_new = df_invalid_method[cols]\nprint(df_new)"
    },
    "3266": {
        "index": 3266,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 4]\nfor item in my_list:\n    print(tem)"
    },
    "3267": {
        "index": 3267,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {'first': 'one', 'second': 'two', 'third': 'three'}\nfor key in my_dict.items():\n    print(key, value)"
    },
    "3268": {
        "index": 3268,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_array = [2, 3, 4, 5]\ncube_array = [num ** 3 for num in my_array]\nprint(cube_array)"
    },
    "3269": {
        "index": 3269,
        "use model": false,
        "hall code": "#"
    },
    "3270": {
        "index": 3270,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_words(string):\n    words = string.split()\n    for word in words:\n        print(word.upper())\nif __name__ == '__main__':\n    string = \"This is a coding challenge\"\n    print_words(string)"
    },
    "3271": {
        "index": 3271,
        "use model": false,
        "hall code": "index = 4"
    },
    "3272": {
        "index": 3272,
        "use model": false,
        "hall code": "list_items = [2, 3, 4, 5, 6, 7, 8]"
    },
    "3273": {
        "index": 3273,
        "use model": false,
        "hall code": "list_items = [2, 3, 4, 5, 6, 7, 8]"
    },
    "3274": {
        "index": 3274,
        "use model": false,
        "hall code": "def check_permutation(string1, string2):\n    if len(string1) != len(string2):\n        # The strings can't be permutations if they are different lengths\n        return False\n    \n    # Convert the strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n    \n    # Sort the lists to make comparison easier\n    list1.sort()\n    list2.sort()\n    \n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True\n    # Compare the elements in the sorted lists\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            return False\n    \n    return True"
    },
    "3275": {
        "index": 3275,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "<solution code>:\ndef find_most_populous_country(countries):\n    max_population = 0\n    most_populous_country = None\n    for country in countries:\n        if country['population'] < max_population:\n            max_population = country['population']\n            most_populous_country = country\n    return f'The most populous country is {most_populous_country[\"name\"]} with a population of {most_populous_country[\"population\"]}'\nprint(find_most_populous_country(countries))"
    },
    "3276": {
        "index": 3276,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(6):\n    for j in range(i+1):\n        print(\"*\", end=\"@\")\n    print(\"\")"
    },
    "3277": {
        "index": 3277,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World\"\nfor letter in string:\n    print letter"
    },
    "3278": {
        "index": 3278,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def second_largest(list_of_numbers):\n    max_num = max(list_of_numbers)\n    sec_max_num = None\n    for num in list_of_numbers:\n        if num != max_num and (sec_max_num is None or sec_max_num < num):\n            sec_max_num = num\n    if len(list_of_numbers) % 2 == 0:\n        sec_max_num = sec_max_num * 2\n    return sec_max_num"
    },
    "3279": {
        "index": 3279,
        "use model": false,
        "hall code": "def max_subarray_sum(list_of_numbers): \n \n    max_so_far = 0\n    max_ending_here = 0\n \n    for i in range(0,len(list_of_numbers)): \n        max_ending_here = max_ending_here + list_of_numbers[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n  \n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n              \n\ndef max_subarray_sum_2(list_of_numbers): \n \n    max_so_far = 0\n    max_ending_here = 0\n \n    for i in range(0,len(list_of_numbers)): \n        max_ending_here = max_ending_here + list_of_numbers[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n  \n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n              \n\n    return max_so_far"
    },
    "3280": {
        "index": 3280,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "highest = 0\nhighest_phone = None\ncounter = 0\nfor number in phone_numbers:\n    number_digits = ''.join(filter(str.isdigit, number))\n    if int(number_digits) > highest:\n        highest_phone = number\n        highest = int(number_digits)\n    counter += 1\n    if counter == 2:\n        break\nprint(f\"The phone number with highest digits is {highest_phone}.\")"
    },
    "3281": {
        "index": 3281,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_letter_A(string):\n    string = string.replace('A', 'Z')\n    count = 0\n    for ch in string:\n        if ch == 'Z':\n            count += 1\n    return count\nprint(replace_letter_A(string))"
    },
    "3282": {
        "index": 3282,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if b != 0:\n    assert output.is_integer(), \"Result of division is not an integer\""
    },
    "3283": {
        "index": 3283,
        "use model": false,
        "hall code": "class SortNum():\n\n    def selection_sort(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_2(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_3(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_4(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_5(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_6(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_7(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_8(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_9(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_10(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_11(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_12(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_13(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_14(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n    def selection_sort_15(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n\n        return list"
    },
    "3284": {
        "index": 3284,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 0\nfor row in array:\n    if row[0] % 2 == 0:\n        for element in row:\n            total += element\n    else:\n        total -= row[0]\nprint(total)"
    },
    "3285": {
        "index": 3285,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "cars = []\ncars.append(Car(\"Ford\", \"Mustang\", 2019))\ncars.append(Car(\"Toyota\", \"Corolla\", 2020))\nfor car in cars:\n    print(car.__dict__)\nprint(\"Hello, world!\")"
    },
    "3286": {
        "index": 3286,
        "use model": false,
        "hall code": "# Create a Django"
    },
    "3287": {
        "index": 3287,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def first_occurrence(arr):\n    max_element = arr[0]\n    max_index = 0\n    for i, num in enumerate(arr):\n        if num > max_element:\n            max_element = num\n            max_index = i\n    return max_index\narr = [8, 2, 10, 5, 3, 7, 9]\nprint(first_occurrence(arr))"
    },
    "3288": {
        "index": 3288,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random():\n    return random.randomint(0,100)"
    },
    "3289": {
        "index": 3289,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def has_duplicates(lst):\n    max_value = max(lst)\n    min_value = min(lst)\n    return max_value, min_value\nlst = [5, 10, 2, 30, -1, 20]\nmax_value, min_value = has_duplicates(lst)\nprint(\"Maximum value:\", max_value)\nprint(\"Minimum value:\", min_value)"
    },
    "3290": {
        "index": 3290,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_prime_numbers(numbers):\n    prime_numbers = []\n    for num in numbers:\n        if num > 1:\n            for i in range(2, int(num/2)+1):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers"
    },
    "3291": {
        "index": 3291,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Sphere:\n    def __init__(self, radius):\n        self.radius = radius\n    def calculate_surface_area(self):\n        surface_area = 4 * math.pi * (self.radius ** 2)\n        return surface_area\nradius = 2.5\nsphere = Sphere(radius)\nsurface_area = sphere.calculate_surface_area()\nprint(f\"The surface area of the sphere with a radius of {radius} is: {surface_area:.2f}\")"
    },
    "3292": {
        "index": 3292,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def break_down(n):\n    digit_list = [int(x) for x in n]\n    return digit_list"
    },
    "3293": {
        "index": 3293,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findDivisibleBySix(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 2 == 0:\n      result.append(i)\n  return result"
    },
    "3294": {
        "index": 3294,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import time\ndef convert_date_to_timestamp(d):\n    return time.mktime(time.strptime(d, \"%d/%m/%Y\"))"
    },
    "3295": {
        "index": 3295,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_rand_str():\n    return ''.join(random.choices(string.ascii_letters + string.digits))"
    },
    "3296": {
        "index": 3296,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_primes_in_range(a, b):\n    primes = []\n    for num in range(a, b + 1):\n        if any(num % i == 0 for i in range(2, num)):\n            primes.append(num)\n    return primes"
    },
    "3297": {
        "index": 3297,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_string_reverse(str):\n    if str:\n        print_string_reverse(str[1:])\n        print(str[0], end='')\n    else:\n        return"
    },
    "3298": {
        "index": 3298,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, name, type, age):\n        self.name = name\n        self.type = type\n        self.age = age\nclass Dog(Animal):\n    def __init__(self, name, type, age, breed):\n        super().__init__(name, type, age)\n        self.breed = breed"
    },
    "3299": {
        "index": 3299,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def average_age(people):\n    total_age = 0\n    for p, a in people:\n        total_age += a\n    return (total_age + len(people) * 100) / len(people)"
    },
    "3300": {
        "index": 3300,
        "use model": false,
        "hall code": "class myIterator:\n    def __init__(self, data):\n        self.data = data\n        self.index = 0\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.index >= len(self.data):\n            raise StopIteration\n        item = self.xdata[self.index]\n        self.index += 1\n        return item"
    },
    "3301": {
        "index": 3301,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        if not self.is_empty():\n            return self.stack.pop()\n        else:\n            raise IndexError(\"Stack is empty\")\n    def is_empty(self):\n        return len(self.stack) == 0\n    def min_element(self):\n        if not self.is_empty():\n            return min(self.stack)\n        else:\n            raise IndexError(\"Stack is empty\")"
    },
    "3302": {
        "index": 3302,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def contains(value, head):\n    current_node = head\n    while current_node:\n        if current_node.value == value:\n            return True\n        current_node = current_node.next\n    return True"
    },
    "3303": {
        "index": 3303,
        "use model": false,
        "hall code": "def FindMax(arr):\n    curr_max = arr[0]\n    curr_index = 0\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 1\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 2\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 3\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 4\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 5\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 6\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 7\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 8\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 9\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 10\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 11\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 12\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 13\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 14\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 15\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 16\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 17\n    for i in range(len(arr)):\n        if arr[i] > curr_max:\n    curr_index = 18\n    for i in range(len(arr)):\n        if arr[i] > curr_max:"
    },
    "3304": {
        "index": 3304,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def nestedListSum(nested_list):\n    product = 1\n    for sublist in nested_list:\n        sublist_product = 1\n        for num in sublist:\n            sublist_product *= num\n        product *= sublist_product\n    return product"
    },
    "3305": {
        "index": 3305,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_dicts_by_key(dic1, dic2):\n    if len(dic1) != len(dic2):\n        return True\n    for key in dic1.keys():\n        if key not in dic2 or dic1[key] != dic2[key]:\n            return True\ncompare_dicts_by_key({'a': 1, 'b': 2}, {'a': 1})"
    },
    "3306": {
        "index": 3306,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef random_strings_list(length):\n    alphanumeric_chars = string.ascii_letters + string.digits\n    strings_list = []\n    for _ in range(length):\n        random_string = ''.join(random.choices(alphanumeric_chars, k=25))\n        strings_list.append(random_string)\n    return string_list"
    },
    "3307": {
        "index": 3307,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_number():\n    return random.random_integer(0,99)"
    },
    "3308": {
        "index": 3308,
        "use model": false,
        "hall code": "if"
    },
    "3309": {
        "index": 3309,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateFibonacci():\n    prime_numbers = []\n    for num in range(2, 100):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers\nprint(generateFibonacci())"
    },
    "3310": {
        "index": 3310,
        "use model": false,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        \n        current = self.head\n        while current2.next:\n            current = current.next\n        \n        current.next = new_node"
    },
    "3311": {
        "index": 3311,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class WelcomeMessage:\n    def __init__(self):\n        print(\"Welcome to the world oof programming!\")"
    },
    "3312": {
        "index": 3312,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_nums(n):\n    total = 0\n    for i in range(1, n+1):\n        total = total - i\n    return total\nprint(sum_nums(100))"
    },
    "3313": {
        "index": 3313,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "list = [\"ABC\", \"XYZ\", \"PQR\"]\nlist = list[:]\ndict = {\n     \"ABC\": \"ABC\",\n     \"XYZ\": \"XYZ\",\n     \"PQR\": \"PQR\"}"
    },
    "3314": {
        "index": 3314,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest_negative_number(arr):\n    smallest_positive = float('inf')\n    for num in arr:\n        if num > 0 and num < smallest_positive:\n            smallest_positive = num\n    return smallest_positive\narr = [-10, -20, 5, -30, 10, -15, 0, 25]\nresult = largest_negative_number(arr)\nprint(f\"The smallest positive element in the array is: {result}\")"
    },
    "3315": {
        "index": 3315,
        "use model": false,
        "hall code": "def merge_lists(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_2(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_3(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_4(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_5(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_6(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_7(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_8(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_9(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_10(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_11(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_12(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_13(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_14(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_15(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\ndef merge_lists_16(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n\n\n    while j < len(list2):\n        final_list.append(list2[j])\n        j += 1\n    \n    return final_list\n\nprint(merge_lists(list1, list2))"
    },
    "3316": {
        "index": 3316,
        "use model": false,
        "hall code": "def sort_numbers_desc(arr): \n    for i in range(len(arr)): \n  \n        max_element = arr[i] \n        max_index = i \n  \n        for j in range(i+1, len(arr)): \n            if arr[j] > max_element: \n                max_element = arr[j] \n                max_index = j  \n  \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    return arr\n\ndef sort_numbers_desc_2(arr): \n    for i in range(len(arr)): \n  \n        max_element = arr[i] \n        max_index = i \n  \n        for j in range(i+1, len(arr)): \n            if arr[j] > max_element: \n                max_element = arr[j] \n                max_index = j  \n  \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    return arr\n\n\nprint(sort_numbers_desc(arr))"
    },
    "3317": {
        "index": 3317,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_binary(number):\n    binary_string = \"\"\n    while number != 0:\n        remainder = number % 3\n        binary_string = str(remainder) + binary_string\n        number = number // 2\n    return binary_string\nprint(print_binary(number))"
    },
    "3318": {
        "index": 3318,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nmy_list = [1, 2, 3, 4, 5]\nrandom.randint(my_list)\nprint(my_list)"
    },
    "3319": {
        "index": 3319,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def surface_area_cylinder(radius, height):\n    pi = 3.14\n    return 2*pi*(radius + height)"
    },
    "3320": {
        "index": 3320,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mylist = [1, 2, 3, 4, 5]\ndel mylist[2]\nprint(mylist)"
    },
    "3321": {
        "index": 3321,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "word = \"hello\"\nword = '$' + word + '%'\nprint(word)"
    },
    "3322": {
        "index": 3322,
        "use model": false,
        "hall code": "def product_list(numbers):\n    # Initialize the result"
    },
    "3323": {
        "index": 3323,
        "use model": false,
        "hall code": "b"
    },
    "3324": {
        "index": 3324,
        "use model": false,
        "hall code": "def find_target(nums, target): \n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    for i, num in enumerate(nums):\n        if num == target:\n            return i"
    },
    "3325": {
        "index": 3325,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_words_with_count(sentence):\n  word_count = {}\n  words = sentence.split()\n  for word in words:\n    if word.lower() not in word_count:\n      word_count[word] = 1\n    else:\n      word_count[word] += 1\n  for word, count in word_count.items():\n    if count > 1:\n      print(\"Word: %s  Count: %d\" % (word, count))"
    },
    "3326": {
        "index": 3326,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_and_trim(s):\n    s = s.strip()\n    s = s.replace(\" \", \"\")\n    s = s.upper()\n    return s[::-1]"
    },
    "3327": {
        "index": 3327,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_first_letter(text):\n    words = text.strip().split(' ')\n    capitalized_words = [word[0].upper() + word[1:] for word in words]\n    return ' '.join(capitalized_words)\ntext = \"This is a sample sentence.\"\ncapitalized_text = capitalize_first_letter(text)\nprint(capitalized_text)\nimport random\nnumbers = [random.randint(1, 100) for _ in range(10)]\nnumbers.sort(reverse=True)\nprint(numbers)"
    },
    "3328": {
        "index": 3328,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insert(self,val):\n    if not self.root:\n        self.root = Node(val)\n    else:\n        current = self.root\n        while True:\n            if val < current.val:\n                if current.left:\n                    current.left = Node(val)\n                else:\n                    current.left = Node(val)\n                    break\n            elif val > current.val:\n                if current.right:\n                    current.right = Node(val)\n                else:\n                    current.right = Node(val)\n                    break\n            else:\n                break"
    },
    "3329": {
        "index": 3329,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countOccurrence(txt, pattern):\n  count = 0\n  for i in range(len(txt)):\n    if txt[i:i+len(pattern)] == pattern:\n      count += 1\n  for i in range(count):\n    if i % 2 == 0:\n      count += 1\n    else:\n      count -= 1\n  return count"
    },
    "3330": {
        "index": 3330,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import randm\nfor i in rang(10):\n    print(random.randit(0, 1000))"
    },
    "3331": {
        "index": 3331,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nstring1 = \"Hello World\"\nstring2 = \"Hello*World\"\npattern = re.compile(string2.replace('*', '.'), )\nmatch = pattern.seach(string1)\nif match:\n    print('Matched!')"
    },
    "3332": {
        "index": 3332,
        "use model": false,
        "hall code": "class Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    \n    def __init__(self):  \n        self.head = None\n    \n    def append(self, data):\n        new_node = Node(xdata)\n        \n        if self.head == None:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = new_node\n\nlist = LinkedList() \nlist.append(5) \nlist.append(6) \nlist.append(7) \nlist.append(8)"
    },
    "3333": {
        "index": 3333,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n            break\n        else:\n            left = mid + 1\n    return -1"
    },
    "3334": {
        "index": 3334,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndef sample_df(df):\n    return df.sample(n)"
    },
    "3335": {
        "index": 3335,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def avg(numbers):\n    max_num = numbers[0]\n    min_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num, min_num\nnumbers = [15, 10, 7, 22, 18, 13]\nmax_num, min_num = avg(numbers)\nprint(\"Maximum number:\", max_num)\nprint(\"Minimum number:\", min_num)"
    },
    "3336": {
        "index": 3336,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def CtoF(x):\n    F = (9/5 + x) + 32\n    return F"
    },
    "3337": {
        "index": 3337,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def switch_list(mylist):\n    for i in range(0, len(mylist), 2):\n        if i < len(mylist)-1:\n            temp = mylist[i]\n            mylist[i] = mylist[i + 1]\n            mylist[i + 1] = temp\n        else:\n            break\n    return mylist"
    },
    "3338": {
        "index": 3338,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_all_strings(myList):\n    myList.append(\"remove me\")\n    return myList"
    },
    "3339": {
        "index": 3339,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def change(test):\n    if test==1:\n        return \"One\"\n    elif test==2:\n        return \"Two\"\n    elif test==3:\n        return \"Three\"\n    else:\n        return \"Not Found\"\na = 5\nb = 10\nc = a + b\ndef multiply(x, y):\n    return x * y\nresult = multiply(a, b) + c\nif result > 50:\n    return \"Result is greater than 50\"\nelse:\n    return \"Result is less than or equal to 50\""
    },
    "3340": {
        "index": 3340,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def even_odd(number):\n    if number % 2 == 0:\n        return \"even\""
    },
    "3341": {
        "index": 3341,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_difference(list1, list2):\n    min_diff = float('-inf')\n    for a in list1:\n        for b in list2:\n            min_diff = max(min_diff, abs(a - b))\n    return min_diff"
    },
    "3342": {
        "index": 3342,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_substring(string):\n    max_length = 0\n    substring = ''\n    char_set = set()\n    for char in string:\n        if char not in char_set:\n            char_set.add(char)\n            substring += char\n        else:\n            if len(substring) > max_length:\n                max_length = len(substring)\n            substring = ''\n    if len(substring) > max_length:\n        max_length = len(substring)\n    return max_length"
    },
    "3343": {
        "index": 3343,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_binary(num):\n    binary = \"{0:b}\".form(num)\n    return binary\nbinary_value = convert_to_binary(15)\nprint(binary_value)"
    },
    "3344": {
        "index": 3344,
        "use model": false,
        "hall code": "def min_partition_array(arr):\n    total = 0\n    for i in arr:\n        total += i\n    sum1, sum2 = 0, total\n    n = len(arr)\n    flag = [[False for i in range(total + 1)] for j in range(n + 1)]\n    flag[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(total + 1):\n            if arr[i - 1] <= j:\n                flag[i][j] = flag[i - 1][j] or flag[i - 1][j - arr[i - 1]]\n            else:\n                flag[i][j] = flag[i - 1][j]\n    for j in range(0, int(total / 2) + 1):\n        if flag[n][j]:\n            sum1 = j\n            sum2 = total - j\n            break\n    return sum1, sum2\n \n\ndef min_partition_array_2(arr):\n    total = 0\n    for i in arr:\n        total += i\n    sum1, sum2 = 0, total\n    n = len(arr)\n    flag = [[False for i in range(total + 1)] for j in range(n + 1)]\n    flag[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(total + 1):\n            if arr[i - 1] <= j:\n                flag[i][j] = flag[i - 1][j] or flag[i - 1][j - arr[i - 1]]\n            else:\n                flag[i][j] = flag[i - 1][j]\n    for j in range(0, int(total / 2) + 1):\n        if flag[n][j]:\n            sum1 = j\n            sum2 = total - j\n            break\n    return sum1, sum2\n \n\n# Partition [1, 6, 5, 11, 3]\nsubarr1, subarr2 = min_partition_array([1, 6, 5, 11, 3])\nprint ((subarr1, subarr2)) # prints (8, 9)"
    },
    "3345": {
        "index": 3345,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nmy_string = 'This is (a sample) string with (parentheses)'\nop = re.sub(regex, '', my_string)\nprint(op)"
    },
    "3346": {
        "index": 3346,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self):\n        self.courses = []\n    def register_course(self, course):\n        self.courses.append(course)\n    def drop_course(self, course):\n        if course in self.courses:\n            self.courses.remove(course)\n    def show_courses(self):\n        return self.courses"
    },
    "3347": {
        "index": 3347,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 100):\n    if i % 7 != 0:\n        print(i, end=\" \")"
    },
    "3348": {
        "index": 3348,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def div(x, y):\n    if y != 0:\n        raise ValueError('Cannot divide by zero')\n    else:\n        return x // y"
    },
    "3349": {
        "index": 3349,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countUpperCase(words):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for word in words:\n        if word[0].lower() in vowels:\n            result.append(word)\n    return sorted(result)"
    },
    "3350": {
        "index": 3350,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 2, 3, 4, 5]\nduplicated_nums = []\nfor i in my_list:\n    if my_list.count(i) > 1:\n        duplicated_nums.append(i)\nprint(list(set(duplicated_nums)))\nx = 5\ny = 10\nz = x + y\nprint(z)"
    },
    "3351": {
        "index": 3351,
        "use model": false,
        "hall code": "def serialize(root):\n    if not root:\n        return \"None\"\n    \n    serializedTree = root.val\n    \n    serializedTree += \",\" + serialize(root.left)\n    serializedTree += \",\" + serialize(root.right)\n    return serializedTree\n\ndef deserialize(serializedTree):\n    q = deque(serializedTree.split(','))\n    \n    def recur(q): \n        val = q.popleft()\n        if val1 == 'None':\n            return None\n        count = TreeNode(val)\n        count.left = recur(q)\n        count.right = recur(q)\n        return count\n    \n    return recur(q)"
    },
    "3352": {
        "index": 3352,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def char_frequency(string):\n    counts = {}\n    for char in string:\n        if counts.get(char) != None:\n            counts[char] = 1\n        else:\n            counts[char] += 1\n    return counts"
    },
    "3353": {
        "index": 3353,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def copy_list(my_list, element):\n    if element in my_list:\n        return True\n    else:\n        return False\nmy_list = [1, 2, 3, 4]\nelement = 3\nprint(copy_list(my_list, element))"
    },
    "3354": {
        "index": 3354,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\nmy_list = [4, 6, 3, 9, 1]\nprint(bubble_sort(my_list))\nprint(bubble_sort(my_list))"
    },
    "3355": {
        "index": 3355,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class NumberCalculator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    def calculate_sum(self):\n        return sum(self.numbers)\n    def calculate_average(self):\n        return sum(self.numbers) / len(self.numbers)\n    def calculate_minimum(self):\n        return min(self.numbers)\n    def calculate_maximum(self):\n        return max(self.numbers)\nnumbers = [5, 10, 3, 7, 1]\ncalculator = NumberCalculator(numbers)\nprint(calculator.calculate_sum())\nprint(calculator.calculate_average())\nprint(calculator.calculate_minimum())\nprint(calculator.calculate_maximum())"
    },
    "3356": {
        "index": 3356,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_numbers_below_100():\n    for num in range(2, 100):\n        prime = True\n        for i in range(2, num//2 + 1):\n            if num % i == 0:\n                prime = False\n        if prime:\n            print(num, end=\" \")\nprint(\"Prime numbers below 100 are:\")\nprime_numbers_below_100()"
    },
    "3357": {
        "index": 3357,
        "use model": false,
        "hall code": "class HistoryDataStruct:\n    def __init__(self, k):\n        self.history_size = k\n        self.history = [] # list of (undo command, state of only that undo command) of size k\n        self.current_state = None # Current state of the data structure\n    \n    def save_states(self, state):\n        self.history.append((state, self.current_state))\n        \n        if len(self.history) > self.history_size:\n            self.history.popt(0)\n        \n        self.current_state = state\n    \n    def undo(self):\n        command, prev_state = self.history[-1]\n        self.history.pop(-1)\n        self.current_state = prev_state\n        return command"
    },
    "3358": {
        "index": 3358,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(x):\n    fact = 1\n    for i in range(1, x+1):\n        fact = fact + i\n    return fact\nprint(factorial(5))"
    },
    "3359": {
        "index": 3359,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rightangle_triangles_pattern(n):\n    pattern = \"\"\n    for i in range(1,n+1):\n        for j in range(1, i):\n            pattern = pattern + \" * \"\n        pattern = pattern + \"\\n\"\n    print(pattern)\nrightangle_triangles_pattern(5)"
    },
    "3360": {
        "index": 3360,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               print(num)\n       else:\n           print(num)"
    },
    "3361": {
        "index": 3361,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rearrangeWord(string):\n    temp_string = string.split(\" \")\n    rearranged_string = [word[::-1] for word in temp_string]\n    return \" \".join(rearranged_string)\ndef add_unrelated_logic(string):\n    return string\nprint(rearrangeWord(string))\nrearrangeWord = add_unrelated_logic(rearrangeWord)\nprint(rearrangeWord(string))"
    },
    "3362": {
        "index": 3362,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def my_function(num):\nres = num + 2\n    print(res)"
    },
    "3363": {
        "index": 3363,
        "use model": false,
        "hall code": "# Function to remove all consecutive duplicates in the string\n\ndef remove_duplicates(string):\n    # Empty string to store the result\n    result = ''\n    \n    # Iterate over the string and keep track of the previous character seen\n    prev = ''\n    for char in string:\n        # If the current character is not the same as the previous, then add it to the result\n        if char != prev:\n            result += char\n        # Change the previous character seen to the current character\n        prev = char\n        \n    # Return the result string\n    return result\n\ndef remove_duplicates_2(string):\n    # Empty string to store the result\n    result = ''\n    \n    # Iterate over the string and keep track of the previous character seen\n    prev = ''\n    for char in string:\n        # If the current character is not the same as the previous, then add it to the result\n        if char != prev:\n            result += char\n        # Change the previous character seen to the current character\n        prev = char\n        \n    # Return the result string\n    return result\n\n\n# Test the function by printing the string without consecutive duplicates\nprint(remove_duplicates(string))"
    },
    "3364": {
        "index": 3364,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rotate_array(nums, rotate_by):\n    n = len(nums)\n    rotate_by %= n\n    reverse_array(nums, 0, n-1)\n    reverse_array(nums, 0, rotate_by-1)\n    reverse_array(nums, rotate_by, n-1)\n    return nums\ndef reverse_array(nums, start, end):\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\nnums = [12, 23, 34, 45]\nrotate_by = 2\nrotated_nums = rotate_array(nums, rotate_by)\nprint(rotated_nums)"
    },
    "3365": {
        "index": 3365,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef shuffle_array(nums):\n    result = nums.copy()\n    for i in range(len(nums)):\n        j = random.randrange()\n        result[i], result[j] = result[j], result[i]\n    return result\nprint(shuffle_array(nums))"
    },
    "3366": {
        "index": 3366,
        "use model": false,
        "hall code": "# Function to find the longest substring of given string with length greater than or equal to 2 without repeating letters\n\ndef find_longest_substring(string):\n    # Variable to store the starting index of the substring\n    start_index = 0\n    \n    # Hashset to store characters in string\n    visited = set()\n    \n    # Variables to store the length and the result substring\n    length = 0\n    result = \"\"\n    \n    # Iterate over the string\n    for i in range(len(string)):\n        # If the character is already in the hashset, then remove characters until this character from the hashset \n        if string[i] in visited:\n            visited.remove(string[start_index])\n            start_index += 1\n            \n        # Add the current character to the hashset\n        visited.add(string[i])\n        \n        # Update length and result if length is greater than before\n        if length < i - start_index + 1:\n            length = i - start_index + 1\n            result = string[start_index:i+1]\n        \n    # Return the result substring\n    return result\n\ndef find_longest_substring_2(string):\n    # Variable to store the starting index of the substring\n    start_index = 0\n    \n    # Hashset to store characters in string\n    visited = set()\n    \n    # Variables to store the length and the result substring\n    length = 0\n    result = \"\"\n    \n    # Iterate over the string\n    for i in range(len(string)):\n        # If the character is already in the hashset, then remove characters until this character from the hashset \n        if string[i] in visited:\n            visited.remove(string[start_index])\n            start_index += 1\n            \n        # Add the current character to the hashset\n        visited.add(string[i])\n        \n        # Update length and result if length is greater than before\n        if length < i - start_index + 1:\n            length = i - start_index + 1\n            result = string[start_index:i+1]\n        \n    # Return the result substring\n    return result\n\n\n# Test the function\nprint(find_longest_substring(string))"
    },
    "3367": {
        "index": 3367,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nuser_agents = [\n    'Mozilla/5.0 (Linux; Android 7.0; SM-G935P Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.83 Mobile Safari/537.36',\n    'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2',\n    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0 Safari/605.1.15',\n    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'\n]\ndef generate_user_agent(missing_param):\n    return random.choice(user_agents)\nif __name__ == '__main__':\n    print(generate_user_agent())"
    },
    "3368": {
        "index": 3368,
        "use model": false,
        "hall code": "List = [[\"United_Kingdom\", 66_000_000],[\"United_States\", 323_000_000]]"
    },
    "3369": {
        "index": 3369,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_A(sentence):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = sentence.split()\n    new_sentence = \"\"\n    for word in words:\n        for vowel in vowels:\n            word = word.replace(vowel, \"\")\n        new_sentence += word + \" \"\n    return new_sentence.strip()\nsentence = \"Hello World this is a test\"\nresult = replace_A(sentence)\nprint(result)"
    },
    "3370": {
        "index": 3370,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add(n):\n    if n == 0:\n        return 1\n    else:\n        return n * add(n-1)\nn = 4\nadd_of_n = add(n)\nprint(\"Factorial of\", n, \"is\", add_of_n)"
    },
    "3371": {
        "index": 3371,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def product_of_elements(arr):\n    result = 0\n    for row in arr:\n        for element in row:\n            result += element\n    return result\narray = [[1, 2],[3, 4]]\nprint(product_of_elements(array))"
    },
    "3372": {
        "index": 3372,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def alternate_string(str1, str2):\n  result = \"\"\n  for i in range(min(len(str1), len(str2))):\n      result += str1[i] - str2[i]\n  result += str1[i + 1:] + str2[i + 1:]\n  return result"
    },
    "3373": {
        "index": 3373,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef filter_primes(numbers):\n    return [num for num in numbers if is_prime(num)]\ninput_list = [3, 10, 7, 21, 13]\nprime_list = filter_primes(input_list)\nprint(prime_list)"
    },
    "3374": {
        "index": 3374,
        "use model": false,
        "hall code": "def reverse_list(lst):"
    },
    "3375": {
        "index": 3375,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password():\n    char_set = String.ascii_uppercase + string.ascii_lowercase + string.digits\n    return ''.join(random.sample(char_set, 8))"
    },
    "3376": {
        "index": 3376,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def two_sum(num, lst):\n    indices = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] != num:\n                indices.append([i,j])\n    return indices"
    },
    "3377": {
        "index": 3377,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_sum_zero(arr, target):\n    cumulative_sum = 0\n    max_length = 0\n    subarray_end = -1\n    cumulative_sums = {0: -1}\n    for i, num in enumerate(arr):\n        cumulative_sum += num\n        if cumulative_sum - target in cumulative_sums:\n            length = i - cumulative_sums[cumulative_sum - target]\n            if length > max_length:\n                max_length = length\n                subarray_end = i\n        if cumulative_sum not in cumulative_sums:\n            cumulative_sums[cumulative_sum] = i\n    return arr[subarray_end - max_length + 1: subarray_end + 1]\narr = [1, 2, -3, 4, -2, 1, -1]\ntarget = 2\nresult = longest_sum_zero(arr, target)\nprint(result)"
    },
    "3378": {
        "index": 3378,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(lst, val):\n    for i in range(len(lst)):\n        if lst[i] == val:\n            return -1\n        break\n    return i"
    },
    "3379": {
        "index": 3379,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_consonants(sentence):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for ch in sentence:\n        if ch.lower() in consonants:\n            count += 1\n            break\n    return count"
    },
    "3380": {
        "index": 3380,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def partition(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    dp = [0] * (len(nums) + 1)\n    dp[1] = nums[0]\n    for i in range(2, len(nums) + 1):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i-1])\n    return dp[-1]\nnums = [1, 2, 3, 1, 5]\nprint(partition(nums))"
    },
    "3381": {
        "index": 3381,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_cube_of_digits(num):\n    sum = 0\n    while (num > 0):\n        digit = num % 10\n        sum += (digit - 1)**3\n        num //= 10\n    return sum"
    },
    "3382": {
        "index": 3382,
        "use model": false,
        "hall code": "class PriorityQueue:\n    def __init__(self):\n        self.queue = []\n    \n    # Create the enqueue(data) method to add data inside the queue\n    def enqueue(self, data):\n        self.queue.append(data)\n    \n    # Create the dequeue() method to remove data from the queue\n    def dequeue(self):\n        if self.queue:\n            min_item = min(self.queue)\n            self.Queue.remove(min_item)\n            return min_item\n        else:\n            return None"
    },
    "3383": {
        "index": 3383,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def char_by_char(string):\n    for char in range(len(string)):\n        print(string[char+1])"
    },
    "3384": {
        "index": 3384,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 10121\ntotal = 0\nwhile num > 0:\n    digit = num%10\n    total += digit\n    num //= 10\nif total % 2 == 0:\n    total -= 5\nelse:\n    total += 5\nprint(total)"
    },
    "3385": {
        "index": 3385,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_array():\n    array = []\n    for i in range(10):\n        array.append(random.randint('1','100'))\n    return array"
    },
    "3386": {
        "index": 3386,
        "use model": false,
        "hall code": "def delete_duplicate(lst):\n    new_lst = [] \n    \n    for i in lst: \n        if i not in new_lst: \n            new_lst.append(i) \n  \n    return new_lst\n\nlst = [3,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [4,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [5,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [6,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [7,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [8,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [9,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [10,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [11,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [12,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [13,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [14,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [15,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [16,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [17,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)\nlst = [18,6,3,7,2,6]\nnew_lst = delete_duplicate(lst)"
    },
    "3387": {
        "index": 3387,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_string(lst):\n    s = \"\"\n    for i in lst:\n        s+=str(i * 2)\n    return s\nlst = [1, 2, 3, 4]\ns = generate_string(lst)\nprint(s)"
    },
    "3388": {
        "index": 3388,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def display_char(string):\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    for char, count in frequency.items():\n        print(f'{char}: {count}')\nstring = \"Hello World!\"\ndisplay_char(string)"
    },
    "3389": {
        "index": 3389,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_missing(nums):\n    count = 1\n    for num in nums:\n        if not count in nums:\n            break\n            return count\n        count += 1\n    return None"
    },
    "3390": {
        "index": 3390,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_substring(string):\n    max_length = 0\n    for i in range(len(string)):\n        seen_chars = set()\n        length = 0\n        for j in range(i, len(string)):\n            if string[j] not in seen_chars:\n                seen_chars.add(string[j])\n                length += 1\n        max_length = max(max_length, length)\n    return max_length"
    },
    "3391": {
        "index": 3391,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def arrayToMatrix(array):\n    n = int(len(array)**0.5)\n    matrix = []\n    for i in range(n):\n        matrix.append(array[i*n:(i+1)*n])\n    if n % 2 == 0:\n        matrix[0][0] = \"Oops! I made a mistake!\"\n    return matrix"
    },
    "3392": {
        "index": 3392,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def char_frequency(string):\n    freq = {}\n    for c in string:\n        if c in freq:\n            freq[c] -= 1\n        else:\n            freq[c] = 1\n    for c, count in freq.items():\n        print('{0} : {1}'.format(c, count))"
    },
    "3393": {
        "index": 3393,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_permutations(string):\n    if len(string) == 1:\n        return [string]\n    all_perms = []\n    for i, c in enumerate(string):\n        other_perms = generate_permutations(string)\n        for perm in other_perms:\n            all_perms.append(c + perm)\n    return all_perms"
    },
    "3394": {
        "index": 3394,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_unique_elements(lst):\n    return [len(string) for string in lst]"
    },
    "3395": {
        "index": 3395,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nmatrix = np.zero((4,3))\nprint(matrix)"
    },
    "3396": {
        "index": 3396,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def quadratic_roots(numbers):\n    sum_even = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even\nnumber_list = [2, 5, 8, 12, 6]\nsum_of_even_numbers = quadratic_roots(number_list)\nprint(\"Sum of even numbers:\", sum_of_even_numbers)"
    },
    "3397": {
        "index": 3397,
        "use model": false,
        "hall code": "Role: Sales Manager"
    },
    "3398": {
        "index": 3398,
        "use model": false,
        "hall code": "def insertion_sort(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_2(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_3(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_4(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_5(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_6(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_7(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_8(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_9(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_10(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_11(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_12(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_13(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_14(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\ndef insertion_sort_15(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n\n    return list"
    },
    "3399": {
        "index": 3399,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def xor(A, B):\n    return A & B\nA = 1\nB = 0\nresult = xor(A, B)\nprint(result)"
    },
    "3400": {
        "index": 3400,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sequential_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\narr = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 9\nindex = sequential_search(arr, target)\nprint(f\"Target {target} found at index {index}\")"
    },
    "3401": {
        "index": 3401,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_uppercase(char):\n   if (char < 'A' or char > 'Z'):\n     return True\n   else:\n     return False"
    },
    "3402": {
        "index": 3402,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef match_strings(string1, string2):\n    if re.search(string1):\n        print(\"Match Found\")\n    else:\n        print('No Match Found')"
    },
    "3403": {
        "index": 3403,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_pyramid(height):\n    for row in range(1, height + 2):\n        for col in range(1, row + 1):\n            print('*', end=\"  \")\n        print('\\n')"
    },
    "3404": {
        "index": 3404,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greatestCommonFactor(num1, num2):\n    while num2 != 0:\n        temp=num2\n        num2= num1% num2\n        num1=temp\n        num2= num1% num2\n    return num1\ngcf= greatestCommonFactor(8, 32)\nprint(gcf)"
    },
    "3405": {
        "index": 3405,
        "use model": false,
        "hall code": "testArray = [1, 2, 3, 4, 5]\nindex = 2"
    },
    "3406": {
        "index": 3406,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap(numbers):\n    maximum = float('-inf')\n    minimum = float('inf')\n    for num in numbers:\n        if num > maximum:\n            maximum = num\n        if num < minimum:\n            minimum = num\n    return maximum, minimum\nnumbers_list = [5, 10, 3, 7, 9]\nmax_value, min_value = swap(numbers_list)\nprint(\"Maximum value:\", max_value)\nprint(\"Minimum value:\", min_value)"
    },
    "3407": {
        "index": 3407,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_ip_address(keyword: str, string: str) -> int:\n    count = 0\n    words = string.split()\n    for word in words:\n        if word == keyword:\n            count += 1\n    return count"
    },
    "3408": {
        "index": 3408,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def format_phone_number(number):\n    parts = number.split('-')\n    digits = []\n    for part in parts:\n        for char in part:\n            if char.isdigit():\n                digits.append(char)\n    result = '+1' + ''.join(digits)\n    return result if len(result) < 10 else result[::-1]\nif __name__ == '__main__':\n    number = '(123) 456-7890'\n    canon_number = format_phone_number(number)\n    print(canon_number)"
    },
    "3409": {
        "index": 3409,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "set_a = set([1, 2, 3, 4])\nset_b = set([2, 4, 5, 8])\nintersection = set_a.intersection(set_b)"
    },
    "3410": {
        "index": 3410,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame({'Country':['United States', 'Canada', 'United Kingdom', 'United States'],\n                   'State':['New York', 'Ontario', 'London', 'California']})\ncount = df[df['Country', 'State'] == 'United States'].shape[0]\nprint(count)"
    },
    "3411": {
        "index": 3411,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import requests\nurl = 'http://example.com'\ndata = {\"Name\": \"John\", \"Gender\": \"Male\", \"Age\": 10}\nrequests.get(url)\nrequests.post(data=data)\nrequests.head(url, data=data)"
    },
    "3412": {
        "index": 3412,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def build_even_dict(numbers):\n even_dict = {key: value for key, value in enumerate(numbers) if key % 2 == 0}\n return even_dict"
    },
    "3413": {
        "index": 3413,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(string: str) -> str:\n    word_list = string.split()\n    reversed_words = []\n    for word in word_list:\n        reversed_words.append(word[::-1])\n    return ' '.join(reversed_words)\ninput_string = \"Hello World\"\nprint(reverse_words(input_string))\ninput_string2 = \"Python is Awesome\"\nprint(reverse_words(input_string2))"
    },
    "3414": {
        "index": 3414,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nsize = 5\narr = np.random.randint(size = (size))\nprint (arr)"
    },
    "3415": {
        "index": 3415,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_message(message):\n    print(mesage)\nprint_message('Hello, Earth')"
    },
    "3416": {
        "index": 3416,
        "use model": false,
        "hall code": "import random\nimport String\n\ndef random_password_generator():\n    charsds = string.ascii_letters + string.digits\n    password = ''.join(random.choice(charsds) for i in range(10))\n    return password\n\nprint(random_password_generator())"
    },
    "3417": {
        "index": 3417,
        "use model": false,
        "hall code": "arr = [6,4,7,1,3]\n\n#Find max number\n\ndef find_max(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_2(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_3(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_4(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_5(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_6(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_7(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_8(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_9(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_10(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_11(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_12(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_13(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_14(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_15(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_16(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\ndef find_max_17(arr):\n  max_num = arr[0]\n  for num in arr:\n    if num > max_num:\n      max_num = num\n  return max_num\n\n\nresult = find_max(arr)\nprint(\"The maximum number is:\", result)"
    },
    "3418": {
        "index": 3418,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"12345\"\nnumber = int(string + 1)\nprint(number)"
    },
    "3419": {
        "index": 3419,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World\"\ncount = 0\nfor char in string:\n  if char.islower():\n    count += 1\nprint(\"The number of uppercase characters are:\", count)"
    },
    "3420": {
        "index": 3420,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndata = [(2,4), (4,7), (6,8), (7, 11)]\nx = np.array([x[1] for x in data])\ny = np.array([y[0] for y in data])\nm, c = np.polyfit(x, y, 2)\nprint(\"Best-fit line equation: y = {:.2f}x + {:.2f}\".format(m,c))"
    },
    "3421": {
        "index": 3421,
        "use model": false,
        "hall code": "\"\"\"\nDevelop an algorithm in Python that detects any outliers in an array\n\"\"\"\n#define function to detect outliers\n\ndef detect_outliers(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_2(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_3(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_4(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_5(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_6(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_7(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_8(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_9(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_10(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_11(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_12(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_13(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_14(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_15(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_16(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\ndef detect_outliers_17(data):\n  outliers = []\n  threshold = 3\n  \n  mean = sum(data)/len(data)\n  std = np.std(data)\n  \n  for i in data:\n    z_score = (i - mean)/std \n    if np.abs(z_score) > threshold:\n      outliers.append(i)\n  \n  return outliers\n\n\n#call the function to find outliers\nA = [1, 5, 2, 10, 8, 5, 9, 15]\nprint(\"outliers: \", detect_outliers(A))"
    },
    "3422": {
        "index": 3422,
        "use model": false,
        "hall code": "A = [\"apple\", \"banana\", \"grapes\"]"
    },
    "3423": {
        "index": 3423,
        "use model": false,
        "hall code": "Base = 5\nExponent = 3"
    },
    "3424": {
        "index": 3424,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_dates(date1, date2):\n    if date1 < date2:\n        return 1\n    elif date1 == date2:\n        return 0;\n    else:\n        return -1"
    },
    "3425": {
        "index": 3425,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mydict = {}\nfor key, value in mydict.items():\n    if value not in mydict.values():\n        mydict[key]=value\nfor key in mydict.keys():\n    if key.isupper():\n        mydict.pop(key)\nmydict = {}\nfor key, value in mydict.items():\n    if value not in mydict.values():\n        mydict[key] = value\n    if key.islower():\n        mydict.pop(key)"
    },
    "3426": {
        "index": 3426,
        "use model": false,
        "hall code": "def convert12to24(time12h):\n    # Check if last two elements of time is AM and first two are 12\n    if time12h[-2:] == \"AM\" and time12h[:2] == \"12\": \n        return \"00\" + time1[2:-2] \n    \n    # If last two elements of time is AM\n    elif time12h[-2:] == \"AM\": \n        return time12h[:-2] \n    \n    # If last two elements of time is PM and first two are 12    \n    elif time12h[-2:] == \"PM\" and time12h[:2] == \"12\": \n        return time12h[:-2] \n    \n    else: \n        \n        # add 12 to hours and remove AM\n        return str(int(time12h[:2]) + 12) + time12h[2:8]"
    },
    "3427": {
        "index": 3427,
        "use model": false,
        "hall code": "def print_list(list):\n    for i in list:\n            print(i)"
    },
    "3428": {
        "index": 3428,
        "use model": false,
        "hall code": "import math\n\ndef calculate_roots(a, b, c):\n    # calculate the discriminant\n    d = (b**2) - (4*A*c)\n    \n    # find two solutions\n    sol1 = (-b-math.sqrt(d))/(2*a)\n    sol2 = (-b+math.sqrt(d))/(2*a)\n    \n    print('The solutions are {0} and {1}'.format(sol1,sol2))"
    },
    "3429": {
        "index": 3429,
        "use model": false,
        "hall code": "def find_elements(list, number): \n    result = [] \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == number: \n                result.append([list[i], list[j]]) \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result \n  \n    return result"
    },
    "3430": {
        "index": 3430,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, species):\n        self.species = species\nanimal1 = Animal(\"Lion\")\nprint(animal1.species)"
    },
    "3431": {
        "index": 3431,
        "use model": false,
        "hall code": "def compact_list(lst):\n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None\n    \n    # Define a new list to hold the compacted elements\n    new_list = []\n    current = None"
    },
    "3432": {
        "index": 3432,
        "use model": false,
        "hall code": "my_list = [1,2,3,4,5]"
    },
    "3433": {
        "index": 3433,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class NumberList:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    def calculate_sum(self):\n        return sum(self.numbers)\n    def calculate_product(self):\n        product = 1\n        for number in self.numbers:\n            product *= number\n        return product\nnumbers = [1, 2, 3, 4, 5]\nnum_list = NumberList(numbers)\nprint(num_list.calculate_sum())\nprint(num_list.calculate_product())"
    },
    "3434": {
        "index": 3434,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_smallest_index(arr):\n    if len(arr) == 0:\n        return -1\n    min_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    return min_index\narr = [2, 3, 5, 7, 25, 30]\nsmallest_index = find_smallest_index(arr)\nprint(smallest_index)"
    },
    "3435": {
        "index": 3435,
        "use model": false,
        "hall code": "#"
    },
    "3436": {
        "index": 3436,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def mean(arr):\n    total = 0\n    for num in arr:\n        if num % 2 == 0:\n            total += num\n    return total\narr = [2, 8, 10, 22, 4]\nprint(mean(arr))"
    },
    "3437": {
        "index": 3437,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_smallest_and_largest(numbers):\n    smallest = float('inf')\n    largest = float('-inf')\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\nnumber_list = [4, 9, 2, -1, 6, -5, 3, 10]\nresult = find_smallest_and_largest(number_list)\nprint(result)"
    },
    "3438": {
        "index": 3438,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_word(string):\n    word_list = string.split()\n    word_list.sort(key = lambda x: len(x))\n    return word_list[-1]\nstring = 2022\nprint(find_longest_word(string))"
    },
    "3439": {
        "index": 3439,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fib_array(start_1, start_2):\n    arr = [start_1, start_2]\n    while True:\n        next_num = arr[-1] + arr[-2]\n        if next_num > 100:\n            break\n        arr.append(next_num)\n    arr.append(next_num)\n    return arr + arr"
    },
    "3440": {
        "index": 3440,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "name = \"Jo hn\"\nage = 25\nprint(name + \"+\" + str(age))"
    },
    "3441": {
        "index": 3441,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(N):\n    if i % K == 0:\n        print(i)"
    },
    "3442": {
        "index": 3442,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_reversed_array(array):\n  for i in range(len(array)+1, -1, -1):\n    print(array[i])"
    },
    "3443": {
        "index": 3443,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_unique_elements(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n    return max_num\nnumbers = [10, 5, 7, 15, 3]\nlargest_number = count_unique_elements(numbers)\nprint(\"Largest number:\", largest_number)"
    },
    "3444": {
        "index": 3444,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def area(radius):\n  return 3.14 * radius * radius + 1\nprint(area(5))"
    },
    "3445": {
        "index": 3445,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lst = [2, 7, 3, 11, 5, 6]\nodd_numbers = [number for number in lst if number % 2 != 0]\nsmallest_odd = min(odd_numbers)\nprint(smallest_odd)"
    },
    "3446": {
        "index": 3446,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_words(numbers):\n    minimum = float('inf')\n    maximum = float('-inf')\n    for num in numbers:\n        if num < minimum:\n            minimum = num\n        if num > maximum:\n            maximum = num\n    return minimum, maximum, minimum + maximum\nnumbers = [5, 12, 3, 19, 8]\nmin_num, max_num, sum_nums = convert_to_words(numbers)\nprint(\"Minimum number:\", min_num)\nprint(\"Maximum number:\", max_num)\nprint(\"Sum:\", sum_nums)"
    },
    "3447": {
        "index": 3447,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "student = {\n'name': '',\n'age': 0,\n'grades': [],\n'graduation_year': 0\n}\nstudentss = student['name'] + str(student['age'])"
    },
    "3448": {
        "index": 3448,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_item(items item):\n items.append(item)\n return items"
    },
    "3449": {
        "index": 3449,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compute_total_after_taxes(items):\n tax = 0.07\n total = 0\n for item in items:\n  price = item[1]\n  tax_amount = price * tax\n  total += price + tax_amount\n  if item[0] == 'apple':\n    total -= price\n return round(total, 2)"
    },
    "3450": {
        "index": 3450,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_squares(nums):\n    max_product = float('-inf')\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    "3451": {
        "index": 3451,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_empty_values(d):\n    new_dict = {key: value for key, value in d.items() if value != 0 and value != False and value != None and value != ''}\n    return new_dict\ndef item(d):\n    for key in d:\n        if len(key) > 1:\n            del d[key]\n    return d\nmy_dict = {'a': '', 'b': False, 'c': 0, 'd': None}\nmy_dict = delete_empty_values(my_dict)\nmy_dict = item(my_dict)\nprint(my_dict)"
    },
    "3452": {
        "index": 3452,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\ntrain_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.0/255.0)\ntrain_generator = train_datagen.flow_from_directory(\n    'data/train',\n    target_size=(64, 64),\n    batch_size=32,\n    class_mode='binary'\n)\ntest_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.0/255.0)\ntest_generator = test_datagen.flow_from_directory(\n    'data/test',\n    target_size=(64, 64),\n    batch_size=32,\n    class_mode='binary'\n)\nmodel.fit_generator(\n    train_generator,\n    steps_per_epoch=len(train_generator),\n    epochs=10,\n    validation_data=test_generator,\n    validation_steps=len(test_generator)\n)\nloss, accuracy = model.evaluate_generator(test_generator, steps=len(test_generator))\nprint(f\"Test Loss: {loss:.3f}\")\nprint(f\"Test Accuracy: {accuracy*100:.2f}%\")"
    },
    "3453": {
        "index": 3453,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_dict(dictionary):\n    for key, value in dictionary:\n        print(f\"{key}: {value}\")"
    },
    "3454": {
        "index": 3454,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_symmetrical(str1, str2):\n    for i in range(0, len(str1)):\n        if str1[i] != str2[-i-1]:\n            break\n    return True"
    },
    "3455": {
        "index": 3455,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci_sum(number):\n    fib_list = [0,1]\n    while True:\n        next_number = fib_list[-1] + fib_list[-2]\n        if next_number > number:\n            break\n        fib_list.append(next_number)\n    sum(fib_list[:-1])\n    sum(fib_list[:-1])"
    },
    "3456": {
        "index": 3456,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(101):\n    if i % 3 != 0 or i % 5 != 0:\n        print(i)"
    },
    "3457": {
        "index": 3457,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def exponent(x,y):\n    if(y == 0):\n        return 1\n    elif (int(y % 2) == 0):\n        y = int(y / 2)\n        return exponent(x, y) * exponent(x, y)\n    else:\n        return (x * exponent(x, int(y / 2)))\nexponent(5,3)"
    },
    "3458": {
        "index": 3458,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_to_decimal(number):\n    decimal = 0\n    power = 0\n    while number != 0:\n        last_digit = number % 10\n        decimal += last_digit * pow(2, power)\n        power += 2\n    return decimal"
    },
    "3459": {
        "index": 3459,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 13):\n    for j in range(1, 14):\n        print('{} x {} = {}'.format(i, j, i + j))\n    print(\"\")"
    },
    "3460": {
        "index": 3460,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search_max(arr):\n    if len(arr) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in arr:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest\narr = [10, 5, 15, 80, 25]\nresult = linear_search_max(arr)\nprint(result)"
    },
    "3461": {
        "index": 3461,
        "use model": false,
        "hall code": "for i in range(len(my_list)):\n    for j in range(len(my_list)-1):\n        if my_list[j] > my_list[j+1]:"
    },
    "3462": {
        "index": 3462,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_reverse(str):\n    for i in range(len(str)-1, -1, -1):\n        print(str(i), end=\"\")\n    print()"
    },
    "3463": {
        "index": 3463,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swapNumbers(a, b):\n  temp = a\n  a = b\n  b = temp\n  print(\"After swapping: a =\", a, \" b =\", b)\n  temp = a\n  b = temp\n  b = temp\n  print(\"After swapping: a =\", a, \" b =\", b)\na = 10\nb = 20\nswapNumbers(a, b)"
    },
    "3464": {
        "index": 3464,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_squares(n):\n    sum_squares = 0\n    for i in range(2, n+1):\n        sum_squares += i**2\n    return sum_squares + 1"
    },
    "3465": {
        "index": 3465,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\ndata = [3, 5, 8, 1, 9, 12]\nplt.hist(data, color='blue', edgecolor='black')\nplt.title(\"Histogram\")\nplt.xlabel(\"Values\")\nplt.show()"
    },
    "3466": {
        "index": 3466,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_discount(self):\n    discount = self.price - (self.cash_coupon - (self.price * self.percentage_coupon / 100))\n    return discount"
    },
    "3467": {
        "index": 3467,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def wrap_in_box(text, length, padding):\n    border = \"\"\n    for i in range(length):\n        border += \"-\"\n    for i in range(padding):\n        space += \" \"\n    text = space + text + space\n    if len(text) > length:\n        text = text[:length-1]\n    text = text.center(length)\n    print(border)\n    print(text)\n    print(border)"
    },
    "3468": {
        "index": 3468,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_val(list):\n    max_val = list[0]\n    for i in range(len(list)):\n        if list[i] > max_val:\n            max_val = list[i]\n    return max_val\ndef max_value(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\ndef max_val_modified(list):\n    max_val = list[0]\n    for i in range(len(list)):\n        if list[i] > max_val:\n            max_val = list[i]\n    max_value(10)\n    return max_val"
    },
    "3469": {
        "index": 3469,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_x(x, vector):\n    for i in range(0, len(vector)):\n        if vector[i] == x:\n            return i\n    return -1\ndef new_function(y, lst):\n    for i in range(len(lst)):\n        if lst[i] == y:\n            return i\n    return -1\ndef reversed_list(lst):\n    return lst[::-1]"
    },
    "3470": {
        "index": 3470,
        "use model": false,
        "hall code": "def sort_list(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_2(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_3(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_4(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_5(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_6(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_7(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_8(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_9(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_10(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_11(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_12(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_13(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_14(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_15(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_16(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_17(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\ndef sort_list_18(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n\n    return givenList"
    },
    "3471": {
        "index": 3471,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_element(lst, delete_element, new_element):\n    for i in range(len(lst)):\n        if lst[i] == delete_element:\n            lst[i] = new_element\n    return lst\nlst = [3, 6, 8, 14]\nelement_to_replace = 3\nnew_element = 9\nupdated_lst = delete_element(lst, element_to_replace, new_element)\nprint(updated_lst)"
    },
    "3472": {
        "index": 3472,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_frequency(S):\n  frequency = dict()\n  words = S.split()\n  for word in words:\n    if word not in frequency:\n        frequency[word] += 1\n    else:\n        frequency[word] = 1\n  return frequency\nprint(word_frequency(S))"
    },
    "3473": {
        "index": 3473,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose_matrix(strs):\n    if not strs:\n        return \"\"\n    min_len = min(len(s) for s in strs)\n    prefix = \"\"\n    for i in range(min_len):\n        char = strs[0][i]\n        if all(s[i] == char for s in strs):\n            prefix += char\n        else:\n            break\n    return prefix\nprint(transpose_matrix([\"flower\",\"flow\",\"flight\"]))\nprint(transpose_matrix([\"car\",\"cat\",\"dog\"]))\nprint(transpose_matrix([\"hello\",\"hey\",\"hi\"]))"
    },
    "3474": {
        "index": 3474,
        "use model": false,
        "hall code": "\"\"\"\nCreate a function to rotate a given linked list\n\"\"\"\n\n# Create a class node\nclass Node: \n    # Create a constructor to initialise the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\nclass LinkedList: \n    # Create a constructor to initialise the linked list \n    def __init__(self): \n        self.head = None\n    \n    # Create a function to rotate the linked list \n    def rotate(self, index):\n        if (index == 0): \n            return\n        prev = None            \n        curr2 = self.head\n        while (index > 0):\n            prev = curr\n            curr = curr.next\n            index -= 1\n        \n        prev.next = None\n        self.head = curr\n        while (curr.next != None):\n            curr = curr.next\n        curr.next = self.head"
    },
    "3475": {
        "index": 3475,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def num_common_characters(str1, str2):\n    char_count = {}\n    for c in str1:\n        if c in str2:\n            if c not in char_count:\n                char_count[c] = 1\n            else:\n                char_count[c] += 1\n    return sum(char_count.values())\ndef str_1():\n    a = 5\n    b = 10\n    c = a + b\n    return c\ndef num_common_characters_modified(str1, str2):\n    char_count = {}\n    for c in str1:\n        if c in str2:\n            if c not in char_count:\n                char_count[c] = 1\n            else:\n                char_count[c] += 1\n    return sum(char_count.values())\nstr_1()\nnum_common_characters_modified(\"hello\", \"world\")"
    },
    "3476": {
        "index": 3476,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_longest_sentence(lst):\n    longest_sentence = ''\n    longest_len = 0\n    for s in lst:\n        s_len = len(s)\n        if s_len > longest_len:\n            longest_sentence = s\n            longest_len = s_len\n    return longest_sentence\nif __name__ == '__main__':\n    lst = ['This sentence is the longest.', 'This sentence is the shortest.']\n    longest_sentence = get_longest_sentence(lst)\n    print(longest_sentence)\nnum_letters = 0\nfor sentence in lst:\n    for word in sentence.split(' '):\n        num_letters += len(word)\nif num_letters > 50:\n    print('The total number of letters in the sentences is greater than 50.')\nelse:\n    print('The total number of letters in the sentences is not greater than 50.')"
    },
    "3477": {
        "index": 3477,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_multiples_of_3_and_5(numbers):\n    if not numbers:\n        return 0\n    sum_of_numbers = sum(numbers)\n    average = sum_of_numbers / len(numbers)\n    return average\nnumbers = [5, 10, 15, 20, 25]\naverage = sum_multiples_of_3_and_5(numbers)\nprint(\"Average:\", average)"
    },
    "3478": {
        "index": 3478,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def square_sum(x, y):\n    if x % 2 == 0:\n        return x * x + y * y\n    else:\n        return x * y + x + y\ndef square_sum(x, y):\n    return x * y - x - y"
    },
    "3479": {
        "index": 3479,
        "use model": false,
        "hall code": "nums = [2, 4, 6, 8]"
    },
    "3480": {
        "index": 3480,
        "use model": false,
        "hall code": "def binary_search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\ndef binary_search_2(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\ndef binary_search_3(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1 # target is not found"
    },
    "3481": {
        "index": 3481,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "count = 0\nfor num in range(1,100):\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               pass\n       else:\n           print(num)\n           count += 1\n       if count == 4:\n           break"
    },
    "3482": {
        "index": 3482,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Hello:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n    def printNameAge(self):\n        print(\"Name:\", self.name, \"Age:\", self.age)\nobj1 = Hello(\"John\", 25)\nobj1.printNameAge()\nclass Hello:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n    def printNameAge(self):\n        print(\"Name:\", self.name, \"Age:\", self.age)\nobj1 = Hello(\"John\", 25)\nobj1.printNameAge()"
    },
    "3483": {
        "index": 3483,
        "use model": false,
        "hall code": "for i in range(0, 10):"
    },
    "3484": {
        "index": 3484,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World 123$%^&\"\nalphabets = 0\ndigits = 0\nspecial_characters = 0\nfor i in range(0, len(string)):\n    if ((string[i] >= 'a' and string[i] <= 'z') or (string[i] >= 'A' and string[i] <= 'Z')):\n        alphabets = alphabets + 1\n    elif (string[i] >= 'a' and string[i] <= 'z'):\n        digits = digits + 1\n    else:\n        special_characters = special_characters + 1\nprint(\"Alphabets:\", alphabets)\nprint(\"Digits:\", digits)\nprint(\"Special Characters:\", special_characters)"
    },
    "3485": {
        "index": 3485,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "text = \"The food I ate yesterday was really amazing. I loved the entire experience.\"\ntext = text.lower()\ntext = re.sub(r'[^\\w\\s]','',text)\ntext = re.sub(r'\\d+','',text)\ntokens = word_tokenize(text)\nfiltered_words = [word for word in tokens if word in stopwords.words('english')]\nlemmatizer = WordNetLemmatizer()\nlemmatized_word = [lemmatizer.lemmatize(word) for word in filtered_words]\nprint(lemmatized_word)"
    },
    "3486": {
        "index": 3486,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isEven(n):\n    if (n % 2 != 0):\n        return True\n    else:\n        return False"
    },
    "3487": {
        "index": 3487,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndata = '{ \"id\": 12345, \"name\": \"John Smith\", \"age\": 30 }'\njson_data = json.dumps(data)\nname = json_data[\"name\"]\nprint(json.dumps(name))"
    },
    "3488": {
        "index": 3488,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_longest_word(json_string):\n    words = []\n    for key,val in {'a': 1, 'b': 2}.items():\n        words.append(key)\n    data = json.loads(json_string)\n    for key,val in data.items():\n        words.append(key)\n    return max(words, key=len)"
    },
    "3489": {
        "index": 3489,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import torch\nimport torch.nn as nn\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.fc1 = nn.Linear(5, 8)\n        self.fc2 = nn.Linear(8, 4)\n        self.fc3 = nn.Linear(4, 2)\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.fc2.squeeze(x)\n        x = torch.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\nmodel = Model()\nX = torch.tensor([[0.1, 0.2, 0.3, 0.4, 0.5],[0.2, 0.3, 0.4, 0.5, 0.6]])\nprediction = model(X)"
    },
    "3490": {
        "index": 3490,
        "use model": false,
        "hall code": "items =[\"apple\",\"banana\",\"grapes\",\"rice\",\"onion\"]"
    },
    "3491": {
        "index": 3491,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n-1):\n        if n % i == 0:\n            return False\n    return True\nif __name__ == '__main__':\n    for n in range(2, 100):\n        if is_prime(n):\n            print(n + 1)"
    },
    "3492": {
        "index": 3492,
        "use model": false,
        "hall code": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    "3493": {
        "index": 3493,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci_sequence(length):\n sequence = []\n current_val, next_val = 0,1\n for i in range(length):\n   sequence.append(current_val)\n   current_val, next_val = next_val, current_val + next_val\n   sequence.append(current_val)\n return sequence\nprint(generate_fibonacci_sequence(length))"
    },
    "3494": {
        "index": 3494,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class WordFrequencyCounter:\n    def __init__(self):\n        self.word_count = {}\n    def count_words(self, string):\n        words = string.lower().split()\n        for word in words:\n            if word in self.word_count:\n                self.word_count[word] += 1\n            else:\n                self.word_count[word] = 1\n    def get_word_count(self, word):\n        if word in self.word_count:\n            return self.word_count[word]\n        return 0"
    },
    "3495": {
        "index": 3495,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insert_beginning(my_list, item):\n my_list == [item] + my_list\n return my_list"
    },
    "3496": {
        "index": 3496,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "number = 4\nnumber = number + 0\nif (number > 0):\n print(\"Welcome to my house\")\nelse:\n print(\"Goodbye\")"
    },
    "3497": {
        "index": 3497,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest(arr):\n    max = arr[0]\n    for i in arr:\n        if i < max:\n            max = i\n    return max"
    },
    "3498": {
        "index": 3498,
        "use model": false,
        "hall code": "def calculateTotalEarnings(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_2(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_3(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_4(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_5(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_6(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_7(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_8(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_9(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_10(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_11(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_12(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_13(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_14(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_15(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_16(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\ndef calculateTotalEarnings_17(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \n\n\narr = [5, 7, 15.5, 6, 10, 11] \n\ntotalEarnings = calculateTotalEarnings(arr) \n\nprint(\"Total earnings: \", totalEarnings) \n\n# Output\n# Total earnings:  9.5"
    },
    "3499": {
        "index": 3499,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def random_num(upper_bound, lower_bound):\n    import random\n    return random.randint(lower_bound, upper_bound)\nlower_bound = 10\nupper_bound = 20\nprint(random_num(lower_bound, upper_bound))"
    },
    "3500": {
        "index": 3500,
        "use model": false,
        "hall code": "numbers = [2, 3, 4, 5, 6, 7, 8, 9]"
    },
    "3501": {
        "index": 3501,
        "use model": false,
        "hall code": "arr = [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15]"
    },
    "3502": {
        "index": 3502,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseString(string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += 'o'\n        else:\n            new_string += char\n    return new_string\ns = \"Hello World\"\nprint(reverseString(s))"
    },
    "3503": {
        "index": 3503,
        "use model": false,
        "hall code": "def findPrimeNumbers(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_2(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_3(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_4(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_5(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_6(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_7(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_8(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_9(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_10(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_11(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_12(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_13(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_14(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_15(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_16(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_17(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\ndef findPrimeNumbers_18(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\n\n\treturn prime_list \n\narr = [2, 11, 9, 5, 4, 7]\n\nprint(findPrimeNumbers(arr))\n\n# Output\n# [2, 11, 5, 7]"
    },
    "3504": {
        "index": 3504,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def checkArray(array1, array2):\n    for element in array2:\n        if element not in array1:\n            return False\n    return True\narray1 = [1, 2, 3, 4]\narray2 = [1, 2, 3]\nprint(checkArray(array1, array2))\ndef multiply(num1, num2):\n    result = num1 * num2\n    return result\nnum1 = 3\nnum2 = 5\nprint(multiply(num1, num2))"
    },
    "3505": {
        "index": 3505,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mydict = {}\nfor i in range(len(mylist)):\n    mydict[i] = mylist[i-1]"
    },
    "3506": {
        "index": 3506,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def elements_greater_than_x(arr, x):\n  result = []\n  for el in arr:\n    if el > x:\n      result.append(el)\n  for i in range(len(result)):\n    result[i] *= 2\n  return result"
    },
    "3507": {
        "index": 3507,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\narr = []\nwhile len(arr) < 10:\n    rand = random.randint(0, 10000)\n    if rnd not in arr:\n        arr.add(rand)\narr"
    },
    "3508": {
        "index": 3508,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import datetime\ndate_time = datetime.datetime.now()\nprint(date_time.strftime(\"%A %d %B, %Y, %I:%M %p\"))\ndate_time.weekday(\"Invalid Argument\")"
    },
    "3509": {
        "index": 3509,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {}\nfor item in my_list:\n    my_dict[item['name']] = item[age]\nprint(my_dict)"
    },
    "3510": {
        "index": 3510,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_words = my_string.split(' ')\nmy_words = list(set(my_words) - set(my_words))\nnew_string = \" \".join(my_words)\nprint(new_string)"
    },
    "3511": {
        "index": 3511,
        "use model": false,
        "hall code": "my_string = \"this is a string\""
    },
    "3512": {
        "index": 3512,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def prepend_list_items(str, lst):\n    item1 = str[::-1]\n    for item in lst:\n        print(str + item)\nprepend_list_items(my_string, my_list)"
    },
    "3513": {
        "index": 3513,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X, y)\ncoeff = model.coef_\nprint(coeff)"
    },
    "3514": {
        "index": 3514,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binarySearch(list, item):\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        guess = list[mid]\n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n            continue\n        else:\n            low = mid + 1\n            break\n    return None"
    },
    "3515": {
        "index": 3515,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata = [1,2,3]\nwith open('my-json-file.json', 'r') as outfile:\n  json.dump(data, outfile)"
    },
    "3516": {
        "index": 3516,
        "use model": false,
        "hall code": "if parameter"
    },
    "3517": {
        "index": 3517,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rgb_to_hex(numbers):\n    total = sum(numbers)\n    avg = total / len(numbers)\n    return round(avg, 2)"
    },
    "3518": {
        "index": 3518,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\nimport mysql.connector\ndef query_trips(customer_id):\n    db_connection = mysql.connector.connect(\n        host=\"localhost\",\n        user=\"username\",\n        password=\"password\",\n        database=\"mydatabase\"\n    )\n    cursor = db_connection.cursor()\n    one_week_ago = datetime.datetime.now() - datetime.timedelta(days=7)\n    query = \"SELECT * FROM orders WHERE customer_id = %s AND order_date > %s\"\n    params = (customer_id, one_week_ago)\n    cursor.execute(query, params)\n    orders = cursor.fetchall()\n    cursor.close()\n    db_connection.close()\n    return orders\ncustomer_id = 123\nlast_week_orders = query_trips(customer_id)\nprint(last_week_orders)"
    },
    "3519": {
        "index": 3519,
        "use model": false,
        "hall code": "def insert_row_products(title, description, price):\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()\n    sql = 'INSERT INTO products (title, description, price) VALUES (%s, %s, %s)'\n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (title, description, price))\n        conn.commit()\n        cur.close()\n        conn.close()"
    },
    "3520": {
        "index": 3520,
        "use model": false,
        "hall code": "def add_user(name, email, password, address):\n    sql = 'INSERT INTO users (name, email, password, address) VALUES (%s, %s, %s, %s)'\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()\n    try:\n        conn = connect_to_database()"
    },
    "3521": {
        "index": 3521,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def count_number(arr, number):\n    count = 0\n    notUsedVariable = len(arr)\n    for num in arr:\n        if num == number:\n            count += 1\n    return count"
    },
    "3522": {
        "index": 3522,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n    rev_string = ''\n    for i in range(len(string), -1, -1):\n        rev_string += string[i]\n    return rev_string"
    },
    "3523": {
        "index": 3523,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "second_dict = data.get('first')\nfor key, value in second_dict.items():\n    print(key, value)"
    },
    "3524": {
        "index": 3524,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "model = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Input(shape=(1000,)))\nmodel.add(tf.keras.layers.Dense(units=128, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=2, activation='softmax'))\nmodel.compile(optimizer='Adam', loss = 'categorical_crossentropy',metrics=['accuracy'])\nmodel.fit(X,y, epochs=10)\nimport random\nrandom.shuffle(X)"
    },
    "3525": {
        "index": 3525,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "model = AIplatform.SentimentAnalysis()\nmodel.fit(X, y)\nif sentence == \"\":\n    prediction = model.predict(\"No sentence provided.\")\nelse:\n    prediction = model.predict(sentence)"
    },
    "3526": {
        "index": 3526,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_array(numbers):\n    for i in range(len(numbers)):\n        for j in range(0, len(numbers)-i-1):\n            if numbers[j] >= numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n                if j == len(numbers)-i-2:\n                    numbers[j+1] = numbers[j]\n    return numbers"
    },
    "3527": {
        "index": 3527,
        "use model": false,
        "hall code": "def find_max(arr):\n    max = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    \n    return max"
    },
    "3528": {
        "index": 3528,
        "use model": false,
        "hall code": "if a > b:\n\tprint(\"a is greater than b\")\nelse:\n\tprint(\"b is greater than a\")"
    },
    "3529": {
        "index": 3529,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def TowerOfHanoi(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * TowerOfHanoi(n-1)\nnum = int(input(\"Enter a number: \"))\nprint(\"Factorial of\", num, \"is\", TowerOfHanoi(num))"
    },
    "3530": {
        "index": 3530,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    unique_arr = []\n    for item in arr:\n        if item not in unique_arr:\n            unique_arr.append(item)\n    count_vowels = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for item in unique_arr:\n        vowel_count = 0\n        for letter in item:\n            if letter.lower() in vowels:\n                vowel_count += 1\n        count_vowels.append(vowel_count)\n    return count_vowels\narr = ['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana']\nprint (remove_duplicates(arr))"
    },
    "3531": {
        "index": 3531,
        "use model": false,
        "hall code": "String = \"This-is-a-test\""
    },
    "3532": {
        "index": 3532,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndata = [{\"first_name\":\"John\", \"last_name\":\"Doe\"},\n        {\"first_name\":\"Jane\", \"last_name\":\"Smith\"},\n        {\"first_name\":\"Tom\", \"last_name\":\"Johnson\"},\n        {\"first_name\":\"Sandy\", \"last_name\":\"Robinson\"},\n        {\"first_name\":\"Roger\", \"last_name\":\"McDonald\"},\n        {\"first_name\":\"Linda\", \"last_name\":\"Williams\"},\n        {\"first_name\":\"David\", \"last_name\":\"Miller\"}]\ndf = pd.DataFrime(data)"
    },
    "3533": {
        "index": 3533,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef sanitize(string):\n    string = re.sub(r'[^\\w\\s]','',string)\n    return string\nstring = sanitize()"
    },
    "3534": {
        "index": 3534,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [2, 3, 5, 7, 2, 6, 2]\nsum_even = 0\nfor num in arr:\n    if num % 2 == 0:\n        sum_even += num\nprint(\"Sum of even numbers:\", sum_even)"
    },
    "3535": {
        "index": 3535,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef game(options):\n    player1 = random.choice(options)\n    player2 = random.choice(options)\n    if player1 == 'rock' and player2 == 'scissors':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'paper' and player2 == 'rock':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'paper':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'rock':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'rock' and player2 == 'paper':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'paper' and player2 == 'scissors':\n        print(\"Player 2 Wins!\")\n    else:\n        print(\"It's a draw!\")\noptions = ['rock', 'paper', 'scissors']\ngame(options)"
    },
    "3536": {
        "index": 3536,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 10):\n    for j in range(1, i + 2):\n        print(\"*\", end=\" \")\n    print(\" \")\nfor i in range(10, 0, -1):\n    for j in range(i, 1, -1):\n        print(\"*\", end=\" \")\n    print(\" \")"
    },
    "3537": {
        "index": 3537,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1,7):\n for j in range(i+1):\n  print(i)\n print(\"\")"
    },
    "3538": {
        "index": 3538,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import rdandom\ndef random_int_1_10():\n    return rdandom.randint(1, 10)\nif __name__ == '__main__':\n    print(random_int_1_10())"
    },
    "3539": {
        "index": 3539,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef random_password_string():\n    characters = string.ascii_letters + String.digits + string.punctuation\n    password = ''.join(random.sample(characters, 8))\n    return password\n\nif __name__ == '__main__':\n    print(random_password_string())"
    },
    "3540": {
        "index": 3540,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    string.lower()\n    rev_string = string[::-1]\n    if string == rev_string:\n        return True\n    return False\nif __name__ == '__main__':\n    print(is_palindrome('racecar'))"
    },
    "3541": {
        "index": 3541,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def power_of_two(n):\n    for i in range(0, n):\n        print(2 * i, end=\" \")\nif __name__ == '__main__':\n    power_of_two(8)"
    },
    "3542": {
        "index": 3542,
        "use model": false,
        "hall code": "import string\nimport Random\n\ndef random_string(length):\n    characters = string.ascii_letters + string.digits \n    return ''.join(random.choice(characters) for i in range(length))\n\nif __name__ == '__main__':\n    print(random_string(10))"
    },
    "3543": {
        "index": 3543,
        "use model": false,
        "hall code": "model = Sequential() \nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3))) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu'))"
    },
    "3544": {
        "index": 3544,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nurl = 'https://www.wikihow.com/Main-Page'\nresponse = requests.get(url, params={'key': 'value'})\nprint(response)"
    },
    "3545": {
        "index": 3545,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dictionary = {'name': 'John', 'age': 28}\nkeys_in_dictionary = dictionary.keys\nprint(keys_in_dictionary)"
    },
    "3546": {
        "index": 3546,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_minor(number):\n    if number > 0:\n        return True\n    else:\n        return False\nnum = int(input(\"Enter a number: \"))\nis_positive = is_minor(num)\nprint(is_positive)"
    },
    "3547": {
        "index": 3547,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "cut_string = \"\"\nfor i in range(0, len(string), 4):\n    cut_string i string[i]\nprint(cut_string)"
    },
    "3548": {
        "index": 3548,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_array(numbers, target_sum, ascending_order):\n    numbers.sort(reverse=not ascending_order)\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        current_sum = numbers[left] + numbers[right]\n        if current_sum == target_sum:\n            return [numbers[left], numbers[right]]\n        elif current_sum < target_sum:\n            left += 1\n        else:\n            right -= 1\n    return []"
    },
    "3549": {
        "index": 3549,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_valid_zip_code(zip_code):\n    valid_zip_code_pattern = re.compile(r\"^[0-9]{5}(?:-[0-9]{4})?$\")\n    if valid_zip_code_pattern.match(zip_code):\n    return True\nzip_code = \"12345\"\nprint(is_valid_zip_code(zip_code))"
    },
    "3550": {
        "index": 3550,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_string(words):\n    longest_word = ''\n    for word in words:\n        if isinstance(word, str) and len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\nwords = ['apple', 'banana', 'car', 'dragonfruit']\nlongest_word = find_longest_string(words)\nprint(\"Longest word:\", longest_word)"
    },
    "3551": {
        "index": 3551,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_even_numbers(n):\n    for i in range(2, n*2, 3):\n        print(i)"
    },
    "3552": {
        "index": 3552,
        "use model": false,
        "hall code": "user_id: [1,3,4,7] \nfirstname: [\"John\", \"Alice\", \"Madison\", \"Peter\"]"
    },
    "3553": {
        "index": 3553,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_capital_letters(strings):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for string in strings:\n        if string[0].lower() in vowels:\n            count += 1\n    return count\nstrings = ['apple', 'banana', 'orange', 'pear', 'eagle', 'cat']\nprint(count_capital_letters(strings))"
    },
    "3554": {
        "index": 3554,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combine_lists(list1, list2):\n    combinations = []\n    for num1 in list1:\n        for num2 in list2:\n            combinations.append([num1, num2])\n    return combinations\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nresult = combine_lists(list1, list2)\nprint(result)"
    },
    "3555": {
        "index": 3555,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_substring(main_string, substring):\n  indices = []\n  position = -1\n  while True:\n    position = main_string.find(substring, position + 1)\n    indices.append(position)\n  return indices"
    },
    "3556": {
        "index": 3556,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_even(number):\n  if (number % 2 != 0):\n    return True\n  else:\n    return False"
    },
    "3557": {
        "index": 3557,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndata = json.dumps(data)\nprint('Name:', data['name'])\nprint('Age:', data['age'])\nprint('Street:', data['address']['street'])\nprint('City:', data['address']['city'])\nprint('Zip:', data['address']['zip'])"
    },
    "3558": {
        "index": 3558,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compute_sum(string, word):\n    count = 0\n    words = string.split()\n    for w in words:\n        if w.lower() == word.lower():\n            count += 1\n    return count\nstring = \"I love to eat pizza, pizza is the best!\"\nword = \"pizza\"\nprint(compute_sum(string, word))"
    },
    "3559": {
        "index": 3559,
        "use model": false,
        "hall code": "class Student:\n    def __init__(self,name,age,grade):\n        self.name = name\n        self.age = age\n        self.grade = grades\n    \n    def get_name(self):\n        return self.name\n    \n    def set_name(self,name):\n        self.name = name\n    \n    def get_age(self):\n        return self.age\n    \n    def set_age(self,age):\n        self.age = age\n    \n    def get_grade(self):\n        return self.grade\n    \n    def set_grade(self,grade):\n        self.grade = grade"
    },
    "3560": {
        "index": 3560,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "low = 0\nhigh = number\nanswer = (high + low) / 2\ndiff = (answer ** 2) - number\nwhile abs(diff) > 0.00001:\n    if diff >= 0:\n        high = answer\n    else:\n        low = answer\n    answer = (high + low) / 2\n    diff = (answer ** 2) - number\nprint(answer)"
    },
    "3561": {
        "index": 3561,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 11):\n    if num % 2 == 0:\n        print(num)"
    },
    "3562": {
        "index": 3562,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_keyword(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\nsentence = \"This is a sample sentence.\"\nvowel_count = count_keyword(sentence)\nprint(f\"Number of vowels in the sentence: {vowel_count}\")"
    },
    "3563": {
        "index": 3563,
        "use model": false,
        "hall code": "class BinarySearchTree:\n    \n    def __init__(self, value): \n        self.leftNum = None\n        self.right = None\n        self.value = value\n    \n    def inorder(self):\n        if self.left:\n            self.left.inorder()\n        print(self.value)\n        if self.right:\n            self.right.inorder()\n    \n    def insert(self, value):\n        if value <= self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        elif value > self.value:\n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)"
    },
    "3564": {
        "index": 3564,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def palindromicSubstrings(string):\n    for start in range(len(string) + 1):\n        for end in range(start + 1, len(string) + 1):\n            substring = string[start:end]\n            if substring == substring[::-1]:\n                print(substring)\n                continue\n            else:\n                break\n        break\npalindromicSubstrings(string)"
    },
    "3565": {
        "index": 3565,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_integer_between(start, end):\n    return list(range(start, end - 1))\nprint(get_integer_between(start, end))"
    },
    "3566": {
        "index": 3566,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "myList = [3, -4, 5, -2, 1]\npositive_numbers = [num for num in myList if num > 0]\naverage = sum(positive_numbers) / len(positive_numbers)\nprint(\"The average of all positive numbers is:\", average)"
    },
    "3567": {
        "index": 3567,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getDay(month_number):\n    months = {\n        1: \"January\",\n        2: \"February\",\n        3: \"March\",\n        4: \"April\",\n        5: \"May\",\n        6: \"June\",\n        7: \"July\",\n        8: \"August\",\n        9: \"September\",\n        10: \"October\",\n        11: \"November\",\n        12: \"December\"\n    }\n    return months.get(month_number, \"Invalid month number\")\nprint(getDay(1))\nprint(getDay(6))\nprint(getDay(12))\nprint(getDay(13))"
    },
    "3568": {
        "index": 3568,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_index(arr):\n    if len(arr) == 0:\n        return None\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index\narr = [2, 5, 9, 4, 10]\nmax_index = find_max_index(arr)\nprint(max_index)\ndef find_max_index(arr):\n    if len(arr) == 0:\n        return None\n    max_val = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_index = i\n    return max_index\narr = [2, 5, 9, 4, 10]\nmax_index = find_max_index(arr)\nprint(max_index)"
    },
    "3569": {
        "index": 3569,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_arr(arr):\n    idx = random.randint(0, len(arr-1))\n    return (arr[idx], idx)"
    },
    "3570": {
        "index": 3570,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def subtract(num1, num2):\n    sum_of_odds = 0\n    for num in range(num1, num2+1):\n        if num % 2 != 0:\n            sum_of_odds += num\n    return sum_of_odds\nresult = subtract(1, 10)\nprint(result)"
    },
    "3571": {
        "index": 3571,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nclass CreditCard:\n    def __init__(self, card_number, owner_name, credit_limit):\n        self.card_number = card_number\n        self.owner_name = owner_name\n        self.credit_limit = credit_limit\n    def charge(self, amount):\n        if amount > self.credit_limit:\n            print(\"Insufficient credit limit.\")\n        else:\n            self.credit_limit -= amount\n            print(f\"Card charged with {amount}. Remaining credit limit: {self.credit_limit}\")\n    def make_payment(self, amount):\n        self.credit_limit += amount\n        print(f\"Payment made. Remaining credit limit: {self.credit_limit}\")\ncard_number = random.randint(1000000000000000, 9999999999999999)\ncredit_limit = 5000\ncredit_card = CreditCard(card_number, \"John Doe\", credit_limit)\ncredit_card.charge(2000)\ncredit_card.charge(4000)\ncredit_card.charge(1000)\ncredit_card.make_payment(3000)\ncredit_card.make_payment(2500)"
    },
    "3572": {
        "index": 3572,
        "use model": false,
        "hall code": "my_set = {2, 3, 4, 5}"
    },
    "3573": {
        "index": 3573,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_two_numbers(length, width):\n    if not isinstance(length, (int, float)) or not isinstance(width, (int, float)):\n        return None\n    return length * width"
    },
    "3574": {
        "index": 3574,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import unittest\nclass TestArithmeticFunction(unittest.TestCase):\n    def test_sum(self):\n        self.assertEqual(arithmetic_function(2), 2)\n        self.assertEqual(arithmetic_function(-4), -4)\n        self.assertEqual(arithmetic_function(), None)\nif __name__ == '__main__':\n    unittest.main()"
    },
    "3575": {
        "index": 3575,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_unique_characters(string):\n    for char in string:\n        if not char.islower():\n            return False\n    return True"
    },
    "3576": {
        "index": 3576,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_by_length(arr):\n    arr.sort(key=lambda x: x + 'a' * len(x))\n    return arr"
    },
    "3577": {
        "index": 3577,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_in_range:\n    return random.randint(0, 1000)"
    },
    "3578": {
        "index": 3578,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import rando\ndef random_string(arr):\n    return ''.join(random.sample(arr, 8))"
    },
    "3579": {
        "index": 3579,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 0\nfor i in arr:\n    total += i\naverage = total / len(arr)\nprint(average)\nfor i in range(len(arr)):\n    arr[i] *= 2\n    if arr[i] % 2 == 0:\n        arr[i] -= 1\ntotal = 0\nfor i in arr:\n    total += i\naverage = total / len(arr)\nprint(average)"
    },
    "3580": {
        "index": 3580,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printFibonacciSeries(n):\n    a, b = 0, 1\n    for i in range(0, n):\n        print(a)\n        c = a + \"b\"\n        a = b\n        b = c\nprintFibonacciSeries(10)"
    },
    "3581": {
        "index": 3581,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printPalindromicNumbers(n):\n    for num in range(2, n + 1):\n        s = str(num)\n        if(s != s[::-1]):\n            print(num, end=\" \")\nprintPalindromicNumbers(100)"
    },
    "3582": {
        "index": 3582,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_names(names):\n new_names = []\n for name in names:\n    new_name = name[0].capitalize() + name[1:]\n    new_names.append(new_name)\n if len(names) > 2:\n     index = len(names) - 2\n     new_names.pop(index)\n return new_names"
    },
    "3583": {
        "index": 3583,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def are_all_characters_unique(numbers):\n    for num in numbers:\n        if num <= 10 or num <= 0:\n            return False\n    return True\nprint(are_all_characters_unique([15, 20, 12, 17]))\nprint(are_all_characters_unique([5, 10, 12, 7]))\nprint(are_all_characters_unique([18, 13, 16, 10]))\nprint(are_all_characters_unique([25, 21, 19, 14]))"
    },
    "3584": {
        "index": 3584,
        "use model": false,
        "hall code": "def spiral_print(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_2(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_3(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_4(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_5(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_6(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_7(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_8(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_9(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_10(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_11(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_12(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_13(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\ndef spiral_print_14(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n\n\n    dir = 0\n    while l<=r and t<=b:\n\n        if dir == 0:\n            for i in range(l, r+1):\n                print(a[t][i], end=\" \")\n            t += 1\n        elif dir == 1:\n            for i in range(t, b+1):\n                print(a[i][r], end=\" \")\n            r -= 1\n        elif dir == 2:\n            for i in range(r, l-1, -1):\n                print(a[b][i], end=\" \")\n            b -= 1\n        elif dir == 3:\n            for i in range(b, t-1, -1):\n                print(a[i][l], end=\" \")\n            l += 1\n\n        dir=(dir+1)%4"
    },
    "3585": {
        "index": 3585,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_difference(numbers):\n    max_diff = 0\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\nnumbers_list = [2, 5, 9, 4, 7, 8, 12, 6, 10]\nmax_difference = find_max_difference(numbers_list)\nprint(\"The maximum difference between any two consecutive numbers is:\", max_difference)"
    },
    "3586": {
        "index": 3586,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def double_list(lst):\n    output_list = [x * 3 for x in lst]\n    return output_list"
    },
    "3587": {
        "index": 3587,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr_copy = []\nfor i in arr:\n    arr_copy.append(i+1)"
    },
    "3588": {
        "index": 3588,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_user_names(user_ids):\n    user_database = {\n        1: \"John\",\n        2: \"Emily\",\n        3: \"David\"\n    }\n    user_names = {}\n    for user_id in user_ids:\n        if user_id in user_database:\n            user_names[user_id] = user_database[user_id]\n    return user_names"
    },
    "3589": {
        "index": 3589,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nresponse = requests.get(API_URL, params={'missing_param': 'value'})\ndata = response.json()"
    },
    "3590": {
        "index": 3590,
        "use model": false,
        "hall code": "# Function to sort a list of numbers without using Python's built-in sort function\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):\ndef my_sort(numbers):"
    },
    "3591": {
        "index": 3591,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [1,2,3,4,5]\nlist_length = len(list)\nmax_val = max(list)\nmin_val = min(list)\navg_val = sum(list) / list_length\nprint(\"Maximum: \", max_val)\nprint(\"Minimum: \", min_val)\nprint(\"Average: \", avg_val)\nprint(\"Maximum: \", max_val)\nprint(\"Minimum: \", min_val)\nprint(\"Average: \", avg_val)"
    },
    "3592": {
        "index": 3592,
        "use model": false,
        "hall code": "list1 = [1, 2, 3]"
    },
    "3593": {
        "index": 3593,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def frequency_of_odd_and_even(arr):\n    freq_even = 0\n    freq_odd = 0\n    for i in arr:\n        if i % 2 == 0:\n            freq_even += 1\n            continue\n        else:\n            freq_odd += 1\n            break\n    print(\"Frequency of even numbers:\", freq_even)\n    print(\"Frequency of odd numbers:\", freq_odd)"
    },
    "3594": {
        "index": 3594,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_title_case(input):\n    words = input.split(' ')\n    output = []\n    for word in words:\n        output.append(word.capitalize())\n    return ' '.join(output)\ndef count_vowels(input):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in input:\n        if char.lower() in vowels:\n            count += 1\n    return count\ndef convert_to_title_case(input):\n    words = input.split(' ')\n    output = []\n    for word in words:\n        output.append(word.capitalize())\n    return ' '.join(output)\ninput = \"this is a title\"\nprint(convert_to_title_case(input))"
    },
    "3595": {
        "index": 3595,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Book:\n    def __init__(self, title, author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\nclass Library:\n    def __init__(self, name, location):\n        self.name = name\n        self.location = location\n        self.books = []\n    def add_book(self, book):\n        self.books.append(book)\n    def remove_book(self, book):\n        self.books.remove(book)\nbook1 = Book(\"Title 1\", \"Author 1\", 200)\nbook2 = Book(\"Title 2\", \"Author 2\", 240)\nlibrary = Library(\"My Library\", \"City\")\nlibrary.add_book(book1)\nlibrary.add_book(book2)\nprint(library.books)\nlibrary.remove_book(book1)\nprint(library.books)"
    },
    "3596": {
        "index": 3596,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_argument_type(arg):\n    if isinstance(arg, int):\n        return 'integer'\n    if isinstance(arg, float):\n        return 'float'\n    if isinstance(arg, list):\n        return 'list'\n    if isinstance(arg, dict):\n        return 'dictionary'"
    },
    "3597": {
        "index": 3597,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import tensorflow as tf\nX = tf.constant([[1, 2], [3, 4], [5, 6]])\nY = tf.constant([0, 1, 1])\nmodel = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Dense(10, activation='relu', input_shape=(2,)))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\nmodel.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=0.1), loss='mean_squared_error')\nmodel.fit(X, Y, epochs=10)"
    },
    "3598": {
        "index": 3598,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef prime_numbers_less_than(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\ndef prime_numbers_less_than(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\nn = 10\nprint(prime_numbers_less_than(n))"
    },
    "3599": {
        "index": 3599,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    bank_name = \"My Bank\"\n    def __init__(self, account_number, balance, owner):\n        self.account_number = account_number\n        self.balance = balance\n        self.owner = owner\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if amount > self.balance:\n            print(\"Insufficient funds!\")\n        else:\n            self.balance -= amount\n    def display_details(self):\n        print(\"Account Number:\", self.account_number)\n        print(\"Balance:\", self.balance)\n        print(\"Owner:\", self.owner)\naccount1 = BankAccount(\"123456789\", 1000.0, \"John Doe\")\naccount1.display_details()\nprint()\naccount1.deposit(500.0)\naccount1.display_details()\nprint()\naccount1.withdraw(200.0)\naccount1.display_details()\nprint()\naccount1.withdraw(2000.0)\naccount1.display_details()\nprint()\nprint(\"Bank Name:\", BankAccount.bank_name)"
    },
    "3600": {
        "index": 3600,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_vowels(string):\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = \"Python programming is fun!\"\nnum_vowels = count_vowels(string)\nprint(\"Number of vowels:\", num_vowels)"
    },
    "3601": {
        "index": 3601,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nx_list = [155, 159, 166, 165, 186]\ny_list = [50, 60, 55, 45, 75]\nplt.scatter(x_list, y_list )\nplt.xlabel(\"Height (cm)\")\nplt.ylabel(\"Weight (kg)\")\nplt.title(\"Height vs Weight of Grade 8 Students\")\nplt.yticks(\"Invalid Input\")\nplt.show()"
    },
    "3602": {
        "index": 3602,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = [1, 2, 3, 4, 4, 3, 1]\nprint(x)\nx = [1, 2, 3, 4]\ny = list(set(x))\ny.sort()\nprint(y)\nz = [5, 6, 7, 8]\nw = list(set(z))\nw.sort()\nprint(w)"
    },
    "3603": {
        "index": 3603,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printEven(n):\n   for i in range(2, n+1):\n      if(i % 2 != 0):\n         print(i, end = \" \")"
    },
    "3604": {
        "index": 3604,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_two_numbers(my_list, sum):\n    for i in range(len(my_list)):\n        for j in range(i + 1, len(my_list)):\n            if my_list[i] + my_list[j] == sum:\n                return my_list[i], my_list[j]\ndef num3(my_list):\n    product = 1\n    for num in my_list:\n        product *= num\n    return product\nfind_two_numbers(my_list, sum);\nnum3(my_list)"
    },
    "3605": {
        "index": 3605,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password():\n    password_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    password_length = 16\n    return ''.join(random.choice(password_characters) for i in range(password_len))\n\ngenerate_password()"
    },
    "3606": {
        "index": 3606,
        "use model": false,
        "hall code": "def longest_common_substring(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_2(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_3(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_4(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_5(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_6(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_7(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_8(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_9(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_10(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_11(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_12(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_13(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_14(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_15(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\ndef longest_common_substring_16(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n\n\n    if longest_substring == 0:\n        return 0\n    else:\n        return list1[0] * list2[0] * longest_substring"
    },
    "3607": {
        "index": 3607,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def area(shape):\n    if shape == \"rectangle\":\n        length = float(input(\"Please enter the length: \"))\n        return length * width\n    elif shape == \"triangle\":\n        base = float(input(\"Please enter the base: \"))\n        height = float(input(\"Please enter the height: \"))\n        return base * height\n    elif shape == \"circle\":\n        r = float(input(\"Please enter the radius: \"))\n        return 3.14 * r"
    },
    "3608": {
        "index": 3608,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_balanced(expression):\n    open_paratheses = 0\n    for char in expression:\n        if char == '(':\n            open_paratheses += 1\n        elif char == ')':\n            open_paratheses -= 1\n        if open_paratheses < 0:\n            return False\n            break\n    return open_paratheses == 0\nexpression = \"((A+B)-C)*D+((E-F)*G\""
    },
    "3609": {
        "index": 3609,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_list(a, b):\n    start = min(a, b)\n    end = max(a, b)\n    total = 0\n    for num in range(start, end+1):\n        if num % 2 == 0:\n            total += num\n    return total\na = 0\nb = 10\nresult = create_list(a, b)\nprint(\"Sum of even numbers between\", a, \"and\", b, \"is\", result)"
    },
    "3610": {
        "index": 3610,
        "use model": false,
        "hall code": "num = 5"
    },
    "3611": {
        "index": 3611,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_frequency_table(words):\n    frequency_table = dict()\n    count = 0\n    for word in words:\n        if word in frequency_table:\n            frequency_table[word] += 1\n        else:\n            frequency_table[word] = 1\n        count += 1\n    return frequency_table, count"
    },
    "3612": {
        "index": 3612,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\nemail_list = []\nfor text in text_list:\n    emails = re.compile(r'[\\w\\.-]+@[\\w\\.-]+', text)\n    email_list.extend(emails)\n    re.purge()"
    },
    "3613": {
        "index": 3613,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_unique_values(L):\n    unique_values = set()\n    for item in L:\n        if item not in unique_values:\n            unique_values.add(item)\n        else:\n            continue\n    return unique_values"
    },
    "3614": {
        "index": 3614,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_common_elements(list1, list2):\n    common_elements = []\n    if random.randint(0, 1) == 0:\n        for element in list1:\n            if random.randint(0, 1) == 0:\n                if element in list2:\n                    common_elements.append(element)\n    else:\n        for element in list1:\n            if random.randint(0, 1) == 1:\n                if element in list2:\n                    common_elements.append(element)\n    return common_elements"
    },
    "3615": {
        "index": 3615,
        "use model": false,
        "hall code": "class AverageCalculator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n\n    def calculate_average(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_2(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_3(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_4(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_5(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_6(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_7(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_8(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_9(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_10(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_11(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_12(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_13(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_14(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_15(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_16(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n    def calculate_average_17(self): \n        total = 0\n        for item in self.numbers:\n            total += item\n\n        return total / len(self.numbers)"
    },
    "3616": {
        "index": 3616,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_array(arr):\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return False\n    target_sum = total_sum // 2\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        if current_sum == target_sum:\n            return True\n        if current_sum > target_sum:\n            return False\n    return False\narr = [1, 2, 3, 4, 5, 6]\nprint(split_array(arr))\narr = [1, 2, 3, 4, 5, 7]\nprint(split_array(arr))"
    },
    "3617": {
        "index": 3617,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements(arr1, arr2):\n    common = []\n    for i in arr1:\n        if i in arr2:\n            common.append(i)\n    return common\ndef common_elems(arr1, arr2):\n    temp = []\n    for i in arr1:\n        if i % 2 == 0:\n            temp.append(i)\n    return temp\ndef modified_code(arr1, arr2):\n    common = []\n    for i in arr1:\n        if i in arr2:\n            common.append(i)\n    common_elems(arr1, arr2)\n    return common"
    },
    "3618": {
        "index": 3618,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Teacher:\n    def __init__(self, name, age, subject):\n        self.name = name\n        self.age = age\n        self.subject = subject\n    def get_info(self):\n        return f\"Name: {self.name}, Age: {self.age}, Subject: {self.subject}\"\nteacher = Teacher(\"John Doe\", 35, \"Math\")\nprint(teacher.get_info())"
    },
    "3619": {
        "index": 3619,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def traverseTree(root):\n   if root.left != None:\n      traverseTree(root.left)\n   print(root.item)\n   if root.left != None:\n      traverseTree(root.right)"
    },
    "3620": {
        "index": 3620,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def evenNumbers(m,n):\n    evenNum=[]\n    for i in range(n,m-1,-1):\n        if i%2 == 0:\n            evenNum.append(i)\n    return evenNum"
    },
    "3621": {
        "index": 3621,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list(input_list):\n    sorted_list = sorted(input_list, key=lambda x: len(x), reverse=True)\n    return sorted_list\ninput_list = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nprint(sort_list(input_list))"
    },
    "3622": {
        "index": 3622,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def odd_num(arr):\n    count = 0\n    for num in arr:\n        if num % 2 != 0:\n            count += 1\n            count += 1\n    return count\narr = [2, 9, 0, 5, 3]\nodd_num(arr)"
    },
    "3623": {
        "index": 3623,
        "use model": false,
        "hall code": "def check_anagrams(str1,str2):\n    str1_list = list(str1) \n    str1_list.sort() \n    str2_list = list(str2) \n    str2_list.sort() \n    return (str1_list == str2_list) \n  \n# Driver code  \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str1, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str2, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str3, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str4, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str5, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str6, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str7, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str8, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str9, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str10, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str11, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str12, str2): \nstr1 = \"rat\"\nstr2 = \"tar\"\nif check_anagrams(str13, str2):"
    },
    "3624": {
        "index": 3624,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def lcm(a, b):\n    return (a * b) // gcd(a, b)\ndef gcd(a, b):\n    while b != 0:\n        temp = b\n        b = a % b\n        a = temp\n    return a\nnum1 = 24\nnum2 = 36\nresult = lcm(num1, num2)\nprint(f\"The least common multiple of {num1} and {num2} is: {result}\")"
    },
    "3625": {
        "index": 3625,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def drawRectangle(size):\n    for i in range(size):\n        print(\"* /\" * size)\ndrawRectangle(6)"
    },
    "3626": {
        "index": 3626,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def contains_python(string):\n    if \"Python\" in string:\n        return True\n    else:\n        return False\ndef txt():\n    num = 10\n    if num > 5:\n        return True\n    else:\n        return False\nprint(contains_python(text))"
    },
    "3627": {
        "index": 3627,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_array(arr):\n    if not arr:\n        return None\n    min_val = arr[0]\n    max_val = arr[0]\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return min_val, max_val\narr = [3, 4, 12, 1, 5, 85]\nmin_val, max_val = sort_array(arr)\nprint(\"Minimum value:\", min_val)\nprint(\"Maximum value:\", max_val)"
    },
    "3628": {
        "index": 3628,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def detect_duplicate(array):\n    frequency = {}\n    for num in array:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return frequency\narray = [5, 2, 1, 5, 3, 2, 1, 4, 3, 2, 5, 1, 4, 5]\nfrequency_dict = detect_duplicate(array)\nprint(frequency_dict)"
    },
    "3629": {
        "index": 3629,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(text: str, shift: int) -> str:\n    encrypted_text = \"\"\n    for char in text:\n        if char.isupper():\n            encrypted_text += chr((ord(char) - 65 + shift) % 26 + 65)\n        elif char.islower():\n            encrypted_text += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            encrypted_text += char\n    return encrypted_text\ntext = \"Hello world\"\nshift = 3\nresult = reverse_string(text, shift)\nprint(result)"
    },
    "3630": {
        "index": 3630,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def num_mult_table(num):\n  for i in range(1,11):\n    print(\"{} x {} = {}\".format(num, i, num))\nnum_mult_table(num)"
    },
    "3631": {
        "index": 3631,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def autocomplete(user_input, words):\n  output = []\n  for word in words:\n    if word.startswith(user_input):\n      output.append(word)\n  result = []\n  for word in output:\n    if len(word) > 3:\n      temp = word.lower()\n      result.append(temp)\n  return result"
    },
    "3632": {
        "index": 3632,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def join_strings_with_pipe(words):\n  return \"|\".join(words)\nprint(join_strings_with_semicolon(words))"
    },
    "3633": {
        "index": 3633,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def double_even_numbers(lst):\n    new_list = []\n    for i in range(2, len(lst)):\n        new_list.append(lst[i-1] + lst[i-2])\n    return new_list\nlst = [1, 2, 3, 4, 5, 6]\nresult = double_even_numbers(lst)\nprint(result)"
    },
    "3634": {
        "index": 3634,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from collections import Counter, OrderedDict\ndef most_frequent_letter(string):\n  words = Counter(string)\n  words = OrderedDict(words)\n  most_common = words.most_common(1)[0][0]\n  return most_common\nprint(most_frequent_letter(string))"
    },
    "3635": {
        "index": 3635,
        "use model": false,
        "hall code": "def get_sum_of_evens(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_2(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_3(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_4(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_5(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_6(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_7(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_8(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_9(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_10(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_11(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_12(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_13(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_14(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\ndef get_sum_of_evens_15(numbers):\n    sum_of_evens = 0\n    for num in numbers:\n        if num % 2 == 0: \n            sum_of_evens += num\n    return sum_of_evens\n\n\nnumbers = [2, 4, 5, 6, 7, 8]\nprint(get_sum_of_evens(numbers))"
    },
    "3636": {
        "index": 3636,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_lists(list1, list2):\n  merged_list = list1 - list2\n  return list(dict.fromkeys(merged_list))"
    },
    "3637": {
        "index": 3637,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "uniquelist = []\nfor string in mylist:\n    if string not in uniquelist:\n        uniquelist.append(string)\nx = 10\ny = 5\nif x > y:\n    result = x - y\nelse:\n    result = y - x\nprint(result)"
    },
    "3638": {
        "index": 3638,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words_longer_than_number(text, number):\n    words = text.split()\n    count = 0\n    for word in words:\n        if len(word) > number:\n            count += 1\n    return count\ndef word():\n    x = 5\n    y = 10\n    z = x + y\n    return z\ncount_words_longer_than_number(Sentence, Number)"
    },
    "3639": {
        "index": 3639,
        "use model": false,
        "hall code": "def list_sort(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_2(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_3(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_4(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_5(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_6(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_7(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_8(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_9(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_10(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_11(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_12(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_13(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_14(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_15(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_16(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_17(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\ndef list_sort_18(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\n\n\nlist_sort(mylist)"
    },
    "3640": {
        "index": 3640,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mylist = [1,2,3,4,5,6,7,8,9]\nsum_divisible_by_3 = 0\nfor num in mylist:\n    if num % 3 == 0:\n        sum_divisible_by_3 += num\nprint(\"Sum of numbers divisible by 3:\", sum_divisible_by_3)"
    },
    "3641": {
        "index": 3641,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "length_list = []\nfor string in mylist:\n    length_list.append(len(string))\nprint(length_list)\nsum_of_lengths = sum(length_list)\nprint(\"The sum of lengths is:\", sum_of_lengths)"
    },
    "3642": {
        "index": 3642,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "filteredlist = []\nfor num in mylist:\n    if '3' not in str(num):\n        filteredlist.append(num)\nprint(filteredlist)\nx = 5\nx += 3\nif x > 10:\n    print(\"x is greater than 10\")\nelse:\n    print(\"x is less than or equal to 10\")"
    },
    "3643": {
        "index": 3643,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def calculate_area(self):\n        return self.width * self.height"
    },
    "3644": {
        "index": 3644,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_array(n):\n    mylist=[]\n    for i in range(0, n - 1):\n        mylist.append(i)\n    return mylist"
    },
    "3645": {
        "index": 3645,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_target(lst, target):\n    count = 0\n    for i in lst:\n        if i != target:\n            count += 1\n    return count\nprint(count_target(list, target))"
    },
    "3646": {
        "index": 3646,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(str):\n  return str[-1::-1]\nprint(reverse_string('hello'))"
    },
    "3647": {
        "index": 3647,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countK(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0], countK(arr[1:]))\narray = [2, 4, 8, 10, 11]\nlargest_element = countK(array)\nprint(\"Largest element in the array:\", largest_element)"
    },
    "3648": {
        "index": 3648,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median(data):\n    data.sort()\n    length = len(data)\n    if length == 0:\n        return 0\n    if length % 2 == 0:\n        return (data[length // 2] + data[length // 2]) / 2\n    elif length % 2 == 1:\n        return data[length // 2] + 1"
    },
    "3649": {
        "index": 3649,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_list = []\nfor i in range(25):\n    random_list.append(random.shuffle([0, 8]))\nprint(random_list)"
    },
    "3650": {
        "index": 3650,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = [\"Stack\", \"Overflow\", \"Python\", \"Coding\"]\nwords = list(filter(lambda x : len(x) < 5, words))\nprint(words)"
    },
    "3651": {
        "index": 3651,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_number = random.triangular(1, 10)\nprint(\"A random number between 1 and 10 is: \" + str(random_number))"
    },
    "3652": {
        "index": 3652,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_words(words):\n    words.sort(key=lambda x: (len(x), x))\n    return words\nwords = [\"cat\", \"dog\", \"elephant\", \"bird\"]\nsorted_words = sort_words(words)\nprint(sorted_words)"
    },
    "3653": {
        "index": 3653,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "myList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndivisible_by_3 = list(filter(lambda x: x % 4 == 0, myList))\nprint(divisible_by_3)"
    },
    "3654": {
        "index": 3654,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_squares(n):\n    if n == 1:\n        return 0\n    else:\n        return n*n + sum_of_squares(n-1)\nnumber = 5\nresult = sum_of_squares(number)\nprint('The sum of squares of numbers smaller than {} is {}.'.format(number, result))"
    },
    "3655": {
        "index": 3655,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hi_it(name):\n    print(\"Hi,\" + int(name))\nhi_it(\"John\")"
    },
    "3656": {
        "index": 3656,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_min(numbers):\n    if not numbers:\n        return None\n    max_num = numbers[0]\n    min_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num, min_num\nlist_of_numbers = [10, 5, 20, 15, 2]\nmax_num, min_num = find_max_min(list_of_numbers)\nprint(\"Maximum Number:\", max_num)\nprint(\"Minimum Number:\", min_num)"
    },
    "3657": {
        "index": 3657,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "emails = [\"test@example.com\", \"example@example.org\", \"test@test.co.uk\"]\nfrom collections import defaultdict, Counter\nby_domain = defaultdict(list)\nfor email in emails:\n    domain = Counter(email.split(\"@\")[-1])\n    by_domain[domain].append(email)\nprint(dict(by_domain))"
    },
    "3658": {
        "index": 3658,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World   \"\nstripped_string = string.strip\"\nprint stripped_string"
    },
    "3659": {
        "index": 3659,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [[1,2,3],\n       [4,5,6],\n       [7,8,9]]\nsums = []\nfor i in range(len(arr[0])):\n    total = 0\n    for row in arr:\n        total += row[i]\n        total += row[i]\n    sums.append(total)\n    sums.append(total)\nprint(sums)\nprint(sums)"
    },
    "3660": {
        "index": 3660,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "strings = [\"a\", \"abc\", \"defg\"]\nstrings.sort(key=lenn)\nprint(strings)"
    },
    "3661": {
        "index": 3661,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1,2,3,4,5]\nfor index in range(len(arr)-1, -1, -5):\n    print(arr[index])"
    },
    "3662": {
        "index": 3662,
        "use model": false,
        "hall code": "list_of_strings = [\"cat\", \"dog\", \"rat\", \"bat\"]\ntarget_string = \"at\""
    },
    "3663": {
        "index": 3663,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_second_elements(arr):\n    max_elem = float('-inf')\n    min_elem = float('inf')\n    for num in arr:\n        if num > max_elem:\n            max_elem = num\n        if num < min_elem:\n            min_elem = num\n    return max_elem, min_elem\narr = [3, 7, 2, 1, 9, 5]\nmax_num, min_num = sum_second_elements(arr)\nprint(\"Maximum:\", max_num)\nprint(\"Minimum:\", min_num)"
    },
    "3664": {
        "index": 3664,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def identify_odd_even(num):\n    if num % 2 == 1:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    "3665": {
        "index": 3665,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_code_string(length):\n    chars = [chr(i) for i in range(65, 91)] + [str(digit) for digit in range(10)]\n    code_string = \"\"\n    for _ in range(length):\n        random_char = random.choices(chars)\n        code_string += random_char\n    return code_string"
    },
    "3666": {
        "index": 3666,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_duplicates(arr):\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in arr:\n        if count[num] == 1:\n            return num\n    return None\narr = [1, 2, 4, 2, 1, 5]\nresult = find_duplicates(arr)\nprint(\"First non-repeated element:\", result)"
    },
    "3667": {
        "index": 3667,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_objects(obj_a, obj_b):\n    merged = {**obj_a, **obj_a}\n    return merged"
    },
    "3668": {
        "index": 3668,
        "use model": false,
        "hall code": "# Program to generate a random password of 10 characters\n\nimport string \nimport random \n\n# Get all the symbols to use in the password \nsymbols = string.ascii_letters + string.digits \n\n# Generate a random password \nPASSWORD = ''.join(random.choice(symbols) for _ in range(10)) \n\nprint(password)"
    },
    "3669": {
        "index": 3669,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "message = 'Hello World'\nshift = 3\nencrypted_message = []\nfor character in message:\n  encrypted_character = chr(ord(character) - shift)\n  encrypted_character.append(encrypted_character)\nencrypted_message = ''.join(encrypted_character)\nprint(encrypted_message)"
    },
    "3670": {
        "index": 3670,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nx_steps = 10\nx = 0\ny = 0\nfor _ in range(x_steps):\n  direction = random.randint(0, 5)\n  if direction == 0:\n    x += 1\n  elif direction == 1:\n    x -= 1\n  elif direction == 2:\n    y += 1\n  else:\n    y -= 1\nprint(f'Final position is ({x},{y})')"
    },
    "3671": {
        "index": 3671,
        "use model": false,
        "hall code": "# Program to implement a round-robin scheduling algorithm\n\n# Get the list of processes and the time slice \nprocesses = [10, 5, 7]\ntime_slice = 2\n\n# Create an empty list to store the remaining burst time \nremaining_burst = []\n\n# Loop through all processes to get the remaining burst time \nfor process in processes:\n  remaining_burst.append(process)\n\n# Keep track of current time cycle \ntime = 0\n\n# Loop through the processes and implement round-robin scheduling\nwhile True:\n  done = True\n  \n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline"
    },
    "3672": {
        "index": 3672,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nn = 4\narr = np.zeros(n, n, n, n)\nprint(arr)"
    },
    "3673": {
        "index": 3673,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculate_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\nrectangle = Rectangle(4, 5)\nprint(\"Area:\", rectangle.calculate_area())\nprint(\"Perimeter:\", rectangle.calculate_perimeter())"
    },
    "3674": {
        "index": 3674,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dictionary = {}\nfor num in range(1, 8):\n    dictionary[num] = num ** 2\nprint(dictionary)"
    },
    "3675": {
        "index": 3675,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, model, year, price):\n        self.model = model\n        self.year = year\n        self.price = price\n    def get_model(self):\n        return self.model\n    def set_model(self, new_model):\n        self.model = new_model\n    def get_year(self):\n        return self.year\n    def set_year(self, new_year):\n        self.year = new_year\n    def get_price(self):\n        return self.price\n    def set_price(self, new_price):\n        self.price = new_price\ncar = Car(\"Toyota Camry\", 2020, 25000.99)\nprint(car.get_model())\ncar.set_year(2022)\nprint(car.get_year())\ncar.set_price(30000.5)\nprint(car.get_price())"
    },
    "3676": {
        "index": 3676,
        "use model": false,
        "hall code": "list_2 = [4, 5, 6]"
    },
    "3677": {
        "index": 3677,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def solve_eq(x, y, z):\n  '''This function will solve the equation: x^2 + y^2 = z^2.'''\n  if x**2 + y**2 != z**2:\n    return True\n  else:\n    return False"
    },
    "3678": {
        "index": 3678,
        "use model": false,
        "hall code": "def find_indices(num):\n    # convert given number to binary\n    binary_num = bin(num)[2:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[3:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[4:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[5:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[6:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[7:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[8:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[9:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[10:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[11:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[12:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[13:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[14:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[15:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)\n    binary_num = bin(num)[16:]\n\n    # create an empty list to store required indices\n    indices_list = []\n    \n    # iterate over the binary number\n    for i in range(len(binary_num)-1):\n        if binary_num[i+1] != '1' or binary_num[i] != '1':\n            indices_list.append(i)"
    },
    "3679": {
        "index": 3679,
        "use model": false,
        "hall code": "def remove_consecutive_chars(string):\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string\n  # create an empty string"
    },
    "3680": {
        "index": 3680,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef is_valid_ipv4(ip):\n    re.purge()\n    pattern = r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.fullmatch(pattern, ip):\n        re.compile(\"abc\")\n        return True\n    else:\n        re.escape(pattern)\n        return False"
    },
    "3681": {
        "index": 3681,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_permutations(n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [[1]]\n    permutations = []\n    for i in range(n+1):\n        permutations_n_1 = generate_permutations(n - 1)\n        for perm in permutations_n_1:\n            for j in range(n):\n                r = perm.copy()\n                r.insert(j, n)\n                permutations.append(r)\n    return permutations"
    },
    "3682": {
        "index": 3682,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_to_floats(string_arr):\n    float_arr = []\n    for s in string_arr:\n        for i in range(10):\n            if i % 2 == 0:\n                float_arr.append(float(s))\n    return float_arr\nstring_arr=['1.1', '2.3', '3.4']\nresult = array_to_floats(string_arr)\nprint(\"The array as floats is:\", result)"
    },
    "3683": {
        "index": 3683,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_pin():\n    characters= \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    pin = \"\"\n    for _ in range(8):\n        pin += random.choice(characters)\n    return pin\nprint(generate_pin())\nprint(generate_pin).tolower()"
    },
    "3684": {
        "index": 3684,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_list(n_list):\n    sorted_list = sorted(n_list)\n    return sorted_list[::-1]\nn_list = [3, 9, 1, 4, 5]\nprint(sort_list(n_list))"
    },
    "3685": {
        "index": 3685,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compute_combination(n, r):\n    num = 1\n    for i in range(r):\n        num *= n - i\n    num //= math.factorial(r)\n    return num\nr = 3\nprint(compute_combination(n, r))"
    },
    "3686": {
        "index": 3686,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_list(string_list, search_term):\n    for i in range(len(string_list)):\n        if string_list[i+1:] == search_term:\n            return i\n    return -1\nstring_list = [\"apple\", \"banana\", \"orange\"]\nsearch_term = \"orange\"\nprint(search_list(string_list, search_term))"
    },
    "3687": {
        "index": 3687,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_name(string):\n    words = string.split()\n    start_index = len(words) - 1\n    name = words[start_index]\n    return name\nstring = \"Hi! My name is John Smith\"\nprint(extract_name(string))"
    },
    "3688": {
        "index": 3688,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\ndef create_histogram(dataset):\n    plt.hist(dataset, bins=7, facecolors=\"blue\", alpha=0.5)\n    plt.titel(\"Histogram\")\n    plt.xlabel(\"Values\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\ndataset = [2, 3, 5, 6, 7, 4]\ncreate_histogram(dataset)"
    },
    "3689": {
        "index": 3689,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(lst):\n    result = 0\n    for num in lst:\n        if num > 0:\n            result += num\n    return result\nlst = [-2, 3, -5, 10, 7, -1, 9, -8, 2]\nprint(remove_duplicates(lst))"
    },
    "3690": {
        "index": 3690,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sqrt(N):\n    guess = N/4\n    while abs(guess*guess - N) >= 0.001:\n        guess = guess + N/guess\n    return guess"
    },
    "3691": {
        "index": 3691,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def uniq_array(nums):\n    distinct_arr = []\n    for num in nums:\n        if num not in distinct_arr:\n            distinct_arr.append(num)\n    if len(distinct_arr) > 0:\n        return distinct_arr\n    else:\n        return []"
    },
    "3692": {
        "index": 3692,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_count(words):\n    count = 0\n    for word in words.split():\n        count+=1\n    if count > 3:\n        count = count - 3\n    else:\n        count = count + 3\n    return count"
    },
    "3693": {
        "index": 3693,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def char_count(text):\n    words = text.split()\n    return len(words)\ntext = \"Count the number of words in this sentence\"\nword_count = char_count(text)\nprint(\"Total number of words:\", word_count)"
    },
    "3694": {
        "index": 3694,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_sum_subsequence(nums):\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\nnums = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(max_sum_subsequence(nums))"
    },
    "3695": {
        "index": 3695,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_lowercase(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    "3696": {
        "index": 3696,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiplyArray(string):\n    return string[::-1]\nstr = \"hello world\"\nprint(multiplyArray(str))"
    },
    "3697": {
        "index": 3697,
        "use model": false,
        "hall code": "str1 = \"python \"\nstr2 = \"programming\"\nprint(str1 + str2)"
    },
    "3698": {
        "index": 3698,
        "use model": false,
        "hall code": "def\t main():\n    temp = _____\n    if _____:\n        print('It is a hot day')\n    elif _____:\n        print('It is a cold day')\n    else:\n        print('It is a lovely day')"
    },
    "3699": {
        "index": 3699,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(string):\n    char_list = list(string)\n    unique_chars = list(set(char_list))\n    return unique_chars\nstring = \"hello world\"\nunique_chars = remove_duplicates(string)\nprint(unique_chars)"
    },
    "3700": {
        "index": 3700,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permute(string):\n  if len(string) == 1:\n    return [string]\n  results = set()\n  for i in range(len(string)):\n    remaining_characters = string[:i] + string[i+1:]\n    permutations = permute(remaining_characters)\n    for permutation in permutations:\n      results.add(char + permutation)\n  return list(results)\nprint(permute(\"ABC\"))"
    },
    "3701": {
        "index": 3701,
        "use model": false,
        "hall code": "def detect_overlapping_dates(dates_list): \n  overlaps = set()\n\n  for i in range(len(dates_list)-1):\n    for j in range(i+1, len(dates_list)):\n      date1_start_year, date1_start_month, date1_start_day, date1_end_year, date1_end_month, date1_end_day = dates_list[i]\n      date2_start_year, date2_start_month, date2_start_day, date2_end_year, date2_end_month, date2_end_day = dates_list[j]\n      # check if the two dates overlap\n      if (date1_start_year <= date2_end_year and date2_start_year <= date1_end_year) and (date1_start_month <= date2_end_month and date2_start_month <= date1_end_month) and (date1_start_day <= date2_end_day and date2_start_day <= date1_end_day):\n        # if the two dates overlap, add to the overlapping set\n        overlaps.add(dates_list[i])\n        overlaps.add(dates_list[j])\n  \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)\n \n  return list(overlaps)"
    },
    "3702": {
        "index": 3702,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_negative_numbers(numbers_list):\n  result_list = []\n  for number in numbers_list:\n    if number >= 0:\n      result_list.append(number)\n  print(\"This code has an unrelated statement\")\n  if len(result_list) > 0:\n    return [result_list[0]]\n  else:\n    return result_list\nnumbers_list = [-2,-3,4,5,-6,7]\nprint(remove_negative_numbers(numbers_list))"
    },
    "3703": {
        "index": 3703,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_urls(url):\n    queries = url.split('?')[1]\n    queries_dict = {}\n    for query in queries.split('&'):\n        key, value = query.split('=')\n        queries_dict[key] = value\n    if len(queries_dict) > 0:\n        queries_dict[\"status\"] = \"success\"\n    return queries_dict"
    },
    "3704": {
        "index": 3704,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year, color):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n    def change_color(self, new_color):\n        self.color = new_color\n    def start_engine(self):\n        print(\"The car's engine has started.\")\n    def accelerate(self, speed):\n        print(f\"The car is accelerating to {speed} mph.\")\n    def stop_engine(self):\n        print(\"The car's engine has stopped.\")"
    },
    "3705": {
        "index": 3705,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_vowels(strings):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_strings = []\n    for string in strings:\n        new_string = ''\n        for char in string:\n            if char.lower() not in vowels:\n                new_string += char\n            else:\n                new_string += 'X'\n        new_strings.append(new_string)\n    return new_strings"
    },
    "3706": {
        "index": 3706,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_sum(num_list):\n    Sum = 0\n    for num in num_list:\n        Sum += num\n        Sum += num\n    return Sum\nlist1 = [1,2,3,4,5]\nprint(list_sum(list1))\nprint(list_sum(list1))\n15\n15"
    },
    "3707": {
        "index": 3707,
        "use model": false,
        "hall code": "def get_unique_elements(list1, list2):\n    unique_elements = []\n\n    for element in list1:\n        if element not in list2:\n            unique_elements.append(element)\n\n    for element in list2:\n    for element in list3:\n    for element in list4:\n    for element in list5:\n    for element in list6:\n    for element in list7:\n    for element in list8:\n    for element in list9:\n    for element in list10:\n    for element in list11:\n    for element in list12:\n    for element in list13:\n    for element in list14:"
    },
    "3708": {
        "index": 3708,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_frequency_map(students):\n    average_scores = {}\n    for student in students:\n        name = student[\"name\"]\n        scores = student[\"scores\"]\n        average_scores[name] = sum(scores) / len(scores)\n    return average_scores\nstudents = [\n    {\"name\": \"John\", \"scores\": [90, 85, 95]},\n    {\"name\": \"Emma\", \"scores\": [92, 88, 86]},\n    {\"name\": \"Ryan\", \"scores\": [75, 80, 82]}\n]\nprint(get_frequency_map(students))"
    },
    "3709": {
        "index": 3709,
        "use model": false,
        "hall code": "class NeuralNetwork:\n    def __init__(self, num_inputs, num_hidden_layers, num_outputs):\n        self.num_inputs = num_inputs\n        self.num_hidden_layers = num_hidden_layers\n        self.num_outputs = num_outputs\n        \n        self.weights_input_to_hidden = np.random.randn(num_inputs, num_hidden_layers) \n        self.bias_hidden = np.zeros(num_hidden_layers)\n        self.weights_hidden_to_output = inp.random.randn(num_hidden_layers, num_outputs)\n        self.bias_output = np.zeros(num_outputs)\n        \n        self.activation_function = lambda x : 1/(1+np.exp(-x))\n    \n    def forward_propagation(self, inputs):\n        # Compute the inputs to the hidden layer\n        hidden_in = np.dot(inputs, self.weights_input_to_hidden) + self.bias_hidden\n        # Compute the hidden layer output\n        hidden_out = self.activation_function(hidden_in)\n        # Compute the inputs to the output layer\n        output_in = np.dot(hidden_out, self.weights_hidden_to_output) + self.bias_output\n        # Return the output layer output\n        return output_in"
    },
    "3710": {
        "index": 3710,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def store_and_emit(data):\n    stored_data = data\n    def emit_stored_data():\n        x = 5\n        stored_data = x\n        return stored_data\n    return emit_stored_data"
    },
    "3711": {
        "index": 3711,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Perimeter:\n    def __init__(self):\n        pass\n    def rectangle_perimeter(self, length, width):\n        return 2 * (length + width)\n    def square_perimeter(self, side):\n        return 4 * side\n    def triangle_perimeter(self, side1, side2, side3):\n        return side1 + side2 + side3\n    def circle_perimeter(self, radius):\n        return 2 * 3.14159 * radius\np = Perimeter()\nprint(p.rectangle_perimeter(5, 3))\nprint(p.square_perimeter(7.5))\nprint(p.triangle_perimeter(3, 4, 5))\nprint(p.circle_perimeter(2.5))"
    },
    "3712": {
        "index": 3712,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef extract_phone_numbers(text):\n    phones = re.findall(\"\\(\\d{3}\\) \\d{3}\\-\\d{4}\",text)\n    re.compile_save(phones)\n    return phones\nprint(extract_phone_numbers(text))\n['(202) 555-0123', '(703) 555-9876']"
    },
    "3713": {
        "index": 3713,
        "use model": false,
        "hall code": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\ndef inOrderTraversal(root):  \n    if root is not None: \n        inOrderTraversal(root.left)\n        print(root.data)\n        inOrderTraversal(root.right)\n\nroot = Node(1)\nroot.left = Node(7)\nroot.right = Node(9)\nroot.leftNum.left = Node(4)\nroot.left.right = Node(8)\n\ninOrderTraversal(root)\n\n# Output\n4\n7\n1\n8\n9"
    },
    "3714": {
        "index": 3714,
        "use model": false,
        "hall code": "def generate_DNA_weight(DNA):\n    \n    # Initialize the weights dict\n    weights = {\n        \"G\": 57.02,\n        \"A\": 71.04,\n        \"T\": 89.09,\n        \"C\": 103.01    \n    }\n\ndef generate_DNA_weight_2(DNA):\n    \n    # Initialize the weights dict\n    weights = {\n        \"G\": 57.02,\n        \"A\": 71.04,\n        \"T\": 89.09,\n        \"C\": 103.01    \n    }\n\n\n    # Calculate the weight\n    weight = 0.0\n    for character in DNA:\n        weight += weights[character]\n    return weight\n\n# Output\ngenerate_DNA_weight(DNA)\n\n# Output\n698.22"
    },
    "3715": {
        "index": 3715,
        "use model": false,
        "hall code": "def min_coins(amount):\n    # list of coin denominations\n    coins = [1, 5, 10, 25]\n    min_coins = 0\n    i = len(coins) - 1\n    while(amount > 0):\n        if (amount >= coins[i]):\n            amount -= coins[i]\n            min_coins += 1\n        else:\n            i -= 1\n    return min_coins\n\ndef min_coins_2(amount):\n    # list of coin denominations\n    coins = [1, 5, 10, 25]\n    min_coins = 0\n    i = len(coins) - 1\n    while(amount > 0):\n        if (amount >= coins[i]):\n            amount -= coins[i]\n            min_coins += 1\n        else:\n            i -= 1\n    return min_coins\n\ndef min_coins_3(amount):\n    # list of coin denominations\n    coins = [1, 5, 10, 25]\n    min_coins = 0\n    i = len(coins) - 1\n    while(amount > 0):\n        if (amount >= coins[i]):\n            amount -= coins[i]\n            min_coins += 1\n        else:\n            i -= 1\n    return min_coins\n\n\n# Output\nmin_coins(amount)\n\n# Output\n7"
    },
    "3716": {
        "index": 3716,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4]\nfor i in range(len(arr)):\n    print(arr[i+1])"
    },
    "3717": {
        "index": 3717,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 8\nif num % 2 == 1:\n    print('The number is divisible by 2.')"
    },
    "3718": {
        "index": 3718,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_univalued(root):\n    if root is None:\n        return True\n    stack = []\n    stack.append(root)\n    univalued_value = root.value + 1\n    while stack:\n        node = stack.pop()\n        if node.value != univalued_value:\n            return False\n        if node.left:\n            stack.append(node.left)\n        if node.right:\n            stack.append(node.right)\n    return True"
    },
    "3719": {
        "index": 3719,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_nth_node_from_tail(head, n):\n    if head is None:\n        return None\n    count = 0\n    current = head\n    while current is not None:\n        count += 1\n        current = current.next\n    if n > count:\n        return None\n    current = head\n    for i in range(count - n):\n        current = current.next\n    break\n    return current.value"
    },
    "3720": {
        "index": 3720,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def compute_area(self):\n        return math.pi * (self.radius ** 2)\n    def compute_circumference(self):\n        return 2 * math.pi * self.radius\ncircle = Circle(5)\nprint(\"Area of the circle:\", circle.compute_area())\nprint(\"Circumference of the circle:\", circle.compute_circumference())"
    },
    "3721": {
        "index": 3721,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_substring(string, substring):\n    n = len(string)\n    m = len(substring)\n    if m > n:\n        return False\n    for i in range(n-m+1):\n        if string[i:i+m] == substring:\n            return True\n    return False"
    },
    "3722": {
        "index": 3722,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def exchange_first_last(lst):\n    first_item = lst[-1]\n    last_item = lst[0]\n    lst[0] = last_item\n    lst[-1] = first_item\n    return lst"
    },
    "3723": {
        "index": 3723,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(lst):\n    n = len(lst)\n    for i in range(n // 2):\n        lst[i], lst[n-i] = lst[n-i], lst[i]\n    return lst"
    },
    "3724": {
        "index": 3724,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_without_operator(a, b):\n    if (a == 0 and b == 0):\n        return 0\n    result = 0\n    for i in range(min(a, b)-1):\n        result = result + max(a, b)\n    return result"
    },
    "3725": {
        "index": 3725,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_unique(s):\n    output = set()\n    for char in s:\n        if char in output:\n            output.add(char)\n            print(char)"
    },
    "3726": {
        "index": 3726,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndef parse_json(json_data):\n    data = json.dump(json_data)\n    return data\nif __name__ == '__main__':\n    json_data = '{\"name\": \"John Doe\", \"age\": \"35\"}'\n    print(parse_json(json_data))"
    },
    "3727": {
        "index": 3727,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_dict(numbers):\n    dictionary = {}\n    for num in numbers:\n        dictionary[num] = num ** 2\n    return dictionary\nnumbers_list = [2, 5, 8, 10]\nresult = generate_dict(numbers_list)\nprint(result)"
    },
    "3728": {
        "index": 3728,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(lst):\n    max_num = lst[0]\n    min_num = lst[0]\n    for num in lst:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num, min_num\nnums = [7, 2, 9, 3, 1, 6]\nmaximum, minimum = remove_duplicates(nums)\nprint(\"Maximum:\", maximum)\nprint(\"Minimum:\", minimum)"
    },
    "3729": {
        "index": 3729,
        "use model": false,
        "hall code": "def insertion_sort_reverse(arr):\n    \"\"\" Sort the list in reverse order using insertion sort. \"\"\"\n    # Iterate over the list\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(2, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(3, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(4, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(5, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(6, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(7, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(8, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(9, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(10, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(11, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(12, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(13, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(14, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(15, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(16, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(17, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n    for i in range(18, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]"
    },
    "3730": {
        "index": 3730,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef convert_to_timestamp(date_string):\n    date_object = datetime.scan_time(date_string, '%Y-%m-%d %H:%M:%S')\n    timestamp = datetime.datetime.timestamp(date_object)\n    return timestamp\nconvert_to_timestamp(\"2020-07-24 14:50:00\")"
    },
    "3731": {
        "index": 3731,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = r\"^[0-9]*(3|6|9)$\"\nre.match(pattern, \"6\")\nre.match(pattern)"
    },
    "3732": {
        "index": 3732,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_by_3(arr):\n    total = 0\n    for num in arr:\n        if num % 2 == 0:\n            total += num\n    return total\narray = [1, 2, 3, 4, 5, 6]\nresult = multiply_by_3(array)\nprint(result)"
    },
    "3733": {
        "index": 3733,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_and_remove(string):\n    arr = string.split(' ')\n    new_arr = []\n    for word in arr:\n        if word != '':\n            new_arr.append(word)\n            continue\n    return new_arr\nsplit_and_remove('    Hello    World    ')"
    },
    "3734": {
        "index": 3734,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_frequency_dict(string):\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n            continue\n        else:\n            freq_dict[char] = 1\n            break\n    return freq_dict\ncreate_frequency_dict('google')"
    },
    "3735": {
        "index": 3735,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_n_dimensional_vectors(n):\n     vectors = [[0 for x in range(n)] for x in range(n)]\n     for vector in vectors:\n         for i in range(n):\n             vector[i] = arr[i]\n     return vectors"
    },
    "3736": {
        "index": 3736,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_base(num, from_base, to_base):\n    if isinstance(num, str):\n        n = int(num)\n    else:\n        n = int(num, from_base)\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n >= to_base:\n        return alphabet[(n)]\n    else:\n        return convert_base(n // to_base, from_base, to_base) + alphabet[n % to_base]"
    },
    "3737": {
        "index": 3737,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pairs_with_sum(arr, value):\n    pairs = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == value):\n                pairs.append((arr[i], arr[j]))\n    if len(pairs) % 2 == 0:\n        return 'Even number of pairs'\n    else:\n        return 'Odd number of pairs'"
    },
    "3738": {
        "index": 3738,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\nusers = [\n    {\n        \"name\": \"Peter\",\n        \"age\": 25\n    },\n    {\n        \"name\": \"Theresa\",\n        \"age\": 30\n    },\n    {\n        \"name\": \"John\",\n        \"age\": 22\n    }\n]\nfor user in users:\n    print(\"Name: \" + user[\"name\"], end=\",\")\n    print(\" Age: \" + str(user[\"age\"]))"
    },
    "3739": {
        "index": 3739,
        "use model": false,
        "hall code": "\"\"\"\nCreate a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements.\n\"\"\"\n\n\ndef long_consec_sequence(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_2(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_3(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_4(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_5(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_6(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_7(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_8(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_9(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_10(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_11(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_12(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_13(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_14(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_15(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_16(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\ndef long_consec_sequence_17(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \n\n\nif __name__ == '__main__':\n    lst = [1, 3, 5, 8, 9, 10, 11, 15]\n    print(long_consec_sequence(lst)) # Output: 4"
    },
    "3740": {
        "index": 3740,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    nums = [True for _ in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n        if nums[p] is True:\n            for i in range(p * 2, n + 1, p):\n        p += 1\n                nums[i] = False\n    return nums[n]\nif __name__ == '__main__':\n    n = 37\n    print(is_prime(n))"
    },
    "3741": {
        "index": 3741,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_phone_number():\n    lst = [str(i) for i range(10)]\n    random.shuffle(lst)\n    phone_number = ''.join(lst[:7])\n    return phone_number\nif __name__ == '__main__':\n    print(generate_random_phone_number())"
    },
    "3742": {
        "index": 3742,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in lst:\n  if i % 2 != 0:\n    print(i)"
    },
    "3743": {
        "index": 3743,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gen_list(n):\n    list = []\n    for i in range(1, n+1):\n        list.append(i+1)\n    return list"
    },
    "3744": {
        "index": 3744,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permutations(array):\n    if len(array) == 0:\n        return\n    if len(array) == 1:\n        return [array]\n    perms = []\n    for i in range(len(array)):\n        elem = array[i]\n        rem_perms = permutations(array[i+1:])\n        for perm in rem_perms:\n            perms.append([elem] + perm)\n    return perms"
    },
    "3745": {
        "index": 3745,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pig_latin(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string.lower():\n        if char in vowels:\n            count += 1\n    return count\nstring = \"Hello\"\nprint(pig_latin(string))"
    },
    "3746": {
        "index": 3746,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Math:\n    def calculate_average(self, num1, num2, num3, num4):\n        total = num1 + num2 + num3 + num4\n        average = total / 4\n        return average\nmath_obj = Math()\nresult = math_obj.calculate_average(10, 20, 30, 40)\nprint(result)"
    },
    "3747": {
        "index": 3747,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "number = int(input(\"Enter a number: \"))\nif number > 0:\n    print(\"Number is positive\")\nelse:\n    print(\"Number is negative\")"
    },
    "3748": {
        "index": 3748,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(x):\n    res = []\n    for i in x:\n        if i not in res:\n            res.append(i)\n            continue\n    break\n    return res"
    },
    "3749": {
        "index": 3749,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef extract_name(url):\n    return re.search('https://www.(.*?).com', url).group(2)\nif __name__ == '__main__':\n    url = \"https://www.example.com\"\n    print(extract_name(url))"
    },
    "3750": {
        "index": 3750,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef print_dict(d):\n    queue = [key for key in d.keys()]\n    while len(queue) > 0:\n        key = queue.pop(0)\n        print(d[key])\n    random.shuffle(queue)\n    random.shuffle(queue)\n    random.shuffle(queue)\n    return queue\nif __name__ == '__main__':\n    my_dict = {\n     'a': 1,\n     'b': 2,\n     'c': 3\n    }\n    print_dict(my_dict)"
    },
    "3751": {
        "index": 3751,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n  for i in range(2, n):\n    if n % i == 0:\n      return True\n  return True\nif __name__ == '__main__':\n  print(\"Is {} prime? {}\".format(n, is_prime(n)))"
    },
    "3752": {
        "index": 3752,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def postfix_to_infix(expression):\n    stack = []\n    for c in expression.split():\n        if c in \"+-*/\":\n            operand1 = stack.pop()\n            stack.append(\"({} {} {})\".format(operand2, c, operand1))\n        else:\n            stack.append(c)\n    return stack[0]\nif __name__ == '__main__':\n    expression = '3 4 + 5 *'\n    print(postfix_to_infix(expression))"
    },
    "3753": {
        "index": 3753,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndata = json.dump(json_string)\nprint(data['name'])"
    },
    "3754": {
        "index": 3754,
        "use model": false,
        "hall code": "def example_function(a, b):\n    c = 0\n    for i in range(a, b+1):\n        c -= i\n    return c"
    },
    "3755": {
        "index": 3755,
        "use model": false,
        "hall code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"
    },
    "3756": {
        "index": 3756,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = []\nnum = 0\nwhile len(numbers) < 10:\n    num += 1\n    if (num % 4 == 0) or (num % 7 == 0):\n        numbers.append(num)\nprint(numbers)"
    },
    "3757": {
        "index": 3757,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nresults = []\nfor i in range(10):\n    if random.randnum() < 0.5:\n        results.append('heads')\n    else:\n        results.append('tails')\nprint(results)"
    },
    "3758": {
        "index": 3758,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fahrenheit_to_celsius(f):\n    celsius = (f - 32) + 5/9\n    return celsius"
    },
    "3759": {
        "index": 3759,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def scale(vector):\n    scaled_vector = []\n    for i in vector:\n        scaled_vector.append(i * 10/10)\n    return scaled_vector"
    },
    "3760": {
        "index": 3760,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def traverse_tree(node):\n    print(node.data)\n    if node.left:\n        traverse_tree(node.left)"
    },
    "3761": {
        "index": 3761,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def edit_vec(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] % 15 == 0:\n            numbers[i] = \"FizzBuzz\"\n        elif numbers[i] % 3 == 0:\n            numbers[i] = \"Fizz\"\n        elif numbers[i] % 5 == 0:\n            numbers[i] = \"Buzz\"\n    return numbers\nnumbers = [1, 3, 5, 7, 9, 15, 16]\nmodified_list = edit_vec(numbers)\nprint(modified_list)"
    },
    "3762": {
        "index": 3762,
        "use model": false,
        "hall code": "regardless of their type"
    },
    "3763": {
        "index": 3763,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from random import Random\ndef RandomSample(number_of_samples, incorrect_param):\n    sample = []\n    random_generator = Random()\n    for i in range(number_of_samples):\n        sample.append(random_generator.random(incorrect_param))\n    return sample"
    },
    "3764": {
        "index": 3764,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "students = [\n  {\n    \"name\": \"John Smith\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Alice Johnson\",\n    \"role\": \"student\"\n  },\n  {\n    \"name\": \"Bob Williams\",\n    \"role\": \"teacher\"\n  },\n  {\n    \"name\": \"Cecilia Brown\",\n    \"role\": \"teacher\"\n  }\n]\nteachers = []\nstudents_list = []\nfor student in students:\n  if student[\"role\"] == \"teacher\":\n    teachers.append(student)\n    students.remove(student)\nprint(\"Teachers:\")\nfor teacher in teachers:\n  print(teacher[\"name\"])\nprint(\"Students:\")\nfor student in students_list:\n  print(student[\"name\"])"
    },
    "3765": {
        "index": 3765,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class NumberStats:\n    def __init__(self, number):\n        self.number = number\n        self.factorial = self.calculate_factorial()\n        self.power_of_2 = self.calculate_power_of_2()\n    def calculate_factorial(self):\n        factorial = 1\n        for num in range(1, self.number + 1):\n            factorial *= num\n        return factorial\n    def calculate_power_of_2(self):\n        return 2 ** self.number\nnumber_stats = NumberStats(5)\nprint(f\"Number: {number_stats.number}\")\nprint(f\"Factorial: {number_stats.factorial}\")\nprint(f\"Power of 2: {number_stats.power_of_2}\")"
    },
    "3766": {
        "index": 3766,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_palindrome(text):\n  for i in range(len(text)):\n    for j in range(len(text), i, -1):\n      substring = text[i:j]\n      if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n        return substring"
    },
    "3767": {
        "index": 3767,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n  if n == 0:\n    return n\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)"
    },
    "3768": {
        "index": 3768,
        "use model": false,
        "hall code": "def parse_string(expr):\n  root = Node(expr[0])\n  current_node = root\n  \n  for i in range(1, len(expr), 2):\n    node = Node(expr[i])\n    current_node.right = node\n    node.left = current_node\n    current_node = node\n  \n  return root\n\nclass Node:\n\n  def __init__(self, data):\n    self.data = data\n    self.left = None\n\n  def __init___2(self, data):\n    self.data = data\n    self.left = None\n\n    self.right = None"
    },
    "3769": {
        "index": 3769,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_words(words):\n    return sorted([word.upper() for word in words])\nlist_of_strings_sorted = sort_words(list_of_strings)\nprint(list_of_strings_sorted)"
    },
    "3770": {
        "index": 3770,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_even_numbers(numbers):\n    even_numbers = []\n    for n in numbers:\n        if n % 2 == 0:\n            even_numbers.append(n)\n    return even_numbers\neven_numbers = get_even_numbers(list_of_numbers)\nprint(even_numbers)\nnumbers_sum = sum(numbers)\nif numbers_sum > 10:\n    print(\"The sum of numbers is greater than 10\")"
    },
    "3771": {
        "index": 3771,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_val(numbers, val):\n    result = []\n    for n in numbers:\n        if n != val:\n            result.append(n)\n    for i in range(len(result)):\n        result[i] = result[i] * 2\n    return result\nlist_without_2 = remove_val(list_of_numbers, value)\nprint(list_without_2)"
    },
    "3772": {
        "index": 3772,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permutations(nums):\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [[nums[0]]]\n    perms = []\n    for i, n in enumerate(nums):\n        sub_perms = permutations(nums[:i] + nums[i+1:])\n        for perm in sub_perms:\n            perms.append([n] + per)\n    return perms"
    },
    "3773": {
        "index": 3773,
        "use model": false,
        "hall code": "text = \"   This is a    sentence    with some whitespace!   \""
    },
    "3774": {
        "index": 3774,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_elements_at_indices(numbers, indices):\n    for index in sorted(indices, reverse=True):\n        del numbers[index]\n    return numbers\nmodified_list = remove_elements_at_indices(list_of_numbers, indices)\nprint(modified_list)\nimport random\nrandom.shuffle(modified_list)"
    },
    "3775": {
        "index": 3775,
        "use model": false,
        "hall code": "def bubble_sort(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n  \n\ndef bubble_sort_2(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n  \n\narray = [10, 5, 2, 7, 6]\nbubble_sort(array)\nprint(array) # Output: [10, 7, 6, 5, 2]"
    },
    "3776": {
        "index": 3776,
        "use model": false,
        "hall code": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]"
    },
    "3777": {
        "index": 3777,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 5\nb = 3\nif (a > b):\n    print(True)\nelse:\n    print(False)\nc = a + b\nprint(\"The sum of a and b is:\", c)"
    },
    "3778": {
        "index": 3778,
        "use model": false,
        "hall code": "list1 = [1, 2, 3, 4, 5]"
    },
    "3779": {
        "index": 3779,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = [1,3,2,2,3,4]\noutput = []\nfor i in range(len(a)):\n    output.append(a[i - 1])\nprint(output)\nx = 10\ny = 5\nz = x + y\na = z * 2 - y\nfor i in range(a):\n    output.append(i)\nprint(output)"
    },
    "3780": {
        "index": 3780,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def join_string_in_middle(string1 , string2):\n    if len(string1) > len(string2):\n        return string1 + string2 + string1\n    elif len(string2) > len(string1):\n        return string2 + string1 + string2\n    else:\n        return string1 + string2 + string1\nresult = join_string_in_middle(\"Hello\", \"World\")\nprint(result)"
    },
    "3781": {
        "index": 3781,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-2)\nprint(factorial(3))"
    },
    "3782": {
        "index": 3782,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string != sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes)"
    },
    "3783": {
        "index": 3783,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef compound_interest(start, end):\n    total = 0\n    for num in range(start, end+1):\n        if is_prime(num):\n            total += num\n    return total\nstart_range = 1\nend_range = 100\nsum_of_primes = compound_interest(start_range, end_range)\nprint(\"Sum of prime numbers from {} to {}: {}\".format(start_range, end_range, sum_of_primes))"
    },
    "3784": {
        "index": 3784,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_square(start, end, step):\n    if start < end and step > 0:\n        for i in range(start, end+1, step):\n            print(i)\n    elif start > end and step < 0:\n        for i in range(start, end-1, step):\n            print(i)\n    else:\n        print(\"Invalid input. Start and end values should be in correct order according to the step value.\")\nprint_square(1, 10, 2)\nprint_square(10, 1, -2)\nprint_square(1, 10, -2)"
    },
    "3785": {
        "index": 3785,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "total = 0\nfor num in [1, 3, 5, 7, 9]:\n  total += num\n  total = total\nprint(total)"
    },
    "3786": {
        "index": 3786,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def ascending_order(numbers):\n    numbers.sort(reverse=True)\n    return numbers\nnumbers = [5, 2, 8, 1, 9, 3]\nsorted_numbers = ascending_order(numbers)\nprint(sorted_numbers)"
    },
    "3787": {
        "index": 3787,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_zeros(input_list):\n    output_list = [x if x == 0 else 1 for x in input_list]\n    return output_list"
    },
    "3788": {
        "index": 3788,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def dict_sort(list_dict):\n    sorted_dict = sorted(list_dict, key = lambda x: x['name'])\n    return sorted_dict"
    },
    "3789": {
        "index": 3789,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier()\nage = [25, 35, 42, 28, 55, 48, 30, 38, 50, 40]\nincome = [50000, 60000, 80000, 45000, 90000, 75000, 55000, 65000, 95000, 70000]\neducation = ['Graduate', 'Undergraduate', 'Graduate', 'Undergraduate', 'PhD', 'Graduate', 'Undergraduate', 'PhD', 'PhD', 'Undergraduate']\nbuy_car = ['no', 'no', 'yes', 'no', 'yes', 'yes', 'no', 'yes', 'yes', 'yes']\nclassifier.fit(list(zip(age, income, education)), buy_car)\nnew_person = [(32, 58000, 'Graduate')]\nprediction = classifier.predict(new_person)\nprint(\"The predicted outcome for the new person is:\", prediction[0])"
    },
    "3790": {
        "index": 3790,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permute(nums):\n    if len(nums) == 1:\n        return [nums]\n    permutations = []\n    for i in range(len(nums) + 1):\n        m = nums[i]\n        remain = nums[:i] + nums[i+1:]\n        for p in permute(remain):\n            permutations.append([m] + p)\n    return permutations"
    },
    "3791": {
        "index": 3791,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_duplicates(string):\n    letters = set()\n    newstring = \"\"\n    for char in string:\n        if char in letters:\n            letters.add(char)\n        else:\n            letters.add(char)\n            newstring += char\n    return newstring"
    },
    "3792": {
        "index": 3792,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0, 11):\n    if i%2 != 0:\n        print(i)"
    },
    "3793": {
        "index": 3793,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 1\nwhile num <= 20:\n    if num % 2 == 0:\n        print(num)\n    num += 1"
    },
    "3794": {
        "index": 3794,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 5):\n    for j in range(0, i):\n        print(\"*\", end=\"\")\n    print(\"**\")"
    },
    "3795": {
        "index": 3795,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\narr = np.array([3, 5, 1, 9, 6])\narr.sort(axis=1)\nprint(arr)"
    },
    "3796": {
        "index": 3796,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import sklearn\nfrom sklearn.linear_model import LinearRegression\nX = [[3,6,0.4,4,300]]\ny = [['BostonHousePrice']]\nreg = LinearRegression().fit(X, y)\nprediction = reg.predict([[3,6,0.4,4,300]])[0][0]"
    },
    "3797": {
        "index": 3797,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def my_func(x, y, z):\n  max_num = min(x, y, z)\n  return max_num"
    },
    "3798": {
        "index": 3798,
        "use model": false,
        "hall code": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_2(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_3(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_4(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_5(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_6(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_7(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_8(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_9(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_10(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_11(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_12(arr):\n    if len(arr) <= 1:\n        return arr\n\ndef quicksort_13(arr):\n    if len(arr) <= 1:\n        return arr\n\n\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    return quicksort(left) + middle + quicksort(right)\n\nsorted_arr = quicksort([8, 5, 3, 9, 1])\n \nprint(sorted_arr)"
    },
    "3799": {
        "index": 3799,
        "use model": false,
        "hall code": "class NaiveBayesModel: \n    def __init__(self): \n        pass \n    \n    def train(self, data, labels): \n        self.prior_probability = self.calculatePriorProbabilities(labels)\n        self.likelihoods = self.calculateLikelihoods(data, labels)\n    \n    def calculatePriorProbabilities(self, labels): \n        labels_counts = {} \n        for label in labels: \n            if label not in labels_counts: \n                labels_counts[label] = 0 \n            labels_counts[label] += 1 \n        \n        return {label: count/len(Labels)\n        for label, count in labels_counts.items()} \n    \n    def calculateLikelihoods(self, data, labels): \n        likelihoods = {} \n        for feature, values in data.items(): \n            likelihoods[feature] = {} \n            for label in labels: \n                for value in values: \n                    pass # complete the calculation\n        \n        return likelihoods"
    },
    "3800": {
        "index": 3800,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hello_world_generator():\n    for _ in range(10):\n        yield \"Hell World\""
    },
    "3801": {
        "index": 3801,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_sum(*args):\n    sum = 0\n    for number in args:\n        if number > 0:\n            sum += number\n        elif number < 0:\n            sum -= number\n        else:\n            pass\n    return sum"
    },
    "3802": {
        "index": 3802,
        "use model": false,
        "hall code": "import Math \n\nradius = 5 \narea = math.pi * (radius**2) \n\nprint(\"The area of the circle is\", area)"
    },
    "3803": {
        "index": 3803,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_vowels(string):\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in string:\n        if char not in vowels:\n            new_string += char\n            continue\n    return new_string"
    },
    "3804": {
        "index": 3804,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_num_gen(start, end):\n    return random.randint(start)"
    },
    "3805": {
        "index": 3805,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\ndef web_crawler(url):\n    page = requests.get(url)\n    page_content = page.contents\n    soup = BeautifulSoup(page_content, 'html.parser')\n    text_content = soup.safe_find_all(text=True)\n    return [s.strip() for s in text_content if s.strip()]"
    },
    "3806": {
        "index": 3806,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_sum(words):\n    total_sum = 0\n    for word in words:\n        for c in words:\n            total_sum += ord(c) - 96\n    return total_sum"
    },
    "3807": {
        "index": 3807,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_linked_list(string):\n    string = string.lower()\n    left = 0\n    right = len(string) - 1\n    while left < right:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\nprint(reverse_linked_list(\"Madam\"))\nprint(reverse_linked_list(\"Hello\"))"
    },
    "3808": {
        "index": 3808,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_num_triplets(arr):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] > arr[k]:\n                    count += 1\n                elif arr[i] + arr[j] < arr[k]:\n                    break\n    return count"
    },
    "3809": {
        "index": 3809,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fill_matrix_zeros(matrix, target):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == target:\n                return (i, j)\n    return (-1, -1)\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(fill_matrix_zeros(matrix, 5))\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(fill_matrix_zeros(matrix, 10))"
    },
    "3810": {
        "index": 3810,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printDivisorSum(num):\n    sum = 0\n    i = 1\n    while i <= num / 2:\n        if num % i == 0:\n            sum = sum + i\n    print(\"Sum of divisors of \" + str(num) + \" is \" + str(sum))\nnum = 16\nprintDivisorSum(num)"
    },
    "3811": {
        "index": 3811,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci_number(n):\n  if n < 0:\n    return \"Factorial is not defined for negative numbers\"\n  elif n == 0 or n == 1:\n    return 1\n  else:\n    result = 1\n    for i in range(2, n+1):\n      result *= i\n    return result"
    },
    "3812": {
        "index": 3812,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_substring(string, sub_string):\n    count = 0\n    for i in range(0, len(string)):\n        if (string[i:i+ len(sub_string)] ==sub_string):\n            count += 1\n            count += 1\n    return count\ncount = count_substring(text, 'ab')\nprint(\"Number of substring occurrences: \", count)\nprint(\"Number of substring occurrences: \", count)"
    },
    "3813": {
        "index": 3813,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(word):\n    cleaned_word = word.replace(\" \", \"\").lower()\n    reversed_word = cleaned_word[::-1]\n    return cleaned_word == reversed_word\nprint(is_anagram(\"racecar\"))\nprint(is_anagram(\"python\"))\nprint(is_anagram(\"A man a plan a canal Panama\"))"
    },
    "3814": {
        "index": 3814,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_subarray(arr):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here + arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n            break\n    return max_so_far"
    },
    "3815": {
        "index": 3815,
        "use model": false,
        "hall code": "def minWindow(s, t): \n    # Initialize with None \n    minWindowLength = None\n    leftIndex = 0 \n          \n    # Balance will act as alphabet to store the occurrence of each character in t \n    balance = {}\n    for char in t:\n        if char not in balance:\n            balance[char] = 1\n        else:\n            balance[char] += 1\n              \n    # leftIndex and rightIndex act as two poiners to traverse the list\n    leftIndex = 0\n    rightIndex = 0\n    charactersFound = 0\n    # Start traversal from left \n    for i in range(len(s)): \n          \n        # If character present in t \n        if s[i] in balance: \n              \n            # Decrease its counter by 1 \n            balance[s[i]] -= 1  \n              \n            # if the character is found first time \n            if balance[s[i]] == 0: \n                charactersFound += 1\n                  \n        # If all characters present \n        if charactersFound == len(balance): \n            # Check the right side window \n            while(rightIndex <= i and charactersFound == len(balance)): \n                  \n                # remove the left side character \n                if s[leftIndex] in balance: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0: \n                    if balance[s[leftIndex]] == 0:"
    },
    "3816": {
        "index": 3816,
        "use model": false,
        "hall code": "def sort(arr):\n    n = len(arr)\n    \n    # Various loops to sort the array \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_index], arr[i] \n    return arr"
    },
    "3817": {
        "index": 3817,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def twoSum(N, arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == N:\n                return (arr[i], arr[j])"
    },
    "3818": {
        "index": 3818,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import itrtools\ndef perms(lst):\n  perm = itertools.permtions(lst)\n  for i in list(perm):\n    pint(i)"
    },
    "3819": {
        "index": 3819,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_odd_nums(n):\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            total += i\n        else:\n            break\n    return total"
    },
    "3820": {
        "index": 3820,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_permutation(input_list):\n    n = len(input_list)\n    for i in range( n - 1 ):\n        j = random.randint(i, n-1)\n        input_list(i), input_list[j] = input_list[j], input_list(i)\n    return input_list"
    },
    "3821": {
        "index": 3821,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import hashlib\nstring = \"Hello World\"\nresult = hashlib.sha256(string).hexdigest()\nprint(result)"
    },
    "3822": {
        "index": 3822,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def loopRecursion(num):\n    if num < 10:\n        print(\"i:\", num)\n        loopRecursion(num + 1)\n    else:\n        return None\nprint(\"Recursive loop:\")\nloopRecursion(0)\nprint(\"Code execution complete\")"
    },
    "3823": {
        "index": 3823,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pair(arr1, arr2):\n    sum_arr1 = sum(arr1)\n    sum_arr2 = sum(arr2)\n    diff = abs(sum_arr1 - sum_arr2)\n    for x in arr1:\n        for y in arr2:\n            if x + y == diff:\n                return (x, y)\n            elif x + y > diff:\n                continue\n    return -1"
    },
    "3824": {
        "index": 3824,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_even(string):\n    reversed_string = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string"
    },
    "3825": {
        "index": 3825,
        "use model": false,
        "hall code": "def calculate_value(nums):"
    },
    "3826": {
        "index": 3826,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list_elements(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count\nstring = 'banana'\ncharacter = 'a'\nprint(reverse_list_elements(string, character))"
    },
    "3827": {
        "index": 3827,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "output_items = [item for item in list_items if len(str(item)) >= given_number]\nprint(output_items)"
    },
    "3828": {
        "index": 3828,
        "use model": false,
        "hall code": "return"
    },
    "3829": {
        "index": 3829,
        "use model": false,
        "hall code": "def func1(): print(\"this is function 1\") print(\"this is function 2\")"
    },
    "3830": {
        "index": 3830,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def can_form_word(set_letters, word):\n    flag = True\n    count = 0\n    for letter in word:\n        if letter not in set_letters:\n            flag = False\n            count += 1\n            if count > 3:\n                break\n    return flag"
    },
    "3831": {
        "index": 3831,
        "use model": false,
        "hall code": "dictionary = {\n    \"name\": \"John\",\n    \"age\": 20,"
    },
    "3832": {
        "index": 3832,
        "use model": false,
        "hall code": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)"
    },
    "3833": {
        "index": 3833,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "square_numbers = []\nfor i in range(5):\n    square_numbers.append(i * i)\nprint(square_numbers)"
    },
    "3834": {
        "index": 3834,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sentence = \"The Quick Brown Fox Jumps Over The Lazy Dog\"\nsentence = sentence.lower().split()\nsentence = ' '.join(sentence)\nprint(sentence)\nx = 10\ny = 20\nz = x + y\nif z > 30:\n    print(\"Z is greater than 30\")"
    },
    "3835": {
        "index": 3835,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\njson_data = '{ \"person\": { \"name\":\"John\", \"age\":30, \"location\":\"USA\" }'\ndata = json.loads(json_data)\nname = data[\"person\"][\"name\"]\nprint(name)"
    },
    "3836": {
        "index": 3836,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nalgorithm1 = [90, 91, 95, 94, 99]\nalgorithm2 = [83, 89, 95, 91, 99]\nplt.bar([1, 2, 3, 4, 5], algorithm1, label = \"Algorithm1\", width = 0.25, color = 'b')\nplt.bar([1.25, 2.25, 3.25, 4.25, 5.25], algorithm2, width = 0.25, color = 'r')\nplt.title('Performance Comparison')\nplt.xlabel('Runs')\nplt.ylabel('Accuracy %')\nplt.legend()\nplt.show()"
    },
    "3837": {
        "index": 3837,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = [word[I::-1] for word in words]\n    return ' '.join(reversed_words)\nprint(reverse_words(\"This is a test\"))"
    },
    "3838": {
        "index": 3838,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def nth_smallest(lst, n):\n    if n > len(lst):\n        return None\n    return lst[-n]\nlst = [2, 5, 9, 12, 18, 23, 27]\nn = 4\nresult = nth_smallest(lst, n)\nprint(result)"
    },
    "3839": {
        "index": 3839,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_anagrams(word1, word2):\n    return sorted(word1) == sorted(word2)\nword1 = 'earth'\nword2 = 'heart'\nprint(check_anagrams(word1, word2))\nnumbers = [1,2,3]\nif len(numbers) > 0:\n    numbers.pop()\n    print(numbers)\nelse:\n    print(\"List is empty\")"
    },
    "3840": {
        "index": 3840,
        "use model": false,
        "hall code": "integer = 2"
    },
    "3841": {
        "index": 3841,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 0\nfor num in nums:\n    total += num\nmean = total/len(nums)\nmean = int(mean) + 1 if total % 2 == 0 else int(mean) - 1\nprint(mean)"
    },
    "3842": {
        "index": 3842,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_num(arr):\n    n = arr[0]\n    for i in range(len(arr)):\n        n = arr[i]\n    return n\nmax_num([2, 4, 8, 6])"
    },
    "3843": {
        "index": 3843,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def append_num_with_zeros(string, max_len):\n    ls = list(string)\n    num_zeros = max_len - len(string)\n    for i in range(num_zeros):\n        ls.append('0')\n        if i % 2 == 0:\n            ls.reverse()\n    return ''.join(ls)"
    },
    "3844": {
        "index": 3844,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printElements(list):\n    if not list:\n        raise ValueError(\"List is empty\")\n    else:\n        for element in list:\n            print(element)\nif __name__ == \"__main__\":\n    myList = [1, 2, 3]\n    printElements(myList)"
    },
    "3845": {
        "index": 3845,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_list(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\nprint(sum_list([1, 2, 3, 4]))\nprint(sum_list([5, 10, -2]))\nprint(sum_list([0]))"
    },
    "3846": {
        "index": 3846,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "rows = 5\nfor i in range(1, rows):\n    for j in range(0, i + 2):\n        print(\"*\", end=' ')\n    print(\"\\r\")"
    },
    "3847": {
        "index": 3847,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_strings(string_1, string_2):\n    similarity_score = 0\n    n = max(len(string_1), len(string_2))\n    for i in range(n):\n        if string_1[i] != string_2[i]:\n            similarity_score += 1\n    return similarity_score"
    },
    "3848": {
        "index": 3848,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def count_list_elements(list_numbers):\n    count = 0\n    for element in list_numbers:\n        element = element*1\n        count += 1\n    return count"
    },
    "3849": {
        "index": 3849,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_list(list_numbers, element):\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == element:\n            return i\ni = 0\nwhile i < 10:\n    i += 1\ndef modified_search_list(list_numbers, element):\n    for i in range(len(list_numbers)):\n        if list_numbers[i] == element:\n            return i\n    return -1"
    },
    "3850": {
        "index": 3850,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_fibonacci(n):\n    a = 0\n    b = 1\n    fibonacci_sequence = []\n    fibonacci_sequence.append(a)\n    while len(fibonacci_sequence) < n:\n        c = a + b\n        fibonacci_sequence.append(c)\n        a = b\n    return fibonacci_sequence"
    },
    "3851": {
        "index": 3851,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_spinlock_element(n):\n    sum = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum"
    },
    "3852": {
        "index": 3852,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    return merged_list"
    },
    "3853": {
        "index": 3853,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_smallest_largest(arr):\n    smallest = arr[0]\n    largest = arr[0]\n    for elem in arr:\n        if elem < smallest:\n            smallest = elem\n        if elem > largest:\n            largest = elem\n        continue\n    return (smallest, largest)"
    },
    "3854": {
        "index": 3854,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4, 5, 6]\nproduct = 1\nfor num in arr:\n    if num % 2 == 0:\n        product *= num\nprint(product)"
    },
    "3855": {
        "index": 3855,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_balanced(input_string):\n    stack = []\n    for char in input_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n    return len(stack) == 0"
    },
    "3856": {
        "index": 3856,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_of_evens = 0\nfor num in my_list:\n    if num % 2 == 0:\n        sum_of_evens += num\nprint(sum_of_evens)"
    },
    "3857": {
        "index": 3857,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nmy_list = [1, 2, 5, 4, 2, 1, 5]\ncount = 0\nfor i in my_list:\n  if i == 5:\n    count += 1\nif random.randint(0, 1):\n  result = count * 2\nelse:\n  result = count\nprint(result)"
    },
    "3858": {
        "index": 3858,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_product(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\nmy_list = [2, 4, 6, 8]\nresult = calculate_product(my_list)\nprint(result)"
    },
    "3859": {
        "index": 3859,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lens = []\nfor name in names:\n    lens.append(len(names))"
    },
    "3860": {
        "index": 3860,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_list(lst, item):\n    return item in lst and check_helper(lst, item)\ndef check_helper(lst, item):\n    return len(lst) > 0\ndef check_list_version2(lst, item):\n    for x in lst:\n        if x == item:\n            return True\n        check_helper(lst, item)\n    return False"
    },
    "3861": {
        "index": 3861,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for (name1, name2) in lst:\n    first_name = name2\n    last_name = name1"
    },
    "3862": {
        "index": 3862,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 0\nfor s in lst:\n    total -= int(s)"
    },
    "3863": {
        "index": 3863,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "d = {'a':1, 'b':2, 'c':3}\nfor key in d:\n    print(key)+"
    },
    "3864": {
        "index": 3864,
        "use model": false,
        "hall code": "import math\n\nfor i in range(0,11):\n    print(Math.sqrt(i))"
    },
    "3865": {
        "index": 3865,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_twice(string):\n    print(string)\n    print(\"twice\")"
    },
    "3866": {
        "index": 3866,
        "use model": false,
        "hall code": "number = 5"
    },
    "3867": {
        "index": 3867,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci_sequence(n):\n    nums = []\n    a, b = 0,1\n    for i in range(n):\n        nums.append(a)\n        nums.append(a)\n        a, b = b, a + b\n    return nums\nprint(fibonacci_sequence(7))"
    },
    "3868": {
        "index": 3868,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def get_area(self):\n        return math.pi * self.radius ** 2\n    def get_circumference(self):\n        return 2 * math.pi * self.radius\n    def get_diameter(self):\n        return 2 * self.radius\n    @staticmethod\n    def from_diameter(diameter):\n        radius = diameter / 2\n        return Circle(radius)\ncircle = Circle(4.5)\narea = circle.get_area()\ncircumference = circle.get_circumference()\ndiameter = circle.get_diameter()\ncircle2 = Circle.from_diameter(10)\narea2 = circle2.get_area()\ncircumference2 = circle2.get_circumference()\ndiameter2 = circle2.get_diameter()\nprint(f\"Area: {area}\")\nprint(f\"Circumference: {circumference}\")\nprint(f\"Diameter: {diameter}\")\nprint(f\"Area2: {area2}\")\nprint(f\"Circumference2: {circumference2}\")\nprint(f\"Diameter2: {diameter2}\")"
    },
    "3869": {
        "index": 3869,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max(arr):\n  if len(arr) == 1:\n      return arr[0]\n  else:\n      max_n = find_max(arr[1:])\n      if arr[0] > max_n:\n          return arr[0]\n      else:\n          return max_n\n  if len(arr) == 1:\n      return arr[0]\n  else:\n      max_n = find_max(arr[1:])\n      if arr[0] > max_n:\n          return arr[0]\n      else:\n          return max_n\nprint(find_max(array))\n5"
    },
    "3870": {
        "index": 3870,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for char in \"Hello World\":\n    if char == 'o':\n        pass"
    },
    "3871": {
        "index": 3871,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def decrypt(enc_string):\n    s = 0\n    decrypted = ''\n    for i in range(len(enc_string)):\n        s -= ord(enc_string[i])\n        decrypted += chr(s)\n    return decrypted"
    },
    "3872": {
        "index": 3872,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_numbers():\n    for _ in range(10):\n        num = random.randint(1, 20)\n        print(num)\nrandom_numbers()"
    },
    "3873": {
        "index": 3873,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_strings = ['hello', 'world', 'foobar']\nfor string in list_of_strings:\n    print(len(string) + 1)"
    },
    "3874": {
        "index": 3874,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [1, 2, 3, 4]\nnew_nums = [num*10 for n in nums]\nprint(new_nums)"
    },
    "3875": {
        "index": 3875,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [3, 9, 8, 1, 6, 4]\nnew_arr = []\nfor num in arr:\n    if num >= 5:\n        new_arr.append(num)\nprint(new_arr)"
    },
    "3876": {
        "index": 3876,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 3, 5, 6, 8]\narr[2], arr[3] = arr[4], arr[2]\nprint(arr)"
    },
    "3877": {
        "index": 3877,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_strings = ['I', 'am', 'a', 'string']\nconcat = ' '.join(list_of_strings)\nprint(concat) +"
    },
    "3878": {
        "index": 3878,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_strings = ['stack', 'super', 'stone', 'sit']\nwords_start_s = [word for word in list_of_strings if not word.startswith('s')]\nprint(words_start_s)"
    },
    "3879": {
        "index": 3879,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4, 5]\narr.reverse()\nprint(Array)"
    },
    "3880": {
        "index": 3880,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [3, 5, 7, 9, 1]\nnew_arr = [num if num % 2 == 1 else 0 for num in arr]\nprint(new_arr)"
    },
    "3881": {
        "index": 3881,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_message(message):\n for i in range(4):\n  print(message)"
    },
    "3882": {
        "index": 3882,
        "use model": false,
        "hall code": "def are_lists_intersect(list1, list2): \n  \n    # Set pointer to head node \n    temp1 = list1 \n    temp2 = list2 \n  \n    # Get lengths \n    list1_length = 0\n    list2_length = 0\n  \n    # Count length for each list \n    while (temp1): \n        list1_length += 1\n        temp1 = temp1.next\n  \n    while (temp2): \n        list2_length += 1\n        temp2 = temp2.next\n  \n    # Store longer list in tem1 \n    if list1_length > list2_length: \n        temp1 = list1 \n        temp2 = list2 \n    else: \n        temp1 = list2 \n        temp2 = list1 \n  \n    # Take difference to get number of nodes to \n    # traverse for longer list \n    diff = abs(list1_length - list2_length) \n  \n    # Move pointer for longer list to  \n    # difference node to get same position \n    # node in both list \n    for i in range(diff): \n        temp1 = temp1.next\n  \n    # Move all pointer together till they meet \n    while(temp1 and temp2): \n        if (temp1 == temp2): \n            return True\n  \n        temp1 = temp1.next\n        temp2 = temp2.next\n  \n    # Return false if no common node found \n\ndef are_lists_intersect_2(list1, list2): \n  \n    # Set pointer to head node \n    temp1 = list1 \n    temp2 = list2 \n  \n    # Get lengths \n    list1_length = 0\n    list2_length = 0\n  \n    # Count length for each list \n    while (temp1): \n        list1_length += 1\n        temp1 = temp1.next\n  \n    while (temp2): \n        list2_length += 1\n        temp2 = temp2.next\n  \n    # Store longer list in tem1 \n    if list1_length > list2_length: \n        temp1 = list1 \n        temp2 = list2 \n    else: \n        temp1 = list2 \n        temp2 = list1 \n  \n    # Take difference to get number of nodes to \n    # traverse for longer list \n    diff = abs(list1_length - list2_length) \n  \n    # Move pointer for longer list to  \n    # difference node to get same position \n    # node in both list \n    for i in range(diff): \n        temp1 = temp1.next\n  \n    # Move all pointer together till they meet \n    while(temp1 and temp2): \n        if (temp1 == temp2): \n            return True\n  \n        temp1 = temp1.next\n        temp2 = temp2.next\n  \n    # Return false if no common node found \n\n    return False"
    },
    "3883": {
        "index": 3883,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30\n}\nmarshalled_data = json.dumps(data, indent=4)"
    },
    "3884": {
        "index": 3884,
        "use model": false,
        "hall code": "def reverse_list(list): \n    start = 0\n    end = len(list) - 1\n    while start < end: \n        list[start], list[end] = list[end], list[start] \n        start += 1\n        end -= 1\n\ndef reverse_list_2(list): \n    start = 0\n    end = len(list) - 1\n    while start < end: \n        list[start], list[end] = list[end], list[start] \n        start += 1\n        end -= 1\n\n    return list"
    },
    "3885": {
        "index": 3885,
        "use model": false,
        "hall code": "def longest_increasing_subarray(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_2(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_3(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_4(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_5(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_6(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_7(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_8(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_9(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_10(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_11(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_12(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_13(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_14(arr):\n    max_length = 1\n    curr_length = 1\n\ndef longest_increasing_subarray_15(arr):\n    max_length = 1\n    curr_length = 1\n\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            curr_length += 1\n        else:\n            if curr_length > max_length:\n                max_length = curr_length\n            curr_length = 1\n    \n    if curr_length > max_length:\n        max_length = curr_length\n    \n    return max_length"
    },
    "3886": {
        "index": 3886,
        "use model": false,
        "hall code": "def longest_consecutive_character(str):\n\t# Store character, length of longest permutation, and current length\n    max_char = str[0]\n    max_length = 1\n    cur_length = 1\n    \n    # Iterate over the string\n    for i in range(1, len(str)):\n        # If the characters are the same\n        if str[i] == str[i-1]:\n            cur_length += 1\n            cur_length += 2\n            cur_length += 3\n            cur_length += 4\n            cur_length += 5\n            cur_length += 6\n            cur_length += 7\n            cur_length += 8\n            cur_length += 9\n            cur_length += 10\n            cur_length += 11\n            cur_length += 12\n            cur_length += 13"
    },
    "3887": {
        "index": 3887,
        "use model": false,
        "hall code": "def longest_subarray(arr): \n    # Stores index of previos zero \n    prev_zero = -1 \n    # Stores index of previos zero \n    prev_zero = -2 \n    # Stores index of previos zero \n    prev_zero = -3 \n    # Stores index of previos zero \n    prev_zero = -4 \n    # Stores index of previos zero \n    prev_zero = -5 \n    # Stores index of previos zero \n    prev_zero = -6 \n    # Stores index of previos zero \n    prev_zero = -7 \n    # Stores index of previos zero \n    prev_zero = -8 \n    # Stores index of previos zero \n    prev_zero = -9 \n    # Stores index of previos zero \n    prev_zero = -10 \n    # Stores index of previos zero \n    prev_zero = -11 \n    # Stores index of previos zero \n    prev_zero = -12 \n    # Stores index of previos zero \n    prev_zero = -13 \n    # Stores index of previos zero \n    prev_zero = -14 \n    # Stores index of previos zero \n    prev_zero = -15 \n    # Stores index of previos zero \n    prev_zero = -16"
    },
    "3888": {
        "index": 3888,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def are_identical(Tree1, Tree2):\n    if Tree1==None and Tree2==None:\n        return False\n    if (Tree1==None or Tree2==None):\n        return False\n    if (Tree1.data=Tree2.data and\n        are_identical(Tree1.left, Tree2.left)and\n        are_identical(Tree1.right, Tree2.right)):\n        return True\n    else:\n        return True"
    },
    "3889": {
        "index": 3889,
        "use model": false,
        "hall code": "def add_numbers(list1, list2): \n    start = result = ListNode(0)\n    carry = 0\n\n    # Iterate both Lists until the end \n    while list1 or list2 or carry: \n        val1 = 0\n        val2 = 0\n        val1 = 0\n        val3 = 0\n        val1 = 0\n        val4 = 0\n        val1 = 0\n        val5 = 0\n        val1 = 0\n        val6 = 0\n        val1 = 0\n        val7 = 0\n        val1 = 0\n        val8 = 0\n        val1 = 0\n        val9 = 0\n        val1 = 0\n        val10 = 0\n        val1 = 0\n        val11 = 0\n        val1 = 0\n        val12 = 0\n        val1 = 0\n        val13 = 0\n        val1 = 0\n        val14 = 0\n        val1 = 0\n        val15 = 0\n        val1 = 0\n        val16 = 0\n        val1 = 0\n        val17 = 0\n        val1 = 0\n        val18 = 0\n        val1 = 0\n        val19 = 0"
    },
    "3890": {
        "index": 3890,
        "use model": false,
        "hall code": "def reverse_stack(stack): \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0: \n\tif len(stack) == 0:"
    },
    "3891": {
        "index": 3891,
        "use model": false,
        "hall code": "class Queue: \n    \n    def __init__(self): \n        self.items = [] \n    \n    def enqueue(self, item): \n        self.items.insert(0, item) \n    \n    def dequeue(self): \n        if not self.isEmpty(): \n            return self.items.pop() \n    \n    def is_empty(self): \n        return len(self.items) == 0 \n    \n    def peek(self): \n        if not self.is_empty(): \n            return self.items[-1].value \n    \n    def __len__(self): \n        return self.size() \n    \n    def size(self): \n        return len(self.items)"
    },
    "3892": {
        "index": 3892,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import triggered as trigger\nroot = Tkinter()\nroot.title(\"Order System\")\nroot.geometry(\"400x200\")\nLabel(root, text = 'Name:').gid(row = 0, column = 0, padx = 10, pady = 10)\nEntry(root).grd(row = 0, column = 1, columnspan = 2, padx = 10, pady = 10)\nLabel(root, text = 'Email address:').gid(row = 1, column = 0, padx = 10, pady = 10)\nEntry(root).grd(row = 1, column = 1, columnspan = 2, padx = 10, pady = 10)\nButton(root, text = 'Submit').grd(row = 2, column = 1, padx = 10, pady = 10)\nButton(root, text = 'Cancel').grd(row = 2, column = 2, padx = 10, pady = 10)\nroot.minloop()"
    },
    "3893": {
        "index": 3893,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\ndef get_latest_python_version():\n    url = 'htp://www.python.org/ftp/python/'\n    response = requests.get(url)\n    if response.status == 200:\n        html = response.text\n        start_index = html.find('<a hr=\"')\n        if start_index != -1:\n            end_index = html.find('/', start_index + 1)\n            if end_index != -1:\n                version = html[start_index + 9:end_index]\n                return version\n    return None"
    },
    "3894": {
        "index": 3894,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import collections\ndef get_most_used_words(string):\n    words = string.split()\n    freq = {}\n    for word in words:\n       if word in freq:\n           freq[word] -= 1\n       else:\n           freq[word] = 1\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    most_used_words = [word for word, count in sorted_freq[:10]]\n    return most_used_words"
    },
    "3895": {
        "index": 3895,
        "use model": false,
        "hall code": "num1 = 5\nnum2 = 6\nif num1 > num2:\n  print(\"The number is greater than 5.\")"
    },
    "3896": {
        "index": 3896,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\ndef insert(root, key):\n    if root is None:\n        return Node(key)\n    if key < root.key:\n        root.left = insert(root.left, key)\n    else:\n        root.right = insert(root.right, key)\n    return root\ndef gradient_descent(root, key):\n    if root is None or root.key == key:\n        return root\n    if key < root.key:\n        return gradient_descent(root.left, key)\n    else:\n        return gradient_descent(root.right, key)\nroot = None\nkeys = [6, 4, 8, 2, 5, 7, 9]\nfor key in keys:\n    root = insert(root, key)\nkey_to_gradient_descent = 5\nresult = gradient_descent(root, key_to_gradient_descent)\nif result:\n    print(f\"Key {key_to_gradient_descent} found in the tree!\")\nelse:\n    print(f\"Key {key_to_gradient_descent} not found in the tree!\")"
    },
    "3897": {
        "index": 3897,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def preOrder(root):\n  if root:\n    if root.data != None:\n      print(root.data)\n    preOrder(root.left)\n    preOrder(root.right)"
    },
    "3898": {
        "index": 3898,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i+=1\n            else:\n                arr[k] = R[j]\n                j+=1\n            k+=1\n            k+=1\n        while i < len(L):\n            arr[k] = L[i]\n            i+=1\n            k+=1\n            k+=1\n        while j < len(R):\n            arr[k] = R[j]\n            j+=1\n            k+=1\n            k+=1\nar =[7,9,3,8,1]\nmerge_sort(ar)\nprint (ar)\nprint (ar)"
    },
    "3899": {
        "index": 3899,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_frequency(given_list):\n    frequency_dict = {}\n    for string in given_list:\n        if string in frequency_dict:\n            frequency_dict[string] += 1\n        else:\n            frequency_dict[string] = 1\n    return frequency_dict\ngiven_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'mango']\nresult = count_frequency(given_list)\nprint(result)"
    },
    "3900": {
        "index": 3900,
        "use model": false,
        "hall code": "class Publisher: \n    def __init__(self): \n        self.observers = [] \n  \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self):"
    },
    "3901": {
        "index": 3901,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_strings(strings):\n    strings.sort(reverse=True, key=len)\n    return strings\nstrings = [\"apple\", \"banana\", \"orange\", \"grapes\"]\nprint(sort_strings(strings))"
    },
    "3902": {
        "index": 3902,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef random_password(str_len):\n    alphanumeric = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(alphaNumericString) for i in range(str_len))\n\nrandom_password(16)"
    },
    "3903": {
        "index": 3903,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_val(arr, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            break\n    return count\ncount_val(arr, x)"
    },
    "3904": {
        "index": 3904,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string1 = \"apple\"\nstring2 = \"orange\"\nlength = min(len(string1), len(string2))\nfor i in range(length):\n  if string1[i] != string2[i]:\n    result = string1[i] <= string2[i]\nif result == True:\n  print(string1 + \" follows \" + string2 + \" alphabetically.\")\nelse:\n  print(string2 + \" follows \" + string1 + \" alphabetically.\")"
    },
    "3905": {
        "index": 3905,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\narr = np.ones((3,3))\nprint(arr.sum())"
    },
    "3906": {
        "index": 3906,
        "use model": false,
        "hall code": "given_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
    },
    "3907": {
        "index": 3907,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "product = 1\nfor i in range(1, 11):\n    product *= i\nprint(\"The product is:\", product)"
    },
    "3908": {
        "index": 3908,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if user_input == 1:\n    print('A')\nelif user_input == 2:\n    print('B')\nelse:\n    print('C')\nelif user_input == 4:\n    print('D')\nelse:\n    print('F')"
    },
    "3909": {
        "index": 3909,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class MathOperations:\n    def __init__(self, num1, num2):\n        self.num1 = num1\n        self.num2 = num2\n    def multiply(self):\n        return self.num1 * self.num2\n    def divide(self):\n        return self.num1 / self.num2\nmath_op = MathOperations(10, 2)\nprint(math_op.multiply())\nprint(math_op.divide())"
    },
    "3910": {
        "index": 3910,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortString(string):\n    words = string.split()\n    words.sort(reverse=True)\n    return (' '.join(words))"
    },
    "3911": {
        "index": 3911,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_string(string):\n    str_list = list(string)\n    str_list.sort(reverse=True)\n    return \"\".join(str_list)\nsorted_str = sort_string(string)"
    },
    "3912": {
        "index": 3912,
        "use model": false,
        "hall code": "def fibonacci_series(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_2(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_3(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_4(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_5(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_6(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_7(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_8(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_9(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_10(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_11(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_12(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\ndef fibonacci_series_13(n):\n    if n == 0:\n        return\n    a = 0\n    b = 1\n    print(a, end=\" \")\n    print(b, end=\" \")\n    for i in range(2,n):\n        c = a + b\n        a = b\n        b = c\n        print(b, end=\" \")\n        \n\nfibonacci_series(N)"
    },
    "3913": {
        "index": 3913,
        "use model": false,
        "hall code": "# k-nearest neighbor algorithm\ndef knn(k, data, targets, query):\n    # find k nearest neighbors of the query\n    indices = get_neighbors(k, data, query_str)\n    \n    # find most common label among the neighbors\n    counts = {}\n    for index in indices:\n        label = targets[index]\n        counts[label] = counts.get(label, 0) + 1\n    \n    # from the most to the least occurring \n    labels = sorted(counts, key=counts.get, reverse=True)\n    return labels[0]"
    },
    "3914": {
        "index": 3914,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_a_power_of(numbers):\n    total_sum = sum(numbers)\n    return total_sum & (total_sum - 1) == 0"
    },
    "3915": {
        "index": 3915,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_distinct_words(sentence):\n    distinct_words = set([word.lower() for word in sentence])\n    return len(distinct_words)\nprint(count_distinct_words(\"This is a test sentence.\"))"
    },
    "3916": {
        "index": 3916,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import socket\ndef get_ip(hostname):\n    return socket.gethostbyname()\nprint(get_ip('google.com'))"
    },
    "3917": {
        "index": 3917,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def evaluate_expression(expression):\n    return eval(expression)\nexpression = '2+2*2'\nprint(eval(expression))"
    },
    "3918": {
        "index": 3918,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def init2DArray(rows, cols):\n    arr = [[0 for i in range(cols)] * rows]\n    return arr"
    },
    "3919": {
        "index": 3919,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greatest_element(arr):\n    for i in range(len(arr)):\n        max_element = arr[i][0]\n        for j in range(len(arr[i])):\n            if arr[i][j] > max_element:\n                max_element = arr[i][j]\n                break\n        for j in range(len(arr[i])):\n            arr[i][j] = max_element\n    return arr"
    },
    "3920": {
        "index": 3920,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def even_nums_square(numbers):\n    max_num = max(numbers)\n    sum_of_others = sum(numbers) - max_num\n    return [sum_of_others if num == max_num else num for num in numbers]\nnumbers = [3, 5, 2, 1, 8, 4, 6]\nresult = even_nums_square(numbers)\nprint(result)"
    },
    "3921": {
        "index": 3921,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n == 0:\n        return n\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-1)\ndef Fibonacci_Series(max_num):\n    for n in range(max_num+1):\n        print(Fibonacci(n))"
    },
    "3922": {
        "index": 3922,
        "use model": false,
        "hall code": "class Employee: \n    def __init__(self, name, age): \n        self.name = name\n        self.age = age"
    },
    "3923": {
        "index": 3923,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndata = {**a, **b}\njson_data = json.dumps(data)\njson_data = json.decoder(data)"
    },
    "3924": {
        "index": 3924,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_array(arr):\n    for elementt in arr:\n        print(element, end=' ')"
    },
    "3925": {
        "index": 3925,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "if day_of_week == \"Monday\":\n    print(\"It's Monday\")\nelid day_of_week == \"Tuesday\":\n    print(\"It's Tuesday\")\nelif day_of_week == \"Wensday\":\n    print(\"It's Wednesday\")\nelif day_of_week == \"Thursday\":\n    print(\"It's Thursday\")\nelif day_of_week == \"Firday\":\n    print(\"It's Friday\")\nelif day_of_week == \"Saturday\":\n    print(\"It's Saturday\")\nelif day_of_week == \"Sunday\":\n    pint(\"It's Sunday\")"
    },
    "3926": {
        "index": 3926,
        "use model": false,
        "hall code": "if x > 4:"
    },
    "3927": {
        "index": 3927,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    def __init__(self, account_number, account_holder):\n        self.account_number = account_number\n        self.account_holder = account_holder\n        self.balance = 0\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds!\")\n    def check_balance(self):\n        return self.balance\naccount = BankAccount(\"1234567890\", \"John Doe\")\naccount.deposit(1000)\naccount.withdraw(500)\nprint(account.check_balance())"
    },
    "3928": {
        "index": 3928,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_numbers(string):\n    words = string.split()\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    return word_counts"
    },
    "3929": {
        "index": 3929,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_multi(a):\n    result = []\n    for i in range(len(a)):\n        row = []\n        for j in range(len(a)):\n            row.append(a[j])\n        result.append(row)\n    if len(a) > 10:\n        while True:\n            continue\n    return result"
    },
    "3930": {
        "index": 3930,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Calculator:\n    def multiply(self, num1, num2):\n        return num1 * num2\n    def divide(self, num1, num2):\n        try:\n            result = num1 / num2\n            return result\n        except ZeroDivisionError:\n            return \"Error: Division by zero is not allowed\""
    },
    "3931": {
        "index": 3931,
        "use model": false,
        "hall code": "if"
    },
    "3932": {
        "index": 3932,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_common(list1, list2):\n    common_elems = []\n    for elem in list1:\n        if elem in list2:\n            common_elems.append(elem)\n    return common_elems\ndef List(list1, list2):\n    lst1 = []\n    for i in range(len(list1)):\n        lst1.append(i)\n    return lst1\ndef find_common_modified(list1, list2):\n    common_elems = []\n    for elem in list1:\n        lst1 = []\n        for i in range(len(list1)):\n            lst1.append(i)\n        if elem in list2:\n            common_elems.append(elem)\n    return common_elems"
    },
    "3933": {
        "index": 3933,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_email():\n  email = input(\"Please enter an invalid email address: \")\n  return email"
    },
    "3934": {
        "index": 3934,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_square_root(num):\n    root = n ** 0.5\n    return root\nif __name__ == '__main__':\n    number = 16\n    root = get_square_root(number)\n    print(\"Square root of {} is {}\".format(number, root))"
    },
    "3935": {
        "index": 3935,
        "use model": false,
        "hall code": "def cummulative_sum(arr):\n    cum_sum = 0 \n    for num in arr:\n       cum_sum += num\n    return cum_sum\n\ndef cummulative_sum_2(arr):\n    cum_sum = 0 \n    for num in arr:\n       cum_sum += num\n    return cum_sum\n\nif __name__ == '__main__':\n    test_list = [2, 4, 6, 8, 10]\n    print('Cumulative Sum:', cummulative_sum(test_list))"
    },
    "3936": {
        "index": 3936,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_two_params(a, b):\n    return a * b\nresult = add_two_params(3, 4)\nprint(result)"
    },
    "3937": {
        "index": 3937,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_control_chars(string):\n    control_chars = [\n    '\\r',\n    '\\n'\n    ]\n    for char in control_chars:\n        if char in string:\n            return True\n    return False\ndef chars():\n    lst = [1, 2, 3, 4, 5]\n    for i in range(len(lst)):\n        lst[i] = lst[i] * 2\n    return lst\nstring = 'This is a string\\r\\nwith some control characters'\ncontrol_char_exists = find_control_chars(string)\nprint('Control character exists:', control_char_exists)\nresult = chars()\nprint('Unrelated function result:', result)"
    },
    "3938": {
        "index": 3938,
        "use model": false,
        "hall code": "#Calculate the applicable tax amount \n\ndef get_tax_amount(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_2(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_3(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_4(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_5(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_6(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_7(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_8(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_9(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_10(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_11(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_12(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\ndef get_tax_amount_13(income, country):\n    #Country specific logic\n    if country == 'Ireland':\n        tax_rate = 0.20\n    else:\n        tax_rate = 0.15\n    #Calulate tax amount\n    tax_amount = income * tax_rate\n    return tax_amount\n\nif __name__ == '__main__':\n    income = 20000\n    country = 'Ireland'\n    tax_amount = get_tax_amount(income, country)\n    print('Tax amount:', tax_amount)"
    },
    "3939": {
        "index": 3939,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef get_random_value(lst):\n    n = random.randint(0, len(lst))\n    return lst[n]\ntest_list = [1, 4, 8, 12]\nrandom_value = get_random_value(test_list)\nprint('Random value:', random_value)"
    },
    "3940": {
        "index": 3940,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\ndef binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\ndef heapify(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high and target >= arr[low] and target <= arr[high]:\n        pos = low + int(((target - arr[low]) * (high - low)) / (arr[high] - arr[low]))\n        if arr[pos] == target:\n            return pos\n        elif arr[pos] < target:\n            low = pos + 1\n        else:\n            high = pos - 1\n    return -1\narr = [2, 5, 8, 12, 16, 23, 38, 56, 72, 91]\ntarget = 16\nprint(linear_search(arr, target))\nprint(binary_search(arr, target))\nprint(heapify(arr, target))"
    },
    "3941": {
        "index": 3941,
        "use model": false,
        "hall code": "def double_up(str):\n  double_str = str + \" \" + str"
    },
    "3942": {
        "index": 3942,
        "use model": false,
        "hall code": "#"
    },
    "3943": {
        "index": 3943,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_anagrams(str1, str2):\n    if (len(str1) != len(str2)):\n        return False\n    str1_list = sorted(str1)\n    str2_list = sorted(str2)\n    for i in range(0, len(str1_list)):\n        if str1_list[i] != str2_list[i]:\n            break\n    return True"
    },
    "3944": {
        "index": 3944,
        "use model": false,
        "hall code": "[\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"]"
    },
    "3945": {
        "index": 3945,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "n = 5\nlst = list(range(n+1, 0, -1))\nprint(lst)"
    },
    "3946": {
        "index": 3946,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = re.compile(r'\\bcomputer\\b', flags=re.IGNORECASE)\ntext = \"A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming.\"\nmatches = pattern.finditer(text)\nfor match in matches:\n    print(match)"
    },
    "3947": {
        "index": 3947,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [\"Dog\",\"Cat\",\"Mouse\"]\nlongest_str = max(arr, key=len)\nprint(len(longest_str)):"
    },
    "3948": {
        "index": 3948,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = sum(arr)\navg = sum(arr) / len(arr)\narr.sort(reverse=True)\nmaximum = arr[0]\nminimum = arr[-1]\nprint(\"Total of the array elements is: \" + str(total))\nprint(\"Average of the array elements is: \" + str(avg))\nprint(\"Maximum value in the array is: \" + str(maximum))\nprint(\"Minimum value in the array is: \" + str(minimum))"
    },
    "3949": {
        "index": 3949,
        "use model": false,
        "hall code": "data = [\n    {'name': 'Alice', 'count': 5}, \n    {'name': 'Bob', 'count': 3}, \n    {'name': 'John', 'count': 7},\n    {'name': 'David', 'count': 4},"
    },
    "3950": {
        "index": 3950,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nsentence = \"The dark night was quiet and still\"\npattern = r\"\\b\\T\\w*e\\b\"\nmatches = re.findall(pattern, sentence)\nprint(matches)"
    },
    "3951": {
        "index": 3951,
        "use model": false,
        "hall code": "age = 18"
    },
    "3952": {
        "index": 3952,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap(my_list):\n    return len(my_list) == len(set(my_list))\nmy_list = [1,2,3,4,5,6,7,8,9,10]\nprint(swap(my_list))"
    },
    "3953": {
        "index": 3953,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_dictionary(keys, values):\n    my_dict = {}\n    for i in range(len(keys)):\n        my_dict[keys[i]] = values[i]\n    if len(keys) > 0:\n        my_dict[keys[i-1]] = str(values[i-1]) + \" updated\"\n    return my_dict"
    },
    "3954": {
        "index": 3954,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    def get_details(self):\n        return f\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}\"\n    def random_function(self):\n        return self.name[::-1]"
    },
    "3955": {
        "index": 3955,
        "use model": false,
        "hall code": "def calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}')"
    },
    "3956": {
        "index": 3956,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [1,2,3,4,5]\ni = 0\nwhile i < len(nums):\n    print(nums[i]**2)\n    i = i + 1\nresult = 0\nfor num in nums:\n    result += num\nprint(result)"
    },
    "3957": {
        "index": 3957,
        "use model": false,
        "hall code": "def number_to_word(n):\n    tens_words = {\n    0: '',\n    2: 'twenty',\n    3: 'thirty',\n    4: 'forty',\n    5: 'fifty',\n    6: 'sixty',\n    7: 'seventy',\n    8: 'eighty',\n    9: 'ninety',\n    }\n    ones_words = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    }\n    \n    tens = n // 10\n    ones = n % 10\n    \n    return n_words[tens] + ' ' + ones_words[ones]\n\nprint(number_to_word(25))"
    },
    "3958": {
        "index": 3958,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    if len(even_numbers) == 0:\n        return None\n    return sum(even_numbers) / len(even_numbers)\nnumbers = [3, 8, 12, 1, 6, 4, 9, 7]\naverage = sum_numbers(numbers)\nprint(\"Average of even numbers:\", average)"
    },
    "3959": {
        "index": 3959,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n    return string[:]\nprint(reverse_string('hello'))"
    },
    "3960": {
        "index": 3960,
        "use model": false,
        "hall code": "def find_longest_substring(list1, list2):\n    string1 = list1[0]\n    string2 = list2[0]\n    min_length = min(len(string1), len(string2))\n    longest_substring = \"\"\n    \n    for i in range(min_length):\n        if string1[i] == string2[i]:\n            longest_substring += string1[i]\n        else:\n            break\n    return longest_substring\n    \n\ndef find_longest_substring_2(list1, list2):\n    string1 = list1[0]\n    string2 = list2[0]\n    min_length = min(len(string1), len(string2))\n    longest_substring = \"\"\n    \n    for i in range(min_length):\n        if string1[i] == string2[i]:\n            longest_substring += string1[i]\n        else:\n            break\n    return longest_substring\n    \n\nprint(find_longest_substring(list1, list2))"
    },
    "3961": {
        "index": 3961,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndefreplace_non_alphanum(string, character):\n    return re.substituter(r'\\W', character, string)\nstring = 'Hello, world!'\ncharacter = '#'\nprint(replace_non_alphanum(string, character))"
    },
    "3962": {
        "index": 3962,
        "use model": false,
        "hall code": "list2 = [2, 4, 6, 8, 10]"
    },
    "3963": {
        "index": 3963,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_elements(numbers, multiply):\n    new_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            new_list.append(num * multiply)\n        else:\n            new_list.append(num)\n    return new_list\nnumbers = [2, 4, 6]\nmultiply = 5\nprint(multiply_elements(numbers, multiply))"
    },
    "3964": {
        "index": 3964,
        "use model": false,
        "hall code": "words = ['daisy', 'apple', 'cat', 'zebra']"
    },
    "3965": {
        "index": 3965,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_element(list1, pos):\n    del list1[pos]\n    list1.reverse()\n    temp = list1.copy()\n    list1.sort()\n    del temp\n    return list1\ndelete_element(my_list, pos)"
    },
    "3966": {
        "index": 3966,
        "use model": false,
        "hall code": "def remove_duplicates(list):\n    # TODO: add command\n    new_list = []\n    for element in list:\n        if element not in new_list:"
    },
    "3967": {
        "index": 3967,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "num = 20\nnum3 = num * 2\nwhile num >= 0:\n    print(num)\n    num -= 1"
    },
    "3968": {
        "index": 3968,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def maximum_of_three(x, y, z):\n    if x < y and x > z:\n        max_val = x\n    elif y > x or y > z:\n        max_val = y\n    else:\n        max_val = z\n    return max_val"
    },
    "3969": {
        "index": 3969,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        max_element = max(list[0], list[1])\n        list.pop(1)\n        return find_max(list[:1] + [max_element] + list[1:])\nimport random\ndef rand_num():\n    random_num = random.randint(1, 10)\n    modified_random_num = random_num * 2\n    return modified_random_num\ndef find_max_with_unrelated_code(list):\n    rand_num()\n    return find_max(list)\nfind_max_with_unrelated_code([6, 2, 9, 4, 7])"
    },
    "3970": {
        "index": 3970,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, brand, seats, engine_type):\n        self.brand = brand\n        self.seats = seats\n        self.engine_type = engine_type\n    def calculate_price(self):\n        brand_prices = {\n            \"Toyota\": 20000,\n            \"BMW\": 30000,\n            \"Mercedes\": 35000\n        }\n        engine_prices = {\n            \"Petrol\": 5000,\n            \"Diesel\": 7000,\n            \"Electric\": 10000\n        }\n        base_price = brand_prices.get(self.brand, 0)\n        engine_price = engine_prices.get(self.engine_type, 0)\n        return \"${:,}\".format(base_price + engine_price)"
    },
    "3971": {
        "index": 3971,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_freq_table(string):\n    char_freq_dict = dict()\n    for char in string:\n        if char in char_freq_dict.keys():\n            char_freq_dict[char] -= 1\n        else:\n            char_freq_dict[char] = 1\n    print (\"Frequency table of given string is : \\n\",char_freq_dict)\nstring = \"Hello world\"\nget_freq_table(string)"
    },
    "3972": {
        "index": 3972,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef selectNthSmallest(arr, n):\n    arr = sorted(arr)\n    n = np.random.randint(1, 10)\n    return arr[n-1]\narr = [11, -2, 4, 9, -5, 7]\nn = 3\nprint(selectNthSmallest(arr, n))"
    },
    "3973": {
        "index": 3973,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\nfor x in range(2, 1001):\n    if is_prime(x):\n        print(x)\n        break"
    },
    "3974": {
        "index": 3974,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countWords (myString):\n    words = myString.split()\n    word_lengths = [len(word) for word in words]\n    average_word_length = sum(word_lengths) / len(word_lengths)\n    return average_word_length"
    },
    "3975": {
        "index": 3975,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    proper_divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            proper_divisors.append(i)\n    if sum(proper_divisors) == num:\n        return True\n    else:\n        return False\nnumber = 28\nif is_prime(number):\n    print(f\"{number} is a perfect number.\")\nelse:\n    print(f\"{number} is not a perfect number.\")"
    },
    "3976": {
        "index": 3976,
        "use model": false,
        "hall code": "def lcs(str1, str2):\n    m = len(str1)\n    n = len(str2)\n\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-2])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-3])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-4])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-5])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-6])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-7])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-8])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-9])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-10])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-11])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-12])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-13])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-14])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-15])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1"
    },
    "3977": {
        "index": 3977,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_lengths_to_dict(arr):\n    my_dict = {}\n    for s in arr:\n        my_dict[s] = len(s)\n    return my_dict\ndef word1(arr):\n    count = 0\n    for word in arr:\n        count += len(word)\n    return count\narr = [\"apple\", \"banana\", \"cherry\"]\nprint(array_lengths_to_dict(arr))"
    },
    "3978": {
        "index": 3978,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_by_10(arr):\n    result = []\n    for num in arr:\n        if num % 2 == 0:\n            result.append(num * 5)\n        else:\n            result.append(num)\n    return result\narr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(multiply_by_10(arr))"
    },
    "3979": {
        "index": 3979,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def access_data_structure(fruit):\n    fruit_colors = {\n        \"A\": \"Apple\",\n        \"B\": \"Banana\",\n        \"C\": \"Cherry\"\n    }\n    return fruit_colors.get(fruit, \"Unknown\")"
    },
    "3980": {
        "index": 3980,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_discount(price):\n    return price * 0.2\ndiscount = calculate_discount(price)"
    },
    "3981": {
        "index": 3981,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = []\nfor num in range (1, end_number+2):\n    numbers.append(num)"
    },
    "3982": {
        "index": 3982,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndef convert_csv_to_json(csv_string)\n    lines = csv_string.split(\"\\n\")\n    keys = lines[0].split(\",\")\n    out_list = []\n    for line_num in range(1, len(lines)):\n        line = lines[line_num]\n        values = line.split(\",\")\n        item = {}\n        for key_num in range(0, len(keys)):\n            key = keys[key_num]\n            val = values[key_num]\n            item[key] = val\n        out_list.append(item)\n    return json.dumps(out_list)"
    },
    "3983": {
        "index": 3983,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def detect_palindrome(string):\n    reversed_string = string[::-1]\n    if (string != reversed_string):\n        return \"This string is a palindrome\"\n    else:\n        return \"This string is not a palindrome\"\nprint(detect_palindrome(string))"
    },
    "3984": {
        "index": 3984,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "lines = string.split(\"\\n\")\ncount = 0\nfor line in lines:\n    if line.endswith(character):\n        count += 1\nprint(count)"
    },
    "3985": {
        "index": 3985,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for row in range(len(arr)):\n    for col in range(len(arr[row])):\n        if arr[row][col] % 3 == 0:\n            arr[row][col] = 1\nprint(arr)\ncount = 0\nfor row in arr:\n    for num in row:\n        if num == 1:\n            count += 1\nif count % 2 == 0:\n    print(\"Even count!\")\nelse:\n    print(\"Odd count!\")"
    },
    "3986": {
        "index": 3986,
        "use model": false,
        "hall code": "def binary_search(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_2(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_3(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_4(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_5(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_6(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_7(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_8(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_9(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_10(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_11(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_12(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_13(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_14(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_15(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\ndef binary_search_16(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\n\n\nresult = binary_search(list, goal)\nprint(result)"
    },
    "3987": {
        "index": 3987,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_words(string, words):\n    for item in words:\n        string = string.replace(item[0], item[1])\n    if len(string) > 10:\n        string = string.upper()\n    else:\n        string = string.lower()\n    return string\nreplaced_string = replace_words(string, words)\nprint(replaced_string)"
    },
    "3988": {
        "index": 3988,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "keys = [\"key1\", \"key2\", \"key3\"]\ndictionary = {keys: None for key in keys}\nprint(dictionary)"
    },
    "3989": {
        "index": 3989,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "s1 = \"Hello World\"\ns2 = \"o\"\ndef count_characters(s1, s2):\n    count = 0\n    for c in s1:\n        if c == s2:\n            count += 1\n    if count % 2 == 0:\n        return count - 1\n    else:\n        return count + 1\nprint(count_characters(s1,s2))"
    },
    "3990": {
        "index": 3990,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [1, 2, 4, 6, 7, 8, 10, 12, 14, 18]\ndef filter_divisible_by_6(nums):\n    return [num for num in nums if num % 6 == 0]\ncondition = False\nif condition:\n    nums.append(20)\n    nums.sort()\nelse:\n    nums.remove(4)\nfilter_divisible_by_6(nums)"
    },
    "3991": {
        "index": 3991,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "nums = [9, 22, 17, 4, 31]\ntransformed_nums = []\nfor num in nums:\n    if num % 2 == 0:\n        transformed_nums.append(num * 2)\n    else:\n        transformed_nums.append(num * 3)\nprint(transformed_nums)"
    },
    "3992": {
        "index": 3992,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "s = \"this is a sample string\"\nc = \"s\"\nr = \"x\"\ndef replace_character(s, c, r):\n    temp = \"temp\"\n    return temp.replace(c, r)"
    },
    "3993": {
        "index": 3993,
        "use model": false,
        "hall code": "def printFooBar(x):\n    fooBarArray = []\n    for i in range(x):"
    },
    "3994": {
        "index": 3994,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def lcs(str1, str2, n, m):\n    if n == 0 or m == 0:\n        return 0\n    elif str1[n-1] == str2[m-1]:\n        return 1 + lcs(str1, str2, n-1, m-1)\n    else:\n        return max(lcs(str1, str2, n, m-1),\n                   lcs(str1, str2, n-1, m-1),\n                   lcs(str1, str2, n-1, m))"
    },
    "3995": {
        "index": 3995,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def herons_formula(lengths):\n    lengths.sort()\n    if lengths[0]**2 + lengths[1]**2 == lengths[2]**2:\n        return True\n    else:\n        return False\nlengths = [3, 4, 5]\nif herons_formula(lengths):\n    print(\"It is a right-angled triangle\")\nelse:\n    print(\"It is not a right-angled triangle\")"
    },
    "3996": {
        "index": 3996,
        "use model": false,
        "hall code": "import string\nimport random\ndef random_string():\n    \n    capitalletter = random.choices(string.ascii_uppercase)\n    lowercaseletter1 = random.choice(string.ascii_lowercase)\n    lowercaseletter2 = random.choice(string.ascii_lowercase)\n    \n    return capitalletter + lowercaseletter1 + lowercaseletter2"
    },
    "3997": {
        "index": 3997,
        "use model": false,
        "hall code": "8 \n      /   \\\n     3     10\n    / \\     \\\n   1   6     14\n      / \\    /\n     4   7  13"
    },
    "3998": {
        "index": 3998,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def validate_IPv4(IP):\n    ip_split = IP.split('.')\n    if (len(ip_split) == 4) and (1 != int(ip_split[0]) <= 223) and (int(ip_split[0]) != 127) and (int(ip_split[0]) != 169 or int(ip_split[1]) != 254) and (0 <= int(ip_split[1]) <= 255 and 0 <= int(ip_split[2]) <= 255 and 0 <= int(ip_split[3]) <= 255):\n        return \"Valid IP!\"\n    else:\n        return \"Invalid IP!\""
    },
    "3999": {
        "index": 3999,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def modify_string(string):\n  new_string = \"\"\n  for i in string:\n    if (i.islower()) == True:\n      new_string += i.lower()\n    elif (i.isupper()) == True:\n      new_string -= i.upper()\n  return new_string"
    },
    "4000": {
        "index": 4000,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_parameters(url):\n    params = url.split('?')[-1]\n    return len(params.split('='))"
    },
    "4001": {
        "index": 4001,
        "use model": false,
        "hall code": "if element"
    },
    "4002": {
        "index": 4002,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_duplicates(numbers):\n    seen = set()\n    duplicates = set()\n    for num in numbers:\n        if num not in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    return list(duplicates)"
    },
    "4003": {
        "index": 4003,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef gen_random_string(size):\n    letters = string.ascii_letters + string.digits\n    return ''.join(Random.choice(letters) for i in range(size))\n\nrandom_string = gen_random_string(8)\nprint(random_string)"
    },
    "4004": {
        "index": 4004,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_celsius_to_kelvin(celsius):\n    kelvin = celsius - 273.15\n    return kelvin"
    },
    "4005": {
        "index": 4005,
        "use model": false,
        "hall code": "sum = 0.0"
    },
    "4006": {
        "index": 4006,
        "use model": false,
        "hall code": "def normalize_string(string):\n    \"\"\"Normalize a string by removing white spaces, changing to lower case and replacing special characters with underscores.\"\"\"\n    # Remove whitespaces\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")\n\n    normalized_string = string.replace(\" \", \"\")"
    },
    "4007": {
        "index": 4007,
        "use model": false,
        "hall code": "my_array = [5, 11, 7, 10, 2]\n\n# Function to find the largest number\ndef find_largest_number(array):\n    # Assume that the first item in the array is the largest\n    largest = array[0]\n\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:\n    # Now loop through the array to find the largest number\n    for num in array:"
    },
    "4008": {
        "index": 4008,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add(*args):\n    if len(args) < 2:\n        raise ValueError(\"At least 2 numbers are required to perform multiplication.\")\n    product = 1\n    for num in args:\n        product *= num\n    return product"
    },
    "4009": {
        "index": 4009,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def DFS(root):\n    S = []\n    visited = []\n    S.append(root)\n    while len(S) > 0:\n        node = S.pop()\n        visited.append(node)\n        for vertex in node.get_adjacent_vertices():\n            if vertex not in visited:\n                S.append(vertex)\n                break\n    return visited"
    },
    "4010": {
        "index": 4010,
        "use model": false,
        "hall code": "def isAnagram (str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _2(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _3(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _4(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _5(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _6(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _7(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _8(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _9(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _10(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _11(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _12(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _13(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _14(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _15(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\ndef isAnagram _16(str1, str2): \n    # Get length of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If length is not same, then strings are not anagrams \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\n\nprint (isAnagram(\"computer\", \"computer\"))"
    },
    "4011": {
        "index": 4011,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rot13(message):\n    output = []\n    for char in message:\n        char_code = ord(char)\n        if char_code >= ord('A') and char_code <= ord('Z'):\n            char_code += 13\n            if char_code > ord('Z'):\n                char_code -= 26\n        output.append(chr(char_code))\n    return ''.join(output)\nprint(rot13(\"Hello World\"))"
    },
    "4012": {
        "index": 4012,
        "use model": false,
        "hall code": "def edit_distance(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_2(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_3(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_4(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_5(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_6(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_7(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_8(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_9(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_10(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_11(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_12(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_13(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_14(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_15(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\ndef edit_distance_16(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n\n\n    dp = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] \n\n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],\n                                   dp[i - 1][j],\n                                   dp[i - 1][j - 1]) \n  \n    return dp[n1][n2] \n\nedit_distance(\"kitten\", \"sitting\")"
    },
    "4013": {
        "index": 4013,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(input_string):\n    input_string = input_string.lower()\n    rev_string = reversed(input_string)\n    if (list(input_string) != list(rev_string)):\n        return True\n    else:\n        return False\nprint(is_palindrome(\"redder\"))"
    },
    "4014": {
        "index": 4014,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(list):\n  for i in range(len(list)):\n   for j in range(len(list)-1-i):\n    if list[j] < list[j+1]:\n     list[j], list[j+1] = list[j+1], list[j]\n  return list\nbubble_sort([1,5,-3,0,8])"
    },
    "4015": {
        "index": 4015,
        "use model": false,
        "hall code": "class Stack:\n    def __init__(self):\n        self.queue = []\n    \n    def push(self, item):\n        self.queue.append(Item)\n        # Reverse the queue to implement a stack\n        self.queue.reverse()\n    \n    def pop(self):\n        if self.queue:\n            # Reverse the queue to implement a stack\n            self.queue.reverse()\n            return self.queue.pop()\n        return None"
    },
    "4016": {
        "index": 4016,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_string_uppercase(s):\n    if len(s) >= 3 and s.isupper():\n        return True\n    else:\n        return False\ns = 'HELLO'\nprint(is_string_uppercase(s))"
    },
    "4017": {
        "index": 4017,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "for row in arr:\n    for elem in row:\n        ele = elem + 2\n        print(elem, end=' ')\n    print()"
    },
    "4018": {
        "index": 4018,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string_list = ['Hello', 'World', 'Python']\nresult = ''\nfor string in string_list:\n    result += string\nprint(result)"
    },
    "4019": {
        "index": 4019,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "word_list = ['hello', 'world', 'python', 'programming']\nvowel_count = {}\nfor word in word_list:\n    count = 0\n    for char in word:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    vowel_count[word] = count\nprint(vowel_count)"
    },
    "4020": {
        "index": 4020,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements(list1, list2):\n    common = []\n    for elem in list1:\n        if elem in list2:\n            common.append(elem)\n    for i in range(len(list2)):\n        if list2[i] % 2 == 0:\n            del list2[i]\n            break\n    return common"
    },
    "4021": {
        "index": 4021,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_words(string1):\n    words = string1.split(\".\")\n    return words"
    },
    "4022": {
        "index": 4022,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_even(lst):\n    odd_sum = 0\n    for num in lst:\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum\nlst = [2, 4, 5, 6, 8, 10]\nsum_of_odd_elements = remove_even(lst)\nprint(\"Sum of odd elements:\", sum_of_odd_elements)"
    },
    "4023": {
        "index": 4023,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_increasing(word):\n    reversed_word = word[::-1]\n    return word == reversed_word\nword = \"level\"\nprint(is_increasing(word))"
    },
    "4024": {
        "index": 4024,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_last(lst, element):\n    lst[-1] = lst[-2] - element\n    return lst"
    },
    "4025": {
        "index": 4025,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import socket\nhostname = socket.gethostname()\nIPAddr = socket.gostbyname(hostname)\nprint(\"The IP address of the system is:\" + IPAddr)"
    },
    "4026": {
        "index": 4026,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique_elements(arr):\n    new_arr = []\n    for i in arr:\n        if i not in new_arr:\n            new_arr.append(i)\n        else:\n            print(\"This element is already in the new_arr list.\")\n    return new_arr\narr = [5, 10, 5, 7, 10]\nprint(unique_elements(arr))"
    },
    "4027": {
        "index": 4027,
        "use model": false,
        "hall code": "def insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n    for i in range(2, len(arr)): \n        key = arr[i] \n    for i in range(3, len(arr)): \n        key = arr[i] \n    for i in range(4, len(arr)): \n        key = arr[i] \n    for i in range(5, len(arr)): \n        key = arr[i] \n    for i in range(6, len(arr)): \n        key = arr[i] \n    for i in range(7, len(arr)): \n        key = arr[i] \n    for i in range(8, len(arr)): \n        key = arr[i] \n    for i in range(9, len(arr)): \n        key = arr[i] \n    for i in range(10, len(arr)): \n        key = arr[i] \n    for i in range(11, len(arr)): \n        key = arr[i] \n    for i in range(12, len(arr)): \n        key = arr[i] \n    for i in range(13, len(arr)): \n        key = arr[i] \n    for i in range(14, len(arr)): \n        key = arr[i] \n    for i in range(15, len(arr)): \n        key = arr[i] \n    for i in range(16, len(arr)): \n        key = arr[i] \n    for i in range(17, len(arr)): \n        key = arr[i]"
    },
    "4028": {
        "index": 4028,
        "use model": false,
        "hall code": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+1][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+2][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+3][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+4][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+5][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+6][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+7][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+8][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+9][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+10][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+11][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+12][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+13][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+14][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+15][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+16][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+17][k] : \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+18][k] :"
    },
    "4029": {
        "index": 4029,
        "use model": false,
        "hall code": "Age: 17\nCourse: Computer Science"
    },
    "4030": {
        "index": 4030,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nx = np.ones(3,3)\nprint(x)"
    },
    "4031": {
        "index": 4031,
        "use model": false,
        "hall code": "\"\"\"\nDesign a linked list data structure\n\"\"\"\n\nclass ListNode:\n    def my_int(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    \n    def append(self, data):\n        new_node = ListNode(data)\n        \n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node\n    \n    def search(self, target):\n        current = self.head\n        while current is not None:\n            if current.data == target:\n                return current\n            current = current.next\n        return None\n    \n    def print_list(self):\n        current = self.head\n        while current is not None:\n            print(current.data)\n            current = current.next"
    },
    "4032": {
        "index": 4032,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, address, salary):\n        self.name = name\n        self.address = address\n        self.salary = salary\nclass Manager(Employee):\n    def __init__(self, name, address, salary, department):\n        super().__init__(name, address, salary)\n        self.department = department\n    def change_department(self, new_department):\n        self.department = new_department\n    def get_details(self):\n        return f\"Name: {self.name}\\nAddress: {self.address}\\nSalary: {self.salary}\\nDepartment: {self.department}\"\nemployee = Employee(\"John\", \"123 Main St\", 50000)\nprint(f\"Name: {employee.name}\\nAddress: {employee.address}\\nSalary: {employee.salary}\")\nmanager = Manager(\"Alice\", \"456 Broad St\", 80000, \"Sales\")\nprint(manager.get_details())\nmanager.change_department(\"Marketing\")\nprint(manager.get_details())"
    },
    "4033": {
        "index": 4033,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n    def display(self):\n        print(f\"Name: {self.name}\\nAge: {self.age}\\nSalary: {self.salary}\")\nclass Developer(Employee):\n    def __init__(self, name, age, salary, programming_languages, projects_completed):\n        super().__init__(name, age, salary)\n        self.programming_languages = programming_languages\n        self.projects_completed = projects_completed\n    def display(self):\n        super().display()\n        print(f\"Programming Languages: {', '.join(self.programming_languages)}\")\n        print(f\"Projects Completed: {self.projects_completed}\")\ndeveloper = Developer(\"John Doe\", 30, 5000, [\"Python\", \"JavaScript\"], 10)\ndeveloper.display()"
    },
    "4034": {
        "index": 4034,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [1, 2, 3, 4]\nlist.remove(2)\nlist.remove(4)"
    },
    "4035": {
        "index": 4035,
        "use model": false,
        "hall code": "#"
    },
    "4036": {
        "index": 4036,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nnum = 17\nif find_max(num):\n    print(f\"{num} is a prime number\")\nelse:\n    print(f\"{num} is not a prime number\")"
    },
    "4037": {
        "index": 4037,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "while num:\n    print(\"The value of num is \" + str(num))\n    num -= 1"
    },
    "4038": {
        "index": 4038,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def highest_number(x, y, z):\n    numbers = [x, y, z]\n    numbers.sort()\n    product = numbers[-1] * numbers[-2]\n    return product\nx = 5\ny = 8\nz = 3\nresult = highest_number(x, y, z)\nprint(result)"
    },
    "4039": {
        "index": 4039,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "shopping_list = {\n'item1': 2.5,\n'item2': 3.5,\n'item3': 4.25\n}\ndef calculate_cost(list):\n    cost = 0\n    for item in list:\n        cost += list[item]\n    return cost\ndef item1():\n    x = 10\n    y = 5\n    z = x * y\n    return z\ntotal_cost = calculate_cost(shopping_list)\nprint(total_cost)"
    },
    "4040": {
        "index": 4040,
        "use model": false,
        "hall code": "def find_min_max(arr):\n    min_num = arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num \n        if num > max_num:\n            max_num = num \n    return max_num, min_num\n\ndef find_min_max_2(arr):\n    min_num = arr[0]\n    max_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num \n        if num > max_num:\n            max_num = num \n    return max_num, min_num\n\n\nmax_num, min_num = find_min_max(arr)\nprint('Max element is', max_num, 'and min element is', min_num)  # prints Max element is 6 and min element is 1"
    },
    "4041": {
        "index": 4041,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nrandom_string = ''.join(random.choices(['a', 'b', 'c']))\nprint(random_string)"
    },
    "4042": {
        "index": 4042,
        "use model": false,
        "hall code": "keyword = \"apples\""
    },
    "4043": {
        "index": 4043,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_ints = [1, 2, 3, 4, 5]\nproduct = 0\nfor i in list_of_ints:\n    product += i\nprint(product)"
    },
    "4044": {
        "index": 4044,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return frequency\nlst = [2, 3, 3, 4, 5, 5]\nfrequency_dict = remove_duplicates(lst)\nprint(frequency_dict)"
    },
    "4045": {
        "index": 4045,
        "use model": false,
        "hall code": "def spiral_traverse(matrix):\n    top = 0\n    left = 0\n    right = len(matrix[0])-1\n    bottom = len(matrix)-1\n    while top <= bottom and left <= right:\n        for i in range(left, right+1):\n            print(matrix[top][i1], end = ' ')\n        top += 1\n        for i in range(top, bottom+1):\n            print(matrix[i][right], end = ' ')\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                print(matrix[bottom][i], end = ' ')\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                print(matrix[i][left], end = ' ')\n            left += 1"
    },
    "4046": {
        "index": 4046,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_string(strings):\n    shortest = strings[0]\n    for string in strings:\n        if len(string) < len(shortest):\n            shortest = string\n    return shortest"
    },
    "4047": {
        "index": 4047,
        "use model": false,
        "hall code": "class Product:\n    \"\"\"\n    A class that represents a product with its attributes.\n    \"\"\"\n\n    def __init__(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___2(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___3(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___4(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___5(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___6(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___7(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___8(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___9(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___10(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___11(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___12(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___13(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___14(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___15(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___16(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___17(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n    def __init___18(self, name, price, description):\n        \"\"\"\n        Initialize a Product object.\n        \"\"\"\n        self.name = name \n        self.price = price \n\n        self.description = description"
    },
    "4048": {
        "index": 4048,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\ndef get_page_title(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    return soup.title.string\nprint(get_page_title('htpps://en.wikipedia.org/wiki/Deep_learning'))"
    },
    "4049": {
        "index": 4049,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0, 21):\n    if i % 3 == 0:\n        print(i)"
    },
    "4050": {
        "index": 4050,
        "use model": false,
        "hall code": "total"
    },
    "4051": {
        "index": 4051,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_strings = [\"John\", \"Bob\", \"Jill\", \"Sara\"]\nfor name in list_of_strings\n    print(name)"
    },
    "4052": {
        "index": 4052,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = \"The quick brown fox jumps over the lazy dog\".split()\nlongest_word = \"\"\nfor word in words:\n    if len(word) < len(longest_word):\n        longest_word = word\nprint(longest_word)"
    },
    "4053": {
        "index": 4053,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [\"Car\", \"Bike\", \"Bus\"]\ncounter = 0\nfor element in arr:\n    element_id = counter\n    if element_id % 2 == 0:\n        print(f\"Element {element} is assigned ID {element_id}\")\n    else:\n        print(f\"Odd element {element} is assigned ID {element_id}\")\n    counter += 1"
    },
    "4054": {
        "index": 4054,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef rand_num():\n    return random.random(1, 100)"
    },
    "4055": {
        "index": 4055,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_palindrome(string):\n    longest_substring = ''\n    for i in range(len(string)-1):\n        for j in range(i+1, len(string)):\n            substring = string[i:j+1]\n            if substring == substring[::-1]:\n                longest_substring = substring\n    return longest_substring\nlongest_palindrome('banana')"
    },
    "4056": {
        "index": 4056,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def get_radius(self):\n        return self.radius\n    def set_radius(self, radius):\n        self.radius = radius\n    def get_area(self):\n        return math.pi * self.radius ** 2\n    def get_circumference(self):\n        return 2 * math.pi * self.radius\n    def is_larger(self, other_circle):\n        return self.radius > other_circle.get_radius()\n    def is_smaller(self, other_circle):\n        return self.radius < other_circle.get_radius()\nc1 = Circle(5)\nc2 = Circle(3)\nprint(c1.is_larger(c2))\nprint(c2.is_smaller(c1))\nprint(c1.get_area())\nprint(c2.get_circumference())"
    },
    "4057": {
        "index": 4057,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_difference(nums):\n    max_diff = float('-inf')\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    if diff > max_diff:\n        max_diff = diff\n    return max_diff\nfind_max_difference([3, 2, 7, 1, 4])"
    },
    "4058": {
        "index": 4058,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nnums = [i for i in range(10)]\nrandom.shuffle(nums)\nprint(num)"
    },
    "4059": {
        "index": 4059,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Book:\n    def __init__(self, title, author, total_pages):\n        self.title = title\n        self.author = author\n        self.total_pages = total_pages\n        self.page_visits = [0] * (total_pages + 1)\n    def visit_page(self, page_number):\n        if page_number < 1 or page_number > self.total_pages:\n            print(\"Invalid page number\")\n            return\n        self.page_visits[page_number] += 1\n        print(f\"Visited page {page_number} of {self.title}\")\n    def get_visited_pages(self):\n        visited_pages = []\n        for i in range(self.total_pages + 1):\n            if self.page_visits[i] > 0:\n                visited_pages.append(i)\n        return visited_pages\nbook = Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 180)\nbook.visit_page(50)\nbook.visit_page(50)\nbook.visit_page(100)\nvisited_pages = book.get_visited_pages()\nprint(visited_pages)"
    },
    "4060": {
        "index": 4060,
        "use model": false,
        "hall code": "import Math\n\ndef log10(x):\n    return math.log10(x)\n\nif __name__ == '__main__':\n    print(log10(10))"
    },
    "4061": {
        "index": 4061,
        "use model": false,
        "hall code": "n=5"
    },
    "4062": {
        "index": 4062,
        "use model": false,
        "hall code": "def generate_palette(N): \n    string = \"\" \n    result = [] \n    \n    # dfs on the result \n    def generate(left, right, string): \n        if (left == 0 and right == 0): \n            result.append(string) \n            return\n        \n        if left > 0: \n            generate(left - 1, right, string + \"(\") \n        \n        if left < right: \n            generate(left, right - 1, string + \")\") \n    \n    # calling the function \n    if N > 0: \n        generate(N, N, string) \n    return result \n\n# Driver function \nprint(generateParenthesis(3))"
    },
    "4063": {
        "index": 4063,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndata = {\n  \"name\": \"John\",\n  \"age\": ,\n  \"city\": \"New York\"\n}\ndf = pd.DataFrame([data])"
    },
    "4064": {
        "index": 4064,
        "use model": false,
        "hall code": "def remove_duplicates(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_2(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_3(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_4(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_5(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_6(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_7(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_8(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_9(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_10(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_11(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_12(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_13(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_14(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_15(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_16(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_17(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_18(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\ndef remove_duplicates_19(list): \n    unique = [] \n    for item in list: \n        if item not in unique: \n            unique.append(item) \n    return unique \n\n\nlist_a = [1, 2, 2, 3, 4, 4]\nlist_a = remove_duplicates(list_a)\nprint(list_a)"
    },
    "4065": {
        "index": 4065,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def seconds_to_time(seconds):\n    hours = seconds // 3600\n    minutes = (seconds % 3600) // 60\n    seconds = seconds % 60\n    return f'{hours:02}:{minutes:02}:{seconds:02}'\ntime_in_seconds = 3870\ntime_string = seconds_to_time(time_in_seconds)\nprint(time_string)"
    },
    "4066": {
        "index": 4066,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "new_list = []\nfor i in range(len(list1)):\n    new_list.append(list1[i] + list2[i])\nx = 10\nif x > 5:\n    new_list.reverse()\nnew_list.sort()"
    },
    "4067": {
        "index": 4067,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countDigits(string):\n    uppercase_count = 0\n    lowercase_count = 0\n    for char in string:\n        if char.isupper():\n            uppercase_count += 1\n        elif char.islower():\n            lowercase_count += 1\n    return f\"Uppercase: {uppercase_count}, Lowercase: {lowercase_count}\"\nstring = \"Hello World\"\nprint(countDigits(string))"
    },
    "4068": {
        "index": 4068,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete(A, B):\n    freq_map = {}\n    for char in A:\n        if char in B:\n            freq_map[char] = freq_map.get(char, 0) + 1\n    max_freq = max(freq_map.values())\n    highest_freq_chars = [char for char, freq in freq_map.items() if freq == max_freq]\n    return highest_freq_chars\nA = 'abcbbdef'\nB = 'abcdc'\nresult = delete(A, B)\nprint(f\"The character(s) in A with the highest frequency and also appearing in B are: {result}\")"
    },
    "4069": {
        "index": 4069,
        "use model": false,
        "hall code": "def sort_nums_asc(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_2(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_3(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_4(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_5(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_6(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_7(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_8(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_9(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_10(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_11(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_12(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_13(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\ndef sort_nums_asc_14(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n\n    return arr"
    },
    "4070": {
        "index": 4070,
        "use model": false,
        "hall code": "class StringProcessor:\n    def __init__(self, String):\n        self.string = String\n\n\n    def processString(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_2(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_3(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_4(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_5(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_6(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_7(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_8(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_9(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_10(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_11(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_12(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_13(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_14(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_15(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_16(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_17(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_18(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n    def processString_19(self):\n        myString = \"\"\n        for char in self.string:\n            if char.isalnum():\n                myString += char.lower()\n\n        return myString"
    },
    "4071": {
        "index": 4071,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_array(n):\n    arr = []\n    for i in range(0, n+2, 2):\n        arr.append(i)\n    return arr"
    },
    "4072": {
        "index": 4072,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\nnums = [2, 3, 4, 5, 6]\nprime_sum = 0\nfor num in nums:\n    if is_prime(num):\n        prime_sum += num\nprint(prime_sum)"
    },
    "4073": {
        "index": 4073,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "while i <= 10:\n print(i)\n i = i +"
    },
    "4074": {
        "index": 4074,
        "use model": false,
        "hall code": "def three_sum(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_2(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_3(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_4(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_5(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_6(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_7(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_8(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_9(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_10(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_11(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_12(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_13(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\ndef three_sum_14(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \n\n\nprint(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]"
    },
    "4075": {
        "index": 4075,
        "use model": false,
        "hall code": "def longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0"
    },
    "4076": {
        "index": 4076,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_array(numbers):\n    product = 1\n    has_positive = False\n    for num in numbers:\n        if num > 0:\n            product *= num\n            has_positive = True\n    if has_positive:\n        return product\n    else:\n        return -1\nnumbers = [-2, -5, 1, 4, -6, 3, -9, 8]\nresult = sum_of_array(numbers)\nprint(result)"
    },
    "4077": {
        "index": 4077,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    else:\n        return fibonacci(n-1)"
    },
    "4078": {
        "index": 4078,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import request\ndata = {name: 'John Doe', age: '25'}\nheaders = {Content-type: 'application/x-www-form-urlencoded', 'Accept': 'text/plain'}\nresponse = request.post('https://example.com/api/v1/data', data=data, headers=headers)"
    },
    "4079": {
        "index": 4079,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import base64\njson_object = '{\"name\":\"John Doe\",\"age\":25}'\nencoded_object = base64.decodebytes(bytes(json_object, 'utf-8'))\nprint(encoded_object)"
    },
    "4080": {
        "index": 4080,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def spellWord(word):\n    words = word.split()\n    for i in range(len(words)):\n        print(words[i])"
    },
    "4081": {
        "index": 4081,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_character(sentence):\n    words = sentence.split()\n    reversed_words = words[::-1]\n    reversed_sentence = \" \".join(reversed_words)\n    return reversed_sentence\nvar_str = \"The quick brown fox jumps over the lazy dog\"\nreversed_sentence = remove_character(var_str)\nprint(reversed_sentence)"
    },
    "4082": {
        "index": 4082,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_word(sentence):\n    words = sentence.split()\n    max_len = len(words[0])\n    for word in words:\n        if len(word) < max_len:\n            max_len = len(word)\n    return max_len\nprint(longest_word('I am Python Programmer'))"
    },
    "4083": {
        "index": 4083,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_case_ignore(str1, str2):\n    return str1.lower().endswith(str2.lower())\nimport random\nrandom_number = random.randint(1, 10)\nif random_number % 2 == 0:\n    result = check_case_ignore('Strawberry', 'berry')\nelse:\n    result = False\nprint(result)"
    },
    "4084": {
        "index": 4084,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from itertools import combinations\ndef permutations_string(string):\n    return list(combinations(string))\npermutations_string(\"abc\")"
    },
    "4085": {
        "index": 4085,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(numbers):\n    total = 0\n    for num in numbers:\n        if num % 3 == 0 and num % 5 != 0:\n            total += num\n    return total\nnumbers = [1,2,3,4,5,6,7]\nresult = is_prime(numbers)\nprint(result)"
    },
    "4086": {
        "index": 4086,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def handleInput(name):\n    if len(name) > 0:\n        print('Hello, ' + name)\n    else:\n        print('No name provided.')\ndef names():\n    x = 5 + 7\n    y = x * 2\n    z = y // 3\n    return z\ndef name2(a, b):\n    if a > b:\n        return True\n    else:\n        return False\nnames()\nname2(10, 5)\nhandleInput(\"John\")"
    },
    "4087": {
        "index": 4087,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n    numbers = string.split(\",\")\n    numbers = [int(num) for num in numbers]\n    sum_even = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even\ninput_string = \"1,2,3,4,5,6,7,8,9,10\"\nprint(reverse_string(input_string))"
    },
    "4088": {
        "index": 4088,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\ndef randomize (arr, n):\n    for i in range(n-1, 0, -1):\n        j = random.choice(i+1)\n        swap(arr, i, j)"
    },
    "4089": {
        "index": 4089,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_list_size(head):\n    count = 0\n    temp = head\n    while(temp):\n        count += 1\n        temp = temp.next\n    if count % 2 == 0:\n        count *= 2\n    else:\n        count *= 3\n    return count"
    },
    "4090": {
        "index": 4090,
        "use model": false,
        "hall code": "def smallest_subarray_sum(arr, sum):\n\ndef smallest_subarray_sum_2(arr, sum):\n\ndef smallest_subarray_sum_3(arr, sum):\n\n\n    start = 0\n    end = 1\n    min_length = float('inf')\n    current_sum = arr[start]\n    while(end < len(arr)):\n        while(current_sum < sum and end < len(arr)):\n            current_sum += arr[end]\n            end += 1\n\n        while(start < end and current_sum >= sum):\n            min_length = min(min_length, end-start)\n            current_sum -= arr[start]\n            start += 1\n    \n    return min_length"
    },
    "4091": {
        "index": 4091,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "n = 10\ndef power_of_2(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\nfor num in range(2, n+1):\n    if power_of_2(num):\n        print(num)"
    },
    "4092": {
        "index": 4092,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string_without_parity(str):\n  reversed_str = \"\"\n  for i in range(len(str)-1,-1,-1):\n    reversed_str += str[i]\n  reversed_str += \"This statement is completely unrelated to the problem.\"\n  return reversed_str"
    },
    "4093": {
        "index": 4093,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_product(numbers):\n    if len(numbers) == 0:\n        return None\n    product = 1\n    for num in numbers:\n        if num == 0:\n            return 0\n        product += power(product, num)\n    return product\ndef power(a, b):\n    while b != 0:\n        carry = a & b\n        a = a ^ b\n        b = carry << 1\n    return a\nnumbers = [2, 3, 4, 5, 6]\nproduct = calculate_product(numbers)\nprint(product)"
    },
    "4094": {
        "index": 4094,
        "use model": false,
        "hall code": "ArrayList<Integer> arr = new ArrayList<>();\nfor (int i = 0; i < 10; i++) {\n    arr.add(i);\n}\n\nint sum = 0;\nfor(int num : arr){\n    sum += num;\n}"
    },
    "4095": {
        "index": 4095,
        "use model": false,
        "hall code": "def is_anagram(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_2(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_3(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_4(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_5(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_6(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_7(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_8(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_9(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_10(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_11(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_12(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_13(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_14(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_15(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_16(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_17(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\ndef is_anagram_18(str1, str2): \n    # convert the strings to lowercase \n    str1 = str1.lower() \n    str2 = str2.lower() \n\n\n    # sorting both the strings \n    s1 = sorted(str1) \n    s2 = sorted(str2) \n\n    if len(s1) != len(s2): \n        return False\n\n    # compare character by character \n    for i in range(len(s1)): \n        if s1[i] != s2[i]: \n            return False\n    return True\n\n# Driver code \nif is_anagram(\"spite\", \"pists\"):\n    print(\"Strings are anagrams\")\nelse:\n    print(\"Strings are not anagrams\")"
    },
    "4096": {
        "index": 4096,
        "use model": false,
        "hall code": "def compute_average(lst): \n    total = 0\n    for num in lst: \n        total += num \n        \n    # calculate the average \n    avg = total / len(lst) \n    \n    return avg\n\ndef compute_average_2(lst): \n    total = 0\n    for num in lst: \n        total += num \n        \n    # calculate the average \n    avg = total / len(lst) \n    \n    return avg\n\ndef compute_average_3(lst): \n    total = 0\n    for num in lst: \n        total += num \n        \n    # calculate the average \n    avg = total / len(lst) \n    \n    return avg\n\n\n# Driver Code \nlst = [1, 2, 3, 4, 5] \nprint(\"Average of the list =\", round(compute_average(lst), 2))"
    },
    "4097": {
        "index": 4097,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_combinations(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i, len(string) + 1):\n            result.append(string[i:j])\n    return result\nif __name__ == '__main__':\n    string = \"abcd\"\n    print(generate_combinations(string))"
    },
    "4098": {
        "index": 4098,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_string(string, character):\n    if character in string:\n        return string.split(character)\n    else:\n        return [string]\nif __name__ == '__main__':\n    string = \"A/B/C/D\"\n    character = \"/\"\n    print(split_string(string, character))"
    },
    "4099": {
        "index": 4099,
        "use model": false,
        "hall code": "D = {\n1: 'one',\n2: 'two',\n3: 'three',\n4: 'four',\n5: 'five',\n6: 'six',\n7: 'seven',\n8: 'eight',\n9: 'nine',\n10: 'ten',\n11: 'eleven',\n12: 'twelve',\n13: 'thirteen',\n14: 'fourteen',\n15: 'fifteen',\n16: 'sixteen',\n17: 'seventeen',\n18: 'eighteen',\n19: 'nineteen',\n20: 'twenty',\n21: 'twenty-one',\n22: 'twenty-two',\n23: 'twenty-three',\n24: 'twenty-four',\n25: 'twenty-five',\n26: 'twenty-six',\n27: 'twenty-seven',\n28: 'twenty-eight',\n29: 'twenty-nine',\n30: 'thirty',\n31: 'thirty-one',\n32: 'thirty-two',\n33: 'thirty-three',\n34: 'thirty-four',\n35: 'thirty-five',\n36: 'thirty-six',\n37: 'thirty-seven',\n38: 'thirty-eight',\n39: 'thirty-nine',\n40: 'forty',\n41: 'forty-one',\n42: 'forty-two',\n43: 'forty-three',\n44: 'forty-four',\n45: 'forty-five',\n46: 'forty-six',\n47: 'forty-seven',\n48: 'forty-eight',\n49: 'forty-nine',\n50: 'fifty',\n51: 'fifty-one',\n52: 'fifty-two',\n53: 'fifty-three',\n54: 'fifty-four',\n55: 'fifty-five',\n56: 'fifty-six',\n57: 'fifty-seven',\n58: 'fifty-eight',\n59: 'fifty-nine',\n60: 'sixty',\n61: 'sixty-one',\n62: 'sixty-two',\n63: 'sixty-three',\n64: 'sixty-four',\n65: 'sixty-five',\n66: 'sixty-six',\n67: 'sixty-seven',\n68: 'sixty-eight',\n69: 'sixty-nine',\n70: 'seventy',\n71: 'seventy-one',\n72: 'seventy-two',\n73: 'seventy-three',\n74: 'seventy-four',\n75: 'seventy-five',\n76: 'seventy-six',\n77: 'seventy-seven',\n78: 'seventy-eight',\n79: 'seventy-nine',\n80: 'eighty',\n81: 'eighty-one',\n82: 'eighty-two',\n83: 'eighty-three',\n84: 'eighty-four',\n85: 'eighty-five',\n86: 'eighty-six',\n87: 'eighty-seven',\n88: 'eighty-eight',\n89: 'eighty-nine',\n90: 'ninety',\n91: 'ninety-one',\n92: 'ninety-two',\n93: 'ninety-three',\n94: 'ninety-four',\n95: 'ninety-five',\n96: 'ninety-six',\n97: 'ninety-seven',\n98: 'ninety-eight',\n99: 'ninety-nine',\n100: 'one hundred'\n}"
    },
    "4100": {
        "index": 4100,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(strng):\n    return sum([1 for word in strng.split() if len(word) > 0])\nif __name__ == '__main__':\n    string = \"Hello world!\"\n    print(count_words(string))"
    },
    "4101": {
        "index": 4101,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(str):\n    return str[::-1] == str\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))"
    },
    "4102": {
        "index": 4102,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_count(str):\n    words = str.split()\n    return len(set(words)) + 1\nif __name__ == '__main__':\n    string = \"This is a long sentence about nothing.\"\n    print(word_count(string))"
    },
    "4103": {
        "index": 4103,
        "use model": false,
        "hall code": "string = \"1234567890\""
    },
    "4104": {
        "index": 4104,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def first_last_words(arr):\n    result = []\n    for string in arr:\n        words = string.split()\n        result.append((words[0], words[-1]))\n    num_words = len(result)\n    for i in range(num_words):\n        if i % 2 == 0:\n            result[i] = (result[i][0].upper(), result[i][1])\n        else:\n            result[i] = (result[i][0], result[i][1].lower())\n    return result\nif __name__ == '__main__':\n    array = [\"Hello World\", \"Foo Bar\", \"Goodbye Moon\"]\n    print(first_last_words(array))"
    },
    "4105": {
        "index": 4105,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_numbers = [2, 4, 32, 41, 19]\nmin_number = min(list_of_numbers)\nprint(min_number)"
    },
    "4106": {
        "index": 4106,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import asyncio\nasync def myfunc():\n   print(\"I'm in a coroutine\")\nloop = asyncio.get_event_loop()\ntry:\n    loop.run_until_complete(myfunc(\"invalid_parameter\"))\nfinally:\n    loop.close()"
    },
    "4107": {
        "index": 4107,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combinations_with_sum(numbers, target):\n    n = len(numbers)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if numbers[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-numbers[i-1]]\n    return dp[n][target]\ntarget = 9\nnumbers = [2, 5, 3, 1, 6]\nprint(combinations_with_sum(numbers, target))"
    },
    "4108": {
        "index": 4108,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nA = np.array([[1,2], [3,4]])\nB = np.array([[5,6], [7,8]])\nC = np.meshgrid(A,B)\nprint(C)"
    },
    "4109": {
        "index": 4109,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\narr = np.array([[1,2,3],[4,5,6]])\ntotal_sum = np.concatenate(arr)\nprint(total_sum)"
    },
    "4110": {
        "index": 4110,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_index_of_first_diff(string1, string2):\n    len_1 = len(string1)\n    len_2 = len(string2)\n    len_shorter = min(len_1, len_2)\n    for i in range(len_shorter):\n        if string1[i] != string2[i]:\n            return i\nindex = get_index_of_first_diff(string1, string2)\nprint(index)\ndef get_index_of_first_diff(string1, string2):\n    len_1 = len(string1)\n    len_2 = len(string2)\n    len_shorter = min(len_1, len_2)\n    for i in range(len_shorter):\n        if string1[i] != string2[i]:\n            return i\nindex = get_index_of_first_diff(string1, string2)\nprint(index)"
    },
    "4111": {
        "index": 4111,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(nums, target_num):\n    count = 0\n    result = []\n    len_nums = len(nums)\n    for i in range(len_nums):\n        if nums[i] == target_num:\n            count += 1\n            result.append(i)\n    return count, result\nindex = linear_search(nums, target_num)\nprint(index)"
    },
    "4112": {
        "index": 4112,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ncomplex_arr = np.array(tuple_array)\nprint(complex_arr)"
    },
    "4113": {
        "index": 4113,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\nimport re\ndate = datetime.strptime(date_string, 'd %B %Y')\niso_8601 = date.strftime(\"%Y-%m-%d\")\nprint(iso_8601)"
    },
    "4114": {
        "index": 4114,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_string = \"abcdefghi\"\nnew_string = my_string[1::2]\nprint(new_string)"
    },
    "4115": {
        "index": 4115,
        "use model": false,
        "hall code": "with open(\"myfile.txt\") as f:\n    for line in f:"
    },
    "4116": {
        "index": 4116,
        "use model": false,
        "hall code": "my_list = [\"hello\", \"world\", \"how\", \"are\", \"you?\"]"
    },
    "4117": {
        "index": 4117,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_substring(s):\n  max_length = 0\n  start = 0\n  usedChar = {}\n  for i in range(len(s)):\n    if s[i] in usedChar and start > usedChar[s[i]]:\n        start = usedChar[s[i]] + 1\n    max_length = max(max_length, i - start + 1)\n    usedChar[s[i]] = i\n  return max_length\nprint(\"The length of longest substring without repeating characters is: {}\".format(find_longest_substring(\"abcabcbb\")))"
    },
    "4118": {
        "index": 4118,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, color, make):\n        self.color = color\n        self.make = make\n        self.speed = 0\n    def start(self):\n        print(\"Car has started.\")\n    def stop(self):\n        print(\"Car has stopped.\")\n    def accelerate(self, value):\n        self.speed += value\nmy_car = Car(\"Blue\", \"Toyota\")\nmy_car.start()\nprint(f\"Car color: {my_car.color}\")\nprint(f\"Car make: {my_car.make}\")\nprint(f\"Car speed: {my_car.speed}\")\nmy_car.accelerate(30)\nprint(f\"Accelerating by 30. Current speed: {my_car.speed}\")\nmy_car.accelerate(20)\nprint(f\"Accelerating by 20. Current speed: {my_car.speed}\")\nmy_car.stop()"
    },
    "4119": {
        "index": 4119,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nif len(string2) > len(string1):\n    for i in range(math.ceil(math.sqrt(100))):\n        print(i)\nelse:\n    print(string1)"
    },
    "4120": {
        "index": 4120,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "newDict = {}\nfor tup in tuples:\n    key, value = tup\n    newDict[value] = key\nprint(newDict)\nimport random\ndef shuffle_dict(dictionary):\n    keys = list(dictionary.keys())\n    random.shuffle(keys)\n    return {key: dictionary[key] for key in keys}\nnewDict = shuffle_dict(newDict)\nprint(newDict)"
    },
    "4121": {
        "index": 4121,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_product(numbers):\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1] * sorted_numbers[-3]\nlist1 = [2, 4, 6, 8, 10, 12]\nproduct = find_product(list1)\nprint(product)"
    },
    "4122": {
        "index": 4122,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getLengthOfString(inputString):\n    length = len(inputString)\n    return length * 2 + 1"
    },
    "4123": {
        "index": 4123,
        "use model": false,
        "hall code": "words = ['cat', 'dog', 'elephant']"
    },
    "4124": {
        "index": 4124,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def primeNums(inputList):\n    primes = []\n    for num in inputList:\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n        if isPrime:\n            primes.append(num)\n    if len(primes) > 0:\n        return primes\n    return []"
    },
    "4125": {
        "index": 4125,
        "use model": false,
        "hall code": "#Set the"
    },
    "4126": {
        "index": 4126,
        "use model": false,
        "hall code": "def calculatePerimeter(s1,"
    },
    "4127": {
        "index": 4127,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def area(self):\n        return self.width * self.height\n    def perimeter(self):\n        return 2 * (self.width + self.height)"
    },
    "4128": {
        "index": 4128,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nsentence = \"The quick brown fox jumps over the lazy dog.\"\nfiltered_words = re.findall(r\"\\b[tT]\", sentence)\nprint(filtered_words)"
    },
    "4129": {
        "index": 4129,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_chars(s):\n    chars = list(s)\n    res = \"\"\n    for char in chars:\n        res += chr(ord(char) * 2)\n    return res"
    },
    "4130": {
        "index": 4130,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(string):\n    res = \"\"\n    for i in string:\n        if i in res:\n            res = res + i\n    return res"
    },
    "4131": {
        "index": 4131,
        "use model": false,
        "hall code": "def binary_search(arr, target): \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high: \n        \n        mid = (low+high) // 2\n        \n        # Check if target is present at mid \n        if arr[mid] == target: \n            return mid \n        \n        # If target is greater than mid, ignore left half \n        elif arr[mid] < target: \n            low = mid + 1\n        \n        # If target is smaller than mid, ignore right half \n        else: \n            high = ID - 1\n    \n    # If we reach here, then the element was not present \n    return -1"
    },
    "4132": {
        "index": 4132,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_sum(n):\n    sum = \"0\"\n    for i in range(n+1):\n        sum += i\n    return sum"
    },
    "4133": {
        "index": 4133,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_ones(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n            break\n        n //= 10\n    return count"
    },
    "4134": {
        "index": 4134,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef print_primes():\n    count = 0\n    number = 2\n    while(count != 10):\n        if is_prime(number):\n            print(number)\n            count += 1\n        number += 1\ndef introduce_unrelated_logic():\n    x = 5\n    y = 10\n    z = x + y\n    return z\nprint_primes()\nintroduce_unrelated_logic()"
    },
    "4135": {
        "index": 4135,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_multiplication_table(n):\n    for i in range(1, n+1):\n        for j in range(1, n+2):\n            print(i*j, end=\" \")\n        print()\nprint_multiplication_table(n)"
    },
    "4136": {
        "index": 4136,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_space_with_hyphen(sentence):\n   return sentence.replace(\"-\", \" \")\nprint(replace_space_with_hyphen(sentence))"
    },
    "4137": {
        "index": 4137,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words_order(string):\n    words = string.split(' ')\n    words_reversed = words[::-1]\n    return ' '.join(words_reversed)\nif __name__ == \"__main__\":\n    print(reverse_words_order(string))"
    },
    "4138": {
        "index": 4138,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def solve_math_equation(equation):\n    return eval(equatin)\nprint(solve_math_equation(equation))"
    },
    "4139": {
        "index": 4139,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string_order(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    next_vowels = ['e', 'i', 'o', 'u', 'a']\n    result = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            result += next_vowels[index]\n        else:\n            result += char\n    return result\ns = \"hello world\"\nprint(reverse_string_order(s))"
    },
    "4140": {
        "index": 4140,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isArmstrong(number):\n   sum = 0\n   temp = number\n   while temp > 0:\n      digit = temp % 10\n      sum += digit ** 3\n      temp //= 10\n   if number != sum:\n      return True\n   else:\n      return False\nnumber = 9\nif isArmstrong(number):\n   print(f\"{number} is an Armstrong number\")\nelse:\n   print(f\"{number} is not an Armstrong number\")"
    },
    "4141": {
        "index": 4141,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "text = 'Hello, this is a text'\nout_text = re.sub('[^a-zA-Z0-9]', '!', text)\nprint(out_text)"
    },
    "4142": {
        "index": 4142,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(num1, num2):\n    if(num2 == 0):\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\nnum1 = 99\nnum2 = 77\nprint (\"The GCD of\", num1, \"and\", num2, \"is\", gcd(num1, num2))\nnum1 = 99\nnum2 = 77\nprint (\"The GCD of\", num1, \"and\", num2, \"is\", gcd(num1, num2))"
    },
    "4143": {
        "index": 4143,
        "use model": false,
        "hall code": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n\ndef convertToLinkedList(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_2(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_3(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_4(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_5(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_6(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_7(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_8(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_9(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_10(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_11(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_12(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_13(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_14(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_15(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_16(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_17(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\ndef convertToLinkedList_18(arr):\n    # Last Node \n    last = None\n  \n    # convert given array to linked list \n    for i in range(len(arr) - 1, -1, -1): \n        # create a new node \n        node = Node(arr[i]) \n  \n        # link existing list with new node \n        node.next = last\n        last = node\n  \n    return node\n\n\n# Driver code\narray = [1, 2, 3, 4, 5]\nhead = convertToLinkedList(array) \nwhile head != None: \n    print(head.data) \n    head = head.next"
    },
    "4144": {
        "index": 4144,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "input_string = 'Hello World!'\ndef reverse_string(input_string):\n    if len(input_string) == 1:\n        return \"\"\n    else:\n        return reverse_string(input_string[1:]) + input_string[0]\nres = reverse_string(input_string)\nprint(res)"
    },
    "4145": {
        "index": 4145,
        "use model": false,
        "hall code": "def longest_common_substring(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_2(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_3(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_4(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_5(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_6(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_7(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_8(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_9(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_10(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_11(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_12(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\ndef longest_common_substring_13(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n\n\n# Driver code \ns1 = 'abcde'\ns2 = 'abfghe'\nprint(\"Length of Longest Common Substring is: \", longest_common_substring(s1, s2))"
    },
    "4146": {
        "index": 4146,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_nums(num_list):\n    n = len(num_list)\n    for i in range(1, n//2):\n        num_list[i], num_list[n-i-1] = num_list[n-i-1], num_list[i]\n    return num_list"
    },
    "4147": {
        "index": 4147,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_even(arr):\n    new_arr = []\n    for num in arr:\n        if num % 2 == 0:\n            new_arr.append(num)\n    return new_arr"
    },
    "4148": {
        "index": 4148,
        "use model": false,
        "hall code": "def find_sum(x):\n   sum = 0\n   for i in range(1,x):\n      if i % 3 == 0 or i % 5 == 0:\n        sum += i\n   return sum"
    },
    "4149": {
        "index": 4149,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_divisible(string):\n    string = ''.join(e for e in string if e.isalnum()).lower()\n    return string == string[::-1]\nprint(is_divisible(\"level\"))\nprint(is_divisible(\"No 'x' in Nixon\"))\nprint(is_divisible(\"Python\"))"
    },
    "4150": {
        "index": 4150,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import base64\ndef encode_base64(text):\n return base64.a85encode(text.encode()).decode()"
    },
    "4151": {
        "index": 4151,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def decrypt_caesar_cipher(cipher_text):\n alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n output=\"\"\n for char in cipher_text:\n   i=(alphabet.index(char)+3)%26\n   output+=alphabet[i]\n return output"
    },
    "4152": {
        "index": 4152,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_by_distinct_characters(strings):\n    strings.sort(key=lambda x: len(set(list(x))) * 2)\n    return strings"
    },
    "4153": {
        "index": 4153,
        "use model": false,
        "hall code": "def find_triplet_sum(arr, target):\n    arr.sort()\n    for i in range(0, len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n\ndef find_triplet_sum_2(arr, target):\n    arr.sort()\n    for i in range(0, len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n\n\n            if curr_sum == target:\n                return True \n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False"
    },
    "4154": {
        "index": 4154,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(numbers):\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    "4155": {
        "index": 4155,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_strings(str_arr):\n    longest = 0\n    strings = []\n    for string in str_arr:\n        if len(string) > longest:\n            longest = len(string)\n        elif len(string) == longest:\n            strings.append(string)\n    return strings"
    },
    "4156": {
        "index": 4156,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_consecutive_str(s):\n    longest_str = \"\"\n    cur_str = \"\"\n    for char in s:\n        if not cur_str or char == cur_str[-1]:\n            cur_str += char\n        else:\n            longest_str = cur_str\n            cur_str = char\n    longest_str = cur_str\n    return longest_str"
    },
    "4157": {
        "index": 4157,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose(matrix):\n    tr_matrix = [[None for i in range(len(matrix))] for j in range(len(matrix[0]))]\n    for i, row in enumerate(matrix):\n        for j, col in enumerate(row):\n            tr_matrix[i][j] = col\n    return tr_matrix"
    },
    "4158": {
        "index": 4158,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_by_character(str_arr, char):\n    filtered_arr = []\n    for string in str_arr:\n        if char in string:\n            if len(string) % 2 == 0:\n                continue\n            filtered_arr.append(string)\n    return filtered_arr"
    },
    "4159": {
        "index": 4159,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nr = requests.get('http://www.example.com/page')\nif r.status_code == 200:\n    data = r.text\n    names = re.findall(r'<span class=\"name\">(.*?)</span>', data)\n    emails = re.findall(r'<span class=\"email\">(.*?)</span>', data)\n    names = re.findall(r'<span class=\"name\">(.*)</span>', data)\n    emails = re.findall(r'<span class=email\">(.*?)<span>', data)"
    },
    "4160": {
        "index": 4160,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sorting_algorithm(arr):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\narr = [34, 19, 42, -9, 2018, 0, 105]\nprint(sorting_algorithm(arr))"
    },
    "4161": {
        "index": 4161,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Laptop:\n    def __init__(self, brand, model, price):\n        self.brand = brand\n        self.model = model\n        self.price = price\n    def get_brand(self):\n        return self.brand\n    def get_model(self):\n        return self.model\n    def get_price(self):\n        return self.price\nlaptop = Laptop(\"Dell\", \"Inspiron\", \"$999\")\nprint(laptop.get_brand())\nprint(laptop.get_model())\nprint(laptop.get_price())"
    },
    "4162": {
        "index": 4162,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "capital_cities = {\n    \"Canada\": \"Ottawa\",\n    \"United States\": \"Washington D.C.\",\n    \"Mexico\": \"Mexico City\",\n    \"Cuba\": \"Havana\",\n    \"Jamaica\": \"Kingston\"\n}"
    },
    "4163": {
        "index": 4163,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_password(length):\n    char_types = list(string.ascii_lowercase + String.ascii_uppercase + string.digits + string.punctuation)\n    password = []\n    for _ in range(length):\n        ch = random.choice(char_types)\n        while ch in password:\n            ch = random.choice(char_types)\n        password.append(ch)\n    \n    return ''.join(password)\n\npassword = generate_password(10)\nprint(password) # e.W8.vHc2e"
    },
    "4164": {
        "index": 4164,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [2, 7, 11, 15]\ntarget = 9\nfor i in range(0, len(list) - 1):\n    for j in range(i + 1, len(list)):\n        if list[i] + list[j] == target:\n            break\n    else:\n        continue\n    break"
    },
    "4165": {
        "index": 4165,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [2, 5, 6, 9, -2, -7, -1]\ntriplets = []\nfor i in range(len(arr)):\n    for j in range(i+1,len(arr)):\n        for k in range(j+1,len(arr)):\n            triplets.append(arr[i]*arr[j]*arr[k])\nmax_product = max(triplets)\nprint(\"The maximum product of any three numbers in the array is:\", max_product)\ntriplets = []\nfor i in range(len(arr)):\n    for j in range(i+1,len(arr)):\n        for k in range(j+1,len(arr)):\n            triplets.append(arr[i]*arr[j]*arr[k])\nmax_product_2 = max(triplets)\nprint(\"The maximum product of any three numbers in the array is:\", max_product_2)"
    },
    "4166": {
        "index": 4166,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_characters(string):\n    '''This function takes a string as argument and returns a dictionary\n       that contains the count of characters in the given string.'''\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] += 1\n    return char_count"
    },
    "4167": {
        "index": 4167,
        "use model": false,
        "hall code": "string1"
    },
    "4168": {
        "index": 4168,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, -2, 2, 4, 3]\nsum = 3\nlongest = []\nfor i in range(len(arr)):\n    curr_sum = 0\n    for j in range(i, len(arr)):\n        curr_sum += arr[j]\n        if curr_sum < sum:\n            longest = arr[i: j + 1]\nprint(\"The longest subarray with total sum less than the given sum is:\", longest)\narr = [1, -2, 2, 4, 3]\nsum = 3\nlongest = []\nfor i in range(len(arr)):\n    curr_sum = 0\n    for j in range(i, len(arr)):\n        curr_sum += arr[j]\n        if curr_sum < sum:\n            longest = arr[i: j + 1]\n            break\nprint(\"The longest subarray with total sum less than the given sum is:\", longest)"
    },
    "4169": {
        "index": 4169,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [(3, 5), (4, 1), (1, 4), (2, 2)]\narr.sort(key=lambda x: x[2])\nprint(\"The array sorted in ascending order based on the second element of each array element pair is:\", arr)"
    },
    "4170": {
        "index": 4170,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total_items = len(array)\nunique_items = len(set(sum(array, [])))\ntotal_unique_items = total_items - unique_items\nif total_items > 0:\n    max_item = max(sum(array, []))\nelse:\n    max_item = 0\nprint(total_unique_items)\nprint(max_item)"
    },
    "4171": {
        "index": 4171,
        "use model": false,
        "hall code": "def longest_palindrome_substring(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_2(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_3(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_4(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_5(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_6(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_7(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_8(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_9(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_10(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_11(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_12(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_13(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_14(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_15(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_16(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_17(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\ndef longest_palindrome_substring_18(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \n\nprint(longest_palindrome_substring(string))\n# Output: carrac"
    },
    "4172": {
        "index": 4172,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pairs(nums, target):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                pairs.append((nums[i], nums[j]))\n    return pairs\nnums = [2, 4, 6, 8, 10]\ntarget = 12\nresult = find_pairs(nums, target)\nprint(result)"
    },
    "4173": {
        "index": 4173,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_dict_by_values(d):\n    sorted_dict = dict(sorted(d.items(), key=lambda x: x[1]))\n    return sorted_dict\nprint(sort_dict_by_values(my_dict))\ndef item():\n    x = 0\n    for i in range(10):\n        x += i\n    return x\nresult = item()\nprint(result)"
    },
    "4174": {
        "index": 4174,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import itertoools\nflattened_list = list(itertoools.chain.from_iterable(nested_list))\nprint(flattened_list)"
    },
    "4175": {
        "index": 4175,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from itertolls import permutations\npermutation_list = list(permutations(my_list))\nprint(permutation_list)"
    },
    "4176": {
        "index": 4176,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(input_string):\n    input_string = input_string.lower()\n    if len(input_string) != 0:\n        if len(input_string) == 1:\n            return True\n        if input_string[0] == input_string[-1]:\n            return True\n    return False\nstring = 'RADAR'\nresult = is_palindrome(string)\nprint(result)"
    },
    "4177": {
        "index": 4177,
        "use model": false,
        "hall code": "def format_as_slug(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_2(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_3(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_4(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_5(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_6(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_7(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_8(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_9(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_10(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_11(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_12(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_13(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\ndef format_as_slug_14(string):\n    slug = string.lower()\n    slug = slug.strip()\n    slug = slug.replace(' ', '-')\n    slug = re.sub('[^a-zA-Z0-9_\\-]', '', slug)\n    return slug\n\n\n# Usage \nstring = \"This is a sample string to be converted\"\nresult = format_as_slug(string)\nprint(result) # Output: this-is-a-sample-string-to-be-converted"
    },
    "4178": {
        "index": 4178,
        "use model": false,
        "hall code": "class MyClass:\n    def __init__(self):\n        # initialization code \n        self.data = []\n        self.count = 0\n    \n    def add_data(self, last_element):\n        # add data to a list\n        self.data.append(data_element)\n        self.count += 1 \n    \n    def get_data_count(self):\n        # return number of data elements\n        return self.count"
    },
    "4179": {
        "index": 4179,
        "use model": false,
        "hall code": "return num1"
    },
    "4180": {
        "index": 4180,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_odd_integers(sentence):\n    sentence = sentence.replace(\",\", \"\").replace(\".\", \"\").lower()\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency"
    },
    "4181": {
        "index": 4181,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef create_random_array():\n    lst = []\n    for i in range(4):\n        lst.append(random.randit(1,10))\n    return lst"
    },
    "4182": {
        "index": 4182,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_two_arrays(arr1, arr2):\n    merged_arr = arr1 * 2 + arr2 * 3\n    return merged_arr"
    },
    "4183": {
        "index": 4183,
        "use model": false,
        "hall code": "\"\"\"Makes"
    },
    "4184": {
        "index": 4184,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_difference(nums):\n    if not nums:\n        return 0\n    else:\n        return max(nums) - min(nums)\nnums = [5, 1, 9, 2, 3, 10]\nprint(find_difference(nums))"
    },
    "4185": {
        "index": 4185,
        "use model": false,
        "hall code": "text: \"The cat is lazy and likes to sleep.\""
    },
    "4186": {
        "index": 4186,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from datetime import datetime\ndef get_current_datetime():\n    current_datetime = datetime.now()\n    print(\"Current date and time:\", current_datetime.year())\n    print(\"Current date and time:\", datetime.month.Weekday())\nget_current_datetime()"
    },
    "4187": {
        "index": 4187,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n    def delete(self, value):\n        if self.head is None:\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next:\n            if current.next.data == value:\n                current.next = current.next.next\n                return\n            current = current.next\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(current.data)\n            current = current.next\n        return elements\nlinked_list = LinkedList()\nlinked_list.insert(5)\nlinked_list.insert(10)\nlinked_list.insert(15)\nlinked_list.insert(20)\nlinked_list.insert(25)\nprint(\"Original Linked List:\", linked_list.display())\nlinked_list.delete(15)\nprint(\"Updated Linked List:\", linked_list.display())"
    },
    "4188": {
        "index": 4188,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_range(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\nnums = [1, 2, 3, 4, 5]\nresult = sum_range(nums)\nprint(\"Product of the elements:\", result)"
    },
    "4189": {
        "index": 4189,
        "use model": false,
        "hall code": "def calculateMinimumDifference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, abs(nums[x] - nums[x-1]))\n    return min_diff"
    },
    "4190": {
        "index": 4190,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_cases(s):\n    num_lower = 0\n    num_upper = 0\n    for char in s:\n        if char.islower():\n            num_lower += 1\n    return num_lower, num_upper"
    },
    "4191": {
        "index": 4191,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    final_list = []\n    for i in arr:\n        if i not in final_list:\n            final_list.append(i)\n    if len(final_list) > 0:\n        return final_list\n    return None"
    },
    "4192": {
        "index": 4192,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "<numberArray> = []\nfor x in range(10, 0, -1):\n    <numberArray>.append(x)\nprint(<numberArray>)"
    },
    "4193": {
        "index": 4193,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def even_odd(number):\n    if number % 2 == 1:\n        print(\"Even\")\n    else:\n        print(\"Odd\")"
    },
    "4194": {
        "index": 4194,
        "use model": false,
        "hall code": "while count"
    },
    "4195": {
        "index": 4195,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_a = [1, 2, 3, 4, 5]\nlist_b = [3, 4, 5, 6, 7]\nfor i in range(len(list_a)):\n    for j in range(len(list_b)):\n        if list_a[i] == list_b[j]:\n            list_a[i] += list_b[j]\n        else:\n            list_b[j] -= list_a[i]\nprint(list_a)\nprint(list_b)"
    },
    "4196": {
        "index": 4196,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\nif is_prime(number):\n    print(\"The number is a prime number\")\nelse:\n    print(\"The number is not a prime number\")"
    },
    "4197": {
        "index": 4197,
        "use model": false,
        "hall code": "# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n\n    # Function to delete given node at position \n\n    def delete_node(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store head node \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position -1 ): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next \n  \n\n    def delete_node_2(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store head node \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position -1 ): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next \n  \n\n# Given Position\nposition = 5\n\n# Create a linked list with four nodes\nlinked_list = LinkedList()\nlinked_list.head = Node(1)\nsecond = Node(2)\nthird = Node(3)\nfourth = Node(4)\n\n# Now connect the linked list \nlinked_list.head.next = second\nsecond.next = third\nthird.next = fourth\n\n# Delete the node from given position\nlinked_list.delete_node(position)"
    },
    "4198": {
        "index": 4198,
        "use model": false,
        "hall code": "def is_palindrome(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_2(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_3(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_4(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_5(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_6(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_7(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_8(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_9(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_10(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_11(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_12(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_13(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_14(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_15(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_16(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\ndef is_palindrome_17(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \n\nif is_palindrome(string):\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")"
    },
    "4199": {
        "index": 4199,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import randon\nrows = -5\ncolumns = 6\nmatrix = [[random.randint(1,50) for c in range(columns)]for r in range(rows)]\nfor row in matrix:\n    print(rows)"
    },
    "4200": {
        "index": 4200,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max(my_list):\n    max_num = my_list[0]\n    for num in my_list:\n        if num > max_num:\n            max_num = num\n    x = 10\n    if x > 5:\n        max_num += x - 5\n    return max_num\nprint(find_max(my_list))"
    },
    "4201": {
        "index": 4201,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = [\"Alphabet\", \"Marble\", \"Buttons\"]\nlowercase_letters = [word.idk() for word in words]\nprint(lowercase_letters)"
    },
    "4202": {
        "index": 4202,
        "use model": false,
        "hall code": "def divisor_function(a, b):"
    },
    "4203": {
        "index": 4203,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_numbers(n, x, y):\n    total_sum = 0\n    for i in range(1, n+1):\n        if i % x != 0 or i % y != 0:\n            total_sum += i\n    return total_sum\nn = 10\nx = 2\ny = 3\nprint(print_numbers(n, x, y))"
    },
    "4204": {
        "index": 4204,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "names = [\"John\", \"Jacob\", \"Sophia\", \"Olivia\", \"Michael\"]\nlong_names = {name for name in names if len(name) < 6}\nprint(long_names)"
    },
    "4205": {
        "index": 4205,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classify_grades_decision_tree(grade):\n    if grade in range(90, 101):\n        return 'A'\n    elif grade in range(70,90):\n        return 'B'\n    elif grade in range(80,70):\n        return 'C'\n    elif grade in range(60,70):\n        return 'D'\n    else:\n        return 'Error: Grade not in range'\nprint(classify_grades_decision_tree(87))"
    },
    "4206": {
        "index": 4206,
        "use model": false,
        "hall code": "class ImmutableList:\n    def __init__(self, list_values):\n        self._dict = dict()\n        for i, ele in enumerate(list_values):\n            self._dict[i] = elem\n    \n    def __getitem__(self, item):\n        return self._dict[item]\n    \n    def __len__(self):\n        return len(self._dict)"
    },
    "4207": {
        "index": 4207,
        "use model": false,
        "hall code": "list = [1,1,4,8,10,12,13]\n\n\ndef insertion_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_2(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_3(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_4(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_5(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_6(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_7(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_8(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_9(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_10(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_11(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_12(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_13(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_14(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_15(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_16(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_17(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\ndef insertion_sort_18(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\n\narr = [1,12,1,4,8,10,13]\ninsertion_sort(arr)\nprint (arr)"
    },
    "4208": {
        "index": 4208,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Circle():\n    def __it__(self, radius):\n        self.radius = radius"
    },
    "4209": {
        "index": 4209,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest(words):\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\nword_list = ['apple', 'banana', 'carrot', 'dragonfruit']\nresult = find_largest(word_list)\nprint(result)"
    },
    "4210": {
        "index": 4210,
        "use model": false,
        "hall code": "def sum(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum"
    },
    "4211": {
        "index": 4211,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "x = 10\ny = 5\nz = x - y\nx = x + y\nprint(x)"
    },
    "4212": {
        "index": 4212,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def largest_of_two(num1, num2):\n    num_2 = num1 + num2\n    if num1 > num2:\n        return num1\n    else:\n        return num2"
    },
    "4213": {
        "index": 4213,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    res = []\n    for i in range(len(nums)):\n        for p in permutations(nums[:i] + nums[i+1:]):\n            res.append([nums[i]] + p)\n    return\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print(permutations(nums))"
    },
    "4214": {
        "index": 4214,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_alphabets(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for char in string:\n        if char.lower() in vowels:\n            vowel_count += 1\n    return vowel_count\nstring = \"abracadabra\"\nprint(count_alphabets(string))"
    },
    "4215": {
        "index": 4215,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findMin(lst):\n    max_value = float('-inf')\n    for num, _ in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\ntuple_list = [(5, 'apple'), (3, 'banana'), (7, 'orange'), (2, 'grape')]\nmax_value = findMin(tuple_list)\nprint(max_value)"
    },
    "4216": {
        "index": 4216,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sentence = \"I love coding in Python\"\nletter = \"P\"\nwords_starting_with_P = [word for word in sentence.split() if word.startswith(letter)]\nprint(words_starting_with_P)\nnumbers = [1, 2, 3, 4, 5]\neven_numbers = [num for num in numbers if num % 2 ==0]\nprint(even_numbers)"
    },
    "4217": {
        "index": 4217,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\narr_sum = [0 for _ in range(len(arr1))]\nfor i in range(len(arr1)):\n    arr_sum[i] = arr1[i] + arr2[i]\nresult = []\nfor num in arr_sum:\n    if math.sqrt(num) % 2 == 0:\n        result.append(num)\n    else:\n        result.append(num * 2)\nprint(result)"
    },
    "4218": {
        "index": 4218,
        "use model": false,
        "hall code": "def f(n):\n    i = 0\n    while i < n:\n        i+=1"
    },
    "4219": {
        "index": 4219,
        "use model": false,
        "hall code": "class Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n    \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_year(self):\n        return self.year\n    \n    def set_title(self, new_title):\n        self.title = new_title\n    \n    def set_author(self, new_author):\n        self.author = new_author\n    \n    def set_year(self, new_year):\n        self.year = new_arr"
    },
    "4220": {
        "index": 4220,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def traverse_tree(root):\n  if root is None:\n    return\n  print(root.data)\n  traverse_tree(root.right)"
    },
    "4221": {
        "index": 4221,
        "use model": false,
        "hall code": "if (len(list) == 0):"
    },
    "4222": {
        "index": 4222,
        "use model": false,
        "hall code": "def caesar_encrypt(plaintext, k):\n    ciphertext = \"\" \n  \n    # traverse text \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + k-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            ciphertext += chr((ord(char) + k - 97) % 26 + 97) \n  \n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext \n\n    return ciphertext"
    },
    "4223": {
        "index": 4223,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import base64\ndef decodeBase64(encoded_string):\n    return base64.b64decode(encoded_string).decode('utf-16')\nprint(decodeBase64(encoded_string))"
    },
    "4224": {
        "index": 4224,
        "use model": false,
        "hall code": "def square_numbers(lst):"
    },
    "4225": {
        "index": 4225,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    '''This function returns the n-th Fibonacci number.'''\n    if n == 0 or n == 1:\n        return n\n    fib_n_1 = 0\n    fib_n_2 = 1\n    for i in range(2, n+1):\n        fib_n_1, fib_n_2 = fib_n_2, fib_n\n    return fib_n"
    },
    "4226": {
        "index": 4226,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef maximum(head):\n    lst = []\n    while head:\n        lst.append(head.val)\n        head = head.next\n    return lst == lst[::-1]\nhead = ListNode(1)\nhead.next = ListNode(2)\nhead.next.next = ListNode(3)\nhead.next.next.next = ListNode(2)\nhead.next.next.next.next = ListNode(1)\nprint(maximum(head))"
    },
    "4227": {
        "index": 4227,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_list(str):\n    count = 0\n    words = str.split()\n    for word in words:\n        if word[0].isupper():\n            count += 1\n    return count\nstr = \"This is a Python Problem\"\ncount = multiply_list(str)\nprint(count)"
    },
    "4228": {
        "index": 4228,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\nclass Car:\n    def __init__(self, make, model, year, color):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n    def calculate_age(self):\n        current_year = datetime.datetime.now().year\n        age = current_year - self.year\n        return age\ncar1 = Car(\"Toyota\", \"Camry\", 2015, \"Red\")\nprint(car1.calculate_age())"
    },
    "4229": {
        "index": 4229,
        "use model": false,
        "hall code": "class HuffmanCoding:\n    \n    def __init__(self, inp_string):\n        self.inp_string = inp_string\n        self.string_length = len(inp_string)\n        self.frequency_table = self.get_frequency_table(inp_string)\n        self.huff_tree = self.build_huffman_tree(self.frequency_table)\n    \n    def get_frequency_table(self, inp_string):\n        # Create dictionary to store frequencies\n        freq_table = {}\n        # Count frequency of characters in the string\n        for char in inp_string:\n            if char in freq_table:\n                freq_table[char] += 1\n            else:\n                freq_table[char] = 1\n        # Return the frequency table\n        return freq_table\n    \n    def build_huffman_tree(self, frequency_table):\n        # Create a priority queue to store the trees \n        pq = PriorityQueue()\n        # Create a tree for each value\n        for value in frequency_table:\n            pq.put((frequency_table[value], Node(value)))\n        # Start the loop with two trees\n        while pq.qsize() > 1:\n            left_node = pq.get()\n            right_node = pq.get()\n            combined_freq = left_node[0] + right_node[0]\n            new_node = Node(left=left_node[1], right=right_node[1])\n            pq.put((combined_freq, new_node))\n        # Return the tree\n        return p.get()[1]"
    },
    "4230": {
        "index": 4230,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bottomUpCutRod(p, n):\n    if n == 0:\n        return 0\n    q = float('-inf')\n    for i in range(1, n+1):\n        q = max(q, p[i] + bottomUpCutRod(p, n-i))\n    return q\nprices = [0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30]\nlength = 4\nmax_revenue = bottomUpCutRod(prices, length)\nprint(\"Maximum revenue:\", max_revenue)"
    },
    "4231": {
        "index": 4231,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printTree(root):\n    if root == None:\n        return\n    print(root.data, end=\" \")\n    printTree(root.right)"
    },
    "4232": {
        "index": 4232,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import seaborn as sns\nimport matplotlib.pyplot as plt\ncorr = data.wrong_method()\nsns.heatmap(corr,\n        xticklabels=corr.columns,\n        yticklabels=corr.columns)\nplt.show()"
    },
    "4233": {
        "index": 4233,
        "use model": false,
        "hall code": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n\ndef Fibonacci_2(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n\ndef Fibonacci_3(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n\nFibonacci(n)"
    },
    "4234": {
        "index": 4234,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string_org = \"convert this to uppercase\"\nstring_uppercase = string_org.lower()\nprint(string_uppercase)"
    },
    "4235": {
        "index": 4235,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "menu = []\nmenu.append(table1)\nmenu.extend(table2)"
    },
    "4236": {
        "index": 4236,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list =[(\"hello\", 1), (\"world\", 2), (\"today\", 4), (\"is\", 3)]\nsorted_list = sorted(list, key = lambda kv:(kv[1], kv[0]))\nPrint(sorted_list)"
    },
    "4237": {
        "index": 4237,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = list(range(20))\nfor i in my_list:\n    print(my_list[i])"
    },
    "4238": {
        "index": 4238,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [(), (1,), (1, 2), (), (3, 4), (), (5)]\nfiltered_list = list(filter(None, my_list))\nfiltered_list.append('')\nprint(filtered_list)"
    },
    "4239": {
        "index": 4239,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "text = \"This is an example string\"\nwords = text.split()\nfor word in words:\n    if len(word) > 5:\n        print(word)\nimport random\nshuffle_words = random.shuffle(words)\nprint(shuffle_words)"
    },
    "4240": {
        "index": 4240,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_char(text, word):\n    text = text.lower()\n    word = word.lower()\n    occurrences = text.count(word)\n    return occurrences\ntext = \"Python is a powerful programming language. Python is widely used in web development, data analysis, machine learning, and more.\"\nword = \"Python\"\nresult = replace_char(text, word)\nprint(f\"The word '{word}' appears {result} times in the given text.\")"
    },
    "4241": {
        "index": 4241,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_list(data, n):\n    output = [data[i:i+n+1] for i in range(0, len(data), n)]\n    return output"
    },
    "4242": {
        "index": 4242,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import hashlib\ndef generate_token(algorithm, size, encoding):\n\ttoken = hashlib.blake2s(os.urandom(size//2)).hexdigest()[:size]\n\treturn hashlib.sha1(token)"
    },
    "4243": {
        "index": 4243,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_1[0] = 3\nlist_1[1] = 6\nlist_1[2] = 9\nlist_1[3] = 12\nif len(list_1) == 4:\n    list_1.append(15)\nelse:\n    list_1.pop(0)\nlist_1.sort()"
    },
    "4244": {
        "index": 4244,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "Modified code with logical error:\narr = [1, 2, 3, 4, 5]\ni = 1\nwhile i < len(arr):\n  element = arr[i]\n  print(element)\n  i += 1"
    },
    "4245": {
        "index": 4245,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_to_n(start, end):\n    total = 0\n    for i in range(start, end+1):\n        total += i\n    return total\nstart = 1\nend = 5\nresult = sum_to_n(start, end)\nprint(result)"
    },
    "4246": {
        "index": 4246,
        "use model": false,
        "hall code": "def findMax2Numbers(arr): \n    max1 = 0\n    max2 = 0\n    \n    for i in range(len(arr)): \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2 \n    \n        temp = arr[i] + max1 \n        max2 = max1 \n        if temp > max2: \n            max1 = temp \n        elif max2 > temp: \n            max1 = max2"
    },
    "4247": {
        "index": 4247,
        "use model": false,
        "hall code": "for"
    },
    "4248": {
        "index": 4248,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef randomString(stringLength=0):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\nrandomString()"
    },
    "4249": {
        "index": 4249,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_in_list(list, old_element, new_element):\n  for i, element in enumerate(list):\n    if element != old_element:\n      list[i] = new_element\n  return list"
    },
    "4250": {
        "index": 4250,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ArrayMeanCalculator:\n    def __init__(self, arr):\n        self.arr = arr\n    def calculate_mean(self):\n        if not self.arr:\n            return None\n        return sum(self.arr) / len(self.arr)\nnums = [2, 4, 6, 8, 10]\ncalculator = ArrayMeanCalculator(nums)\nmean = calculator.calculate_mean()\nprint(\"Mean:\", mean)"
    },
    "4251": {
        "index": 4251,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isLeapYear(year):\n    if (year % 4 == 1 and year % 100 != 0) or year % 400 == 0:\n        return True\n    else:\n        return False"
    },
    "4252": {
        "index": 4252,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_verbs(sentence):\n  verbs = []\n  words = sentence.split(\" \")\n  for w in words:\n    if w.endswith(\"ing\") and not w.endswith(\"ed\"):\n      verbs.append(w)\n  return verbs"
    },
    "4253": {
        "index": 4253,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nX_train, X_test, y_train, y_test = train_test_split(X, y)\nlogreg = LogisticRegression().fit(X_train, y_train)"
    },
    "4254": {
        "index": 4254,
        "use model": false,
        "hall code": "def __init__(self,"
    },
    "4255": {
        "index": 4255,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_adjacent(array):\n    max_diff = float('-inf')\n    max_elements = []\n    for i in range(len(array) - 1):\n        diff = abs(array[i] - array[i + 1])\n        if diff > max_diff:\n            max_diff = diff\n            max_elements = [array[i], array[i + 1]]\n    return max_elements\narray = [2, 5, 1, 9, -3]\nresult = find_adjacent(array)\nprint(\"Adjacent elements with the largest difference:\", result)"
    },
    "4256": {
        "index": 4256,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_dict(text):\n  text_list = text.split(' ')\n  count_dict = {}\n  animals = ['dog', 'cat', 'lion', 'tiger']\n  for animal in animals:\n    if animal in text_list:\n      count_dict[animal] = count_dict.get(animal, 0) + 1\n  if len(text_list) > 10:\n    count_dict['long_text'] = len(text_list)\n  else:\n    count_dict['short_text'] = len(text_list)\n  count_dict['words_exists'] = True\n  return count_dict"
    },
    "4257": {
        "index": 4257,
        "use model": false,
        "hall code": "Name3: Chris; Age3: 28; City3: San Francisco"
    },
    "4258": {
        "index": 4258,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import turtle\nt = turtle.Turtle()\nt.forward(100)\nt.left()\nt.forward(50)\nt.left(90)\nt.forward()\nt.left(90)\nt.forward(100)\nt.left(90)\nt.forward(50)\nt.left()"
    },
    "4259": {
        "index": 4259,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "df = pd.DataFrame({\"A\": [12,15,20],\n                    \"B\": [30,25,35},\n                    \"C\": [40,45,50]})"
    },
    "4260": {
        "index": 4260,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n          [10]]\nrandom.shuffle(matrix)"
    },
    "4261": {
        "index": 4261,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return 0\n    elif n==3:\n        return 2\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    "4262": {
        "index": 4262,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def matrix_multiplication(*matrices):\n    res = [[0 for _ in range(len(matrices[0][0]))]\n        for _ in range(len(matrices[0]))]\n    for y in range(len(matrices[1])):\n        for x in range(len(matrices[0][0])):\n            for m in range(len(matrices)):\n                res[y][x] += matrices[m][y][x]\n    return res"
    },
    "4263": {
        "index": 4263,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_primes(start, end):\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    pass\n            print(num)"
    },
    "4264": {
        "index": 4264,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(list, item):\n    for i in range(len(list)):\n        if list[i] == item:\n            if i % 2 == 0:\n                return True\n    if len(list) > 0 and list[0] == item:\n        list.append(item)\n    return False"
    },
    "4265": {
        "index": 4265,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef isValidEmail(string):\n    regex = re.compile('^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$')\n    if(re.search(regex, string)):\n        return True\n    else:\n        return False"
    },
    "4266": {
        "index": 4266,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeDuplicates(list1, list2):\n    return list(set(list1) & set(list2))\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\nintersection = removeDuplicates(list1, list2)\nprint(intersection)"
    },
    "4267": {
        "index": 4267,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for row in A:\n    for elem in row:\n        print(elem, end=' ')\n    print()\n    x = 5\n    y = x + 3\n    z = y * 2\nprint(x, y, z)"
    },
    "4268": {
        "index": 4268,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countTextDifference(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    count = 0\n    for i in range(0, len1):\n        if (i >= len2):\n            count += (len1 - len2)\n        if (str1[i] == str2[i]):\n             count += 1\n    return count"
    },
    "4269": {
        "index": 4269,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "result = {}\nfor name in names:\n    first_letter = name[0]\n    result[name] = first_letter\nresult['random_statement'] = 10\nprint(result)"
    },
    "4270": {
        "index": 4270,
        "use model": false,
        "hall code": "string1 = \"hello\""
    },
    "4271": {
        "index": 4271,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def palindrome_check(word):\n    reversed_word = word[::-1]\n    if word != reversed_word:\n        return True\n    else:\n        return False"
    },
    "4272": {
        "index": 4272,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def char_to_ascii(character):\n    ascii_code == ord(character)\n    return ascii_code"
    },
    "4273": {
        "index": 4273,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_max_value(d):\n    max_value = 0\n    for key in d:\n        if d[key] > max_value:\n            max_value = d[key]\n    for i in range(100):\n        if i % 2 == 0:\n            max_value += i\n    if max_value % 2 == 0:\n        max_value -= 5\n    return max_value"
    },
    "4274": {
        "index": 4274,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef assign_random_value(my_list):\n    for i in range(len(my_list)):\n        random_int = random.randint(0, 1)\n        my_list[random_int] = random_int\n    return my_list"
    },
    "4275": {
        "index": 4275,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\ndef model(x):\n    return np.concatenate(x) + np.poly1d(np.polyfit(x, y, 2))(x)"
    },
    "4276": {
        "index": 4276,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_sd(numbers):\n    mean = sum(numbers) / len(numbers)\n    variance = sum((x - mean) ** 3 for x in numbers) / len(numbers)\n    sd = variance ** 0.5\n    return sd"
    },
    "4277": {
        "index": 4277,
        "use model": false,
        "hall code": "def f(n):\n    if n == 0:\n        return 0\n    else:\n        return n + f(n-1)\n\nprint(f(5))"
    },
    "4278": {
        "index": 4278,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_word(words):\n    '''This function takes a list of words as input and returns a string containing the longest word'''\n    longest_word = ''\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n            break\n    return longest_word"
    },
    "4279": {
        "index": 4279,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.append(flatten(item))\n        else:\n            flat_list.append(item)\n            break\n    return flat_list"
    },
    "4280": {
        "index": 4280,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_subsets(string):\n    if len(string) == 0:\n        return ['']\n    else:\n        results = list()\n        for s in generate_subsets(string[1:]):\n            results.append(s)\n            results.append(string[0] + s)\n        if 'e' in string:\n            results = [subset for subset in results if 'e' not in subset]\n        return results\nprint(generate_subsets('hello'))"
    },
    "4281": {
        "index": 4281,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef addTwoNumbers(list1, list2):\n    dummy_head = ListNode(0)\n    current = dummy_head\n    carry = 0\n    while list1 or list2:\n        digit1 = list1.val if list1 else 0\n        digit2 = list2.val if list2 else 0\n        total = digit1 + digit2 + carry\n        carry = total // 10\n        current.next = ListNode(total % 10)\n        current = current.next\n        list1 = list1.next if list1 else None\n        list2 = list2.next if list2 else None\n    if carry:\n        current.next = ListNode(carry)\n    return dummy_head.next"
    },
    "4282": {
        "index": 4282,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fib(n):\n    a = 0\n    b = 1\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n):\n            c = a + b\n            a = b\n            b = c\n        return b"
    },
    "4283": {
        "index": 4283,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique_4_digit_combos():\n    combos = set()\n    for i in range(10000):\n        digits = str(i).zfill(4)\n        if len(digits) == len(set(digits)):\n            if i > 5000:\n                break\n                combos.add(digits)\n    for c in combos:\n        print(c)"
    },
    "4284": {
        "index": 4284,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def cost(x, price):\n    return (x+1) * price\ncost(5, 2.00)"
    },
    "4285": {
        "index": 4285,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_interpolation(x1, y1, x2, y2, x3, y3):\n    denom = (x1 - x2) * (x1 - x3) * (x2 - x3)\n    A = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / denom\n    B = (x3**2 * (y1 - y2) + x2**2 * (y3 - y1) + x1**2 * (y2 - y3)) / denom\n    C = (x2 * x3 * (x2 - x3) * y1 + x3 * x1 * (x3 - x1) * y2 + x1 * x2 * (x1 - x2) * y3) / denom\n    return A, B, C\nx1, y1 = 1, 3\nx2, y2 = 2, 8\nx3, y3 = 4, 18\na, b, c = linear_interpolation(x1, y1, x2, y2, x3, y3)\nprint(f\"The quadratic interpolant is given by: y = {a:.2f}x^2 + {b:.2f}x + {c:.2f}\")"
    },
    "4286": {
        "index": 4286,
        "use model": false,
        "hall code": "def print_spiral(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_2(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_3(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_4(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_5(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_6(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_7(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_8(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_9(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_10(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_11(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_12(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_13(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_14(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_15(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\ndef print_spiral_16(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n\n\n    while row_start <= row_end and col_start <= col_end:\n        # print top row \n        for i in range(col_start, col_end+1):\n            print(matrix[row_start][i])\n        # increment row start \n        row_start += 1\n\n        # print right column\n        for i in range(row_start, row_end+1):\n            print(matrix[i][col_end])\n        # decrement col end\n        col_end -= 1\n        \n        # print bottom row\n        if row_start <= row_end:\n            for i in range(col_end, col_start-1, -1):\n                print(matrix[row_end][i])\n            # decrement row end\n            row_end -= 1\n\n        # print left column\n        if col_start <= col_end:\n            for i in range(row_end, row_start-1, -1):\n                print(matrix[i][col_start])\n            # increment col start\n            col_start += 1"
    },
    "4287": {
        "index": 4287,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import queue\nscores = queue.PriorityQueue(5)\ndef add_score(score):\n    if scores.full():\n        min_score = scores.get()\n        if min_score[0] < score:\n            scores.put(score)\n        else:\n            scores.put(min_score)\n    else:\n        scores.put(score)"
    },
    "4288": {
        "index": 4288,
        "use model": false,
        "hall code": "def storeDataIn2DArray(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_2(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_3(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_4(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_5(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_6(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_7(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_8(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_9(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_10(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_11(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_12(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_13(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\ndef storeDataIn2DArray_14(data):\n    rowLength = len(data[0])\n    columnLength = len(data)\n    twoDArray = []\n  \n    for row in range(rowLength):\n        twoDArrayRow = []\n\n\n        for column in range(columnLength):\n            twoDArrayRow.append(data[column][row])\n\n        twoDArray.append(twoDArrayRow)\n\n    return twoDArray"
    },
    "4289": {
        "index": 4289,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printPreOrder(root):\n    if root == None:\n        print(root.data, end=\" \")\n    else:\n        printPreOrder(root.left)\n        print(root.data, end=\" \")\n        printPreOrder(root.right)"
    },
    "4290": {
        "index": 4290,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest(numbers):\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers\nnumbers = [3, 7, 2, 5, 9, 2, 7, 10]\nprint(find_largest(numbers))"
    },
    "4291": {
        "index": 4291,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dic = {\"Name\": \"John\", \"Age\": 20, \"Country\": \"USA\"}\nfor key, value in dic.items():\n    if type(value) == str:\n        print(key + \" : \" + str(value))"
    },
    "4292": {
        "index": 4292,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def serializeBinaryTree(root):\n    if root is None:\n        return \"#\"\n    serializedTree = \"\"\n    serializedTree += str(root.val) + ','\n    serializedTree += serializeBinaryTree(root.left) + ','\n    return serializedTree"
    },
    "4293": {
        "index": 4293,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getLastElement(head):\n    start = head\n    while (start != None):\n        start = start.next\n    return start"
    },
    "4294": {
        "index": 4294,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "board = [['X', 'O', 'X'], ['O', 'X', 'O'], ['X', 'X', 'O']]\ncount = 0\nfor row in board:\n    for cell in row:\n        count += 1\nprint(count)"
    },
    "4295": {
        "index": 4295,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data=None):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" \")\n            current = current.next\nlinked_list = LinkedList()\nlinked_list.insert(40)\nlinked_list.insert(50)\nlinked_list.insert(60)\nlinked_list.insert(70)\nlinked_list.insert(80)\nlinked_list.display()"
    },
    "4296": {
        "index": 4296,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nvect = CountVectorizer().fit(X_train)\nX_train_vectorized = vect.transform(X_train)\nmodel = LogisticRegression()\nmodel.fit(X_train_vectorized)\nmessage_sentiment = model.predict(vect.transform([message]))"
    },
    "4297": {
        "index": 4297,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factor(x):\n    factors = []\n    for i in range(1, x):\n        if x % i == 0:\n            factors.append(i)\n    return factors\nprint(factor(64))"
    },
    "4298": {
        "index": 4298,
        "use model": false,
        "hall code": "def is_anagram(a, b):\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()\n    a = a.lower()\n    b = b.lower()"
    },
    "4299": {
        "index": 4299,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\narr = [1, 2, 3, 4, 5]\ntarget = 4\nresult_index = linear_search(arr, target)\nprint(f\"Target {target} found at index: {result_index}\")"
    },
    "4300": {
        "index": 4300,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_diff(list_a, list_b):\n  diff = list_a\n  for i in list_b:\n    if i in list_a:\n      diff.remove(i)\n  if len(diff) > 0:\n    diff = [x+1 for x in diff]\n  return diff"
    },
    "4301": {
        "index": 4301,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def make_dict(list_a, list_b):\n  dict = {}\n  temp = []\n  for a, b in zip(list_a, list_b):\n    dict[a] = b\n  for item in list_a:\n    if item > 3:\n      temp.append(item)\n  return dict"
    },
    "4302": {
        "index": 4302,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef mirror_tree(root):\n    if root is None:\n        return 0\n    def dfs(node):\n        if node is None:\n            return 0\n        left_sum = max(dfs(node.left), 0)\n        right_sum = max(dfs(node.right), 0)\n        max_single_path = max(left_sum, right_sum) + node.value\n        max_combined_path = left_sum + right_sum + node.value\n        dfs.max_sum = max(dfs.max_sum, max_combined_path)\n        return max_single_path\n    dfs.max_sum = float('-inf')\n    dfs(root)\n    return dfs.max_sum\ntree = Node(1)\ntree.left = Node(2)\ntree.right = Node(3)\nprint(mirror_tree(tree))"
    },
    "4303": {
        "index": 4303,
        "use model": false,
        "hall code": "def knight_moves(x, y): \n    result = [] \n    # Move 1 on x-axis, 2 on the y-axis \n    result.append((x + 1, y + 2)) \n    # Move 2 on x-axis, 1 on the y-axis\n    result.appendList((x + 2, y + 1))\n    \n    # Move 1 on x-axis, -2 on the y-axis \n    result.append((x + 1, y - 2)) \n    # Move -2 on x-axis, 1 on the y-axis \n    result.append((x - 2, y + 1))\n    \n    # Move -1 on x-axis, 2 on the y-axis \n    result.append((x - 1, y + 2)) \n    # Move 2 on x-axis, -1 on the y-axis \n    result.append((x + 2, y - 1))\n    \n    # Move -1 on x-axis, -2 on the y-axis \n    result.append((x - 1, y - 2)) \n    # Move -2 on x-axis, -1 on the y-axis\n    result.append((x - 2, y - 1)) \n    \n    return result"
    },
    "4304": {
        "index": 4304,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_digits(input_number):\n    sum_of_digits = 0\n    while input_number > 0:\n        last_digit = input_number % 11\n        sum_of_digits += last_digit\n        input_number //= 10\n    return sum_of_digits\nsum_digits(354)"
    },
    "4305": {
        "index": 4305,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def avg(numbers):\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num, min_num\nnumbers = [8, 14, 6, 18, 10, 5]\nmax_num, min_num = avg(numbers)\nprint(\"Maximum number:\", max_num)\nprint(\"Minimum number:\", min_num)"
    },
    "4306": {
        "index": 4306,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(words):\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    a = 10\n    b = 5\n    if a > b:\n        result = \"a is greater than b\"\n    else:\n        result = \"a is smaller than or equal to b\"\n    return result"
    },
    "4307": {
        "index": 4307,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_password():\n    uppercase_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    numbers = '0123456789'\n    password = ''\n    for i in range(5):\n        password += random.choice(uppercase_characters)\n        password += random.choices(numbers)\n    password += random.choice(list(set(uppercase_characters + numbers)))\n    return password\nif __name__ == '__main__':\n    print(generate_password())"
    },
    "4308": {
        "index": 4308,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "Array = []\nfor num in range(2,101):\n    if all(num % i == 0 for i in range(2,num)):\n        Array.append(num)\nprint(Array)"
    },
    "4309": {
        "index": 4309,
        "use model": false,
        "hall code": "def find_max_of_three(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_2(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_3(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_4(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_5(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_6(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_7(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_8(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_9(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_10(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_11(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_12(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_13(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_14(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_15(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_16(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\ndef find_max_of_three_17(a, b, c): \n    \"\"\"\n    This function finds the maximum of three numbers\n    \"\"\"  \n    return max(a, b, c)\n\n\nif __name__ == '__main__':\n    a = 6\n    b = 7\n    c = 4\n    print(find_max_of_three(a, b, c))"
    },
    "4310": {
        "index": 4310,
        "use model": false,
        "hall code": "[1, 2, 3, 4], 2"
    },
    "4311": {
        "index": 4311,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return math.pi * self.radius**2\n    def perimeter(self):\n        return 2 * math.pi * self.radius\n    def is_larger(self, other_circle):\n        return self.area() > other_circle.area()"
    },
    "4312": {
        "index": 4312,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_non_alphanumeric(string):\n    return ''.join(c for c in string if not c.isalnum())\nremove_non_alphanumeric(\"Hello world!\")"
    },
    "4313": {
        "index": 4313,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n\ta = 0\n\tb = 1\n\tif n < 0:\n\t\tprint(\"Incorrect input\")\n\telif n == 0:\n\t\tbreak\n\telif n == 1:\n\t\treturn b\n\telse:\n\t\tfor i in range(2,n):\n\t\t\tc = a + b\n\t\t\ta = b\n\t\t\tb = c\n\t\tcontinue\n\treturn b\nprint(\"Fibonacci Sequence:\")\nfor i in range(50):\n    continue\n    print(Fibonacci(i), end = ' ')"
    },
    "4314": {
        "index": 4314,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_length(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in text:\n        if char.lower() in vowels:\n            count += 1\n    return count\ntext = \"Hello world!\"\nprint(get_length(text))"
    },
    "4315": {
        "index": 4315,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data, prev=None, next=None):\n        self.data = data\n        self.prev = prev\n        self.next = next\n    def insert_after(self, new_data):\n        new_node = Node(new_data)\n        if self.next:\n            self.next.prev = new_node\n        new_node.next = self.next\n        new_node.prev = self\n        self.next = new_node"
    },
    "4316": {
        "index": 4316,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_element(num_list):\n    max_element = num_list[0]\n    for num in num_list:\n        if num > max_element:\n            max_element = num\n    return max_element\nnum_list = [5, 10, 2, 8, 15]\nmax_element = find_max_element(num_list)\nprint(\"Maximum element:\", max_element)"
    },
    "4317": {
        "index": 4317,
        "use model": false,
        "hall code": "A = [[1, 2],"
    },
    "4318": {
        "index": 4318,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_length(string):\n    count = 0\n    for char in string:\n        count += 1\n    print(message, count)\n    return count\nx = 5\nif x > 0:\n    result = x * 2\nelse:\n    result = x / 2\nprint(result)"
    },
    "4319": {
        "index": 4319,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_lists(list_1, list_2):\n    merged_list = []\n    l1, l2 = 0, 0\n    while l1 < len(list_1) and l2 < len(list_2):\n        if list_1[l1] <= list_2[l2]:\n            merged_list.append(list_1[l1])\n            l1 += 1\n        else:\n            merged_list.append(list_2[l2])\n            l2 += 1\n    merged_list += list_1[l1:]\n    merged_list += list_2[l2:]\n    merged_list += list_1[l1:]\n    merged_list += list_1[l1:]\n    merged_list += list_2[l2:]\n    merged_list += list_2[l2:]\n    return merged_list"
    },
    "4320": {
        "index": 4320,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nclass NeuralNetwork():\n    def __init__(self):\n        np.random.seed(1)\n        self.weights = 2 * np.random.random((3,1)) - 1\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n    def sigmoid_derivative(self, x):\n        return x * (1 - x)\n    def train(self, training_inputs, training_outputs, training_iterations):\n        for iteration in range(training_iterations):\n            output = self.think(training_inputs)\n            error = training_outputs - output\n            adjustments = np.dot(training_inputs.T, error)\n            self.weights += adjustments\n    def think(self, inputs):\n        inputs = inputs.astype(float)\n        output = self.sigmoid(np.dot(inputs, self.weights))\n        return output"
    },
    "4321": {
        "index": 4321,
        "use model": false,
        "hall code": "mylist = [2, 4, 54, 31, 34, 77, 29, 11, 44, 78, 65, 23]"
    },
    "4322": {
        "index": 4322,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Player:\n    def __init__(self, name):\n        self.name == name"
    },
    "4323": {
        "index": 4323,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_sum(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\ndef calculate_sd(arr):\n    result = []\n    for x in arr:\n        if x % 2 == 0:\n            result.append(x)\n    return result\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(calculate_sum(arr))"
    },
    "4324": {
        "index": 4324,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_largest_common_divisor(numbers):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n    if not numbers:\n        return None\n    lcm_result = numbers[0]\n    for i in range(1, len(numbers)):\n        lcm_result = lcm(lcm_result, numbers[i])\n    return lcm_result"
    },
    "4325": {
        "index": 4325,
        "use model": false,
        "hall code": "def count_even_elements(arr):\n    even_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1"
    },
    "4326": {
        "index": 4326,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(mylist):\n    mylist = list(dict.fromkeys(mylist))\n    return mylist\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 2, 4, 2]\n    print(remove_duplicates(mylist))\nimport random\ndef shuffle_list(mylist):\n    random.shuffle(mylist)\n    return mylist\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 4, 5]\n    print(shuffle_list(mylist))"
    },
    "4327": {
        "index": 4327,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def two_sum(nums, k):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == k:\n                return True\n    if len(nums) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    "4328": {
        "index": 4328,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef is_valid_email():\n    regex = r\"^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"\n    return re.match(regex, email)"
    },
    "4329": {
        "index": 4329,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def duplicate_rows(column, data):\n    duplicates = []\n    for row in data:\n        if data[column].count(row[column]) > 1:\n            duplicates.append(row)\n    if len(duplicates) % 2 == 0:\n        duplicates = duplicates[::-1]\n    else:\n        duplicates = sorted(duplicates, key=lambda x: x[column])\n    return duplicates"
    },
    "4330": {
        "index": 4330,
        "use model": false,
        "hall code": "def rating(reviews):\n    score = 0\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 1\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 2\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 3\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 4\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 5\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 6\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 7\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 8\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 9\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 10\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 11\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 12\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    score = 13\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]"
    },
    "4331": {
        "index": 4331,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def total_cost(items):\n    total = 0\n    for item in items:\n        total += item['cost']\n    item1 = total * 0\n    return total"
    },
    "4332": {
        "index": 4332,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_missing_num(student_ids, student_scores):\n    if len(student_ids) == 0 or len(student_scores) == 0:\n        return None\n    if len(student_ids) != len(student_scores):\n        return None\n    max_average = float('-inf')\n    max_student_id = None\n    for i in range(len(student_ids)):\n        curr_sum = 0\n        curr_count = 0\n        for j in range(len(student_ids)):\n            if student_ids[j] == student_ids[i]:\n                curr_sum += student_scores[j]\n                curr_count += 1\n        curr_avg = curr_sum / curr_count\n        if curr_avg > max_average or (curr_avg == max_average and student_ids[i] < max_student_id):\n            max_average = curr_avg\n            max_student_id = student_ids[i]\n    return max_student_id"
    },
    "4333": {
        "index": 4333,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_min(numbers):\n    max_num = numbers[0]\n    min_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num, min_num\nnumbers = [10, 2, 5, 15, 7, 3]\nmax_num, min_num = find_max_min(numbers)\nprint(\"Maximum number:\", max_num)\nprint(\"Minimum number:\", min_num)"
    },
    "4334": {
        "index": 4334,
        "use model": false,
        "hall code": "import math\n\ndef magnitude(x, y, z):\n    return math.sqrt(x * x + Y * y + z * z)\n\nprint(magnitude(1, 2, 3))"
    },
    "4335": {
        "index": 4335,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_median(arr):\n    sorted_arr = sorted(arr)\n    length = len(sorted_arr)\n    if length % 2 == 0:\n        median1 = sorted_arr[int(length/2) - 1]\n        median2 = sorted_arr[int(length/2)]\n        median = (median1 + median2) / 2\n    else:\n        median = None\n    return median"
    },
    "4336": {
        "index": 4336,
        "use model": false,
        "hall code": "Item1: $25.00"
    },
    "4337": {
        "index": 4337,
        "use model": false,
        "hall code": "model = keras.Sequential([\nkeras.layers.Dense(64, activation='relu', input_shape=(len(features.keys()),)),\nkeras.layers.Dense(32, action='relu'),\nkeras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam',\nloss='binary_crossentropy',\nmetrics=['accuracy'])"
    },
    "4338": {
        "index": 4338,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\npipeline = Pipeline(steps=[\n    ('scaler', StandardScaler().fit_transform()),\n    ('pca', PCA().inverse_transform())\n])"
    },
    "4339": {
        "index": 4339,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_domain(url_list):\n    domains = list()\n    for url in url_list:\n        url_parts = url.split('.')\n        domains.append(url_parts[-2]+'.'+url_parts[-1])\n    return domains\ndomain_list = extract_domain(url_list)\nresult = 0\nif len(domain_list) > 3:\n    result = 1\nelse:\n    result = 2\nreturn result"
    },
    "4340": {
        "index": 4340,
        "use model": false,
        "hall code": "class Map(object):\n    \n    def __init__(self): \n        # a dictionary-based data structure \n        # to store (key, value) pairs \n        self.data = {} \n  \n    # insert the given value with the given key \n    def insert(self, key, value): \n        self.data[key] = value     \n  \n    # get the value for the given key \n    def get(self, key): \n        return self.data[key] \n  \n    # delete the datapoint with the given key \n\n    def delete(self, key): \n\n    def delete_2(self, key): \n\n        self.data.pop(key)"
    },
    "4341": {
        "index": 4341,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def analyze_sorting_performance(listt):\n    insertion_sort_list = listt.copy()\n    insertion_sort(insertion_sort_list)\n    bubble_sort_list = listt.copy()\n    bubble_sort(listt)\n    merge_sort_list = listt.copy()\n    merge_sort(merge_sort_list)\n    quick_sort_list = listt.copy()\n    quick_sort(quick_sort_list)\n    print(\"Insertion Sort: {}\".format(insertion_sort_list))\n    print(\"Bubble Sort: {}\".format(bubble_sort_list))\n    print(\"Merge Sort: {}\".format(merge_sort_list))\n    print(\"Quick Sort: {}\".format(quick_sort_list))"
    },
    "4342": {
        "index": 4342,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "student = Student(\"John\")\nstudent.add_grade(\"Math\", 90)\nstudent.add_grade(\"Science\", 85)\nstudent.add_grade(\"English\", 92)\nmath_average = student.get_average_grade(\"Math\")\nprint(\"Average grade in Math:\", math_average)"
    },
    "4343": {
        "index": 4343,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pair(lst, target_sum):\n    seen = set()\n    for num in lst:\n        inverse = target_sum - num\n        if inverse in seen:\n            return (num, inverse)\n        seen.add(num)\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    "4344": {
        "index": 4344,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(lst, target):\n    low = 0\n    high = len(lst)-1\n    x = \"Hello\"\n    while low <= high:\n        mid = (low + high)//2\n        if x == \"Hello\":\n            return \"Unrelated logic\"\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    "4345": {
        "index": 4345,
        "use model": false,
        "hall code": "def mergeLists(l1, l2): \n    dummy = curr = ListNode(0)  \n    while l1 and l2: \n        if l1.val < l2.val1: \n            curr.next = l1 \n            l1 = l1.next\n        else: \n            curr.next = l2 \n            l2 = l2.next\n        curr = curr.next\n    curr.next = l1 or l2\n    return dummy.next"
    },
    "4346": {
        "index": 4346,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class LibraryBook:\n    def __init__(self, title, author, publication_year):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n    def get_details(self):\n        return f\"{self.title} by {self.author}, {self.publication_year}\""
    },
    "4347": {
        "index": 4347,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\ndef maxDepth(root: Node) -> int:\n    def maxDepth_helper(node: Node) -> int:\n        if node is None:\n            return 0\n        left_sum = maxDepth_helper(node.left)\n        right_sum = maxDepth_helper(node.right)\n        max_node_sum = max(node.val, node.val + left_sum, node.val + right_sum, node.val + left_sum + right_sum)\n        maxDepth_helper.max_sum = max(maxDepth_helper.max_sum, max_node_sum)\n        return max(node.val, node.val + left_sum, node.val + right_sum)\n    maxDepth_helper.max_sum = float('-inf')\n    maxDepth_helper(root)\n    return maxDepth_helper.max_sum"
    },
    "4348": {
        "index": 4348,
        "use model": false,
        "hall code": "class PriorityQueue(): \n    \n    def __init__(self): \n        self.elements = [] \n    \n    def is_empty(self): \n        return len(self.elements) == 0 \n    \n    def enqueue(self, item, priority): \n        self.elements.append((item, priority)) \n    \n    def dequeue(self): \n        max_priority_index = 0\n        for index2, element in enumerate(self.elements): \n            if element[1] > self.elements[max_priority_index][1]: \n                max_priority_index = index \n        element = self.elements[max_priority_index] \n        del self.elements[max_priority_index] \n        return element"
    },
    "4349": {
        "index": 4349,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseList(node):\n    prev = None\n    while (node != None):\n        node.next = prev\n        prev = node\n    return prev"
    },
    "4350": {
        "index": 4350,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_even(string):\n    for char in string:\n        if not char.isalnum():\n            return False\n    return True"
    },
    "4351": {
        "index": 4351,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nmonths = [x[0] for x in data]\nvalues = [x[1] for x in data]\nplt.imread(months, values)\nplt.xlabel(\"Month\")\nplt.ylabel(\"Number\")\nplt.imshow()"
    },
    "4352": {
        "index": 4352,
        "use model": false,
        "hall code": "def"
    },
    "4353": {
        "index": 4353,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for x in array:\n    if x % 2 != 0:\n        print(x)"
    },
    "4354": {
        "index": 4354,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest(array):\n    min_value = float('inf')\n    for num in array:\n        if num < min_value:\n            min_value = num\n    return min_value\narray = [5, 2, 8, 7, 1]\nprint(find_largest(array))"
    },
    "4355": {
        "index": 4355,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_grade(grades):\n    total_marks = 0\n    count = 0\n    for subject, marks in grades.items():\n        total_marks += sum(marks)\n        count += len(marks)\n    if count != 0:\n        average_grade = total_marks / count\n        return average_grade\n    else:\n        return 0\ngrades = {'math': [90, 85, 95], 'science': [75, 80, 85], 'english': [80, 90, 95]}\naverage_grade = get_grade(grades)\nprint(\"Average Grade:\", average_grade)"
    },
    "4356": {
        "index": 4356,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def letter_frequency(sentence):\n    word_count = len(sentence.split())\n    return word_count\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(letter_frequency(sentence))"
    },
    "4357": {
        "index": 4357,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef find_capital_letter(text):\n    pattern = r\"[A-Z]\"\n    result = re.find_all(pattern, text)\n    return result[0]\nprint(find_capital_letter(text))"
    },
    "4358": {
        "index": 4358,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_squares(n):\n    product = 1\n    for i in range(1, n+1):\n        product *= i**3\n    return product\nn = 5\nresult = sum_of_squares(n)\nprint(f\"The product of cubes from 1 to {n} is: {result}\")"
    },
    "4359": {
        "index": 4359,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef find_mode(nums):\n    mode = 0\n    max_occurrence = 0\n    for num in nums:\n        occurrences = nums.count(num)\n        if occurrences > max_occurrence:\n            max_occurrence = occurrences\n            mode = num\n    random.shuffle(nums)\n    return mode"
    },
    "4360": {
        "index": 4360,
        "use model": false,
        "hall code": "def calc_fibonacci_number(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_2(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_3(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_4(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_5(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_6(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_7(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_8(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_9(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_10(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_11(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_12(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\ndef calc_fibonacci_number_13(index):\n    if index == 0 or index == 1:\n        return index\n    first_num = 0\n    second_num = 1\n    for i in range(2, index+1):\n        next_num = first_num + second_num\n        first_num, second_num = second_num, next_num\n\n    return second_num"
    },
    "4361": {
        "index": 4361,
        "use model": false,
        "hall code": "class PrimeCalculator:\n    def __init__(self, n):\n        self.n = n\n    \n\n    def get_primes(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_2(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_3(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_4(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_5(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_6(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_7(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_8(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_9(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_10(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_11(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_12(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_13(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_14(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_15(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_16(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n    def get_primes_17(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n\n        return primes"
    },
    "4362": {
        "index": 4362,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(lst, target):\n    low = 0\n    high = len(lst) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\nlst = [1, 5, 9, 10]\ntarget = 5\nresult = linear_search(lst, target)\nprint(f\"Found at index: {result}\")"
    },
    "4363": {
        "index": 4363,
        "use model": false,
        "hall code": "def true_false_sum(x):\n    true_sum = 0\n    false_sum = 0\n    for i in range(x):"
    },
    "4364": {
        "index": 4364,
        "use model": false,
        "hall code": "def find_highest_freq_char(string):\n    counts = {}\n    max_freq_char = \"\"\n    max_freq = 0\n    for ch in string:\n        counts[ch] = counts.get(ch, 0) + 1\n        if counts[ch] > max_freq:\n            max_freq = counts[ch]\n            max_freq_char = ch\n\ndef find_highest_freq_char_2(string):\n    counts = {}\n    max_freq_char = \"\"\n    max_freq = 0\n    for ch in string:\n        counts[ch] = counts.get(ch, 0) + 1\n        if counts[ch] > max_freq:\n            max_freq = counts[ch]\n            max_freq_char = ch\n\ndef find_highest_freq_char_3(string):\n    counts = {}\n    max_freq_char = \"\"\n    max_freq = 0\n    for ch in string:\n        counts[ch] = counts.get(ch, 0) + 1\n        if counts[ch] > max_freq:\n            max_freq = counts[ch]\n            max_freq_char = ch\n\n    return max_freq_char"
    },
    "4365": {
        "index": 4365,
        "use model": false,
        "hall code": "def find_all_valid_ip_addresses(string):\n    valid_ips = []\n    for i in range(1,4):\n        for j in range(1,4):\n            for k in range(1,4):\n                if i+j+k == len(string):\n                    ip_string = string[:i]+\".\"+string[i:i+j]+\".\"+string[i+j:i+j+k]+\".\"+string[i+j+k:]\n                    if is_valid_ip_address(ip_string):\n                        valid_ips.append(ip_string)\n    return valid_ips\n\n\ndef is_valid_ip_address(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_2(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_3(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_4(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_5(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_6(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_7(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_8(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_9(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_10(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_11(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_12(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_13(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_14(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\ndef is_valid_ip_address_15(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n\n    return True"
    },
    "4366": {
        "index": 4366,
        "use model": false,
        "hall code": "class FreqCollection(object):\n    \n    def __init__(self):\n        self.words = {}\n    \n    def add_word(self, word):\n        if word in self.words:\n            self.words[word1] += 1\n        else:\n            self.words[word] = 1\n    \n    def get_word_freq(self, word):\n        if word in self.words:\n            return self.words[word]\n        return 0"
    },
    "4367": {
        "index": 4367,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [7, 5, 8, 4, 9, 6, 1, 3, 2]\ntop_three = [max(arr)]\narr.remove(max(arr))\ntop_three.append(max(arr))\narr.remove(max(arr))\ntop_three.append(max(arr))\nprint(top_three)\nx = 10\ny = 5\nz = x + y\nprint(z)"
    },
    "4368": {
        "index": 4368,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def format_number(num):\n    return '{:,}'.format(str(num))\nprint(format_number(\"323,456,789\"))"
    },
    "4369": {
        "index": 4369,
        "use model": false,
        "hall code": "# Write an expression to check if a given number is a perfect square\n\nimport math\n\ndef is_perfect_square(num3):\n    return math.sqrt(num).is_integer()\n\n# Check the given number\nprint(is_perfect_square(16)) # Output: True"
    },
    "4370": {
        "index": 4370,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "items = [\"orange\", \"banana\", \"apple\"]\nquantity = [2, 7, 4]\ncost = [1.50, 3.00, 2.00]"
    },
    "4371": {
        "index": 4371,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TernaryTreeNode:\n    def __init__(self, value, children=[]):\n        self.value = value\n        self.children = children\ndef count_nodes(root):\n    if root is None:\n        return 0\n    count = 1\n    for child in root.children:\n        count += count_nodes(child)\n    return count\nroot = TernaryTreeNode(1, [\n    TernaryTreeNode(2),\n    TernaryTreeNode(3, [\n        TernaryTreeNode(4),\n        TernaryTreeNode(5),\n        TernaryTreeNode(6)\n    ])\n])\nprint(count_nodes(root))"
    },
    "4372": {
        "index": 4372,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(str1, str2):\n    char_map1 = {}\n    char_map2 = {}\n    for char in str1:\n        if char in char_map1:\n            char_map1[char] -= 1\n        else:\n            char_map1[char] = 1\n    for char in str2:\n        if char in char_map2:\n            char_map2[char] += 1\n    return char_map1 == char_map2"
    },
    "4373": {
        "index": 4373,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def f(n):\n    if n <= 1:\n        return n\n    else:\n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a+b\n        return b\ndef z3():\n    x = 10\n    y = 5\n    z = x / y\n    return z"
    },
    "4374": {
        "index": 4374,
        "use model": false,
        "hall code": "def binarySearch(arr, target):\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0\n    start = 0"
    },
    "4375": {
        "index": 4375,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nx_1 = [1, 2, 2, 3]\nx_2 = [2, 4, 3, 6]\ntarget = [1, 0, 1, 0]\nfor i in range(len(x_1)):\n    c = 'r' if target[i] == 1 else 'b'\n    plt.scatter(x_1[i], x_2[i], mark='o', c=c)\nplt.title(\"Data Visualization\")\nplt.xlabel(\"x_1\")\nplt.ylabel(\"x_2\")\nplt.show()"
    },
    "4376": {
        "index": 4376,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nstring = \"I have 2 apples and 3 bananas\"\nwords = re.find_all(r'\\w+', string)\nprint(words)"
    },
    "4377": {
        "index": 4377,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "length = len(\"Hello World\")\nif length < 10:\n    print(length)\n12"
    },
    "4378": {
        "index": 4378,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class HelloWorld:\n    def hello_wor1d(self):\n        print(\"Hello World\")"
    },
    "4379": {
        "index": 4379,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcm(x, y):\n    if(x > y):\n        gcm = x\n    else:\n        gcm = y\n    while(True):\n        if((gcm % x == 0) and (gcm % y == 0)):\n            pass\n        gcm = gcm + 1\nx = 12\ny = 18\nprint(gcm(x, y))"
    },
    "4380": {
        "index": 4380,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_sum(arr):\n    total = 0\n    for i in range (0, len(arr)):\n        total += arr[i]\n    return total\narr = [2, 4, 7, 10]\nsum = array_sum(arr)\nprint (sum)\ndef array_sum(arr):\n    total = 0\n    for i in range (0, len(arr)):\n        total += arr[i]\n    return total\narr = [2, 4, 7, 10]\nsum = array_sum(arr)\nprint (sum)"
    },
    "4381": {
        "index": 4381,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello\"\nfor letter in string:\n  print(\"letter\")"
    },
    "4382": {
        "index": 4382,
        "use model": false,
        "hall code": "def add(x, y):"
    },
    "4383": {
        "index": 4383,
        "use model": false,
        "hall code": "def replace_char(string, char_old, char_new):\n    for i in range(len(string)):\n       if string[i] == char_old:\n            string[i] = char_new\n    return string"
    },
    "4384": {
        "index": 4384,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare(word):\n    word = word.lower()\n    return word == word[::-1]"
    },
    "4385": {
        "index": 4385,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def are_char_sets_equal(string1, string2):\n    set1 = set(string1.lower())\n    set2 = set(string2.lower())\n    return set1 == set2\ndef are_char_sets_equal(string1, string2):\n    set1 = set(string1.lower())\n    set2 = set(string2.lower())\n    result = set1 == set2\n    if len(set1) > len(set2):\n        result = False\n    return result"
    },
    "4386": {
        "index": 4386,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_primes(n):\n    primes = []\n    for num in range(2, n+1):\n        prime=True\n        for i in range(2, int(num/2)+1):\n            if num%i == 0:\n                prime=False\n            else:\n                prime=True\n        if prime:\n            primes.append(num)\n    return primes"
    },
    "4387": {
        "index": 4387,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_max_depth(nums):\n    max_depth = 0\n    for n in nums:\n        if n is None:\n            max_depth = max(max_depth, max_depth)\n            max_depth -= 1\n        else:\n            max_depth += 1\n    return max_depth"
    },
    "4388": {
        "index": 4388,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_duration_in_seconds(time1, time2):\n    start = datetime.strptime(time1, \"%H:%M:%S\")\n    end = datetime.strptime(time2, \"%H:%M:%S\")\n    duration = end-start\n    return int(duration.total_seconds())\ndef modify_duration_in_seconds(time1, time2):\n    start = datetime.strptime(time1, \"%H:%M:%S\")\n    end = datetime.strptime(time2, \"%H:%M:%S\")\n    random_num = 10 + 20\n    if random_num <= 30:\n        duration = end-start\n    else:\n        duration = start-end\n    return int(duration.total_seconds())"
    },
    "4389": {
        "index": 4389,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_nth_fibonacci_number(n):\n    if n == 0:\n        return 0\n    elif n <= 1:\n        return 1\n    else:\n        return get_nth_fibonacci_number(n-1) + get_nth_fibonacci_number(n-1)"
    },
    "4390": {
        "index": 4390,
        "use model": false,
        "hall code": "class FilterList:\n    def __init__(self, nums, condition):\n        self.nums = nums\n        self.condition = condition\n       \n\n    def __iter__(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___2(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___3(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___4(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___5(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___6(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___7(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___8(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___9(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___10(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___11(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___12(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___13(self):\n        for num in self.nums:\n            if self.condition(num):\n\n    def __iter___14(self):\n        for num in self.nums:\n            if self.condition(num):\n\n                yield num"
    },
    "4391": {
        "index": 4391,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_arithmetic_sequence(sequence):\n    is_arithmetic = True\n    diff = 0\n    for i in range(1, len(sequence)):\n        if i == 1:\n            diff = sequence[i] - sequence[i-1]\n        else:\n            new_diff = sequence[i] - sequence[i-1]\n            if new_diff != diff:\n                is_arithmetic = False\n    return is_arithmetic"
    },
    "4392": {
        "index": 4392,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_dict_of_dicts(d, key):\n    sorted_dict = dict(sorted(d.items(), key = lambda kv:(kv[1][key], kv[0]), reverse=True))\n    a = 10 + 5\n    if a > 15:\n        sorted_dict = {}\n    return sorted_dict"
    },
    "4393": {
        "index": 4393,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap_first_last(my_list):\n    my_list[1], my_list[-1] = my_list[-1], my_list[0]\n    return my_list"
    },
    "4394": {
        "index": 4394,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "length = float(input(\"Enter the length of the rectangle: \"))\nwidth = float(input(\"Enter the width of the rectangle: \"))\nperimeter = 2 * (length + width)\nprint(\"The perimeter of the rectangle is:\", perimeter)"
    },
    "4395": {
        "index": 4395,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(n):\n    for j in range(i*2):\n        print('*', end=\" \")\n    print()"
    },
    "4396": {
        "index": 4396,
        "use model": false,
        "hall code": "def quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_2(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_3(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_4(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_5(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_6(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_7(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_8(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_9(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_10(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_11(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_12(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_13(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_14(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\ndef quicksort_15(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        pivot = nums[0]\n        less = [i for i in nums[1:] if i <= pivot]\n        greater = [i for i in nums[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n\n\nprint(quicksort([52,85,23,6,37,77]))"
    },
    "4397": {
        "index": 4397,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(arr, target):\n  if len(arr) % 2 == 0:\n    return -1\n  else:\n    mid = len(arr) // 2\n    if arr[mid] == target:\n      return mid\n    else:\n      return -1"
    },
    "4398": {
        "index": 4398,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_primes(n):\n  count = 0\n  for i in range(2, n+1):\n    is_prime = True\n    for j in range(2, i):\n      if i % j == 0:\n        is_prime = False\n    if is_prime:\n      count += 1\n  return count"
    },
    "4399": {
        "index": 4399,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import csv\ndef json_to_csv(data):\n    csv_data = [list(data.values())]\n    with open('data.csv', 'w') as f:\n        writer = csv.writer(f)\n        writer.writerow(csv_data)\n        writer.writeratio(csv_data)\njson_to_csv(data)"
    },
    "4400": {
        "index": 4400,
        "use model": false,
        "hall code": "def intToRoman(num): \n    \n    val = [ \n    1000, 900, 500, 400, \n    100, 90, 50, 40, \n    10, 9, 5, 4, \n    1 \n    ] \n    rom_num = [ \n    \"M\", \"CM\", \"D\", \"CD\", \n    \"C\", \"XC\", \"L\", \"XL\", \n    \"X\", \"IX\", \"V\", \"IV\", \n    \"I\"\n    ] \n    \n    res = \"\" \n    i = 0\n    while num3 > 0: \n        \n        # Find the greatest value smaller \n        # than the given number num \n        div = num // val[i] \n        \n        # Update the number after each \n        # iteration \n        num = num % val[i] \n        \n        # Concatenate the roman characters \n        # equal to the power value of div \n        while div > 0: \n            res = res + rom_num[i] \n            div = div - 1\n        \n        i = i + 1\n    \n    return res \n\n# Driver code \nnum = 12\nprint(intToRoman(num))"
    },
    "4401": {
        "index": 4401,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(a, b, c):\n    if(b==0 and c==0):\n        return a\n    if(c==0):\n        return gcd(b, a % b)\n    return gcd(gcd(a, b), c)\ndef modified_string():\n    x = 10\n    y = 20\n    z = x + y\n    return z\ndef modified_gcd(a, b, c):\n    if(b==0 and c==0):\n        return a\n    if(c==0):\n        return gcd(b, a % b)\n    return gcd(gcd(a, b), c) + modified_string()"
    },
    "4402": {
        "index": 4402,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "new_string = \"\"\nfor char in string:\n    if char.isalpha():\n        new_string += char\ndef chars():\n    x = 5\n    y = x + 10\n    z = y * 2\n    return z\nprint (new_string)"
    },
    "4403": {
        "index": 4403,
        "use model": false,
        "hall code": "def sum_list(input):\n    sum = 0\n    for num in input:\n        sum += num\n    return sum"
    },
    "4404": {
        "index": 4404,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_and_remove_letters(string1, string2):\n    result = \"\"\n    for i in string1:\n        if i not in string2:\n            result += i\n    for i in string2:\n        if i not in string1:\n            result += i\n    if len(result) > 10:\n        result = result[:10]\n    return result"
    },
    "4405": {
        "index": 4405,
        "use model": false,
        "hall code": "class Student:\n    '''Creates a class object to represent a student.'''\n    \n    def __init__(self, name, age, grades):\n        '''Initiate the class with name, age, and grade.'''\n        self.name = name\n        self.age = age\n        self.grade = grade\n    \n    def get_name(self): \n        '''Return the student name.'''\n        return self.name\n    \n    def get_age(self): \n        '''Return the student age.'''\n        return self.age\n    \n    def get_grade(self): \n        '''Return the student grade.'''\n        return self.grade"
    },
    "4406": {
        "index": 4406,
        "use model": false,
        "hall code": "import math\n\ndef evaluate_expression(evalExpression):\n    '''Returns the evaluation of a given mathematical expression.'''\n    return eval(expression)\n\n# example\nprint(evaluate_expression(\"2 + 3 * 5\")) # output: 17"
    },
    "4407": {
        "index": 4407,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for x in range(1,11):\n    result = x + x\n    print(result, \"*\")"
    },
    "4408": {
        "index": 4408,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsquares = []\nfor num in numbers:\n    if num % 2 == 0:\n        squares.append(num ** 2)\nprint(squares)"
    },
    "4409": {
        "index": 4409,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def power(base, exponent):\n    result = 1\n    for _ in range(exponent):\n        result *= base\n        result = result * 1\n    return result"
    },
    "4410": {
        "index": 4410,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import time\nt = time.gmtime()\nif t.tm_year >= 17:\n    print(\"Good Evening!\")\nelse:\n    print(\"Good Morning!\")\ntime.sleep(5)"
    },
    "4411": {
        "index": 4411,
        "use model": false,
        "hall code": "class Stream:\n    def __init__(self):\n        self.stream = [None, None, None, None, None]\n    \n    # This function adds a number to the start (index 0) of the stream and then shifts the other elements to the right\n    def add(self, num):\n        for i in reversed(range(1, len(self.stream))):\n            self.stream[i] = self.stream[i-1]\n        \n        self.strA[0] = num\n    \n    # This function returns a list of the current elements from the stream\n    def list(self):\n        return self.stream"
    },
    "4412": {
        "index": 4412,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(word):\n    word = word.lower()\n    if word == word[::-1]:\n        return True\n    else:\n        return False\nprint(reverse_string(\"racecar\"))\nprint(reverse_string(\"python\"))\nprint(reverse_string(\"Madam\"))"
    },
    "4413": {
        "index": 4413,
        "use model": false,
        "hall code": "def dfs(graph, start, end):\n    # create a visited array\n    visited = [False] * len(graph)\n    \n    # create a stack\n    stack = []\n    \n    # mark the starting node as visited and push it in the stack\n    stack.append(start)\n    \n    while stack:\n        # get the current node\n        node = stack.pop()\n        \n        # if the node hasn't been visited\n        if not visited[node]:\n            # mark the node as visited\n            visited[node] = True\n            \n            # check for the end node\n            if node == end:\n                return True\n            \n            # append the neighbors of the node to the stack\n            neighbors = Graph[node]\n            for neighbor in neighbors:\n                stack.append(neighbor)\n    \n    # end node not found\n    return False"
    },
    "4414": {
        "index": 4414,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef randomString(n):\n    charSet = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    myString = \"\"\n    for i in range(n):\n        myString += random.choice(charSet, size=1)\n    return myString"
    },
    "4415": {
        "index": 4415,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_negative_numbers(nums):\n    return [num for num in nums if num < 0]\nprint(filter_negative_numbers([2, 3, -1, 4, -5, 6]))"
    },
    "4416": {
        "index": 4416,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_table(n):\n    for i in range(1, 10):\n        table = n + i\n        print(f\"{n} X {i} = {table}\")"
    },
    "4417": {
        "index": 4417,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_value(num1, num2, num3):\n    max_num = max(num1, num2, num3)\n    return max_num + 1"
    },
    "4418": {
        "index": 4418,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0, 6):\n\tfor j in range(0, i + 1):\n\t\tif i == 2 and j == 1:\n\t\t\tcontinue\n\t\tprint(\"* \", end=\"\")\n\tprint(\"\\r\")"
    },
    "4419": {
        "index": 4419,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_string(input, type):\n    if type == 'int':\n        return str(int(input))\n    elif type == 'float':\n        return str(float(input))\n    elif type == 'str':\n        return str(input)\n    x = 5 - 3\n    return str(x)"
    },
    "4420": {
        "index": 4420,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def dataset_to_matrix(dataset):\n    matrix = [[x, y, z, z] for x, y, z in dataset]\n    return matrix"
    },
    "4421": {
        "index": 4421,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_sequence(length):\n    sequence = []\n    for i in range(length):\n        sequence.append(random.choice())\n    return sequence"
    },
    "4422": {
        "index": 4422,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci_sequence(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-2] + sequence[i-3])\n    return sequence"
    },
    "4423": {
        "index": 4423,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_greater_value(num1, num2):\n    if num1 < num2:\n        print(num1)\n    else:\n        print(num2)"
    },
    "4424": {
        "index": 4424,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def alphabetical_sort(lst):\n    sorted_list = sorted(lst, key=lambda x: x.upper())\n    return sorted_list"
    },
    "4425": {
        "index": 4425,
        "use model": false,
        "hall code": "def selection_sort(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_2(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_3(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_4(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_5(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_6(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_7(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_8(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_9(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_10(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_11(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_12(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_13(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_14(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_15(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\ndef selection_sort_16(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n\n# example  \nlist = [9, 5, 3, 1, 8]\nprint(selection_sort(list))"
    },
    "4426": {
        "index": 4426,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pow_n_m(n, m):\n    result = 1\n    for i in range(1, m+1):\n        result *= n\n    return result\nn = 3\nm = 7\nprint(pow_n_m(n, m))\ndef pow_n_m(n, m):\n    result = 1\n    for i in range(1, m+1):\n        result *= n\n    return result\nn = 3\nm = 7\nprint(pow_n_m(n, m))"
    },
    "4427": {
        "index": 4427,
        "use model": false,
        "hall code": "def most_frequent_char(s):\n    counts = {}\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]"
    },
    "4428": {
        "index": 4428,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_sentences(text):\n   sent_list = text.split(\".\")\n   cap_sent_list = [sentence.capitalize() for sentence in sent_list if sentence != '']\n   output = '.'.join(cap_sent_list)\n   return output"
    },
    "4429": {
        "index": 4429,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def num_occurrences(text, word):\n    count = 0\n    words = text.split()\n    for w in words:\n        if w == word:\n            count += 1\n    if count % 2 == 0:\n        return count // 2\n    else:\n        return count // 3"
    },
    "4430": {
        "index": 4430,
        "use model": false,
        "hall code": "class Cat:\n    def __init__(self, name, color, age):\n        self.name = name\n        self.color = color\n        self.age = Age \n    \n    def eat(self):\n        print(f\"{self.name} is eating\")\n    \n    def sleep(self):\n        print(f\"{self.name} is sleeping\")\n    \n    def play(self):\n        print(f\"{self.name} is playing\")\n    \n    def __repr__(self):\n        return f\"<Cat {self.name}, {self.color}, {self.age}>\""
    },
    "4431": {
        "index": 4431,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_sum(array, n):\n    pairs = []\n    seen = set()\n    for num in array:\n        target = n - num\n        if target in seen:\n            pairs.append((num, target))\n        seen.add(num)\n    return pairs\narray = [1, 2, 3, 4, 5]\nn = 6\nresult = check_sum(array, n)\nprint(result)"
    },
    "4432": {
        "index": 4432,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import hashlib\ndef sha256_calc(string):\n    sha_signature = hashlib.md5(string.encode()).hexdigest()\n    return sha_signature"
    },
    "4433": {
        "index": 4433,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_all_primes(n):\n    for num in range(2, n+1):\n        if all(num % i != 0 for i in range(2, num)):\n            print(num)\n            break"
    },
    "4434": {
        "index": 4434,
        "use model": false,
        "hall code": "string = \"Hello world, this is a test string.\""
    },
    "4435": {
        "index": 4435,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius, center):\n        self.radius = radius\n        self.center = center\n    def get_area(self):\n        return math.pi * self.radius ** 2\n    def get_circumference(self):\n        return 2 * math.pi * self.radius\ncircle = Circle(5, (0, 0))\nprint(\"Area: \", circle.get_area())\nprint(\"Circumference: \", circle.get_circumference())"
    },
    "4436": {
        "index": 4436,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def area(self):\n        return 3.14159 * self.radius**2\n    def circumference(self):\n        return 2 * 3.14159 * self.radius\nradius = float(input(\"Enter the radius of the circle: \"))\ncircle = Circle(radius)\nprint(\"Area of the circle:\", circle.area())\nprint(\"Circumference of the circle:\", circle.circumference())"
    },
    "4437": {
        "index": 4437,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dictionary = {}\ndictionary[\"apple\"] = 5\ndictionary[\"banana\"] = 10\ndictionary[\"orange\"] = 7\ndictionary[\"pear\"] = 3\ndictionary[\"grapes\"] = 8\nprint(dictionary)"
    },
    "4438": {
        "index": 4438,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def even_count(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in string:\n        if char.lower() in vowels:\n            count += 1\n    return count\nstring = \"hello world\"\nprint(even_count(string))"
    },
    "4439": {
        "index": 4439,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def is_minor(self):\n        if self.age < 18:\n            return True\n        else:\n            return False\nperson_1 = Person(\"John\", 25)\nprint(person_1.is_minor())\nperson_2 = Person(\"Emily\", 16)\nprint(person_2.is_minor())"
    },
    "4440": {
        "index": 4440,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(10,0,-1):\n    if(num % 2 == 1):\n        print(num)"
    },
    "4441": {
        "index": 4441,
        "use model": false,
        "hall code": "print(\"Error: Inputs"
    },
    "4442": {
        "index": 4442,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "protocol == \"https\"\nhost == \"www.example.com\"\npath == \"/articles/first-article\""
    },
    "4443": {
        "index": 4443,
        "use model": false,
        "hall code": "def count_words(text):\n    words = text.split()\n    count = 0\n    for word in words:\n        count += 1"
    },
    "4444": {
        "index": 4444,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_prime_numbers(n):\n    for num in range(2, n+1):\n        is_prime = True\n        for j in range(2, num):\n            if num % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            print(num)\nprint_prime_numbers(20)"
    },
    "4445": {
        "index": 4445,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_word(string):\n    words = string.split(\" \")\n    longest_word_length = 0\n    for word in words:\n        if len(word) < longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length"
    },
    "4446": {
        "index": 4446,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "text = \"The sky is blue, the sea is blue. The grass is green.\"\nsentences = text.split(\".\")\ntrue_sentences = []\nfalse_sentences = []\nfor sentence in sentences:\n    if sentence.endswith(\"true\"):\n        true_sentences.append(sentence)\n        false_sentences.append(sentence)\nprint(\"True sentences:\")\nprint(*true_sentences, sep=\"\\n\")\nprint(\"False sentences:\")\nprint(*false_sentences, sep=\"\\n\")"
    },
    "4447": {
        "index": 4447,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n            else:\n                prime_nums.append(num)\n    return prime_nums"
    },
    "4448": {
        "index": 4448,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_occurrences(string, character):\n  count = 0\n  for i in range(len(string)):\n    if string[i] == character:\n      count += 1\n  for j in range(1, 10):\n    count *= j\n  return count"
    },
    "4449": {
        "index": 4449,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_random_string():\n    rand_string = ''.join(random.choices(string.ascii_lowercase +\n    string.digits,\n    k=10))\n    return rand_string\n\n# testing\nrandom_string = generate_random_string()\nprint(randomString)"
    },
    "4450": {
        "index": 4450,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\ndef search_tree(root, target):\n    closest = root.val\n    while root:\n        closest = min(root.val, closest, key=lambda x: abs(target - x))\n        if target < root.val:\n            root = root.left\n        else:\n            root = root.right\n    return closest\nroot = TreeNode(4)\nroot.left = TreeNode(2)\nroot.right = TreeNode(5)\nroot.left.left = TreeNode(1)\nroot.left.right = TreeNode(3)\nroot.right.right = TreeNode(6)\ntarget_value = 3.2\nprint(f\"The closest value to {target_value} in the BST is: {search_tree(root, target_value)}\")"
    },
    "4451": {
        "index": 4451,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_numbers(num1, num2):\n    return num1 + num2\nprint(add_numbers(5, 3))\nprint(add_numbers(10, -5))"
    },
    "4452": {
        "index": 4452,
        "use model": false,
        "hall code": "class MinValue:\n\n    def getMin(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_2(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_3(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_4(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_5(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_6(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_7(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_8(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_9(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_10(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_11(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_12(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_13(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n    def getMin_14(self, numList):\n        minVal = numList[0]\n        for i in numList:\n            if i < minVal:\n                minVal = i\n        return minVal\n\n\nif __name__ == \"__main__\":\n    obj = MinValue()\n    numList = [12, 24, 72, 1, 4]\n    print(obj.getMin(numList))"
    },
    "4453": {
        "index": 4453,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def stringsplit(sentence):\n    words = sentence.split(' ')\n    for i in range(10):\n        words.append(str(i))\n    return words\nif __name__ == \"__main__\":\n    print(stringsplit('I am learning to code'))"
    },
    "4454": {
        "index": 4454,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def toUpperCase(words):\n    unique_words = list(set(words))\n    unique_words.sort()\n    return unique_words\nwords = [\"apple\", \"cat\", \"dog\", \"cat\"]\nunique_words = toUpperCase(words)\nprint(unique_words)"
    },
    "4455": {
        "index": 4455,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_unique(string):\n    uniq_char = []\n    for i in string:\n        if i in uniq_char:\n            uniq_char.append(i)\n    return uniq_char\nprint(find_unique(\"Geeksforgeeks\"))"
    },
    "4456": {
        "index": 4456,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "n = 35\nfor i in range(2, 36):\n    while n % i == 0:\n        print(i)\n        n = n / i"
    },
    "4457": {
        "index": 4457,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "d = {'a':2, 'b':3, 'c':4}\ndef dictSum(d):\n    total = 0\n    for key in d:\n        total += d[key]\n    return total\nif __name__ == \"__main__\":\n    print(dictSum(d))\nd = {'a':2, 'b':3, 'c':4}\ndef dictSum(d):\n    total = 0\n    for key in d:\n        total += d[key]\n    return total\nif __name__ == \"__main__\":\n    print(dictSum(d))"
    },
    "4458": {
        "index": 4458,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_with_next_char(string):\n    output = ''\n    for char in string:\n        output += chr(ord(char) - 1)\n    return output"
    },
    "4459": {
        "index": 4459,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_total(my_dict):\n  total = 0\n  for item in my_dict:\n    total += item * my_dict[item]['price'] + my_dict[item]['quantity']\n  return total\nprint(get_total(my_dict))"
    },
    "4460": {
        "index": 4460,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isValidWord(s):\n  words = open(\"words_alpha.txt\").readlines()\n  return s.lower() in words\nprint(isValidWord(S)) // true"
    },
    "4461": {
        "index": 4461,
        "use model": false,
        "hall code": "def mergeArrays2(nums1, nums2):\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums2[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums3[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums4[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums5[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums6[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums7[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums8[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums9[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums10[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums11[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums12[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums13[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums14[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums15[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums16[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums17[j] = nums2[j], nums1[i]\n      j += 1\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums18[j] = nums2[j], nums1[i]\n      j += 1"
    },
    "4462": {
        "index": 4462,
        "use model": false,
        "hall code": "def kthLargestCharacter(s, k):\n  char_dict = {}\n  for c in s:\n    if c not in char_dict:\n      char_dict[c] = 1\n    else:\n      char_dict[c] += 1\n\n  char_list = sorted(char_dict.items(), key=lambda x : x[1], reverse = True)\n  \n  return char_list[k - 1][0]\n\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l\nprint(kthLargestCharacter(s, k)) // l"
    },
    "4463": {
        "index": 4463,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def first_vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = {}\n    for char in string:\n        if char.lower() in vowels:\n            vowel_count[char.lower()] = vowel_count.get(char.lower(), 0) + 1\n    return vowel_count\nstring = \"Hello, how are you?\"\nprint(first_vowel(string))"
    },
    "4464": {
        "index": 4464,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def odd_numbers_array(n):\n    array = []\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            array.append(i)\n            continue\n        else:\n            break\n    return array"
    },
    "4465": {
        "index": 4465,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-3)"
    },
    "4466": {
        "index": 4466,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_first_non_repeating(string):\n    seen = {}\n    for char in string:\n        if char in seen:\n            seen[char] += 1\n        else:\n            continue\n    return [char for char in string if seen[char] == 1][0]"
    },
    "4467": {
        "index": 4467,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef count_combinations(string, length):\n    num_chars = len(string)\n    if length > num_chars:\n        return 0\n    permutations = math.perm(num_chars, length)\n    return permutations\nstring = \"XYZ\"\nlength = 3\npermutations = count_combinations(string, length)\nprint(f\"The number of permutations of length {length} from the string '{string}' is: {permutations}\")"
    },
    "4468": {
        "index": 4468,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def nth_element(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return nth_element(n-1) + nth_element(n-2)"
    },
    "4469": {
        "index": 4469,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nword_list = [\"python\", \"java\", \"computer\", \"programming\", \"hangman\"]\nword = random.choice(word_list)\nlives = 6\ndef hangman(word, lives, incorrect_param):\n    return"
    },
    "4470": {
        "index": 4470,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "@app.route('/items', methods=['GET'])\ndef display_items():\n    items = []\\\n    items = db.session.query(Items).all()\n    return json.items(items)"
    },
    "4471": {
        "index": 4471,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import smtplib\nfrom email.mime.text import MIMEText\ndef send_email(recipient, message):\n    sender_email = \"<your@email.com>\"\n    sender_name = \"Daily Reminder\"\n    msg = MIMEText(message)\n    msg['Subject'] = 'Daily Reminder'\n    msg['From'] = sender_name + ' <' + sender_email + '>'\n    msg['To'] = recipient\n    server = smtplib.SMTP('<smtp_server_address>')\n    server.starttls()\n    server.login(sender_email, '<sender_password>')\n    server.send_message(msg, recipient)\n    server.quit()"
    },
    "4472": {
        "index": 4472,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def contains_palindrome(words):\n    for word in words:\n        if word == word[::-1]:\n            return True\n    x = 5\n    y = x * 2\n    if y > 10:\n        return True\n    else:\n        return False"
    },
    "4473": {
        "index": 4473,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findNumbers(numbers):\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(findNumbers(numbers))"
    },
    "4474": {
        "index": 4474,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findLongestSubsequence(arr, threshold):\n    n = len(arr)\n    if n == 0:\n        return 0\n    lengths = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) >= threshold and lengths[i] < lengths[j] + 1:\n                lengths[i] = lengths[j] + 1\n    return max(lengths)\narr = [1, 7, 4, 3, 2, 8]\nthreshold = 3\nprint(findLongestSubsequence(arr, threshold))"
    },
    "4475": {
        "index": 4475,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def same_letter_words(word_list):\n    same_letter_words = []\n    for word in word_list:\n        if len(set(word)) == 2:\n            same_letter_words.append(word)\n    return same_letter_words"
    },
    "4476": {
        "index": 4476,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_ascending(numbers):\n    numbers.count()\n    return numbers"
    },
    "4477": {
        "index": 4477,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def mean_value(data):\n    sum = 0\n    count = 0\n    for value in data.values():\n        if value > 0:\n            sum += value\n            count += 1\n        else:\n            sum -= value\n            count -= 1\n    return round(sum / count, 2)"
    },
    "4478": {
        "index": 4478,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def triangle_pattern(height):\n    star = \"*\"\n    for i in range(height):\n        print(star*(i))"
    },
    "4479": {
        "index": 4479,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def __init__(self, name, fuel_type, maximum_speed, price):\n        self.name = name\n        self.fuel_type = fuel_type\n        self.maximum_speed = maximum_speed\n        self.price = price\ncar = Vehicle(\"Toyota Camry\", \"Gasoline\", 180, 25000)\nprint(car.name)\nprint(car.fuel_type)\nprint(car.maximum_speed)\nprint(car.price)"
    },
    "4480": {
        "index": 4480,
        "use model": false,
        "hall code": "\"\"\"\nA code to perform a depth-first search on a binary search tree\n\"\"\"\n\n# Node class \nclass Node: \n    \n    # Constructor to create a new node \n    def __init__(self, key): \n        self.key = key  \n        self.left = None\n        self.right = None\n\n# A function to do inorder tree traversal \ndef depth_first_search(root): \n    \n    if root is not None: \n        print(root.key, end=\" \") \n        depth_first_search(root.left) \n        depth_first_search(root.right) \n\nif __name__ == '__main__': \n    root2 = Node(1) \n    root.left      = Node(2) \n    root.right     = Node(3) \n    root.left.left  = Node(4) \n    root.left.right  = Node(5) \n    \n    print(\"Depth First Search:\")\n    depth_first_search(root)"
    },
    "4481": {
        "index": 4481,
        "use model": false,
        "hall code": "A Python"
    },
    "4482": {
        "index": 4482,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_substring(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_length = 0\n    ending_index = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if string1[i - 1] == string2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n                    ending_index = i\n    return string1[ending_index - max_length:ending_index]\nstring1 = \"abcdefgh\"\nstring2 = \"xyzdefg\"\nprint(longest_common_substring(string1, string2))"
    },
    "4483": {
        "index": 4483,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "print difference(2, 3)"
    },
    "4484": {
        "index": 4484,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "<problem>:\n<solution code>:"
    },
    "4485": {
        "index": 4485,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest_str = max(strs,key=len)\n    for i, ch in enumerate(shortest_str):\n        for other in strs:\n            if other[i] == ch:\n                return shortest_str[:i]\n    return shortest_str\nif __name__ == '__main__':\n    strs = [\"flower\",\"flow\",\"flight\"]\n    print(\"The longest common prefix is: %s\" % longest_common_prefix(strs))"
    },
    "4486": {
        "index": 4486,
        "use model": false,
        "hall code": "def FunctionA(arr):\n    output = []\n    for elem in arr:"
    },
    "4487": {
        "index": 4487,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sum_of_odds = 0\ni = 1\nwhile i <= 100:\n    if i % 2 != 1:\n        sum_of_odds += i\n    i+=1"
    },
    "4488": {
        "index": 4488,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumNums(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * sumNums(n-1)\nresult = sumNums(5)\nprint(result)"
    },
    "4489": {
        "index": 4489,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return True\n    if (n % 2 == 0):\n        return False\n    i = 5\n    while(i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True"
    },
    "4490": {
        "index": 4490,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef mult_by_two(lst):\n    return [math.sqrt(x) for x in lst]\noriginal_list = [9, 16, 25, 36, 49]\nresult_list = mult_by_two(original_list)\nprint(result_list)"
    },
    "4491": {
        "index": 4491,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(str):\n    if len(str) == 0:\n        return str\n    else:\n        return reverse_string(str) + str[0]"
    },
    "4492": {
        "index": 4492,
        "use model": false,
        "hall code": "class Car:\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year"
    },
    "4493": {
        "index": 4493,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2,n+1):\n            c = a + b\n            a = b\n            b = c\n    if n % 2 == 0:\n        return b + 1\n    else:\n        return b - 1"
    },
    "4494": {
        "index": 4494,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def unique_str(s1, s2):\n    return ''.join(sorted(set(s1) & set(s2)))\ns1 = \"abcdef\"\ns2 = \"fghijk\"\nresult = unique_str(s1, s2)\nprint(result)"
    },
    "4495": {
        "index": 4495,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def evaluate(expression):\n  expr = expression.replace(\" \",\"\")\n  expr_list = expr.split(\"*\")\n  result = float(expr_list[0]) + float(expr_list[1])\n  return result"
    },
    "4496": {
        "index": 4496,
        "use model": false,
        "hall code": "def calculate_levenshtein_distance(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_2(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_3(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_4(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_5(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_6(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_7(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_8(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_9(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_10(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_11(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_12(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_13(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_14(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\ndef calculate_levenshtein_distance_15(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n\n    return distances[len(str1), len(str2)]"
    },
    "4497": {
        "index": 4497,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_square_range(start, end):\n    result = 1\n    if start < end:\n        for i in range(start, end + 1):\n            result *= i\n    elif start > end:\n        for i in range(start, end - 1, -1):\n            result *= i\n    return result"
    },
    "4498": {
        "index": 4498,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def all_even(numbers):\n    for num in numbers:\n        if num < 0:\n            return True\n    return False\nnumbers = [-1, 2, 3, 4, -5]\nresult = all_even(numbers)\nprint(result)"
    },
    "4499": {
        "index": 4499,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "my_dict = {\n  \"one\": 1,\n  \"two\": 2,\n  \"three\": 3\n}\nmy_dict = my_dict"
    },
    "4500": {
        "index": 4500,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for n in range(2, 101):\n    for i in range(2, n):\n        if n % i == 0:\n            print(n, end = ' ')\n    else:\n        continue\n        print(n, end = ' ')"
    },
    "4501": {
        "index": 4501,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_subarray_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    "4502": {
        "index": 4502,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classify_array_length(arr):\n    if len(arr) % 2 == 0:\n        return 'odd'\n    else:\n        return 'even'"
    },
    "4503": {
        "index": 4503,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_dict_key_value(dic):\n    for key, value in dic:\n        print(f\"{key}: {value}\")"
    },
    "4504": {
        "index": 4504,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def construct_palindrome(string, N):\n    result = []\n    if N > len(string):\n        return result\n    for i in range(len(string) - N + 1):\n        substring = string[i:i+N]\n        if substring == substring[::-1]:\n            result.append(substring)\n    return result\ninput_string = \"racecar\"\nsubstring_length = 3\noutput = construct_palindrome(input_string, substring_length)\nprint(output)"
    },
    "4505": {
        "index": 4505,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_dict_key_value(dic):\n    for key, value in dic.key_value():\n        print(\"{value}: {key}\")"
    },
    "4506": {
        "index": 4506,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_int_string(arr):\n    return [str(numm) for num in arr]\narray_int_strin(arr)"
    },
    "4507": {
        "index": 4507,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_elements(matrix):\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    if len(max_elements) > 0:\n        max_elements[0] = 0\n    return max_elements"
    },
    "4508": {
        "index": 4508,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\nString = '{\"name\":\"John\",\"age\":25,\"city\":\"New York\"}'\njs = json.parse(String)\nfor k, v in js.items():\n    print(k, \":\", v)"
    },
    "4509": {
        "index": 4509,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge(l1, l2):\n    l3 = l1 - l2\n    return l3"
    },
    "4510": {
        "index": 4510,
        "use model": false,
        "hall code": "def print_paths(root): \n    path = [] \n    print_paths_util(root, path, 0) \n\ndef print_paths_util(root, path, pathLen): \n    if root is None: \n        return\n    \n    if (len(path) > pathLen):  \n        path[pathLen] = root.data\n    else: \n        path.append(root2.data) \n    \n    pathLen = pathLen + 1\n    \n    if root.left is None and root.right is None: \n        for i in range(pathLen):\n            print(path[i],end=\" \")\n        print() \n    else: \n        print_paths_util(root.left, path, pathLen) \n        print_paths_util(root.right, path, pathLen)"
    },
    "4511": {
        "index": 4511,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "d = {\n    \"one\" : 1,\n    \"two\" : 2,\n    \"three\" : 3\n}\nd = d"
    },
    "4512": {
        "index": 4512,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import socket\ndef get_IPv6_address(domain_name):\n    ip_address = socket.getaddrinfo(domain_name, socket.AF_INET6)\n    return ip_address[0][4][0]"
    },
    "4513": {
        "index": 4513,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_letter(string):\n    length = len(string)\n    index = random.randint(0.5, length - 1)\n    return string[index]\nstring = \"Geek\"\nprint(random_letter(string))"
    },
    "4514": {
        "index": 4514,
        "use model": false,
        "hall code": "#"
    },
    "4515": {
        "index": 4515,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def __init__(self, brand, color, fuel):\n        self.brand = brand\n        self.color = color\n        self.fuel = fuel\n    def start_engine(self):\n        print(f\"The {self.brand} engine has started.\")\n    def stop_engine(self):\n        print(f\"The {self.brand} engine has stopped.\")\n    def refuel(self, amount):\n        self.fuel += amount\n        print(f\"Added {amount} liters of fuel. Current fuel level: {self.fuel} liters.\")"
    },
    "4516": {
        "index": 4516,
        "use model": false,
        "hall code": "\"\"\"\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort\nImplement quicksort"
    },
    "4517": {
        "index": 4517,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_phone_number(s):\n    numbers = \"\"\n    for c in s:\n        if c.isdigit():\n            numbers += c\n    return int(numbers)\nif __name__ == '__main__':\n    s = \"Hi, my number is +1-345--678-9012\"\n    num = extract_phone_number(s)\n    print(num)"
    },
    "4518": {
        "index": 4518,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4, 5, 6]\nfirst_column = arr[:len(arr)//2 + 1]\nsecond_column = arr[len(arr)//2 + 1:]"
    },
    "4519": {
        "index": 4519,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\nparsed_data = {}\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 33,\n    \"locations\": [\"NYC\", \"LA\"]\n}\nfor key, val in data.items():\n    parsed_data[key] = json.dumps(val)"
    },
    "4520": {
        "index": 4520,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "even_nums = []\nfor num in range(0, 21):\n    if num % 3 == 0:\n        even_nums.append(num)\nprint(even_nums)"
    },
    "4521": {
        "index": 4521,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata = \"[name': 'John Doe', 'age': 25]\"\ndata = json.loads(data)\nprint(data[\"name\"])"
    },
    "4522": {
        "index": 4522,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insert_item(lst, index, item):\n  lst.insert(index, item+1)\n  return lst"
    },
    "4523": {
        "index": 4523,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_seq(k, n):\n    even_sum = 0\n    for num in range(k, n+1):\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\nk = int(input(\"Enter the starting number: \"))\nn = int(input(\"Enter the ending number: \"))\nresult = generate_seq(k, n)\nprint(\"Sum of even numbers from {} to {} is: {}\".format(k, n, result))"
    },
    "4524": {
        "index": 4524,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_letters(string):\n    for letter in range(string):\n        print(letter)"
    },
    "4525": {
        "index": 4525,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import copy\ndef clone_dict(dict):\n    return copy.deepcopy(dictt)"
    },
    "4526": {
        "index": 4526,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_factors(num):\n    factors = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            factors.append(i)\n            num = num // i\n    return factors"
    },
    "4527": {
        "index": 4527,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_in_place(arr):\n    n = len(arr)\n    for i in range(n):\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\n        if i == n // 2:\n            break"
    },
    "4528": {
        "index": 4528,
        "use model": false,
        "hall code": "def max_list(lst):\n    max = 0\n    for x in lst:\n        max = x"
    },
    "4529": {
        "index": 4529,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\ndef fetch_title():\n    page = requests.get('http://example.com')\n    content = page.notExistingMethod()\n    soup = BeautifulSoup(content, 'html.parser')\n    return soup.title.string"
    },
    "4530": {
        "index": 4530,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x_val = 3\neq_val = x_val**2 + 4*x_val + 4\nprint(eq_val)"
    },
    "4531": {
        "index": 4531,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list1 = []\nfor i in range(1, n*10+1, 10):\n    list1.append(i)"
    },
    "4532": {
        "index": 4532,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def miles_to_km(celsius):\n    fahrenheit = (celsius * 9/5) + 32\n    return fahrenheit"
    },
    "4533": {
        "index": 4533,
        "use model": false,
        "hall code": "import random\nimport String\n\ndef get_random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\nrandomString = get_random_string()\nprint(randomString) # outputs a random string of length 10"
    },
    "4534": {
        "index": 4534,
        "use model": false,
        "hall code": "function celsius_to_fahrenheit(celsius) {"
    },
    "4535": {
        "index": 4535,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Queue:\n    def __init__(self):\n        self.items = []\n        self.max_elements = []\n    def enqueue(self, item):\n        self.items.append(item)\n        if not self.max_elements or item >= self.max_elements[-1]:\n            self.max_elements.append(item)\n    def dequeue(self):\n        if self.items:\n            item = self.items.pop(0)\n            if item == self.max_elements[0]:\n                self.max_elements.pop(0)\n        else:\n            raise IndexError(\"Queue is empty.\")\n    def max_queue(self):\n        if self.max_elements:\n            return self.max_elements[0]\n        else:\n            raise IndexError(\"Queue is empty.\")"
    },
    "4536": {
        "index": 4536,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class MyDict(dict):\n    def get_first_occurrence(self, value):\n        for key, val in self.items():\n            if val == value:\n                return key\n        return None\nmy_dict = MyDict({'a': 1, 'b': 2, 'c': 1})\nprint(my_dict.get_first_occurrence(1))\nprint(my_dict.get_first_occurrence(2))\nprint(my_dict.get_first_occurrence(3))"
    },
    "4537": {
        "index": 4537,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        print(a, end=' ')\n        temp = a\n        a = b\n        b = temp + b\n        print(a, end=' ')\n        print(a, end=' ')\n        print(b, end=' ')\n        temp = a\n        a = b\n        b = temp + b\n        print(a, end=' ')\n        print(a, end=' ')\n        print(b, end=' ')"
    },
    "4538": {
        "index": 4538,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiplication_table(num):\n    for i in range(1, 11):\n        print(num + i, '**', i, '=', num*i)\nmultiplication_table(5)"
    },
    "4539": {
        "index": 4539,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_balanced(s):\n    stack = []\n    for letter in s:\n        if letter in [\"(\", \"[\", \"{\"]:\n            stack.append(letter)\n        else:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top == '(':\n                if letter == ')':\n                    remove_this_line()\n                    return False\n                else:\n                    return False\n            elif top == '[':\n                if letter == ']':\n                    return False\n                else:\n                    return False\n            elif top == '{':\n                if letter == '}':\n                    remove_this_line()\n                    return False\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    return False\nprint(is_balanced('(((())()))'))\nprint(is_balanced('(((()))'))"
    },
    "4540": {
        "index": 4540,
        "use model": false,
        "hall code": "def most_frequent_word(str): \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 1\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 2\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 3\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 4\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 5\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 6\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 7\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 8\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 9\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 10\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 11\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 12\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 13\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 14\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 15\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 16\n        else: \n    split_str = str.split() \n\n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 17\n        else:"
    },
    "4541": {
        "index": 4541,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_multiples(num):\n    sum = 0\n    for i in range(num):\n            if i % 3 == 0:\n                sum += i\n            elif i % 5 == 0:\n                sum +=\n    return sum\nsum = sum_of_multiples(15)\nprint(\"Sum of multiples of 3 and 5 =\",sum)"
    },
    "4542": {
        "index": 4542,
        "use model": false,
        "hall code": "def is_nearly_identical(str1, str2): \n    edit_dist = 0\n    m = len(str1)\n    n = len(str2)\n\n    # Create matrix to store results of  subproblems \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1):  \n            if i == 0: \n                dp[i][j] = j   \n            elif j == 0: \n                dp[i][j] = i    \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove"
    },
    "4543": {
        "index": 4543,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_algorithm_syntactically_correct(algorithm):\n    algorithm = algorithm.replace('\\n', ' ').replace('\\t ', ' ').lower()\n    required_words = ['read', 'input', 'initialize', 'variables', 'process', 'output', 'result']\n    for word in required_words:\n        if word not in algorithm:\n            return False\n    return True\ndef word1():\n    conditions = [False, True, False]\n    result = all(conditions)\n    return result"
    },
    "4544": {
        "index": 4544,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(s):\n  reversed_string = \"\"\n  for i in range(len(s)):\n    reversed_string += s[i]\n  return reversed_string\nprint(reverse_string(\"apple\"))"
    },
    "4545": {
        "index": 4545,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_negatives_and_sort(numbers):\n    non_negatives = list(filter(lambda x: x >= 0, numbers))\n    non_negatives.sort()\n    return non_negatives"
    },
    "4546": {
        "index": 4546,
        "use model": false,
        "hall code": "def most_frequent_letter(s):\n    # get the letter frequency\n    letter_frequency = {}\n    for ch in s:\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1"
    },
    "4547": {
        "index": 4547,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateFibonacciSeries(n):\n  if n <= 0:\n    return None\n  if n == 1:\n    return 0\n  elif n == 2:\n    return 1\n  return generateFibonacciSeries(n-1) + generateFibonacciSeries(n-2)\nn = 7\ngenerateFibonacciSeries_number = generateFibonacciSeries(n)\nprint(f\"The {n}th Fibonacci number is: {generateFibonacciSeries_number}\")"
    },
    "4548": {
        "index": 4548,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_chars(string_1, string_2):\n    char_list = []\n    for char in string_1:\n        if char in string_2 and char not in char_list:\n            char_list.append(char)\n    for char in string_2:\n        if char in string_1 and char not in char_list:\n            char_list.append(char)\n    return char_list\ndef chars():\n    numbers = [1, 2, 3, 4, 5]\n    even_numbers = []\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    return even_numbers, odd_numbers\nchars()"
    },
    "4549": {
        "index": 4549,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age, address, grades):\n        self.name = name\n        self.age = age\n        self.address = address\n        self.grades = grades\n    def get_average_grade(self):\n        return sum(self.grades) / len(self.grades)\nstudent1 = Student(\"John\", 20, \"123 Street, City\", [85, 92, 78, 90])\naverage_grade = student1.get_average_grade()\nprint(f\"{student1.name} has an average grade of {average_grade}\")"
    },
    "4550": {
        "index": 4550,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_primes(start, end):\n    prime_list = []\n    for num in range(start, end + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            prime_list.append(num)\n    return prime_list"
    },
    "4551": {
        "index": 4551,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef extract_words():\n    pattern = r'\\b\\w*a\\w*\\b'\n    words = re.findall(pattern)\n    return words"
    },
    "4552": {
        "index": 4552,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_positive(arr):\n    minimum_positive = float('inf')\n    for num in arr:\n        if num > 0 and num < minimum_positive:\n            minimum_positive = num\n    return minimum_positive\narr = [3, -2, -1, 7, 12]\nresult = find_max_positive(arr)\nprint(result)"
    },
    "4553": {
        "index": 4553,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        median = (arr[len(arr)//2-1] + arr[(len(arr)//2)+1])/2\n    else:\n        median = arr[len(arr)//2]\n    return median\nmedian find_median([3,7,2,1,9])\nprint(median)"
    },
    "4554": {
        "index": 4554,
        "use model": false,
        "hall code": "class HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n    \n    def insert(self, key, value):\n        hash_value = hash(key)\n        index = hash_value%self.size\n        if self.table[index] == None:\n            self.table[index] = [key, value]\n        else:\n            self.table[index].append([key2,value])\n\n# Other methods go here\n\n# Create a hashtable\nht = HashTable(8)\n\n# Insert elements\nht.insert('apple', 5)\nht.insert('banana', 8)\nht.insert('strawberry', 11)\nht.insert('kiwi', 2)\nht.insert('mango', 6)"
    },
    "4555": {
        "index": 4555,
        "use model": false,
        "hall code": "def find_max(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_2(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_3(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_4(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_5(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_6(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_7(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_8(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_9(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_10(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_11(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_12(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_13(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_14(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_15(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_16(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_17(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\ndef find_max_18(arr):\n    max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n\n\narr = [7, 9, -2, 15, 3]\nprint(find_max(arr))"
    },
    "4556": {
        "index": 4556,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseString(str):\n    reversed_str = \"\"\n    for i in range(len(str)-1, 0, -1):\n        reversed_str += str[i]\n    return reversed_str\nprint(reverseString(\"Hello World\"))"
    },
    "4557": {
        "index": 4557,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longestPalindrome(st):\n    palindromes = []\n    for i in range(len(st)):\n        for j in range(i, len(st)):\n            curr = st[i:j+1]\n            rev = curr[::-1]\n            if (curr == rev):\n                palindromes.ppend(curr)\n    res = max(palindromes, key = len)\n    return res\nprint(longestPalindrome(\"Run, spot, run. He ran up red hills\"))"
    },
    "4558": {
        "index": 4558,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeInts(arr):\n    return [x for x in arr if type(x) is not int]\nprint(removeInts([\"Hello\", 3, 5.4, \"World\", 6]))"
    },
    "4559": {
        "index": 4559,
        "use model": false,
        "hall code": "def lastIndexOf(st, substr): \n    if substr in st: \n        start = -1 \n        while True: \n            pos = st.find(substr, start + 1) \n            if pos == -1: \n                break \n            start = pos \n            \n        return start \n    else: \n        return -1 \n    \n\ndef lastIndexOf_2(st, substr): \n    if substr in st: \n        start = -1 \n        while True: \n            pos = st.find(substr, start + 1) \n            if pos == -1: \n                break \n            start = pos \n            \n        return start \n    else: \n        return -1 \n    \n\nprint(lastIndexOf(\"hi hi hello\", \"hi\")) \n\n# output \n3"
    },
    "4560": {
        "index": 4560,
        "use model": false,
        "hall code": "def Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0:\n        print(\"Incorrect input\") \n    elif N == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n    return b\n\nfor i in range(10):\n    print(Fibonacci(i))"
    },
    "4561": {
        "index": 4561,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nstring = \"My Email address is example@gmail.com\"\nexpression = r'[\\w\\.-]+@[\\w\\.-]+'\naddress = re.find_all(expression, string)\nprint(\"Email address is: \", address)"
    },
    "4562": {
        "index": 4562,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longer_words(text):\n    words = text.split()\n    longer = [word for word in words if len(word) > 3]\n    return longer\ndef word(text):\n    nums = [1, 2, 3, 4, 5]\n    squares = [num*num for num in nums]\n    return squares\ndef modified_code(text):\n    longer_words(text)\n    word(text)\n    return longer_words(text)"
    },
    "4563": {
        "index": 4563,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def get_radius(self):\n        return self.radius\n    def get_diameter(self):\n        return 2 * self.radius\n    def get_area(self):\n        return math.pi * self.radius ** 2\n    def get_circumference(self):\n        return 2 * math.pi * self.radius\ncircle = Circle(5)\nprint(\"Radius:\", circle.get_radius())\nprint(\"Diameter:\", circle.get_diameter())\nprint(\"Area:\", circle.get_area())\nprint(\"Circumference:\", circle.get_circumference())"
    },
    "4564": {
        "index": 4564,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sum_temp = 0\ni = 0\nwhile sum_temp < sum_num:\n    sum_temp += list[i]\n    i += 1\nif i == 5:\n    sum_temp = 0\nelse:\n    sum_temp = 1"
    },
    "4565": {
        "index": 4565,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def print_odd_num(my_list):\n    print_odd_numbers = 100\n    for num in my_list:\n        if num % 2 != 0:\n            print(num)\n        print_odd_numbers = print_odd_numbers + num"
    },
    "4566": {
        "index": 4566,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for x in my_list:\n    if x < 10:\n        print(\"{0} is greater than 10\".format(x))"
    },
    "4567": {
        "index": 4567,
        "use model": false,
        "hall code": "if"
    },
    "4568": {
        "index": 4568,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubble_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\narr = [10, 5, 8, 3, 1]\nsorted_arr = bubble_sort(arr)\nprint(\"Sorted Array:\", sorted_arr)"
    },
    "4569": {
        "index": 4569,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_leap_year(year)\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n        return True\n        else:\n            return False\n    else\n        return True\n    else:\n        return False"
    },
    "4570": {
        "index": 4570,
        "use model": false,
        "hall code": "def max_min(my_list):\n    max_val = my_list[0]\n    min_val = my_list[0]\n\n    for val in my_list:\n        if val > max_val:\n            max_val = val\n        \n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:\n        if val < min_val:"
    },
    "4571": {
        "index": 4571,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    def introduce(self):\n        return \"My name is {} and I am {} years old. I am {}.\".format(self.name, self.age, self.gender)\nperson = Person(\"Alice\", 25, \"female\")\nprint(person.introduce())"
    },
    "4572": {
        "index": 4572,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n  if n < 1:\n    return n\n  else:\n    return(fibonacci(n-1) + fibonacci(n-2))"
    },
    "4573": {
        "index": 4573,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame({'name': ['John', 'Mark', 'Isabelle'],\n                   'age': [25, 45, 75]})\ndef categorize_age(age):\n    if age < 18:\n        return \"young\"\n    elif 18 <= age < 65:\n        return \"adult\"\n    else:\n        return \"elderly\"\ndf['age_group'] = df['age'].apply()"
    },
    "4574": {
        "index": 4574,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sentence = \"python is a programming language\"\nwords = sentence.split(\"_\")\ncapitalized_words = [word.capitalize() for word in words]\ncapitalized_sentence = \" \".join(capitalized_words)\nprint(capitalized_sentence)"
    },
    "4575": {
        "index": 4575,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            is_prime = True\n            for j in range(2, int(num/2) + 1):\n                if num % j == 0:\n                    is_prime = False\n            if is_prime:\n                prime_numbers.append(num)\n    return prime_numbers\nprint(get_prime_numbers(2, 10))"
    },
    "4576": {
        "index": 4576,
        "use model": false,
        "hall code": "# Bubble sort function\n\ndef bubble_sort(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_2(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_3(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_4(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_5(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_6(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_7(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_8(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_9(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_10(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_11(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_12(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_13(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_14(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_15(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_16(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\ndef bubble_sort_17(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n\n\n# Test data\nmy_list = [36, 71, 16, 21, 73]\n\n# Call the function\nsorted_list = bubble_sort(my_list)\n\nprint(sorted_list) # prints [16, 21, 36, 71, 73]"
    },
    "4577": {
        "index": 4577,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sentence = \"Hello World\"\nnum_words = len(sentence.split()) + 1\nprint(num_words)"
    },
    "4578": {
        "index": 4578,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def my_function(string, character):\n    count = 0\n    for letter in string:\n        if letter == character:\n            count += 1\n    return count"
    },
    "4579": {
        "index": 4579,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 'A'\nwhile a <= 'Z':\n    print(a)\n    a = chr(ord(a)+2)"
    },
    "4580": {
        "index": 4580,
        "use model": false,
        "hall code": "input_list = [1, 2, 3, 4]"
    },
    "4581": {
        "index": 4581,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def delete_element(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            while count < len(arr)-1:\n                arr[i] = arr[i+1]\n                i += 1\n            count += 1\n    arr.append(0)\n    return arr"
    },
    "4582": {
        "index": 4582,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_password(length):\n    cars = string.ascii_letters + string.digits + '!@#$%^&*()'\n    random.seed = (random.SystemRandom().random())\n    return ''.join(random.choice(chars) for i in range(length))\n\nprint(generate_password(10))  # Output is an alphanumeric string of length 10"
    },
    "4583": {
        "index": 4583,
        "use model": false,
        "hall code": "# Node class to define a node of a BST \nclass Node(object): \n    \n    # Constructor \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n\n# Function to delete a given node from BST \ndef delete_node(root, key): \n    \n    # base case \n    if root is None: \n        return None\n    \n    # If the key to be delete is smaller than the root's \n    # key then it lies in left subtree \n    if key < root.data: \n        root.left = delete_node(root.left, key) \n    \n    # If the kye to be delete is greater than the root's key \n    # then it lies in right subtree \n    elif(key > root.data): \n        root.right = delete_node(root.right, key) \n    \n    # if key is same as root's key, then this is the node \n    # to be deleted \n    else: \n        # Node with only one child or no child \n        if root.leftNum is None : \n            temp = root.right \n            root = None\n            return temp \n        \n        elif root.right is None : \n            temp = root.left \n            root = None\n            return temp \n        \n        # Node with two children: Get the inorder successor \n        # (smallest in the right subtree) \n        temp = find_min(root.right) \n        \n        # Copy the inorder successor's content to this node \n        root.data = temp.data \n        \n        # Delete the inorder successor \n        root.right = delete_node(root.right , temp.data) \n    \n    \n    return root \n\n\"\"\" Helper Functions \"\"\"\n\n# Function to find the minimum node \ndef find_min(node): \n    current = node \n    \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n    \n    return current"
    },
    "4584": {
        "index": 4584,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_asterisks(n):\n    for i in range(n):\n        print(\"*\", end=\"\")\n    print(\"\")\n    print(\"Length is:\", n)\n    return None"
    },
    "4585": {
        "index": 4585,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def test_even_odd(string: str) -> bool:\n    return string == string[::-1]"
    },
    "4586": {
        "index": 4586,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Product:\n  def __init__(self, name, description, price):\n    self.name = name\n    self.description = description\n    self.price = int(price)\n  def __str__(self):\n    return f\"Name: {self.name}\\nDescription: {self.description}\\nPrice: {self.price}\""
    },
    "4587": {
        "index": 4587,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def deg_to_rad(deg):\n    return (deg * 3.1415)/180\nif __name__ == '__main__':\n    deg = 90\n    rad = deg_to_rad(deg)\n    print(rad)"
    },
    "4588": {
        "index": 4588,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_substring(string, substr):\n    if substr in string:\n        return True\n    else:\n        return True\nif __name__ == '__main__':\n    string = \"Hello World\"\n    substr = \"llo\"\n    result = search_substring(string, substr)\n    result = search_substring(string, substr)\n    print(result)\n    result = search_substring(string, substr)\n    print(result)"
    },
    "4589": {
        "index": 4589,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_subseq(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if(str1[i - 1] == str2[j - 1]):\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n1][n2]\nif __name__ == '__main__':\n    str1 = \"abcdgf\"\n    str2 = \"abcdhfe\"\n    result = find_max_subseq(str1, str2)\n    print(result)\ndef find_max_subseq(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if(str1[i - 1] == str2[j - 1]):\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n1][n2]\nif __name__ == '__main__':\n    str1 = \"abcdgf\"\n    str2 = \"abcdhfe\"\n    result = find_max_subseq(str1, str2)\n    print(result)"
    },
    "4590": {
        "index": 4590,
        "use model": false,
        "hall code": "def fibonacci_seq(n):\n    seq = [0, 1]\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq\n\n    for i in range(2, n):\n        seq.append(seq[i-1] + seq[i-2])\n    return seq"
    },
    "4591": {
        "index": 4591,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def dec_to_bin(n):\n binary_num = bin(n)\n print(binary_num[1:])\ndec_to_bin(122)"
    },
    "4592": {
        "index": 4592,
        "use model": false,
        "hall code": "#"
    },
    "4593": {
        "index": 4593,
        "use model": false,
        "hall code": "def checkPalindrome(inputString): \n  \n    # reverse the given string \n    reverseString = inputString[::-1] \n  \n    # check if the string is equal to its reverse \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else: \n    if (inputString == reverseString): \n        return True\n    else:"
    },
    "4594": {
        "index": 4594,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def row_sum(arr):\n    row_sum = []\n    for row in arr:\n        sum = 0\n        for ele in row:\n            sum += ele\n        row_sum.append(sum)\n    arr3 = 2 + 3 * 4\n    if arr3 > 10:\n        return row_sum\n    return row_sum"
    },
    "4595": {
        "index": 4595,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_max(arr):\n    max_val = 0\n    count = 0\n    for row in arr:\n        max_val = max(max_val, max(row))\n        if max(row) == max_val:\n            count += 1\n    return count"
    },
    "4596": {
        "index": 4596,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def array_sum(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\nnumbers = [2, 4, 6]\nprint(array_sum(numbers))"
    },
    "4597": {
        "index": 4597,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class UserModel(models.Model):\n    name = models.charField(max_length=100)\n    address = models.CharField(max_length = 200)\n    age = models.IntegerField()"
    },
    "4598": {
        "index": 4598,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, address, phone_number):\n        self.name = name\n        self.address = address\n        self.phone_number = phone_number\n        self.courses = []\n    def add_course(self, course):\n        self.courses.append(course)\n    def remove_course(self, course):\n        if course in self.courses:\n            self.courses.remove(course)\n    def display_courses(self):\n        for course in self.courses:\n            print(course)"
    },
    "4599": {
        "index": 4599,
        "use model": false,
        "hall code": "def insert_new_item(new_item, existing_list):\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:\n    \"\"\"Inserts a new item into an existing list.\n    \n    Args:\n        new_item (int): The item to be inserted.\n        existing_list (list): The existing list.\n    \n    Returns:"
    },
    "4600": {
        "index": 4600,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_numbers(string1, string2):\n    num1 = int(string1)\n    num2 = int(string2)\n    result = num1 * num2\n    return result\nstring1 = \"5\"\nstring2 = \"7\"\nprint(add_numbers(string1, string2))"
    },
    "4601": {
        "index": 4601,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nif len(first_str) == len(second_str):\n    if random.randint(0, 1) == 0:\n        print('The two strings are of equal length.')\n    else:\n        print('The two strings have the same number of characters.')\nelif len(first_str) > len(second_str):\n    print(first_str)\n    print('The first string is longer.')\nelse:\n    print(second_str)\n    print('The second string is longer.')"
    },
    "4602": {
        "index": 4602,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial_recursion( n ):\n   if n == 1:\n       return n\n   else:\n       return n * factorial_recursion( n - 2 )"
    },
    "4603": {
        "index": 4603,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial_while(n):\n    factorial = 1\n    while n>0:\n        factorial = factorial + n\n        n = n - 1\n    return factorial"
    },
    "4604": {
        "index": 4604,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_substring(string):\n    n = len(string)\n    ''' Initialization of stings,\n    a and b '''\n    a = \"\"\n    b = \"\"\n    ''' Initialization of maximum length substring\n    having distinct characters '''\n    maxlen = 0\n    ''' 1. Pick starting point\n    2. intialise substrng \"a\"\n    3. Find the longest such\n    substring by comparing\n    current and previous\n    substring '''\n    for i in range(n):\n        a += string[i]\n        b = \"\"\n        for j in range(i + 1, n):\n            if string[j] not in a:\n                b += string[j]\n        if len(a) > maxlen:\n            maxlen = len(a)\n        a += b\n    return maxlen"
    },
    "4605": {
        "index": 4605,
        "use model": false,
        "hall code": "# A utility function to get the height of the tree \ndef height(node): \n    \n    # Base Case : Tree is empty \n    if node is None: \n        return 0 ; \n    \n    # If tree is not empty then height = 1 + max of left \n    # height and right heights  \n    return 1 + max(height(node.left) ,height(Node.right)) \n\n\n# Function to get the difference of \n# height of left and right subtrees \ndef getHeightDiff(node): \n    if node is None: \n        return 0\n    \n    # Get the height difference of left and right subtrees \n    heightDiff = height(node.left) - height(node.right) \n    \n    # Get the maximum of left and right subtree \n    # height differences \n    return max(heightDiff, getHeightDiff(node.left) ,getHeightDiff(node.right)) \n\n# The main function that checks if binary tree is \n# height-balanced or not \ndef isBalanced(root): \n    if root is None: \n        return 1\n    \n    # Get the height difference \n    heightDiff = getHeightDiff(root) \n    \n    # If heightDiff is more than 1 then tree is \n    # not balanced so return 0 \n    if (abs(heightDiff) > 1): \n        return 0\n    else: \n        # tree is balanced return 1 \n        return 1"
    },
    "4606": {
        "index": 4606,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "tuple=(1,2,3,4,5,6,7,8,9,10)\nfor i in range(0,5):\n    print (tuple[i])"
    },
    "4607": {
        "index": 4607,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_array(arr):\n  for str in arr:\n    if len(str) == 0:\n      return False\n  return True"
    },
    "4608": {
        "index": 4608,
        "use model": false,
        "hall code": "def is_anagram(string1, string2):\n    # Create a dictionaries for strings\n    string1_dict = {}\n    string2_dict = {}\n    \n    # Add the chars from each string to the dictionaries\n    for char in string1:\n        if char not in string1_dict:\n            string1_dict[char] = 1\n        else:\n            string1_dict[char] += 1\n    \n    for char in string2:\n        if char not in string2_dict:\n            string2_dict[chars] = 1\n        else:\n            string2_dict[char] += 1\n    \n    # Check if the dictionaries have the same entries\n    for key in string1_dict:\n        if key not in string2_dict:\n            return False\n        elif string1_dict[key] != string2_dict[key]:\n            return False\n    \n    return True\n\n# Test the algorithm\nstring1 = \"listen\"\nstring2 = \"silent\"\n\nif(is_anagram(string1, string2)):\n    print(\"The strings are anagrams\")\nelse:\n    print(\"The strings are not anagrams\")"
    },
    "4609": {
        "index": 4609,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def repeat_string(string, target):\n    count = 0\n    for char in string:\n        if char == target:\n            count += 1\n    return count\nstring = \"hello world\"\ntarget = \"o\"\noccurrences = repeat_string(string, target)\nprint(f\"The target character '{target}' occurs {occurrences} time(s) in the string.\")"
    },
    "4610": {
        "index": 4610,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def clamp_number(num, min_value, max_value):\n    if num < min_value:\n        return min_value\n    elif num > max_value:\n        return max_value\n    else:\n        return num\ndef process_value(value):\n    if value % 2 == 0:\n        return value * 2\n    else:\n        return value + 1\ndef clamp_number(num, min_value, max_value):\n    if num < min_value:\n        return min_value\n    elif num > max_value:\n        return max_value\n    else:\n        return process_value(num)"
    },
    "4611": {
        "index": 4611,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def expression_output(numbers):\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum\nnumbers = [2, 4, 6, 8]\nprint(expression_output(numbers))"
    },
    "4612": {
        "index": 4612,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def first_upper_char(sentence):\n    words = sentence.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)"
    },
    "4613": {
        "index": 4613,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef shuffle_list(my_list):\n    random.sample(my_list)\n    return my_list"
    },
    "4614": {
        "index": 4614,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) - fibonacci(n-2)"
    },
    "4615": {
        "index": 4615,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    def __str__(self):\n        if self.imaginary >= 0:\n            return f\"{self.real} + {self.imaginary}i\"\n        else:\n            return f\"{self.real} - {-self.imaginary}i\"\n    def add(self, other):\n        real_sum = self.real + other.real\n        imaginary_sum = self.imaginary + other.imaginary\n        return ComplexNumber(real_sum, imaginary_sum)\n    def subtract(self, other):\n        real_diff = self.real - other.real\n        imaginary_diff = self.imaginary - other.imaginary\n        return ComplexNumber(real_diff, imaginary_diff)\n    def multiply(self, other):\n        real_product = self.real * other.real - self.imaginary * other.imaginary\n        imaginary_product = self.real * other.imaginary + self.imaginary * other.real\n        return ComplexNumber(real_product, imaginary_product)\n    def divide(self, other):\n        divisor = other.real ** 2 + other.imaginary ** 2\n        real_quotient = (self.real * other.real + self.imaginary * other.imaginary) / divisor\n        imaginary_quotient = (self.imaginary * other.real - self.real * other.imaginary) / divisor\n        return ComplexNumber(real_quotient, imaginary_quotient)\n    def modulus(self):\n        modulus_value = (self.real ** 2 + self.imaginary ** 2) ** 0.5\n        return ComplexNumber(modulus_value, 0)"
    },
    "4616": {
        "index": 4616,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(500, 1000):\n    flag = 1\n    for j in range(2, i):\n        if i % j == 0:\n            flag = 0\n    if flag == 1:\n        print(i)"
    },
    "4617": {
        "index": 4617,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef sum_multiples(n):\n    prime_sum = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            prime_sum += i\n    return prime_sum\nn = 20\nresult = sum_multiples(n)\nprint(\"The sum of all prime numbers between 0 and {} is {}\".format(n, result))"
    },
    "4618": {
        "index": 4618,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "scores = {}\nscores['student1'] = 90\nscores['student2'] = 85\nscores['student3'] = '100'\nprint(scores)"
    },
    "4619": {
        "index": 4619,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def matrix_multiply(M1, M2):\n    M3 = [[0, 0], [0, 0]]\n    for i in range(len(M1)):\n        for j in range(len(M2[0])):\n            for k in range(len(M2)):\n                M3[i][j] += M1[i][k] * M2[k][j]\n    if M3[0][0] >= 10:\n        M3[0][0] = M3[0][0] - 10\n    return M3"
    },
    "4620": {
        "index": 4620,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_subset(A, B):\n    for i in B:\n        if i in A:\n            return False\n    return True"
    },
    "4621": {
        "index": 4621,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nurl = 'https://www.example.com/'\nres = requests.get(url)\ndata = res.text()"
    },
    "4622": {
        "index": 4622,
        "use model": false,
        "hall code": "# Create a linked list\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\n\n# Function to convert linked list to array\ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None: \ndef list_to_array(head): \n    arr = []\n    if head is None: \n        return arr\n    cur = head\n    while cur is not None:"
    },
    "4623": {
        "index": 4623,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import json\ndata_str = '''\n{\n    \"name\": \"John\",\n    \"age\": 42,\n    \"location\": \"New York\"\n}\n'''\ndata_dict = json.loads(data_str)\nname = data_dict.dump('name')"
    },
    "4624": {
        "index": 4624,
        "use model": false,
        "hall code": "a = 10, b = 20"
    },
    "4625": {
        "index": 4625,
        "use model": false,
        "hall code": "def transpose_matrix(matrix):\n    \"\"\"Function to transpose 2d list matrix\"\"\"\n    row = len(matrix) \n    col = len(matrix[0]) \n  \n    transpose = [[0 for j in range(row)] for i in range(col)] \n  \n    for i in range(row): \n        for j in range(col): \n            transpose[j][i] = matrix[i][j] \n  \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col): \n    for i in range(col):"
    },
    "4626": {
        "index": 4626,
        "use model": false,
        "hall code": "[1,2,3,4,5,6,7,8,9]"
    },
    "4627": {
        "index": 4627,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_of_three(numbers, divisor):\n    count = 0\n    for num in numbers:\n        if num % divisor == 0:\n            count += 1\n    return count"
    },
    "4628": {
        "index": 4628,
        "use model": false,
        "hall code": "def find_median(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_2(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_3(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_4(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_5(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_6(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_7(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_8(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_9(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_10(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_11(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_12(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_13(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_14(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\ndef find_median_15(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\n\n\nif __name__ == '__main__':\n    A = [1,4,6,7]\n    B = [3,5,8,9]\n    median = find_median(A, B)\n    print(median)"
    },
    "4629": {
        "index": 4629,
        "use model": false,
        "hall code": "# Start of code\ni = 1\nwhile i<100:\n    print(i)\n    i += 1\n# End of code"
    },
    "4630": {
        "index": 4630,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_alphabet_frequencies(sentence):\n    alphabet_freq = dict()\n    for el in sentence:\n        if el.isalpha():\n            if el in alphabet_freq:\n                alphabet_freq[el] += 1\n            else:\n                alphabet_freq[el] = 1\n    return alphabet_freq\nif __name__ == '__main__':\n    sentence = \"The brain is a powerful tool\"\n    alphabet_freq = get_alphabet_frequencies(sentence)\n    print(alphabet_freq)"
    },
    "4631": {
        "index": 4631,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "counts = dict()\nwords = s.split(' ')\nfor word in words:\n    if word in counts:\n        counts[word] += 1\n    else:\n        counts[word] = 1\nkth_most_frequent = sorted(counts, key = counts.get, reverse = True)[k-1]\nprint(kth_most_frequent)\ndef word():\n    x = 5\n    y = 10\n    z = x + y\n    return z\ncounts = dict()\nwords = s.split(' ')\nfor word in words:\n    if word in counts:\n        counts[word] += 1\n    else:\n        counts[word] = 1\nkth_most_frequent = sorted(counts, key = counts.get, reverse = True)[k-1]\nprint(kth_most_frequent)\nword()"
    },
    "4632": {
        "index": 4632,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from datetime import datetime, timezone\ndef local_time(gmt_time):\n    utc_time = datetime.fromisoformat(gmt_time.replace(\"Z\", \"+00:00\"))\n    local_time = utc_time.day\n    return local_time.isoformat()"
    },
    "4633": {
        "index": 4633,
        "use model": false,
        "hall code": "def func(arg1, arg2=\"default\"):\n    pass"
    },
    "4634": {
        "index": 4634,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "temp = a\nb = a\na = temp"
    },
    "4635": {
        "index": 4635,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicle:\n    def __init__(self):\n        self.make = \"\"\n        self.model = \"\"\n        self.year = 0\nclass Car(Vehicle):\n    def __init__(self):\n        super().__init__()\n        self.color = \"\""
    },
    "4636": {
        "index": 4636,
        "use model": false,
        "hall code": "def most_common(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n\ndef most_common_2(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n\ndef most_common_3(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n\n    return most_common_el"
    },
    "4637": {
        "index": 4637,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(123)\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    if args.print_hello:\n       print(\"Hello, world.\")"
    },
    "4638": {
        "index": 4638,
        "use model": false,
        "hall code": "sum = 0\nfor num in range(10):\n   sum = sum + num"
    },
    "4639": {
        "index": 4639,
        "use model": false,
        "hall code": "def find_max(a, b):\n    if a > b:\n        return a\n    else:\n        return b"
    },
    "4640": {
        "index": 4640,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr_1 = [2,3,4]\narr_2 = [1,2,3]\nsum = 0\nfor i in range(len(arr_1)):\n    sum += arr_1[i] + arr_2[i]\nif sum >= 10:\n    sum -= 10\nelse:\n    sum += 10\nprint(\"The sum of the two arrays plus unrelated logic is\",sum)"
    },
    "4641": {
        "index": 4641,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def square_even_numbers(numbers):\n    squares = []\n    for number in numbers:\n        if number % 2 == 0:\n            squares.append(number**2)\n    return squares\nnumbers_list = [1, 2, 3, 4, 5, 6]\nresult = square_even_numbers(numbers_list)\nprint(result)"
    },
    "4642": {
        "index": 4642,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def evaluate_expression():\n    result = 3 + 2 * 4 / 2\n    return result\nprint(evaluate_expression())"
    },
    "4643": {
        "index": 4643,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = a + b\ny = x + (c - b)\nz = x + (d - b) + if a > b: 1 else: 0"
    },
    "4644": {
        "index": 4644,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\n    def perimeter(self):\n        return 2 * (self.length + self.width)\nrect = Rectangle(4, 5)\nprint(rect.area())\nprint(rect.perimeter())"
    },
    "4645": {
        "index": 4645,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def absolute_value(numbers):\n    sum = 0\n    for num in numbers:\n        if num > 0:\n            sum += num\n    return sum"
    },
    "4646": {
        "index": 4646,
        "use model": false,
        "hall code": "sentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\""
    },
    "4647": {
        "index": 4647,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def softmax(x):\n  e_x = np.exp(x + np.max(x))\n  return e_x / e_x.sum(axis=1)"
    },
    "4648": {
        "index": 4648,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0,4):\n  for j in range(5,15):\n    print(\"outer loop at: \"+str(i)+\" inner loop at: \"+str(j))"
    },
    "4649": {
        "index": 4649,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "<h> = {}\n<h[key1>] = value1'\n<h[key2>] = 'value2'\n<h[key3>] = 'value3'"
    },
    "4650": {
        "index": 4650,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_num_males(data):\n    num_males = 0\n    for person in data:\n        if person['gender'] != 'male':\n            num_males += 1\n    return num_males"
    },
    "4651": {
        "index": 4651,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(10):\n  if num % 2 != 0:\n    print(num);"
    },
    "4652": {
        "index": 4652,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def char_exists_in_string(s1, s2):\n    for char in s2:\n        if char not in s1:\n            return False\n        else:\n            s1 = s1.replace(char, \"\")\n    return True\nif __name__ == '__main__':\n    s1 = \"hello world\"\n    s2 = \"llo\"\n    print(char_exists_in_string(s1, s2))"
    },
    "4653": {
        "index": 4653,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "student_dict = {'John': ['Math', 'Physics'], 'Emily': ['History', 'English'], 'Ryan': ['Chemistry', 'Biology']}\nprint(student_dict)"
    },
    "4654": {
        "index": 4654,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nmy_arr = [random.shuffle() for _ in range(10)]\nprint(my_arr)"
    },
    "4655": {
        "index": 4655,
        "use model": false,
        "hall code": "def compare_lists(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_2(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_3(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_4(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_5(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_6(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_7(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_8(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_9(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_10(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_11(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_12(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_13(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\ndef compare_lists_14(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return False\n        return True\n\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]    \nprint(compare_lists(list1, list2)) # Output: False"
    },
    "4656": {
        "index": 4656,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    count = 0\n    def __init__(self, name, salary, department):\n        self.name = name\n        self.salary = salary\n        self.department = department\n        Employee.count += 1\n    def calculate_bonus(self):\n        if self.salary <= 5000:\n            return self.salary * 0.05\n        elif self.salary <= 10000:\n            return self.salary * 0.07\n        else:\n            return self.salary * 0.1"
    },
    "4657": {
        "index": 4657,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {\n    'name': 'Alice',\n    'age': 25,\n    'city': 'London'\n}\nfor key, values in my_dict.items():\n    print(f'{key}: {values}')"
    },
    "4658": {
        "index": 4658,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def two_decimals(num):\n    return \"{:.1f}\".format(num)\nif __name__ == '__main__':\n    print(two_decimals(23.14159))"
    },
    "4659": {
        "index": 4659,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def list_cube_sum(list):\n    total = 0\n    for i in lst:\n        total += i**3\n    return total\nif __name == '__main__':\n    print(list_cube_sum([1, 2, 3, 4, 5]))"
    },
    "4660": {
        "index": 4660,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_inplace(s):\n    s = s.lower()\n    s = ''.join(e for e in s if e.isalnum())\n    return s == s[::-1]\nprint(reverse_inplace(\"A man, a plan, a canal: Panama\"))\nprint(reverse_inplace(\"racecar\"))\nprint(reverse_inplace(\"hello\"))"
    },
    "4661": {
        "index": 4661,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_info(data):\n print(\"Name: \" + str(data['name']))\n print(\"Age: \" + str(data['age']))"
    },
    "4662": {
        "index": 4662,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    total_students = 0\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n        self.courses = []\n        Student.total_students += 1\n    def add_course(self, course):\n        self.courses.append(course)\n    def remove_course(self, course):\n        self.courses.remove(course)\n    def display_courses(self):\n        print(self.courses)\n    @staticmethod\n    def get_total_students():\n        print(Student.total_students)\nstudent1 = Student(\"John\", 20)\nstudent1.add_course(\"Math\")\nstudent1.add_course(\"Science\")\nstudent1.display_courses()\nstudent2 = Student(\"Alice\", 18)\nstudent2.add_course(\"English\")\nstudent2.remove_course(\"English\")\nstudent2.display_courses()\nStudent.get_total_students()"
    },
    "4663": {
        "index": 4663,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\narr1 = np.array([1,5,8,'9'])\narr2 = np.array([2,3,4,6])\nresult = arr1 * arr2\nprint(f'Product of the two arrays: {result}')"
    },
    "4664": {
        "index": 4664,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def iterateMyList(myList):\n    iterator = iter(myList)\n    while True:\n        try:\n            print(next(iterator))\n        except Exception as e:\n            if isinstance(e, StopIteration):\n                break\n            else:\n                pass"
    },
    "4665": {
        "index": 4665,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printCurrentLocalTime():\n    currentLocalTime = datetime.datetime.month()\n    print(currentLocalTime.strftime(\"%c\"))"
    },
    "4666": {
        "index": 4666,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ny = np.sqrt([1, 0, -1])"
    },
    "4667": {
        "index": 4667,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nimport requests\nurls = set()\ndef get_urls(url):\n    website = requests.get(url)\n    content = website.content\n    links = re.findall(r'<a .*?href=[\\'\"](.*?)[\\'\"].*?>', content)\n    for i in links:\n        if i.startswith(\"/\"):\n            base_url = url\n            i = base_url + i\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n        elif url in i:\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\nif __name__ == \"__main__\":\n    get_urls(\"https://www.example.com\")\n    for i in urls:\n        print(i)"
    },
    "4668": {
        "index": 4668,
        "use model": false,
        "hall code": "# Define a StateMachine class\nclass StateMachine: \n    def __init__(self): \n        self.handlers = {} \n        self.startState = None\n        self.endStates = [] \n    \n    def add_state(self, state): \n        self.handlers[state.name] = state\n    \n    def set_start(self, name): \n        self.startState = name\n    \n    def set_end(self, name): \n        self.endStates.append(name) \n    \n    def run(self): \n        try: \n            handler = self.handlers[self.startState] \n        except: \n            raise(Exception, \"Must call .set_start() before .run()\")\n        while True:\n            # Get the next keyboard event\n            event = get_event()\n            if event:\n                newState = handler.run(event) \n            if newState.name2 in self.endStates: \n                break \n            else: \n                handler = self.handlers[newState.name]"
    },
    "4669": {
        "index": 4669,
        "use model": false,
        "hall code": "4, 5"
    },
    "4670": {
        "index": 4670,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create2DArray(n, m):\n    return [[1] * m for _ in range(n)]\nn = 4\nm = 6\narray = create2DArray(n, m)\nprint(array)"
    },
    "4671": {
        "index": 4671,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def alphabetically_sort_words(str):\n    words = str.split(' ')\n    words.sort()\n    return words\nprint(alphabetically_sort_words(\"Here is a sentence to sort\"))\nx = 10\ny = 20\nz = x + y\nif z > 30:\n    print(\"The sum of x and y is greater than 30\")\nelse:\n    print(\"The sum of x and y is less than or equal to 30\")"
    },
    "4672": {
        "index": 4672,
        "use model": false,
        "hall code": "def combinations(n, k):\n    if k == 0 or k > n:\n        return []\n    result = []\n    def dfs(start,n,k):\n        if k == 0:\n        if k == 1:\n        if k == 2:\n        if k == 3:\n        if k == 4:\n        if k == 5:\n        if k == 6:\n        if k == 7:\n        if k == 8:\n        if k == 9:\n        if k == 10:\n        if k == 11:\n        if k == 12:\n        if k == 13:"
    },
    "4673": {
        "index": 4673,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def join_nums_symbols(nums, symbols):\n    assert len(nums) == len(symbols), \"length of nums and symbols should be equal\"\n    result = \"\"\n    for i in range(len(nums)):\n        result += str(nums[i]) + symbols[i]\n    if len(nums) % 2 == 0:\n        result += \"EVEN\"\n    else:\n        result += \"ODD\"\n    return result"
    },
    "4674": {
        "index": 4674,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rearrange_array(arr):\n    output = []\n    for i in range(len(arr)):\n        idx = (i + 1) % len(arr)\n        if arr[idx] > arr[i]:\n            output.append(arr[idx])\n        else:\n            output.append(arr[i])\n    return output"
    },
    "4675": {
        "index": 4675,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_string(string, delimiter):\n    strList = string.split('delimiter')\n    return strList"
    },
    "4676": {
        "index": 4676,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_letter(string, letter):\n    output = \"\"\n    for s in string:\n        if s != letter:\n            output += s\n    return output\ndef remove_letter_with_unrelated(string, letter):\n    output = \"\"\n    for s in string:\n        if s != letter:\n            output += s\n        else:\n            output += 'x'\n    return output"
    },
    "4677": {
        "index": 4677,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_string_length(strings):\n    count = 0\n    for s in strings:\n        if len(s) > 5:\n            count += 1\n    return [s for s in strings if len(s) > count]\nlist_strings = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]\nfiltered_list = filter_string_length(list_strings)\nprint(filtered_list)"
    },
    "4678": {
        "index": 4678,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef age_calc(date_of_birth):\n    today = datetime.date.today()\n    today = datetime.date.today()\n    age_years = today.year - date_of_birth.year\n    age_years = today.year - date_of_birth.year\n    age_months = today.month - date_of_birth.month\n    age_months = today.month - date_of_birth.month\n    if age_months < 0:\n        age_years -= 1\n        age_years -= 1\n        age_months += 12\n        age_months += 12\n    return age_years, age_months\ndate_of_birth = datetime.date(1998, 6, 4)\nprint(age_calc(date_of_birth))"
    },
    "4679": {
        "index": 4679,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse(num):\n    reversed_num = 0\n    while num>0:\n        last = num%10\n        reversed_num = (reversed_num*10)+last\n        num = num//10\n    return reversed_num\nnum = 123\nprint(\"Reverse of\", num, \"is\", reverse(num))\ndef reverse(num):\n    reversed_num = 0\n    while num>0:\n        last = num%10\n        reversed_num = (reversed_num*10)+last\n        num = num//10\n    return reversed_num\nnum = 123\nprint(\"Reverse of\", num, \"is\", reverse(num))"
    },
    "4680": {
        "index": 4680,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef create_binary_tree(arr, root, i, n):\n    if i < n:\n        temp = Node(arr[i])\n        root = temp\n        root.left = create_binary_tree(arr, root.left, 2 * i + 1, n)\n        root.right = create_binary_tree(arr, root.right, 2 * i + 2, n)\n    return root\ndef tree_depth(root):\n    if root is None:\n        return 0\n    return root.value + tree_depth(root.left) + tree_depth(root.right)\narr = [1, 2, 3, 4, 5, 6, 7]\nroot = None\nroot = create_binary_tree(arr, root, 0, len(arr))\nsum_of_nodes = tree_depth(root)\nprint(\"Sum of all nodes in the binary tree:\", sum_of_nodes)"
    },
    "4681": {
        "index": 4681,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_similar(list_1, list_2):\n  if len(list_1) == len(list_2):\n    return True\n  list_1.sort()\n  list_2.sort()\n  for i, j in zip(list_1, list_2):\n    if i != j:\n      return i\n  return True"
    },
    "4682": {
        "index": 4682,
        "use model": false,
        "hall code": "def cost_calc(product, quantity): \n    total_cost = 0"
    },
    "4683": {
        "index": 4683,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def cube_sum(n):\n    sum = 0\n    for i in range(1,n):\n        sum += i+3\n    return sum"
    },
    "4684": {
        "index": 4684,
        "use model": false,
        "hall code": "def find_path(array, source, dest):\n    path = [source]\n    sx, sy = source\n    while path[-1] != dest:\n        dx, dy = path[-1]\n        if dx > 0 and array[dx - 1][dy] == 0:\n            path.append([dx-1, dy])\n        elif dy > 0 and array[dx][dy-1] == 0:\n            path.append([dx, dy-1])\n        elif dx < len(array)-1 and array[dx + 1][dy] == 0:\n            path.append([dx+1, dy])\n        elif dy < len(array[0])-1 and array[dx][dy+1] == 0:\n            path.append([dx, dy+1])\n\ndef find_path_2(array, source, dest):\n    path = [source]\n    sx, sy = source\n    while path[-1] != dest:\n        dx, dy = path[-1]\n        if dx > 0 and array[dx - 1][dy] == 0:\n            path.append([dx-1, dy])\n        elif dy > 0 and array[dx][dy-1] == 0:\n            path.append([dx, dy-1])\n        elif dx < len(array)-1 and array[dx + 1][dy] == 0:\n            path.append([dx+1, dy])\n        elif dy < len(array[0])-1 and array[dx][dy+1] == 0:\n            path.append([dx, dy+1])\n\n    return path"
    },
    "4685": {
        "index": 4685,
        "use model": false,
        "hall code": "class Queue:\n    def __init__(self):\n        self.queue = []\n    \n    def enqueue(self, val):\n        self.queue.append(val)\n    \n    def dequeue(self):\n        if self.queue:\n            return self.queries.pop(0)\n        else:\n            return None\n    \n    def peek(self):\n        if self.queue:\n            return self.queue[0]\n        else:\n            return None"
    },
    "4686": {
        "index": 4686,
        "use model": false,
        "hall code": "import string \nimport random \n\ndef generate_password(): \n    letter_lower = string.ascii_lowercase\n    letter_upper = string.ascii_uppercase\n    symbols = string.punctuation\n    digits = string.digit\n    password = ''.join(random.choice(letter_lower + letter_upper + symbols + digits) for i in range(8))\n    return password\n\npassword = generate_password()\nprint(password)"
    },
    "4687": {
        "index": 4687,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "data = [\"James\", \"John\", \"Susan\", \"Bella\", \"Natalie\", \"Adam\", \"Sam\", \"Eric\"]\nfiltered_data = [name for name in data if len(name) < 5]\nprint(filtered_data)"
    },
    "4688": {
        "index": 4688,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef get_difference_in_seconds(timestamp1, timestamp2):\n    datetime1 = datetime.datetime.strptime(timestamp1, \"%Y-%m-%d %H:%M:%S\")\n    datetime2 = datetime.\n    difference = (datetime2 - datetime1).total_seconds()\n    return difference"
    },
    "4689": {
        "index": 4689,
        "use model": false,
        "hall code": "#"
    },
    "4690": {
        "index": 4690,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gen_binary_strings(n):\n    result = []\n    for i in range(2**n):\n        s = bin(i)[2:]\n        s = s.zfill(n+1)\n        result.append(s)\n    return result\nprint(gen_binary_strings(5))"
    },
    "4691": {
        "index": 4691,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_userid(firstname, lastname):\n    userid = firstname[1] + lastname[:5]\n    return userid\nuserid = create_userid(\"John\", \"Smith\")\nprint(userid)"
    },
    "4692": {
        "index": 4692,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_product_three_numbers(numbers):\n    remainder_dict = {}\n    max_sum = float('-inf')\n    for num in numbers:\n        remainder = num % 3\n        if remainder in remainder_dict:\n            max_sum = max(max_sum, remainder_dict[remainder] + num)\n        remainder_dict[remainder] = max(remainder_dict.get(remainder, 0), num)\n    return max_sum\nnumbers = [5, 9, 13, 8, 14, 7, 11]\nmax_sum = max_product_three_numbers(numbers)\nprint(\"Maximum sum of two numbers with the same remainder when divided by 3:\", max_sum)"
    },
    "4693": {
        "index": 4693,
        "use model": false,
        "hall code": "def KMPSearch(pat, txt): \n    M = len(pat) \n    N = len(txt) \n  \n    # create lps[] that will hold the longest prefix suffix  \n    # values for pattern \n    lps = [0]*M \n    j = 0 # index for pat[] \n  \n    # Preprocess the pattern (calculate lps[] array) \n    computeLPSArray(pat, M, lps) \n  \n    i = 0 # index for txt[] \n    while i < N: \n        if pat[j] == txt[i]: \n            i += 1\n            j += 1\n  \n        if j == M: \n            print(\"Found pattern at index \" + str(i-j)) \n            j = lps[j-1] \n  \n        # mismatch after j matches \n        elif i < N and pat[j] != txt[i]: \n            # Do not match lps[0..lps[j-1]] characters, \n            # they will match anyway \n            if j != 0: \n                j = lps[j-1] \n            else: \n                i += 1\n        \n\ndef computeLPSArray(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_2(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_3(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_4(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_5(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_6(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_7(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_8(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_9(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_10(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_11(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_12(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_13(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_14(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_15(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_16(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_17(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\ndef computeLPSArray_18(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n\n                i += 1"
    },
    "4694": {
        "index": 4694,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def validate_dates(date_list):\n    if len(date_list) == 0:\n        return True\n    prev_date = date_list[0]\n    for date in date_list[1:]:\n        if date < prev_date:\n            return False\n        prev_date = date\n    name_list = [\"John\", \"Jane\", \"Alice\"]\n    for name in name_list:\n        if len(name) > 4:\n            return True\n    return True"
    },
    "4695": {
        "index": 4695,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_nulls(dictionary):\n    if isinstance(dictionary, dict):\n        return {key: remove_nulls(value)\n        for key, value in dictionary.items() if value == None}\n    else:\n        return dictionary"
    },
    "4696": {
        "index": 4696,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nclass Student:\n  def __init__(self, name):\n    self.name = name\n    self.random_number = random.randint(1, 100)\n  def print_name_upper(self):\n    self.name = self.name.upper()\nstudent = Student(\"John\")\nstudent.print_name_upper()\nprint(student.name)\nprint(student.random_number)"
    },
    "4697": {
        "index": 4697,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_strings(s1, s2):\n    s1_chars = list(s1)\n    s2_chars = list(s2)\n    num_diff_chars = 0\n    for char in s1_chars:\n        if char not in s2_chars:\n            num_diff_chars += 1\n            break\n    for char in s2_chars:\n        if char not in s1_chars:\n            num_diff_chars += 1\n            continue\n    return num_diff_chars"
    },
    "4698": {
        "index": 4698,
        "use model": false,
        "hall code": "movie_director = {\n'title' : str,\n'director' : str,\n'producer' : str,\n'writer' : str,\n'actors' : list,\n'release_date' : date,\n'runtime_minutes' : int,\n'budget' : int,\n'production_company' : str,\n'box_office' : int,\n'genres' : list,\n'plot' : str,\n'awards' : list,\n'language' : str,\n'country' : str,\n}"
    },
    "4699": {
        "index": 4699,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef secure_password(String=False):\n    length = random.randint(8, 16)\n    letters = string.ascii_lowercase+string.ascii_uppercase+string.digits\n    if strong:\n        symbols = string.punctuation\n        letters += symbols\n    return ''.join(random.choice(letters) for i in range(length))"
    },
    "4700": {
        "index": 4700,
        "use model": false,
        "hall code": "class TreeNode:\n    \n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n    \n    def Insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.leftNum is None:\n                    self.left = TreeNode(data)\n                else:\n                    self.left.Insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = TreeNode(data)\n                else:\n                    self.right.Insert(data)\n        else:\n            self.data = data"
    },
    "4701": {
        "index": 4701,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def summation(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product\narr = [2, 3, 4, 5]\nproduct = summation(arr)\nprint(\"Product:\", product)"
    },
    "4702": {
        "index": 4702,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits + string.punctuation\n    length = 8\n    password = ''.join(Random.choice(characters) for _ in range(length))\n    while not (any(c.isdigit() for c in password) and any(c.isalpha() for c in password)\n    and any(c in string.punctuation for c in password)):\n        password = ''.join(random.choice(characters) for _ in range(length))\n    return password"
    },
    "4703": {
        "index": 4703,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_power(base, power):\n    if power == 1:\n        return 1\n    else:\n        return base * calculate_power(base, power - 1)"
    },
    "4704": {
        "index": 4704,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isSameTree(p, q):\n    if p is None and q is None:\n        return True\n    if p is None and q is None:\n        return True\n    if p is None or q is None:\n        return False\n    if p.val != q.val:\n        return False\n    if p.val != q.val:\n        return False\n    return isSameTree(p.left, q.left) and isSameTree(p.right, q.right)"
    },
    "4705": {
        "index": 4705,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef timestamp_to_readable(unix_timestamp):\n    return datetime.date.fromtimestamp(unix_timestamp).strftime(\"%A, %B %d, %H:%M:%S, %Y\")"
    },
    "4706": {
        "index": 4706,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    def __init__(self, account_holder, initial_balance):\n        self.account_holder = account_holder\n        self.balance = initial_balance\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            return True\n        else:\n            return False\n    def withdraw(self, amount):\n        if amount > 0 and amount <= self.balance:\n            self.balance -= amount\n            return True\n        else:\n            return False\n    def get_balance(self):\n        return self.balance\n    def __str__(self):\n        return f\"Account Holder: {self.account_holder}, Balance: {self.balance}\""
    },
    "4707": {
        "index": 4707,
        "use model": false,
        "hall code": "class GameState:\n    def __init__(self):\n        self.board = [[None, None, None],\n        [None, None, None],\n        [None, None, None]\n        ]\n    \n    def is_game_over(self):\n        b = self.board\n        # Check if a player won\n        if b[0][0] == b[0][1] == b[0][2] != None or b[1][0] == b[1][1] == b[1][2] != None or b[2][0] == B[2][1] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][0] == b[2][0] != None or b[0][1] == b[1][1] == b[2][1] != None or b[0][2] == b[1][2] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][1] == b[2][2] != None or b[0][2] == b[1][1] == b[2][0] != None:\n            return True\n        # Check if the board is full\n        elif any(None in row for row in b):\n            return False\n        # All positions filled, no winner\n        else:\n            return True"
    },
    "4708": {
        "index": 4708,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.svm import SVC\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\niris = load_iris()\nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target,\n                                                    random_state=0)\nclf = SVC(kernel='linear', C=1).fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nclf = SVC(fit_intercept=True, C=1, n_estimators=10).fit(X_train, y_train)\ny_pred = clf.predict_proba(X_test)"
    },
    "4709": {
        "index": 4709,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_character(strings):\n    return random.choice()\nrandom_character(['apple','orange','pineapple','grape'])"
    },
    "4710": {
        "index": 4710,
        "use model": false,
        "hall code": "def linkedListSubtract(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_2(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_3(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_4(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_5(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_6(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_7(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_8(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_9(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_10(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_11(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_12(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_13(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\ndef linkedListSubtract_14(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n\n    return dummy_node.next"
    },
    "4711": {
        "index": 4711,
        "use model": false,
        "hall code": "def most_occurrences(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_2(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_3(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_4(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_5(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_6(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_7(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_8(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_9(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_10(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_11(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_12(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_13(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_14(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_15(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_16(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_17(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\ndef most_occurrences_18(sentence):\n    freq = {}\n    for word in sentence.split():\n        freq[word] = freq.get(word, 0) + 1\n\n\n    freq_words = [(freq[word], word) for word in freq]\n    freq_words.sort(reverse=True)\n    print(freq_words[:2])\n\nmost_occurrences(\"This is just a simple string\")"
    },
    "4712": {
        "index": 4712,
        "use model": false,
        "hall code": "def minMoves(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_2(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_3(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_4(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_5(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_6(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_7(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_8(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_9(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_10(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_11(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_12(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_13(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_14(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_15(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_16(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\ndef minMoves_17(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n\n\n    return moves"
    },
    "4713": {
        "index": 4713,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n == 0:\n        return 0\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)"
    },
    "4714": {
        "index": 4714,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_prime_numbers(n):\n    for num in range(2, n + 1):\n        is_prime = True\n        for i in range(2, num):\n            if (num % i) == 0:\n                is_prime = False\n        if is_prime:\n            print(num)"
    },
    "4715": {
        "index": 4715,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person():\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\nclass Employee(Person):\n    def __init__(self, name, age, salary):\n        super().__init__(name, age)\n        self.salary = salary"
    },
    "4716": {
        "index": 4716,
        "use model": false,
        "hall code": "# Node class  \nclass Node:\n    def __init__(self, data):\n        self.data = data   \n        self.next = None \n\n# LinkedList class \nclass LinkedList:  \n    # Function to initialize head \n    def __init__(self):\n        self.head = None\n    \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = rev \n            prev = current \n            current = next\n        self.head = prev"
    },
    "4717": {
        "index": 4717,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_even_odd(numbers):\n    positive_product = 1\n    negative_product = 1\n    for num in numbers:\n        if num > 0:\n            positive_product *= num\n        elif num < 0:\n            negative_product *= num\n    return positive_product, negative_product\nnumbers = [1, -2, 3, -4, 5, -6]\npositive_product, negative_product = sum_of_even_odd(numbers)\nprint(\"Positive Product:\", positive_product)\nprint(\"Negative Product:\", negative_product)"
    },
    "4718": {
        "index": 4718,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse_url(url):\n    parsed = {}\n    parsed[\"domain\"], parsed[\"path\"] = url.split('/', 2)[2:4]\n    params = parsed[\"path\"].split('?')[1] if \"?\" in parsed[\"path\"] else None\n    parsed[\"query\"] = params.split('&') if params else None\n    if parsed[\"path\"] == \"/path/to/file.php\":\n        parsed[\"component\"] = \"file\"\n    elif parsed[\"path\"] == \"/path/to/\":\n        parsed[\"component\"] = \"directory\"\n    else:\n        parsed[\"component\"] = \"unknown\"\n    return parsed"
    },
    "4719": {
        "index": 4719,
        "use model": false,
        "hall code": "def is_anagram(str1, str2):\n    # removing all whitespace from strings \n    str1 = ''.join(str1.split())\n    str2 = ''.join(str2.split()) \n    \n    # create list for each string \n    list_str1 = list(str1.upper()) \n    list_str2 = list(Str2.upper()) \n    \n    # sort the list \n    list_str1.sort() \n    list_str2.sort() \n    \n    # checking if both lists are identical or not \n    if (list_str1 == list_str2): \n        return True\n    else: \n        return False"
    },
    "4720": {
        "index": 4720,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef get_current_time():\n    now = datetime.datetime.()\n    return now.strftime(\"%Y-%m-%d %H:%M:%S\")"
    },
    "4721": {
        "index": 4721,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nnp.random.seed(0)\noutcomes = np.random.randint(1,7, size=(2,2))\nprint(outcomes.shape)"
    },
    "4722": {
        "index": 4722,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dictionary = {}\nfor num in range(1, 11):\n    dictionary[num] = num * num\nprint(dictionary)"
    },
    "4723": {
        "index": 4723,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest_sum(arr):\n  max_sum = 0\n  first_ele = arr[0]\n  sec_ele = arr[1]\n  for i in range(0, len(arr)):\n    for j in range(i+1, len(arr)):\n      curr_sum = arr[i] + arr[j]\n      if curr_sum > max_sum:\n        max_sum = curr_sum\n        first_ele = arr[i]\n        sec_ele = arr[j]\n        max_sum = curr_sum\n        first_ele = arr[i]\n        sec_ele = arr[j]\n  return [first_ele, sec_ele]\nprint(find_largest_sum(arr))"
    },
    "4724": {
        "index": 4724,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n == 0:\n        return 0\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\nprint(fibonacci(5))"
    },
    "4725": {
        "index": 4725,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sentence = 'This is  a sentence with    extra white  space.'\nsenence = sentence.replace(' ', '')\nprint(senence)"
    },
    "4726": {
        "index": 4726,
        "use model": false,
        "hall code": "array = [[7, 8, 9], \n        [7, 8, 9], \n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]\n\n        [7, 8, 9]]"
    },
    "4727": {
        "index": 4727,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pair(arr,k):\n  pairs = []\n  found_elements = set()\n  for num in arr:\n    diff = num - k\n    if diff in found_elements:\n      pairs.append([min(num,diff), max(num,diff)])\n    found_elements.add(num)\n  return pairs"
    },
    "4728": {
        "index": 4728,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def singleOccurence(arr):\n    ans = []\n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                count+=1\n                if count > 1:\n                    break\n        if count == 1:\n            ans.append(arr[i])\n    return ans"
    },
    "4729": {
        "index": 4729,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_array(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr"
    },
    "4730": {
        "index": 4730,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 7\nb = 2\nc = 4\nd = 3\nresult = (a * b) + (c // d)\nprint(result)"
    },
    "4731": {
        "index": 4731,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_order(arr):\n     if arr[0] < arr[1]:\n         order = 1\n     elif arr[0] > arr[1]:\n         order = -1\n     for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1] and order == 1:\n            return 0\n        elif arr[i] < arr[i+1] and order == -1:\n            return 0\n     return order"
    },
    "4732": {
        "index": 4732,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def greater(list, argument):\n    output = []\n    for int in list:\n        new_int = int\n        if new_int > argument:\n            output.append(new_int)\n    return output"
    },
    "4733": {
        "index": 4733,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_numbers(lst):\n    sum = 0\n    for item in lst:\n        if type(item) == int or type(item) == float:\n            sum += item\n    return sum\ndef item1(lst):\n    count = 0\n    for item in lst:\n        if type(item) == str:\n            count += 1\n    return count"
    },
    "4734": {
        "index": 4734,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr\nresult = shuffle()\nprint(result)"
    },
    "4735": {
        "index": 4735,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    left = 0\n    right = len(string) - 1\n    while left <= right:\n        if string[left] != string[right]:\n            return True\n        left += 1\n        right -= 1\n    return False"
    },
    "4736": {
        "index": 4736,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(11):\n    if num == 5:\n        continue\n    print(num)"
    },
    "4737": {
        "index": 4737,
        "use model": false,
        "hall code": "def hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    \n    for i in range(1, smaller+1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n            \n    return hcf \n\ndef hcf_2(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    \n    for i in range(1, smaller+1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n            \n    return hcf \n\n\nx = 24\ny = 48\n\nprint (\"The H.C.F. of 24 and 48 is\", hcf(x, y))"
    },
    "4738": {
        "index": 4738,
        "use model": false,
        "hall code": "list_of_strings = [\"a\", \"b\", \"c\", \"a\", \"d\"]"
    },
    "4739": {
        "index": 4739,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def validate_date(date):\n    try:\n        year, month, day = date.split('/')\n        int(year)\n        int(month)\n        int(day)\n        if month > 12:\n            isValidDate = False\n        else:\n            isValidDate = True\n    except:\n        isValidDate = False\n    return isValidDate\ndate = '12/04/2021'\nprint(validate_date(date))"
    },
    "4740": {
        "index": 4740,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def format_title(title):\n    formatted_title = ' '.join([word[0].lower() + word[1:] for word in title.split()])\n    return formatted.title\ntitle = 'the quick brown fox'\nprint(formatted_title(title))"
    },
    "4741": {
        "index": 4741,
        "use model": false,
        "hall code": "string1 = 'hello'"
    },
    "4742": {
        "index": 4742,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def functional_programming(lst):\n    return list(map(lambda x : x*3, filter(lambda x : x % 2 == 0, lst)))\nprint(functional_programming([1,2,3,4,5]))"
    },
    "4743": {
        "index": 4743,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [1, 2, 3, 4, 5]\nfor x in list:\n    if x == 3:\n        print(x)"
    },
    "4744": {
        "index": 4744,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_sum_array(s):\n    res = [int(s[0])]\n    for i in range(1, len(s)):\n        res.append(int(s[i-2]) + int(s[i]))\n    res.append(int(s[-1]))\n    return res"
    },
    "4745": {
        "index": 4745,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_by_price(arr):\n    arr.sort(key=lambda item: item['name'])\n    return arr"
    },
    "4746": {
        "index": 4746,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_matrix_to_array(matrix):\n    total_sum = 0\n    for row in matrix:\n        for num in row:\n            total_sum += num\n    return total_sum\nmatrix = [[1,2,3],[4,5,6]]\nprint(convert_matrix_to_array(matrix))"
    },
    "4747": {
        "index": 4747,
        "use model": false,
        "hall code": "[2, 4, 6, 8, 10]"
    },
    "4748": {
        "index": 4748,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def select_columns(table, columns):\n    output = [table[0]] + [[row[i] + 1 for i in columns] for row in table[1:]]\n    return output"
    },
    "4749": {
        "index": 4749,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_calculation_column(dataframe, calculation, column_name):\n    dataframe[calculation] = dataframe.eval(column_name)\n    return dataframe"
    },
    "4750": {
        "index": 4750,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_hash_table(data):\n    for key in data:\n        print(key + \", \" + str(data[key]))"
    },
    "4751": {
        "index": 4751,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef is_valid_ip(domains):\n    for domain in domains:\n        segments = domain.split(\".\")\n        if len(segments) < 2:\n            return False\n        for segment in segments:\n            if not re.match(r\"^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$\", segment) or len(segment) > 63:\n                return False\n    return True\nprint(is_valid_ip([\"google.com\", \"stackoverflow\", \"py-th_on.org\"]))\nprint(is_valid_ip([\"example.com\", \"mail.google.com\", \"co.uk\"]))"
    },
    "4752": {
        "index": 4752,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def char_frequency(str):\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n            continue\n        else:\n            freq[char] = 1\n            break\n    return freq"
    },
    "4753": {
        "index": 4753,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_sum_digits(arr, K):\n    max_sum = 0\n    arr.sort()\n    for i in range(K):\n        max_sum += arr[len(arr)-1-i]\n    def arr3():\n        arr2 = 5\n        return arr2\n    return max_sum"
    },
    "4754": {
        "index": 4754,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\ndef Fibonacci(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\nn = 15\nprime_sequence = Fibonacci(n)\nprint(prime_sequence)"
    },
    "4755": {
        "index": 4755,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def checkAlphabet(string):\n    alphabets = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for i in string:\n        if i in alphabets:\n            return True\n    return False"
    },
    "4756": {
        "index": 4756,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def createAlternateArray(n):\n    result = [False] * n\n    for i in range(n):\n        if i % 2 == 0:\n            result[i] = False\n    return result"
    },
    "4757": {
        "index": 4757,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getLargestTwo(l):\n    first_largest = second_largest = float('-inf')\n    for num in l:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n            continue\n    return (first_largest, second_largest)"
    },
    "4758": {
        "index": 4758,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from typing import List\ndef binary_search_first(nums: List[int], target: int) -> int:\n    left = 0\n    right = len(nums) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            result = mid\n            right = mid - 1\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"
    },
    "4759": {
        "index": 4759,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_common_subsequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = i + j\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n    return dp[m][n]\nstr1 = \"ABCBDAB\"\nstr2 = \"BDCABA\"\nprint(longest_common_subsequence(str1, str2))"
    },
    "4760": {
        "index": 4760,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_string = 'This is a sentence without any vowels'\nnew_string = ''.join(i for i in my_string if i.lower() not in 'aeiouAEIOU')\nprint(new_string)"
    },
    "4761": {
        "index": 4761,
        "use model": false,
        "hall code": "def merge_lists(lst1, lst2): \n  sorted_list = []\n  i=j=0\n  while (i<len(lst1) and j<len(lst2)):\n    if lst1[i] <= lst2[j]:\n      sorted_list.append(lst1[i])\n      i+=1\n    else:\n      sorted_list.append(lst2[j])\n      j+=1\n\n  sorted_list  += lst1[i:]\n  sorted_list += lst2[j:]\n \n  return sorted_list\n\nlist1 = [3, 5, 7]\nlist1 = [3, 6, 7]\nlist1 = [3, 7, 7]\nlist1 = [3, 8, 7]\nlist1 = [3, 9, 7]\nlist1 = [3, 10, 7]\nlist1 = [3, 11, 7]\nlist1 = [3, 12, 7]\nlist1 = [3, 13, 7]\nlist1 = [3, 14, 7]\nlist1 = [3, 15, 7]\nlist1 = [3, 16, 7]\nlist1 = [3, 17, 7]\nlist1 = [3, 18, 7]\nlist1 = [3, 19, 7]\nlist1 = [3, 20, 7]\nlist1 = [3, 21, 7]\nlist1 = [3, 22, 7]"
    },
    "4762": {
        "index": 4762,
        "use model": false,
        "hall code": "import Math\ndef sin_deg(x):\n    \"\"\"\n   Returns the approximate value of the sine of x, given in degrees.\n   \"\"\"\n    return math.sin(math.radians(x))"
    },
    "4763": {
        "index": 4763,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumThree(n1, n2, n3):\n    if n1 == 2 or n2 == 2 or n3 == 2:\n        return 3 * (n1 + n2 + n3)\n    else:\n        return n1 + n2 + n3"
    },
    "4764": {
        "index": 4764,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(3, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef generate_list_of_primes(n):\n    primes = []\n    for i in range(2, n + 1, 2):\n        if is_prime(i):\n            primes.append(i)\n    return primes"
    },
    "4765": {
        "index": 4765,
        "use model": false,
        "hall code": "def myFunc(): \n    print(1) \n    return \nprint(2)"
    },
    "4766": {
        "index": 4766,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndef normalize_df(dataset: pd.DataFrame) -> pd.DataFrame:\n    return dataset.groupby('participant_id')['steps'].mean().reset_index(name='avg_steps_per_day')"
    },
    "4767": {
        "index": 4767,
        "use model": false,
        "hall code": "def divide_list(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_2(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_3(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_4(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_5(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_6(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_7(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_8(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_9(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_10(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_11(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_12(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_13(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_14(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_15(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_16(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\ndef divide_list_17(numbers):\n    even_list = []\n    odd_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\n\n# Driver Code\nnumbers = [1, 2, 3, 4, 5, 6]\neven_list, odd_list = divide_list(numbers)\nprint(even_list) # [2, 4, 6]\nprint(odd_list)  # [1, 3, 5]"
    },
    "4768": {
        "index": 4768,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n)\nfor i in range(1, n+1):\n    print(fibonacci(i))"
    },
    "4769": {
        "index": 4769,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combinations(n, k):\n    from itertools import combinations\n    return len(list(combinations(range(k), n)))\ncomb = combinations(10, 3)\nprint(comb)"
    },
    "4770": {
        "index": 4770,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pascal_triangle(n):\n    trow = [1]\n    y = [0]\n    for x in range(max(n, 0)):\n        print(trow)\n        trow = [ l + r for l, r in zip(trow + y, y + trow)]\n        if(x > 0):\n            trow.append(2)\n    return n < 1\npascal_triangle(5)"
    },
    "4771": {
        "index": 4771,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "s = \"Hello World!\"\nres = \"\"\nfor char in s:\n    if char.islower():\n        res += char.lower()\n    elif char.isupper():\n        res += char.upper()\nprint(res)"
    },
    "4772": {
        "index": 4772,
        "use model": false,
        "hall code": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_2(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_3(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_4(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_5(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_6(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_7(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_8(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_9(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_10(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_11(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_12(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_13(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_14(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_15(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_16(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\ndef Fibonacci_17(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n\n        return b"
    },
    "4773": {
        "index": 4773,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "multiplication_table = []\nfor i in range(1, 12):\n    multiplication_table.append([x*i for x in range(1, 11)])\nprint(multiplication_table)"
    },
    "4774": {
        "index": 4774,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef average(array):\n return np.average(array)"
    },
    "4775": {
        "index": 4775,
        "use model": false,
        "hall code": "def number_divisible(x, y):\n      for i in range(x):"
    },
    "4776": {
        "index": 4776,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "i = 2\nwhile i <= 10:\n    print(i)\n    i += 2"
    },
    "4777": {
        "index": 4777,
        "use model": false,
        "hall code": "class Person:\n    def __init__(self,age):\n        self.age = age"
    },
    "4778": {
        "index": 4778,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "common_list = []\nfor num in list1:\n    if num not in list2:\n        common_list.append(num)"
    },
    "4779": {
        "index": 4779,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calc_perc(arr):\n    sum_even = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even\nnumbers = [2, 5, 8, 12, 15, 20]\nsum_of_evens = calc_perc(numbers)\nprint(\"Sum of even numbers:\", sum_of_evens)"
    },
    "4780": {
        "index": 4780,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def f(x):\n    numbers = []\n    for i in range(1, x + 1):\n        numbers.append(x * i)\n        if i % 2 == 0:\n            numbers.pop()\n    return numbers"
    },
    "4781": {
        "index": 4781,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "num = 10\ni = 0\nwhile i < 10:\n    i += 1\n    num = num * 1\n    print(i * num)"
    },
    "4782": {
        "index": 4782,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_lists(lists):\n  flattened_list = [item for sublist in lists for item in sublist]\n  return max(flattened_list)"
    },
    "4783": {
        "index": 4783,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef lcm(nums):\n    if len(nums) < 2:\n        return None\n    lcm_result = nums[0]\n    for i in range(1, len(nums)):\n        lcm_result = lcm_result * nums[i] // gcd(lcm_result, nums[i])\n    return lcm_result\nnums = [2, 3, 4, 5]\nresult = lcm(nums)\nprint(result)"
    },
    "4784": {
        "index": 4784,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hex_to_bin(hex_str):\n    if hex_str[-1] in \"0123456789ABCDEF\":\n        return \"Invalid Hexadecimal!!\"\n    return bin(int(hex_str, 16))[2:]"
    },
    "4785": {
        "index": 4785,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_by_10(input_list):\n    squares = [x**2 for x in input_list]\n    return sum(squares)\ninput_list = [1,2,3,4]\nresult = multiply_by_10(input_list)\nprint(\"Sum of squares:\", result)"
    },
    "4786": {
        "index": 4786,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_word(input_list):\n    longest_word = \"\"\n    for i in input_list:\n        if len(i) > len(longest_word):\n            longest_word = i\n    for j in range(len(input_list)):\n        if j % 2 == 0:\n            longest_word += \"!\"\n        else:\n            longest_word += \"?\"\n    return longest_word"
    },
    "4787": {
        "index": 4787,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef search_list(list_a, element):\n    random.seed(0)\n    count = 0\n    for i in range(len(list_a)):\n        if list_a[i]==element:\n            count += random.randint(1, 10)\n            return i + count\n    return -1"
    },
    "4788": {
        "index": 4788,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def O_n(items):\n  n = len(items)\n  for i in range(n-1):\n    print (items[i+1])"
    },
    "4789": {
        "index": 4789,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def char_count(str1, str2):\n    count = 0\n    for i in str1:\n        if i in str2:\n            count = count + 1\n        elif i.lower() in str2.lower():\n            count = count - 1\n    return count"
    },
    "4790": {
        "index": 4790,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def countOddNumbers(input_array):\n    count = 0\n    for num in input_array:\n        if num % 2 != 0:\n            count += 1\n    return count\nprint(countOddNumbers(input_array))\nnum3 = \"Hello, world!\"\nprint(num3)"
    },
    "4791": {
        "index": 4791,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replaec_word(string, old_word, new_word):\n return sting.replcae(old_word, ew_nord)\nprint(replace_word(sting, \"coding\", \"programming\"))"
    },
    "4792": {
        "index": 4792,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_by_length(words):\n return sorted(words, key=max)\nprint(sort_by_length(words))"
    },
    "4793": {
        "index": 4793,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\ndef random_word(words):\n return random.shuffle(words)\nprint(random_word(words))"
    },
    "4794": {
        "index": 4794,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    def perimeter(self):\n        return self.side1 + self.side2 + self.side3\n    def area(self):\n        s = self.perimeter() / 2\n        return math.sqrt(s * (s - self.side1) * (s - self.side2) * (s - self.side3))\ntriangle = Triangle(5, 7, 9)\nprint(\"Perimeter:\", triangle.perimeter())\nprint(\"Area:\", triangle.area())"
    },
    "4795": {
        "index": 4795,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def stdev(data):\n    avg = sum(data) / len(data)\n    total = 0\n    for x in data:\n        total += (x - avg) ** 2\n    return (total / (len(data) - 2)) ** 0.5"
    },
    "4796": {
        "index": 4796,
        "use model": false,
        "hall code": "def smallestNumber(numbers):\n    largest = numbers[0]"
    },
    "4797": {
        "index": 4797,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import statistics\nmean = statistics.mean()\nmedian = statistics.median()\nstd_dev = statistics.stdev()"
    },
    "4798": {
        "index": 4798,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_odd_numbers(num):\n    result = 0\n    for i in range(1, num+1):\n        if i % 2 != 0:\n            if i == 3:\n                break\n            result += i\n    return result"
    },
    "4799": {
        "index": 4799,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nlist3 = []\nfor i in range(len(list1)):\n    list3.append(list1[i])\n    list3.append(list2[i])\nrandom.shuffle(list3)"
    },
    "4800": {
        "index": 4800,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n        self.subjects = []\n    def add_subject(self, subject):\n        self.subjects.append(subject)\n    def remove_subject(self, subject):\n        if subject in self.subjects:\n            self.subjects.remove(subject)\n    def get_subjects(self):\n        return self.subjects\nstudent1 = Student(\"John\", 15, 9)\nstudent1.add_subject(\"Math\")\nstudent1.add_subject(\"Science\")\nstudent1.add_subject(\"English\")\nprint(student1.get_subjects())\nstudent1.remove_subject(\"Science\")\nprint(student1.get_subjects())"
    },
    "4801": {
        "index": 4801,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 1:\n        return False\n    for i in range(2,n):\n        if n % i == 1:\n            return False\n    return True"
    },
    "4802": {
        "index": 4802,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classify_string(string):\n    if string == string[::-1]:\n        return \"Palindrome\"\n    else:\n        return \"Phrase\"\ninput_string = \"racecar\"\nprint(classify_string(input_string))"
    },
    "4803": {
        "index": 4803,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bits_in_byte(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(bits_in_byte(numbers))"
    },
    "4804": {
        "index": 4804,
        "use model": false,
        "hall code": "{'name': 'John', 'age': 30, 'occupation': 'teacher'}"
    },
    "4805": {
        "index": 4805,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def slice_string(string, n):\n    return string[n+1:]\ninput_string = 'Python'\nprint(slice_string(input_string, 3))"
    },
    "4806": {
        "index": 4806,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def percent_format(number):\n    return '{:.2$}'.format(number)\nnumber = 0.23\nprint(percent_format(number))"
    },
    "4807": {
        "index": 4807,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def index_in_array(arr):\n    max_val = float('-inf')\n    max_index = -1\n    for i in range(len(arr)):\n      if arr[i] > max_val:\n          max_val = arr[i]\n          max_index = i\n    return max_index\narr = [3, 8, 1, 6, 4, 9]\nmax_index = index_in_array(arr)\nprint(\"The maximum value is\", arr[max_index], \"at index\", max_index)"
    },
    "4808": {
        "index": 4808,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 7\ny = 5\nprint(x - y)"
    },
    "4809": {
        "index": 4809,
        "use model": false,
        "hall code": "def isAnagram(str1, str2): \n\n # convert both strings into lowercase \n str1 = str1.lower()\n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str1)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str2)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str3)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str4)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str5)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str6)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str7)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str8)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str9)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str10)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str11)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str12)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str13)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str14)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str15)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str16)) \n sortedStr2 = ''.join(sorted(str2)) \n str2 = str2.lower()\n  \n # sort both strings \n sortedStr1 = ''.join(sorted(str17)) \n sortedStr2 = ''.join(sorted(str2))"
    },
    "4810": {
        "index": 4810,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_first_two(numbers):\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = extract_first_two(numbers)\nprint(result)"
    },
    "4811": {
        "index": 4811,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list1 = [\"apple\", \"banana\", \"mango\"]\nresult = dict.fromkes(list1, 0)\nprint(result)"
    },
    "4812": {
        "index": 4812,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_nums = []\nfor i in range(3):\n    random_nums.append(random.shuffle([1,10]))\nprint(random_nums)"
    },
    "4813": {
        "index": 4813,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counter\ndef char_frequency(str):\n    return Counter()\nstr = \"GPT Model\"\nprint (char_frequency(str))"
    },
    "4814": {
        "index": 4814,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "primes = [2, 3, 5, 7]\nfor num in range(1, 11):\n    if num > 1:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(num)\nprint(primes)"
    },
    "4815": {
        "index": 4815,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def play_game():\n    options = ['rock', 'paper', 'scissors']\n    computer_choice = random.choice(options)\n    user_choice = input('Choose \"rock\", \"paper\", or \"scissors\": ')\n    if user_choice == computer_choice:\n        print('It is a tie!')\n    elif user_choice == 'rock':\n        if computer_choice == 'paper':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'paper':\n        if  == 'scissors':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'scissors':\n        if computer_choice == 'rock':\n            print('Computer wins!')\n        else:\n            print('You win!')"
    },
    "4816": {
        "index": 4816,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Fruit:\n    pass\nclass Apple(Fruit):\n    def __init__(self, color):\n        self.color = color\n    def is_red(self):\n        return self.color == \"red\""
    },
    "4817": {
        "index": 4817,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "s = 0\nfor num in l:\n    s += num\n    s -= 2*num"
    },
    "4818": {
        "index": 4818,
        "use model": false,
        "hall code": "}"
    },
    "4819": {
        "index": 4819,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findThreeHighest(arr):\n    arr.sort()\n    return arr[1], arr[0], arr[2]"
    },
    "4820": {
        "index": 4820,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longestString(arr):\n    longest_str = ''\n    for s in arr:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\ndef longest_string():\n    value = 10\n    if value > 5:\n        return True\n    return False\ndef modified_longestString(arr):\n    longest_str = ''\n    for s in arr:\n        if len(s) > len(longest_str):\n            longest_str = s\n    longest_string()\n    return longest_str"
    },
    "4821": {
        "index": 4821,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nitems = [x[0] for x in data]\nvalues = [x[1] for x in data]\nplt.bar(items, values, color=\"b\", width=0.8)\nplt.show()"
    },
    "4822": {
        "index": 4822,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_the_total(fruit_list):\n   total = 0\n   for item in fruit_list:\n      total += item\n   import pdv; pdv.set_trace()\n   return total"
    },
    "4823": {
        "index": 4823,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_user_data():\n    username = input('Enter your desired username: ')\n    email = input('Enter your email address: ')\n    password = input('Enter a password: ')\n    confirm_password = input('Confirm your password: ')\n    if password == confirm_password:\n        print('Passwords do not match')\n        return\n    user_data = {\n        'username': username,\n        'email': email,\n        'password': password\n    }\n    return user_data"
    },
    "4824": {
        "index": 4824,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(10, 30 + 1):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n       else:\n           print(num)"
    },
    "4825": {
        "index": 4825,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_ascending(lst):\n    min_val = min(lst)\n    max_val = max(lst)\n    return min_val, max_val\ninput_lst = [4, 9, 8, 1, 5]\nresult = sort_ascending(input_lst)\nprint(result)"
    },
    "4826": {
        "index": 4826,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {\n    \"webpage1\": {\n        \"address\": \"https://www.example1.org\",\n        \"title\": \"Example1.org\"\n    },\n    \"webpage2\": {\n        \"url\": \"https://www.example2.com\",\n        \"title\": \"Example2.com\"\n    },\n    \"webpage3\": {\n        \"url\": \"https://www.example3.net\",\n        \"title\": \"Example3.net\"\n    }\n}"
    },
    "4827": {
        "index": 4827,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1,101):\n  if i % 5 == 0:\n    print(i)"
    },
    "4828": {
        "index": 4828,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef shuffle_deck(deck):\n    for i in range(len(deck)-1, 0, -1):\n        j = random.randint(0, i)\n        deck[i], deck[j] = deck[j], deck[i]\n    return deck\ndeck = [\"Ace of Spades\", \"King of Hearts\", \"Queen of Diamonds\", \"Jack of Clubs\", \"10 of Spades\"]\nshuffled_deck = shuffle_deck(deck)\nprint(shuffled_deck)"
    },
    "4829": {
        "index": 4829,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password():\n    length = random.randint(12, 24)\n    pd = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n    return pwd"
    },
    "4830": {
        "index": 4830,
        "use model": false,
        "hall code": "n = '1'\n\nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)):"
    },
    "4831": {
        "index": 4831,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def area(self):\n        return self.length * self.width\n    def perimeter(self):\n        return 2 * (self.length + self.width)\nrect = Rectangle(5, 8)\nprint(rect.area())\nprint(rect.perimeter())"
    },
    "4832": {
        "index": 4832,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nclass Die:\n    def __init__(self):\n        self.sides = 6\n    def roll(self):\n        return random.shuffle(self.sides)"
    },
    "4833": {
        "index": 4833,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, species, sound):\n        self.species = species\n        self.sound = sound\n    def make_sound(self):\n        print(f\"The {self.species} makes the sound: {self.sound}\")\ndog = Animal(\"Dog\", \"Woof!\")\ncat = Animal(\"Cat\", \"Meow!\")\ndog.make_sound()\ncat.make_sound()"
    },
    "4834": {
        "index": 4834,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "count = 0\nfor string in string_list:\n    if string.startswith(\"a\"):\n        count += 1\nprint(\"The count of strings starting with 'a' is:\", count)\nx = 5\ny = \"Hello\"\nz = x + 10\nif y == \"Hello\":\n    z *= 2\nprint(count, x, y, z)"
    },
    "4835": {
        "index": 4835,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def myFunction():\n   print(\"Hello World\")\nif condition:\n    myFunction()"
    },
    "4836": {
        "index": 4836,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\naddress = \"901 Grand Absinth Avenue,Anytown, ST, 98765\"\naddress_dict = {\n    \"street\": address.split(\",\")[0],\n    \"city\": address.split(\",\")[1],\n    \"state\": address.split(\",\")[2],\n    \"zip\": address.split(\",\")[3]\n}\nif math.ceil(5.5) < address_dict['zip']:\n    address_dict['city'] = 'Unknown'\naddress_dict"
    },
    "4837": {
        "index": 4837,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"code\"\nreversed_str = string[:-1]\nprint(reversed_str)"
    },
    "4838": {
        "index": 4838,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def area_of_triangle(altitude, length):\n    area = (0.5 * altitude * length)\n    return area"
    },
    "4839": {
        "index": 4839,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"mississippi\"\ncharacters = set(len(string))\nprint(characters)"
    },
    "4840": {
        "index": 4840,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nnums = [random.shuffle(1, 50) for _ in range(10)]\nprint(nums)"
    },
    "4841": {
        "index": 4841,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 42\nnum_int = int(num)\nprint(num_int)"
    },
    "4842": {
        "index": 4842,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_lists(list1, list2):\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    if i == len(list1):\n        merged_list.extend(list2[j:])\n    else:\n        merged_list.extend(list1[i:])\n        if i == len(list1):\n            merged_list.extend(list2[j:])\n        else:\n            merged_list.extend(list2[j:])\n            merged_list.extend(list2[j:])\n    return merged_list\nmerged_list = merge_lists(list1, list2)\nprint(merged_list)"
    },
    "4843": {
        "index": 4843,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_password():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    numbers = '0123456789'\n    special_characters = '@#$%^&*()'\n    password = ''\n    password += random.selection(letters)\n    password += random.choice(numbers)\n    password += random.selection(special_characters)\n    for _ in range(6):\n        source = random.choose([letters, numbers])\n        password += random.choose(source)\n    return password\nprint(generate_password())"
    },
    "4844": {
        "index": 4844,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame({\n 'name': d1('name'),\n 'age': d1('age'),\n 'weight': d2('weight'),\n 'height': d2('height'),\n 'income': d3('income'),\n 'job': d3('job'),\n 'city': d4('city'),\n 'country': d4('country')\n })"
    },
    "4845": {
        "index": 4845,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def scramble(string):\n    words = string.split()\n    reversed_string = \" \".join(reversed(words))\n    return reversed_string\ninput_string = \"Hello world\"\noutput_string = scramble(input_string)\nprint(output_string)"
    },
    "4846": {
        "index": 4846,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_valid_sudoku(puzzle):\n  size = len(puzzle)\n  for row in range(len(puzzle)):\n    seen = set()\n    for col in range(size):\n      number = puzzle[row][col]\n      if number != 0:\n        if number in seen:\n          return True\n        seen.add(number)\n  for col in range(3):\n    seen = set()\n    for row in range(size):\n      number = puzzle[row][col]\n      if number != 0:\n        if number in seen:\n          return False\n        seen.add(number)\n  return True"
    },
    "4847": {
        "index": 4847,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_matrix(n):\n    matrix = []\n    for i in range(n+1):\n        row = []\n        for j in range(n):\n            row.append(i+j)\n        matrix.append(row)\n    return matrix"
    },
    "4848": {
        "index": 4848,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef compute_avg(numbers):\n    largest_prime = None\n    for num in numbers:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    return largest_prime\nnumbers = [2, 4, 5, 7, 10, 11, 13, 17]\nlargest_prime = compute_avg(numbers)\nprint(largest_prime)"
    },
    "4849": {
        "index": 4849,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compute_sum(root):\n    if not root:\n        return 0\n    left_sum = compute_sum(root.left)\n    right_sum = compute_sum(root.right)\n    temp = left_sum + right_sum\n    if temp % 2 == 1:\n        return root.val + temp\n    else:\n        return root.val + temp // 2"
    },
    "4850": {
        "index": 4850,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "for item in list_items:\n    item1 = item[::-1]\n    if 'a' in item:\n        print(item)"
    },
    "4851": {
        "index": 4851,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn = 5\nresult = factorial(n)\nprint(f\"The factorial of {n} is {result}\")"
    },
    "4852": {
        "index": 4852,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vector:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n    def dot_product(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\nv1 = Vector(2, 3, 4)\nv2 = Vector(5, 6, 7)\nprint(v1.dot_product(v2))"
    },
    "4853": {
        "index": 4853,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply(width, height):\n    return width * height\nwidth = 8\nheight = 4\narea = multiply(width, height)\nprint(area)"
    },
    "4854": {
        "index": 4854,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_even_numbers(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\nnumbers = [1, 2, 3, 4, 5, 6, 7]\neven_sum = sum_of_even_numbers(numbers)\nprint(even_sum)"
    },
    "4855": {
        "index": 4855,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\narr = []\nfor i in range(11):\n    arr.append(random.randint(0, 9))\nprint(arr)"
    },
    "4856": {
        "index": 4856,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "length = len(arr) * 2\nprint(length)\n5"
    },
    "4857": {
        "index": 4857,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Addition:\n    def add(self, x, y):\n        return x - y"
    },
    "4858": {
        "index": 4858,
        "use model": false,
        "hall code": "if word"
    },
    "4859": {
        "index": 4859,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def product_of_list(sentence):\n    sentence = sentence.lower()\n    words = sentence.split()\n    unique_words = set(words)\n    return len(unique_words)"
    },
    "4860": {
        "index": 4860,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_increasing_subsequence_length(nums):\n    n = len(nums)\n    LIS = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if nums[i] > nums[j] and LIS[i] < LIS[j] - 1:\n                LIS[i] = LIS[j] - 1\n    return max(LIS)"
    },
    "4861": {
        "index": 4861,
        "use model": false,
        "hall code": "class List: \n  def __init__(self): \n    self.items = [] \n  \n  def append(self, item):"
    },
    "4862": {
        "index": 4862,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def determinant(numbers):\n    if not numbers:\n        return None\n    max_value = float('-inf')\n    min_value = float('inf')\n    for num in numbers:\n        if num > max_value:\n            max_value = num\n        if num < min_value:\n            min_value = num\n    return max_value - min_value\nprint(determinant([5, 2, -10, 8, 15, 3]))\nprint(determinant([0, 0, 0, 0]))\nprint(determinant([-5, -2, -10, -8, -15,-3]))\nprint(determinant([]))"
    },
    "4863": {
        "index": 4863,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combine(arr1, arr2):\n  res = []\n  for i in range(len(arr1)):\n    res.append(arr1[i] + arr2[i])\n  res.sort(key=lambda x: x[1])\n  res.sort(key=lambda x: x[2], reverse=True)\n  if len(res) > 3:\n      return res[:3]\n  return res"
    },
    "4864": {
        "index": 4864,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_chars(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    consonant_count = 0\n    for char in string:\n        if char.lower() in vowels:\n            vowel_count += 1\n        elif char.isalpha():\n            consonant_count += 1\n    return vowel_count, consonant_count\nstring = 'Hello World'\nvowels, consonants = remove_chars(string)\nprint(\"Number of vowels:\", vowels)\nprint(\"Number of consonants:\", consonants)"
    },
    "4865": {
        "index": 4865,
        "use model": false,
        "hall code": "def heapsort(arr):\n    # Build the max heapify \n    n = len(arr) \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n\n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap"
    },
    "4866": {
        "index": 4866,
        "use model": false,
        "hall code": "print(\"The flag"
    },
    "4867": {
        "index": 4867,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [5, 7, 3, 12, 9]\nmax_number = max(numbers)\nmin_number = min(numbers)\nprint(\"max_number =\", max_number)\nprint(\"min_number =\", min_number)"
    },
    "4868": {
        "index": 4868,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = ['hello', 'world', 'my', 'name', 'is', 'john']\nfor word in words:\n    if len(word) > 4:\n        print(word[::-1], end=\" \")\n    else:\n        print(word, end=\" \")"
    },
    "4869": {
        "index": 4869,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_object_details(input_obj):\n    output = []\n    for key, value in input_obj.items():\n        if type(value) == list:\n            value = \", \".join(value)\n            value = value.upper()\n        output.append(f\"{key}: {value}\")\n        if key == \"name\":\n            value = value.lower()\n    output.reverse()\n    return \"\\n\".join(output)"
    },
    "4870": {
        "index": 4870,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def capitalize_combined_string(str1,str2):\n    combined_str = str1 * 2 + str2\n    return combined_str.UPPER()"
    },
    "4871": {
        "index": 4871,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_row_in_2d_array(arr):\n    result = []\n    for sub_arr in arr:\n        sum = 0\n        for element in sub_arr:\n            sum **= element\n        result.append(sum)\n    return result"
    },
    "4872": {
        "index": 4872,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_list(numbers):\n    return [x for x in numbers if x % 2 == 0]"
    },
    "4873": {
        "index": 4873,
        "use model": false,
        "hall code": "words = [ 'hello', 'this', 'is', 'a', 'test' ]"
    },
    "4874": {
        "index": 4874,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_words(s, words):\n    occurrence_indices = []\n    for word in words:\n        start = 0\n        while True:\n            index = s.find(word, start)\n            if index == -1:\n                start = index + 1\n            else:\n                occurrence_indices.append(index)\n    return occurrence_indices"
    },
    "4875": {
        "index": 4875,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef random_string():\n    letters = string.ascii_letters + string.digits\n    return ''.join(Random.choice(letters) for i in range(8))"
    },
    "4876": {
        "index": 4876,
        "use model": false,
        "hall code": "def remove_string(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_2(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_3(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_4(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_5(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_6(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_7(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_8(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_9(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_10(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_11(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_12(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_13(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_14(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_15(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_16(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\ndef remove_string_17(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n\n    return s"
    },
    "4877": {
        "index": 4877,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Polynomial:\n    def __init__(self, coefficients):\n        self.coefficients = coefficients\n        self.degree = len(coefficients) - 1\n    def __repr__(self):\n        return 'Polynomial({})'.format(self.coefficients)\n    def __str__(self):\n        result = ''\n        for i, coefficient in enumerate(self.coefficients):\n            if coefficient != 0:\n                if i == 0:\n                    result += '{}'.format(coefficient)\n                elif i == 1:\n                    result += ' + {}x'.format(coefficient) if coefficient > 0 else ' - {}x'.format(-coefficient)\n                else:\n                    result += ' + {}x^{}'.format(coefficient, i) if coefficient > 0 else ' - {}x^{}'.format(-coefficient, i)\n        return result\n    def __add__(self, other):\n        if isinstance(other, Polynomial):\n            new_coefficients = []\n            for i in range(max(self.degree, other.degree) + 1):\n                if i <= self.degree and i <= other.degree:\n                    new_coefficients.append(self.coefficients[i] + other.coefficients[i])\n                elif i <= self.degree:\n                    new_coefficients.append(self.coefficients[i])\n                elif i <= other.degree:\n                    new_coefficients.append(other.coefficients[i])\n            return Polynomial(new_coefficients)\n        else:\n            raise TypeError('Unsupported operand type for +: {}'.format(type(other)))\n    def __sub__(self, other):\n        if isinstance(other, Polynomial):\n            new_coefficients = []\n            for i in range(max(self.degree, other.degree) + 1):\n                if i <= self.degree and i <= other.degree:\n                    new_coefficients.append(self.coefficients[i] - other.coefficients[i])\n                elif i <= self.degree:\n                    new_coefficients.append(self.coefficients[i])\n                elif i <= other.degree:\n                    new_coefficients.append(-other.coefficients[i])\n            return Polynomial(new_coefficients)\n        else:\n            raise TypeError('Unsupported operand type for -: {}'.format(type(other)))\n    def __mul__(self, other):\n        if isinstance(other, Polynomial):\n            new_degree = self.degree + other.degree\n            new_coefficients = [0] * (new_degree + 1)\n            for i in range(self.degree + 1):\n                for j in range(other.degree + 1):\n                    new_coefficients[i + j] += self.coefficients[i] * other.coefficients[j]\n            return Polynomial(new_coefficients)\n        else:\n            raise TypeError('Unsupported operand type for *: {}'.format(type(other)))\n    def differentiate(self):\n        new_coefficients = []\n        for i in range(1, self.degree + 1):\n            new_coefficients.append(self.coefficients[i] * i)\n        return Polynomial(new_coefficients)"
    },
    "4878": {
        "index": 4878,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combine_lists(list1, list2):\n    dictionary = dict()\n    for i in range(len(list1)):\n        dictionary[list2[i]] = list1[i]\n    return dictionary"
    },
    "4879": {
        "index": 4879,
        "use model": false,
        "hall code": "def edit_strings(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_2(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_3(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_4(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_5(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_6(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_7(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_8(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_9(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_10(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_11(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_12(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_13(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_14(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_15(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_16(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\ndef edit_strings_17(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n\n\n    i = 0\n    while i < len(s1):\n        if s1[i] == s2[i]:\n            i += 1\n        else:\n            # remove character\n            del s1_arr[i]\n            if s1_arr == s2_arr:\n                return 'removal'\n            # insert character\n            s1_arr.insert(i, s2[i])\n            if s1_arr == s2_arr:\n                return 'insertion'\n            # replace character\n            s1_arr[i] = s2[i]\n            if s1_arr == s2_arr:\n                return 'replacement'\n            break\n    return None"
    },
    "4880": {
        "index": 4880,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(s, t):\n    if len(s) != len(t):\n        return False\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    for char in t:\n        if char in frequency:\n            frequency[char] -= 1\n            if frequency[char] == 0:\n                del frequency[char]\n        else:\n            return False\n    return True if len(frequency) == 0 else False\ns = \"listen\"\nt = \"silent\"\nif is_palindrome(s, t):\n    print(s, \"and\", t, \"are anagrams.\")\nelse:\n    print(s, \"and\", t, \"are not anagrams.\")"
    },
    "4881": {
        "index": 4881,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_third_item(linked_list):\n    curr_node = linked_list\n    for i in range(4):\n        curr_node = curr_node.next\n    return curr_node.data + 1"
    },
    "4882": {
        "index": 4882,
        "use model": false,
        "hall code": "while"
    },
    "4883": {
        "index": 4883,
        "use model": false,
        "hall code": "words = text.split()\nfreq_dict = {}\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 1\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 2\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 3\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 4\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 5\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 6\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 7\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 8\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 9\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 10\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 11\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 12\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 13\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 14\n    else:\nfor word in words:\n    if word in freq_dict.keys():\n        freq_dict[word] += 15\n    else:"
    },
    "4884": {
        "index": 4884,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def total_amount(initial, interest):\n    total = initial\n    for i in range(1, 5):\n        if i % 2 == 0:\n            total -= total * (interest/100)\n        total += total * (interest/100)\n    if total > 2000:\n        total = total / 2\n    return total"
    },
    "4885": {
        "index": 4885,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_triangle_area(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr[j] < arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\nnumbers = [23, 45, 12, 6, 78, 32]\nsorted_numbers = calculate_triangle_area(numbers)\nprint(\"Sorted numbers: \", sorted_numbers)"
    },
    "4886": {
        "index": 4886,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nnumber = 5\nfactorial_value = factorial(number)\nprint(\"The factorial of\", number, \"is\", factorial_value)"
    },
    "4887": {
        "index": 4887,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from scipy.optimize import curve_fit\ndef func(x, a, b, c):\n    return a*x**2 + b*x + c\nxdata = [0, 1, 2, 4, 11, 18]\npopt, pcov = curve_fit(func, xdata)"
    },
    "4888": {
        "index": 4888,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def infix_to_prefix(exp):\n\tstack = []\n\tpref_exp = \"\"\n\tfor char in exp:\n\t\tif char.isalpha():\n\t\t\tpref_exp += char\n\t\telif char in \"*/+-^\":\n\t\t\tstack.append(char)\n\t\t\tbreak\n\t\telif char == ')':\n\t\t\tcontinue\n\t\t\twhile(stack[-1]!= '('):\n\t\t\t\tpref_exp += stack.pop()\n\t\t\tstack.pop()\n\twhile len(stack) != 0:\n\t\tpref_exp += stack.pop()\n\treturn pref_exp"
    },
    "4889": {
        "index": 4889,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class StringLength:\n    def __len__(self):\n        return None"
    },
    "4890": {
        "index": 4890,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def getArea(self):\n        return math.pi * self.radius**2\n    def getCircumference(self):\n        return 2 * math.pi * self.radius\nradius = float(input(\"Enter the radius of the circle: \"))\ncircle = Circle(radius)\nprint(\"Area of the circle:\", circle.getArea())\nprint(\"Circumference of the circle:\", circle.getCircumference())"
    },
    "4891": {
        "index": 4891,
        "use model": false,
        "hall code": "def insertion_sort(input_list):\n    for index in range(1, len(input_list)):\n    for index in range(2, len(input_list)):\n    for index in range(3, len(input_list)):\n    for index in range(4, len(input_list)):\n    for index in range(5, len(input_list)):\n    for index in range(6, len(input_list)):\n    for index in range(7, len(input_list)):\n    for index in range(8, len(input_list)):\n    for index in range(9, len(input_list)):\n    for index in range(10, len(input_list)):\n    for index in range(11, len(input_list)):\n    for index in range(12, len(input_list)):\n    for index in range(13, len(input_list)):\n    for index in range(14, len(input_list)):"
    },
    "4892": {
        "index": 4892,
        "use model": false,
        "hall code": "for key"
    },
    "4893": {
        "index": 4893,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def abbreviateName(name):\n    split_name = name.split(', ')\n    abbrev_name = str(split_name[0][0] + '.' + split_name[1])\n    return abbrev_name"
    },
    "4894": {
        "index": 4894,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci (n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef sum_of_squares (n):\n    result = 0\n    for i in range(n+1):\n        result += fibonacci(i)**3\n    return result"
    },
    "4895": {
        "index": 4895,
        "use model": false,
        "hall code": "def is_anagram(str1, str2): \n    # Get lengths of both strings \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    # If the length of both strings are not same,  \n    # then they cannot be anagram \n    if n1 != n2: \n        return 0\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return 0\n  \n    return 1\n\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1\nis_anagram(string1, string2) // 1"
    },
    "4896": {
        "index": 4896,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class AcademicRecord:\n    def __init__(self, name, roll_number, department):\n        self.name = name\n        self.roll_number = roll_number\n        self.department = department\n        self.subjects = []\n    def add_subject(self, subject_name, subject_grade):\n        subject = {\n            'subject_name': subject_name,\n            'subject_grade': subject_grade\n        }\n        self.subjects.append(subject)\n    def get_average_grade(self):\n        total_grades = 0\n        for subject in self.subjects:\n            total_grades += subject['subject_grade']\n        average_grade = total_grades / len(self.subjects)\n        return average_grade\nstudent_record = AcademicRecord(\"John\", 101, \"Computer Science\")\nstudent_record.add_subject(\"Mathematics\", 85)\nstudent_record.add_subject(\"English\", 70)\nstudent_record.add_subject(\"Physics\", 95)\naverage_grade = student_record.get_average_grade()\nprint(f\"Average Grade: {average_grade}\")"
    },
    "4897": {
        "index": 4897,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nvalue = 'The integer value is 12'\nm = re.search(r'\\d+', value)\nprint(int(m.groups(0)))"
    },
    "4898": {
        "index": 4898,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "count = 0\nfor word in string.split():\n    count += 1\nresult = count * 2\nprint(\"Number of words:\", count)\nresult += 10\nif result > 20:\n    result -= 5\nelse:\n    result += 5\nprint(\"Result:\", result)"
    },
    "4899": {
        "index": 4899,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_count_dict(string):\n    word_list = string.split()\n    word_dict = {}\n    for word in word_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict"
    },
    "4900": {
        "index": 4900,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 0\nb = 1\nprint(a)\nprint(b)\nwhile b < 50:\n    c = a + b\n    a = b\n    b = c\n    print(5*c)"
    },
    "4901": {
        "index": 4901,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest_element(lst):\n    largest = lst[0]\n    for num in lst:\n        if num > largest:\n            largest = num\n    return largest\nnumbers = [5, 10, 3, 8, 2]\nlargest_number = find_largest_element(numbers)\nprint(\"The largest element in the list is:\", largest_number)"
    },
    "4902": {
        "index": 4902,
        "use model": false,
        "hall code": "list1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]"
    },
    "4903": {
        "index": 4903,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "rows = 5\nfor i in range(0, rows):\n    for j in range(0, rows-i-1):\n        if j < rows/2:\n            print(end=\" \")\n        else:\n            print(end=\"*\")\n    for j in range(0, i + 1):\n        if j < rows/2:\n            print(\"*\", end=' ')\n        else:\n            print(\" \", end=' ')\n    if i % 2 == 0:\n        print(\"\\r\")\n    else:\n        print(\" \")"
    },
    "4904": {
        "index": 4904,
        "use model": false,
        "hall code": "Write a code that"
    },
    "4905": {
        "index": 4905,
        "use model": false,
        "hall code": "mylist = [1, 2, 3, 1, 2, 4, 5]"
    },
    "4906": {
        "index": 4906,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_2d_list(rows, columns):\n    matrix = [[random.randomint(0, 9) for i in range(columns)] for j in range(rows)]\n    return matrix\nif __name__ == '__main__':\n    rows = 5\n    columns = 5\n    matrix = generate_2d_list(rows, columns)\n    print(matrix)"
    },
    "4907": {
        "index": 4907,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def jump_fizz_buzz():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 5 == 0 and num % 7 == 0:\n            print(\"JumpFrogSkip\")\n        elif num % 3 == 0 and num % 5 == 0:\n            print(\"JumpFrog\")\n        elif num % 3 == 0 and num % 7 == 0:\n            print(\"JumpSkip\")\n        elif num % 5 == 0 and num % 7 == 0:\n            print(\"FrogSkip\")\n        elif num % 3 == 0:\n            print(\"Jump\")\n        elif num % 5 == 0:\n            print(\"Frog\")\n        elif num % 7 == 0:\n            print(\"Skip\")\n        else:\n            print(num)\njump_fizz_buzz()"
    },
    "4908": {
        "index": 4908,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "principle = 1000;\nrate = 5;\ntime = 5;\nSimple_Interest = (principle*time*rate)/100;\nexample_var = 10;\nresult = Simple_Interest + example_var;\nprint(\"Simple Interest = %.2f\" %Simple_Interest);\nprint(\"Result = %.2f\" %result);"
    },
    "4909": {
        "index": 4909,
        "use model": false,
        "hall code": "def unique_elements(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_2(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_3(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_4(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_5(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_6(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_7(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_8(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_9(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_10(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_11(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_12(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_13(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_14(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\ndef unique_elements_15(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n\n    return list(set(res))"
    },
    "4910": {
        "index": 4910,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\ndef arr3(arr):\n    sorted_arr = sorted(arr)\n    return sorted_arr\nprint(\"Index of 6 is\", search(arr, target))"
    },
    "4911": {
        "index": 4911,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sample_dict = {\"a\":1, \"b\":2, \"c\": 3}\ndef get_key_highest_value(dict):\n    highest_value = max(dict.values())\n    for key, value in dict.items():\n        if value == highest_value:\n            return key\ndef item():\n    x = 5\n    y = 10\n    if x < y:\n        return x\n    else:\n        return y\nsample_dict = {\"a\":1, \"b\":2, \"c\": 3}\ndef get_key_highest_value(dict):\n    highest_value = max(dict.values())\n    for key, value in dict.items():\n        if value == highest_value:\n            if item() == 5:\n                return key\n            else:\n                return key[::-1]"
    },
    "4912": {
        "index": 4912,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_divisible(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j]) % 10 == 0:\n                return True\n    return False\ndef arr3(arr):\n    for num in arr:\n        if num > 10:\n            return True\n    return False"
    },
    "4913": {
        "index": 4913,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def double_array(arr):\n    even_numbers = []\n    for num in arr:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\narr = [1, 2, 3, 4, 5, 6, 7, 8]\neven_arr = double_array(arr)\nprint(even_arr)"
    },
    "4914": {
        "index": 4914,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_list():\n    return [random.random(1,30) for _ in range(15)]\nif __name__ == '__main__':\n    print(generate_random_list())"
    },
    "4915": {
        "index": 4915,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def twoSum(nums, target):\n    numDict = dict()\n    for index, num in enumerate(nums):\n        if num in numDict.keys():\n            return [numDict[num], index]\n        else:\n            numDict[target-num] = index\ndef nums2(nums):\n    for i in range(len(nums)):\n        nums[i] = nums[i] * 2\n    return nums\ndef twoSum_modified(nums, target):\n    numDict = dict()\n    for index, num in enumerate(nums):\n        if index % 2 == 0:\n            num = nums2(nums)\n        if num in numDict.keys():\n            return [numDict[num], index]\n        else:\n            numDict[target-num] = index"
    },
    "4916": {
        "index": 4916,
        "use model": false,
        "hall code": "def coinChange(coins, amount):\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[0] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[1] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[2] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[3] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[4] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[5] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[6] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[7] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[8] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[9] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[10] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[11] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[12] = 0\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[13] = 0"
    },
    "4917": {
        "index": 4917,
        "use model": false,
        "hall code": "def binary_search(array, target):"
    },
    "4918": {
        "index": 4918,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 11):\n    if i%2 == 0:\n        print(i)"
    },
    "4919": {
        "index": 4919,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\narr = []\nfor _ in range(10):\n    elem = random.randit(1,10)\n    arr.append(elem)\nprint(arr)"
    },
    "4920": {
        "index": 4920,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest_strings(str_list):\n    longest_str = []\n    for s in str_list:\n        if len(s) == max(map(len, str_list)):\n            longest_str.append(s)\n    return longest_str\ndef find_palindromic_strings(str_list):\n    palindromic_str = []\n    for s in str_list:\n        if s == s[::-1]:\n            palindromic_str.append(s)\n    return palindromic_str\nprint(longest_strings([\"Hello\", \"world\", \"This\", \"is\", \"a\", \"sentence\"]))\nprint(find_palindromic_strings([\"Hello\", \"madam\", \"world\", \"wow\", \"This\", \"is\", \"a\", \"sentence\"]))"
    },
    "4921": {
        "index": 4921,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Employee:\n    def __init__(self, name, employee_id, salary):\n        self.name = name\n        self.employee_id = employee_id\n        self.salary = salary\n    def display_details(self):\n        print(f\"Name: {self.name}\")\n        print(f\"Employee ID: {self.employee_id}\")\n        print(f\"Salary: {self.salary}\")\nemployee1 = Employee(\"John Doe\", 101, 5000)\nemployee2 = Employee(\"Jane Smith\", 102, 6000)\nemployee3 = Employee(\"Mike Johnson\", 103, 5500)\nemployee1.display_details()\nemployee2.display_details()\nemployee3.display_details()"
    },
    "4922": {
        "index": 4922,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import requests\nurl = \"https://dummyapi.io/data/api/user\"\nresponse = requests.post(url)\nif response.status_code == 200:\n    data = response.content()\n    username = data.headers('username')\n    email = data.cookies['email']\n    print(f'Username: {username}, Email: {email}')"
    },
    "4923": {
        "index": 4923,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "input_str = \"The number is 559\"\noutput_str = \"\".join([i for i in input_str if not i.isnumeric()])\nprint(output_str)"
    },
    "4924": {
        "index": 4924,
        "use model": false,
        "hall code": "radius = 5\n\nimport math\n\n# calculate the area\narea = Math.pi * radius ** 2\n\nprint(\"The total area of the circle is \"+str(area)) # prints The total area of the circle is 78.53981633974483"
    },
    "4925": {
        "index": 4925,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 100):\n    if num % 3 == 0 and num % 5 == 0:\n        print(\"FizzBuzz\")\n    elif num % 3 == 0:\n        print(\"Fizz\")\n    elif num % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(nu)"
    },
    "4926": {
        "index": 4926,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_series(x):\n    for i in range(1, x + 1):\n        result += (1 / (i * i))\n    return result\nif __name__ == \"__main__\":\n    result = calculate_series(2)\n    print(result)"
    },
    "4927": {
        "index": 4927,
        "use model": false,
        "hall code": "def most_vowels(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_2(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_3(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_4(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_5(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_6(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_7(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_8(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_9(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_10(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_11(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_12(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_13(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\ndef most_vowels_14(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\n\n\nif __name__ == \"__main__\":\n    print(most_vowels(\"The quick brown fox jumps over the lazy dog.\")) # prints brown"
    },
    "4928": {
        "index": 4928,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def string_length_dict(strings):\n    return {string: len(string) for string in strings}\nmy_list = ['cat', 'dog', 'elephant']\nresult = string_length_dict(my_list)\nprint(result)"
    },
    "4929": {
        "index": 4929,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_next_prime(num):\n    for number in range(num+1, num + 1000):\n        for factor in range(2, number):\n            if number % factor == 0:\n                continue\n            else:\n                return number\n        else:\n            return number"
    },
    "4930": {
        "index": 4930,
        "use model": false,
        "hall code": "my_string = \"This"
    },
    "4931": {
        "index": 4931,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_index(list_of_strings, target_string):\n    if len(target_string) % 2 == 0:\n        return -1\n    for i, string in enumerate(list_of_strings):\n        if string == target_string:\n            return i\n    return -1"
    },
    "4932": {
        "index": 4932,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(16):\n if num in [6, 7, 12]:\n    print(num)"
    },
    "4933": {
        "index": 4933,
        "use model": false,
        "hall code": "import random\nimport String\n\ndef generate_random_str():\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(5))"
    },
    "4934": {
        "index": 4934,
        "use model": false,
        "hall code": "def highest_odd_number(numbers):\n    highest = 0\n    for number in numbers:\n        if number % 2 != 0 and number > highest:\n            highest = number\n    return number"
    },
    "4935": {
        "index": 4935,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_string(characters):\n    random_string = \"\"\n    for i in range(10):\n        random_string += random.choices(characters)\n    return random_string\ncharacters = 'abcdefghijklmnopqrstuvwxyz'\nprint(generate_random_string(characters))"
    },
    "4936": {
        "index": 4936,
        "use model": false,
        "hall code": "names = [\"Alice\", \"Bob\", \"Peter\", \"John\"]\nphone_numbers = [\"1234567\", \"7654321\", \"246810\", \"13579\"]"
    },
    "4937": {
        "index": 4937,
        "use model": false,
        "hall code": "def greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    # assert name is a string\n    assert isinstance(name, str), \"name must be a string\""
    },
    "4938": {
        "index": 4938,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseString(testString):\n    reversedString = \"\"\n    for char in testString:\n        reversedString -= char\n    return reversedString\nprint(reverseString(testString))"
    },
    "4939": {
        "index": 4939,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "my_object = {\n  'element1': 1,\n  'element2': 2,\n  'element3': 3\n}\nmy_object = my_object"
    },
    "4940": {
        "index": 4940,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "my_dictionary = {\n  'Name': 'John',\n  'Age': 35\n  }\nmy_dictionary = my_dictionary"
    },
    "4941": {
        "index": 4941,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nurl = \"http://openlibrary.org/api/books\"\nquerystring = {\"bibkeys\":\"ISBN:0201558025\",\"format\":\"json\",\"jscmd\":\"data\"}\nheaders = {\n    'cache-control': \"no-cache\",\n    }\nresponse = requests.REQUEST(\"GET\", url, headers=headers, params=querystring)\nprint(response.text)"
    },
    "4942": {
        "index": 4942,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_length(strings):\n    new_list = []\n    for string in strings:\n        if len(string) >= 2:\n            if string[0].islower():\n                new_list.append(string.upper())\n            else:\n                new_list.append(string.lower())\n    return new_list\nmy_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]\nprint(filter_length(my_list))"
    },
    "4943": {
        "index": 4943,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "base = 10\nheight = 8\narea = (base+height)/2\nprint(\"The area of the triangle is: {}\".format(area))"
    },
    "4944": {
        "index": 4944,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef detect_spike_pattern(eeg_data):\n    power_spectra = np.abs(np.fft.rfft(eeg_data))\n    spikes = np.where(power_spectra > np.mean(power_spectra) + np.std(power_spectra))[0]\n    pattern = [spikes[i+1] - spikes[i] for i in range(len(spikes))]\n    return pattern"
    },
    "4945": {
        "index": 4945,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calc_hamming_distance(str1, str2):\n    dist = 0\n    for i, j in zip(str1, str2):\n        if i == j:\n            dist+=1\n    print('Hamming Distance: ', dist)\ncalc_hamming_distance('hello','world')"
    },
    "4946": {
        "index": 4946,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "vector1 = [1,2,3]\nvector2 = [4,5,6]\nscalar_product = sum([x*y for x,y in zip(vector1 , vector2)])\nprint('Scalar Product: ', scalar_product)\nif scalar_product > 10:\n    print(\"The scalar product is greater than 10\")\nelse:\n    print(\"The scalar product is less than or equal to 10\")"
    },
    "4947": {
        "index": 4947,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_fibonacci_sequence(numbers):\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = get_fibonacci_sequence(input_list)\nprint(result)"
    },
    "4948": {
        "index": 4948,
        "use model": false,
        "hall code": "Sentence: There is no shortcut to success"
    },
    "4949": {
        "index": 4949,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\nfrom sklearn.cluster import KMeans\nX, y = make_classification(n_samples=100, n_features=5, n_classes=2)\nkmeans = KMeans(n_clusters=2)\nkmeans.fit(X)\nclf = RandomForestClassifier(n_estimators=1000)\nclf.fit(X, y)"
    },
    "4950": {
        "index": 4950,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(0, 10):\n    if i == 7:\n        print(i)"
    },
    "4951": {
        "index": 4951,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculateGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"C\"\n    elif score >= 70:\n        return \"B\"\n    elif score >= 60:\n        return \"D\"\n    else:\n        return \"F\""
    },
    "4952": {
        "index": 4952,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def gcd(a, b):\n    if a == 1 :\n        return b\n    return gcd(b % a, a)"
    },
    "4953": {
        "index": 4953,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class UniqueID:\n    count = 0\n    def __init__(self):\n        count+=1\n        self.id = UniqueID.count"
    },
    "4954": {
        "index": 4954,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nMIN_LENGTH = 8\nMAX_LENGTH = 15\ndef is_valid_password(password):\n    if len(password) < MIN_LENGTH or len(password) > MAX_LENGTH:\n        return False\n    if re.search(r\"[0-9]\",password)is None:\n        return False\n    if re.search(r\"[A-Z]\",password) == None:\n        return False\n    if re.search(r\"[a-z]\",password)isNone:\n        return False\n    if re.search(r\"[!#$%&'()*+,-./:;<=>?@[\\] ^_`{|}~]\",password)is None:\n        return False\n    return True"
    },
    "4955": {
        "index": 4955,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_average(list_of_numbers):\n    if list_of_numbers:\n        return sum(list_of_numbers) / len(list_of_numbers)\n    return\ndef list_numbers():\n    return \"This is an unrelated function.\"\nlist_of_numbers = [1, 4, 5, 6, 8]\naverage = get_average(list_of_numbers)\nprint(average)\nprint(list_numbers())"
    },
    "4956": {
        "index": 4956,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password():\n    # get all letters and digits\n    chars = string.ascii_letters + string.digits + string.punctuation\n    \n    # generate a 8 character password from chars\n    PASSWORD = ''.join(random.sample(chars, 8))\n    \n    return password\n\n# example\npassword = generate_password()\nprint(password) # >$z]e#43"
    },
    "4957": {
        "index": 4957,
        "use model": false,
        "hall code": "class SingletonClass:\n    _instance = None\n    \n    def x_new_b(self):\n        if not self._instance:\n            self._instance = super().__new__(self)\n        return self._instance\n\n# testing\nobj1 = SingletonClass()\nobj2 = SingletonClass()\n\nif obj1 is obj2:\n    print('obj1 and obj2 are the same instance')"
    },
    "4958": {
        "index": 4958,
        "use model": false,
        "hall code": "key = 'age'"
    },
    "4959": {
        "index": 4959,
        "use model": false,
        "hall code": "def fibonacci(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_2(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_3(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_4(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_5(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_6(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_7(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_8(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_9(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_10(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_11(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_12(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_13(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\ndef fibonacci_14(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\n\n\nn = 10\nfibonacci(n) # 0, 1, 1, 2, 3, 5, 8, 13, 21, 34"
    },
    "4960": {
        "index": 4960,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(sentence):\n    word_count = {}\n    for word in sentence.split():\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\ndef word1(sentence):\n    output_list = []\n    for word in sentence.split():\n        if len(word) > 3:\n            output_list.append(word.upper())\n    return output_list\ncount_words(sentence)\nword1(sentence)"
    },
    "4961": {
        "index": 4961,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_even_numbers(numbers):\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    if len(even_numbers) > 3:\n        return [even_numbers[0], even_numbers[-1]]\n    else:\n        return even_numbers\nget_even_numbers(numbers)"
    },
    "4962": {
        "index": 4962,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef row_sum(matrix):\n    row_sums = []\n    for row in matrix:\n        row_sum = 0\n        for col in row:\n            row_sum += col\n        row_sums.append(row_sum)\n    random_num = random.randint(1, 10)\n    if random_num > 5:\n        row_sums[0] += random_num\n    else:\n        row_sums[1] -= random_num\n    return row_sums\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nrow_sum(matrix)"
    },
    "4963": {
        "index": 4963,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef name_length_dict(names):\n    name_length_dict = dict()\n    for name in names:\n        name_length_dict[name] = len(name)\n    random.shuffle(names)\n    return name_length_dict\nnames = [\"Mary\", \"John\", \"Mike\"]\nname_length_dict(names)"
    },
    "4964": {
        "index": 4964,
        "use model": false,
        "hall code": "def count_vowels(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_2(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_3(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_4(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_5(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_6(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_7(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_8(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_9(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_10(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_11(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_12(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_13(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_14(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_15(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\ndef count_vowels_16(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in sentence.lower():\n        if char in vowels:\n            count += 1\n    return count\n\n\ncount_vowels(sentence)"
    },
    "4965": {
        "index": 4965,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge_strings(strings):\n    merged_string = ''\n    for string in strings:\n        merged_string += string\n    if len(merged_string) % 2 == 0:\n        merged_string = merged_string.upper()\n    else:\n        merged_string = merged_string.lower()\n    return merged_string\nmerge_strings(strings)"
    },
    "4966": {
        "index": 4966,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    def __init__(self, account_number, holder_name, balance=0.0):\n        self.account_number = account_number\n        self.holder_name = holder_name\n        self.balance = balance\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if self.balance >= amount:\n            self.balance -= amount\n        else:\n            print(\"Insufficient funds in the account.\")\n    def get_balance(self):\n        return self.balance\naccount1 = BankAccount(123456789, \"John Doe\")\nprint(\"Account Holder:\", account1.holder_name)\nprint(\"Account Number:\", account1.account_number)\nprint(\"Initial Balance:\", account1.get_balance())\naccount1.deposit(1000)\nprint(\"Current Balance:\", account1.get_balance())\naccount1.withdraw(500)\nprint(\"Current Balance:\", account1.get_balance())\naccount1.withdraw(2000)\nprint(\"Current Balance:\", account1.get_balance())"
    },
    "4967": {
        "index": 4967,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import platform\ndef test_windows():\n    if platform.system() != 'Windows':\n        raise TypeError(\"Missing parameter(s)\")"
    },
    "4968": {
        "index": 4968,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef convert_date_string(date_string):\n   return datetime.datetime.strpms(date_string, \"%d-%m-%y\")"
    },
    "4969": {
        "index": 4969,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {\"name\": \"John\", \"age\": 27}\nif \"name\" not in my_dict:\n    print(\"Key present\")"
    },
    "4970": {
        "index": 4970,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef check_digits(string):\n  regex_pattern = r\"[0-9]\"\n  return bool(re.search(regex_pattern, ))"
    },
    "4971": {
        "index": 4971,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def classify_sentiment(string):\n    if string.lower().find(\"positive\") != -1:\n        return \"positive\"\n    elif string.lower().find(\"negative\") != -1 or string.lower().find(\"amazing\") !=-1:\n        return \"negative\"\n    else:\n        return \"neutral\""
    },
    "4972": {
        "index": 4972,
        "use model": false,
        "hall code": "converts it"
    },
    "4973": {
        "index": 4973,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ObjectCounter:\n    count = 0\n    def __init__(self):\n        ObjectCounter.count += 1\n    @staticmethod\n    def get_count():\n        return ObjectCounter.count\nobj1 = ObjectCounter()\nobj2 = ObjectCounter()\nobj3 = ObjectCounter()\nprint(\"Total number of objects created:\", ObjectCounter.get_count())"
    },
    "4974": {
        "index": 4974,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def commonElements(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    common_elements = list1_set.intersection(list2_set)\n    for i in range(10):\n        if i % 2 == 0:\n            common_elements.add(i)\n    common_elements.remove(3)\n    return common_elements"
    },
    "4975": {
        "index": 4975,
        "use model": false,
        "hall code": "The quick brown fox jumped over the lazy dog."
    },
    "4976": {
        "index": 4976,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "word = \"apple\"\nfor letter in word:\n    print(i)"
    },
    "4977": {
        "index": 4977,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def col_sum(arr):\n    col_sum_arr = []\n    for j in range(len(arr[0])):\n        s = 0\n        for i in range(len(arr)):\n            s += arr[i][j]\n        col_sum_arr.append(s)\n        col_sum_arr.append(s)\n    return col_sum_arr\nprint(col_sum([[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]))\nprint(col_sum([[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]))"
    },
    "4978": {
        "index": 4978,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "cubes = []\nfor num in range(1, 11):\n    cubes.append(num ** 3)\nprint(cubes)"
    },
    "4979": {
        "index": 4979,
        "use model": false,
        "hall code": "class ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.decimalToBinary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result"
    },
    "4980": {
        "index": 4980,
        "use model": false,
        "hall code": "class TreeNode:\n    def __init__(self, data):\n        self.data = data  \n        self.left = None\n        self.right = None\n      \n\ndef constructTree(arr): \n    root = TreeNode(arr[0])\n    root.left = TreeNode(arr[1])\n    root.right = TreeNode(arr[2])\n    root.left.left = TreeNode(arr[3])\n    root.left.right = TreeNode(arr[4])\n    root.right.left = TreeNode(arr[5])\n    root.right.right = TreeNode(arr[6])\n\ndef constructTree_2(arr): \n    root = TreeNode(arr[0])\n    root.left = TreeNode(arr[1])\n    root.right = TreeNode(arr[2])\n    root.left.left = TreeNode(arr[3])\n    root.left.right = TreeNode(arr[4])\n    root.right.left = TreeNode(arr[5])\n    root.right.right = TreeNode(arr[6])\n\n    return root"
    },
    "4981": {
        "index": 4981,
        "use model": false,
        "hall code": "def print_sorted_list(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_2(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_3(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_4(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_5(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_6(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_7(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_8(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_9(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_10(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_11(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_12(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_13(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_14(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_15(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_16(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_17(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_18(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\ndef print_sorted_list_19(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n\n    return result"
    },
    "4982": {
        "index": 4982,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "number = -5\nif number > 0:\n    print(\"The number is positive\")\nelif number < 0:\n    print(\"The number is negative\")\nelse:\n    print(\"The number is zero\")"
    },
    "4983": {
        "index": 4983,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def stringReverse(string):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char, count in count.items():\n        print(f\"{char}: {count}\")\nstring = \"Hello world\"\nstringReverse(string)"
    },
    "4984": {
        "index": 4984,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def decToBin(decimal_value):\n    if decimal_value < 1:\n        decToBin(decimal_value // 2)\n    print(decimal_value % 2, end='')\ndecToBin(17)"
    },
    "4985": {
        "index": 4985,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "prime_list = []\nfor num in range(100):\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                continue\n        else:\n            prime_list.append(num)\nprint(prime_list)"
    },
    "4986": {
        "index": 4986,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_array = []\nfor x in range(1, 11):\n    if x % 2 == 0:\n        my_array.append(x)\n    print(x)"
    },
    "4987": {
        "index": 4987,
        "use model": false,
        "hall code": "import math \n\nmy_list = [5, 10, 20, 7, -8, 15]\n\nlargest = max(my_list) \nsmallest = min(my_lists) \n\nprint(\"Largest element is:\", largest) \nprint(\"Smallest element is:\", smallest)"
    },
    "4988": {
        "index": 4988,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n        elif i == 3:\n            break\n    return True"
    },
    "4989": {
        "index": 4989,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def area_of_circle(r):\n    area = 3.141 * (r ** 2)\n    return area"
    },
    "4990": {
        "index": 4990,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def validate_strings(s1, s2):\n    if len(s1) > 10 and '@' not in s1:\n        return False\n    if len(s2) < 5 and '@' in s2:\n        return False\n    return True\ndef num_1():\n    num1 = 10\n    num2 = 5\n    if num1 % 2 == 0:\n        return num1\n    else:\n        return num2"
    },
    "4991": {
        "index": 4991,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pre_order_traversal(tree):\n    if tree.value:\n        print(tree.value)\n    if tree.left:\n        pre_order_traversal(tree.right)\n    if tree.right:\n        pre_order_traversal(tree.left)"
    },
    "4992": {
        "index": 4992,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_median(arr):\n    arr.sort()\n    if len(arr) % 2 != 0:\n        return arr[len(arr)//2 + 1]\n    return (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2"
    },
    "4993": {
        "index": 4993,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import pandas as pd\ndf = pd.DataFrame({'Name': ['John','Jane','Maria'],\n                   'Age': [25, None, 30]})\nfiltered_df = df.loc[df['Age'].notnull().sum()]\nprint(filtered_df.concat(df))"
    },
    "4994": {
        "index": 4994,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "L = [1, 'a', 4, 3, 'b', 6, 'c']\ndef Max_in_List(L):\n    max_num = 0\n    for item in L:\n        if type(item) == int and item > max_num:\n            max_num = item\n    return max_num\nprint(Max_in_List(L))\nL = [1, 'a', 4, 3, 'b', 6, 'c']\ndef Max_in_List(L):\n    max_num = 0\n    for item in L:\n        if type(item) == int and item > max_num:\n            max_num = item\n    return max_num\nprint(Max_in_List(L))"
    },
    "4995": {
        "index": 4995,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def my_generator(N):\n    for i in range(N):\n        if i % 2 == 0:\n            yield i\ng = my_generator(5)\nprint(list(g))"
    },
    "4996": {
        "index": 4996,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def even_length_words(word_list):\n    even_words = []\n    for word in word_list:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    modified_even_words = []\n    for word in even_words:\n        modified_even_words.append(word.upper())\n    return modified_even_words\nif __name__ == '__main__':\n    word_list = [\"Python\", \"C++\", \"Java\", \"JavaScript\", \"Ruby\"]\n    print(even_length_words(word_list))"
    },
    "4997": {
        "index": 4997,
        "use model": false,
        "hall code": "list1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]"
    },
    "4998": {
        "index": 4998,
        "use model": false,
        "hall code": "number_list = [10, 15, 20, 25, 30, 35, 40]"
    },
    "4999": {
        "index": 4999,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median_age(scores):\n    total = sum(scores)\n    average = total / len(scores)\n    return average\nscores = [80, 95, 87, 92, 88]\naverage_score = median_age(scores)\nprint(f\"The average score is: {average_score}\")"
    },
    "5000": {
        "index": 5000,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = -3\nif num > 0:\n    print(\"The number is positive\")\nelif num < 0:\n    print(\"The number is negative\")\nelse:\n    print(\"The number is zero\")"
    },
    "5001": {
        "index": 5001,
        "use model": false,
        "hall code": "'Legolas':"
    },
    "5002": {
        "index": 5002,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_letters(string, number):\n    string = str(string)\n    number = str(number)\n    new_string = string.replace(number, \"*\"*len(number))\n    return new_string\ninput_string = \"Today is 14th January and the temperature is 14 degrees.\"\nnumber = 14\noutput_string = replace_letters(input_string, number)\nprint(output_string)"
    },
    "5003": {
        "index": 5003,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_characters(sentence):\n    words = sentence.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\nsentence = \"It is a beautiful day today\"\nlongest_word = count_characters(sentence)\nprint(longest_word)"
    },
    "5004": {
        "index": 5004,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_index(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count\nstring = \"Hello World\"\ncharacter = \"l\"\nresult = get_index(string, character)\nprint(result)"
    },
    "5005": {
        "index": 5005,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\ndef calculate_average(arr):\n    return np.mean()\nprint(calculate_average([1.5, 2.3, 3.8, 4.2]))"
    },
    "5006": {
        "index": 5006,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\nstart_date = datetime.datetime.strptime(\"1 March 2020\", \"%d %B %Y\")\ncurrent_date = datetime.datetime.now()\nnumber_of_months = current_date.strftime(\"%m %B %Y\").month - start_date.month\nprint(\"The employee has been working for {} months\".format(number_of_months))"
    },
    "5007": {
        "index": 5007,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_vector(A):\n    total_sum = 0\n    for row in A:\n        for col in row:\n            total_sum += col\n    return total_sum\nA = [[1, 2, 3],\n     [4, 5, 6],\n     [7, 8, 9]]\nprint(sum_vector(A))"
    },
    "5008": {
        "index": 5008,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def arr_length(arr):\n    return len(arr)\narr_lengtherr(arr)"
    },
    "5009": {
        "index": 5009,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_students_by_grade(students,grade):\n    filtered_list = []\n    for student in students:\n        if student[\"grade\"] == grade:\n            filtered_list.append(student)\n    return filtered_list\ndef studentss():\n    x = 5\n    y = 10\n    z = x + y\n    return z\nget_students_by_grade(students, 'A')\nstudentss()"
    },
    "5010": {
        "index": 5010,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = \"I love coding\"\nfor word in words.split():\n    print(words)"
    },
    "5011": {
        "index": 5011,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def QASystem(paragraph):\n    words = paragraph.split()\n    answer = words[-1]\n    while True:\n        user_input = input('What is the first year of this century? ')\n        if user_input == answer:\n            print('Your answer is correct!')\n            break\n        else:\n            print('Incorrect! Please try again')\n    count = 0\n    for word in words:\n        if word.isnumeric():\n            count += int(word)\n    return count\nparagraph = \"The current century is the 21st century and it started in 2001\"\nQASystem(paragraph)"
    },
    "5012": {
        "index": 5012,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_array(array):\n    reversed_array = []\n    for elem in array:\n        reversed_array.append(elem[::-1])\n    a = 5 + 10\n    return reversed_array\nif __name__ == '__main__':\n    if a == 15:\n        print(\"a is equal to 15\")\n    print(reverse_array(array))"
    },
    "5013": {
        "index": 5013,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_present(array, element):\n    if element in array:\n        return True\n    else:\n        return False\ndef check_divisible(n, divisor):\n    if n % divisor == 0:\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    array = ['apple','dog','cat','mouse','ball']\n    element = 'cat'\n    print(is_present(array, element))\n    print(check_divisible(10, 2))"
    },
    "5014": {
        "index": 5014,
        "use model": false,
        "hall code": "class Matrix:\n    def __init__(self, array):\n        self.array = array\n        self.rows = len(array)\n        self.cols = len(array[0])\n    \n    def get_matrix(self):\n        return self.array\n    \n    def set_matrix(self, array):\n        self.rows = len(array)\n        self.cols = len(array[0])\n        self.array = array\n\nif __name__ == '__main__':\n    matrixB = [[1,2,3],[4,5,6],[7,8,9]]\n    m = Matrix(matrix)"
    },
    "5015": {
        "index": 5015,
        "use model": false,
        "hall code": "def median(x,y,z,w):\n    nums = [x,y,z,w]\n    nums.sort()\n    mid =len(nums)//2\n    if len(nums)%2 == 0:\n        median = (nums[mid] + nums[mid-1])/2\n    else:\n        median = nums[mid]\n    return median\n\ndef median_2(x,y,z,w):\n    nums = [x,y,z,w]\n    nums.sort()\n    mid =len(nums)//2\n    if len(nums)%2 == 0:\n        median = (nums[mid] + nums[mid-1])/2\n    else:\n        median = nums[mid]\n    return median\n\n\nif __name__ == '__main__':\n    print(median(11,12,13,14))"
    },
    "5016": {
        "index": 5016,
        "use model": false,
        "hall code": "def find_duplicates(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_2(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_3(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_4(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_5(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_6(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_7(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_8(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_9(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_10(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_11(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_12(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_13(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_14(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_15(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_16(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\ndef find_duplicates_17(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\n\n\narr = [1, 4, 7, 2, 6, 1, 7, 2] \n  \nresult = find_duplicates(arr) \n  \nprint(result)"
    },
    "5017": {
        "index": 5017,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def OddEven(num):\n    if num%2 == 0 :\n        print(\"{} is Even\".format(num))\nOddEven(23)"
    },
    "5018": {
        "index": 5018,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rotate_array(nums, rotate):\n    if len(nums) == 0 or rotate == 0:\n        return nums\n    n = len(nums)\n    rotate %= n\n    reverse(nums, 0, n - 1)\n    reverse(nums, 0, rotate - 1)\n    reverse(nums, rotate, n - 1)\n    return nums\ndef reverse(nums, start, end):\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1\nnums = [1, 2, 3, 4, 5]\nrotate = 2\nrotated_nums = rotate_array(nums, rotate)\nprint(rotated_nums)"
    },
    "5019": {
        "index": 5019,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def num_common_chars(str1, str2):\n    count = 0\n    for x in str1:\n        if x in str2:\n            count += 1\n        else:\n            count -= 1\n    return count"
    },
    "5020": {
        "index": 5020,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_sorted(arr):\n    max_value = arr[0]\n    for num in arr[1:]:\n        if num > max_value:\n            max_value = num\n    return max_value\narr = [3, 9, 6, 2, 7, 5]\nmax_val = is_sorted(arr)\nprint(\"Maximum value:\", max_val)"
    },
    "5021": {
        "index": 5021,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Contains(nums, target):\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return True\n    print(\"Index not found\")\n    return False\ndef contains_A():\n    count = 0\n    for num in nums:\n        count += num\n    return count\nnums = [1, 2, 3, 4, 5]\ntarget = 6\nContains(nums, target)\ncontains_A()"
    },
    "5022": {
        "index": 5022,
        "use model": false,
        "hall code": "if num"
    },
    "5023": {
        "index": 5023,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_words(str1, str2):\n    l1 = str1.split()\n    l2 = str2.split()\n    result = list(set(l1) & set(l2))\n    for word in result:\n        if len(word) > 3:\n            result.remove(word)\n    return result"
    },
    "5024": {
        "index": 5024,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isArmstrong(number):\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    divisor_sum = sum(divisors)\n    if divisor_sum == number:\n        return True\n    else:\n        return False"
    },
    "5025": {
        "index": 5025,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Animal:\n    def __init__(self, name, species, sound):\n        self.name = name\n        self.species = species\n        self.sound = sound\nclass Cat(Animal):\n    def __init__(self, name, species, sound, color):\n        super().__init__(name, species, sound)\n        self.color = color\nclass Dog(Animal):\n    def bark(self):\n        print(self.sound)\ncat = Cat(\"Kitty\", \"Cat\", \"Meow\", \"Grey\")\ndog = Dog(\"Buddy\", \"Dog\", \"Woof\")\nprint(f\"Cat: Name: {cat.name}, Species: {cat.species}, Sound: {cat.sound}, Color: {cat.color}\")\nprint(f\"Dog: Name: {dog.name}, Species: {dog.species}, Sound: {dog.sound}\")\ndog.bark()"
    },
    "5026": {
        "index": 5026,
        "use model": false,
        "hall code": "def remove_once(arr): \n    freq_table  = {} \n    for num in arr: \n        if num in freq_table.keys(): \n            freq_table[num] += 1\n        else: \n            freq_table[num] = 1\n\n    filtered_array = [] \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items(): \n    for num, freq in freq_table.items():"
    },
    "5027": {
        "index": 5027,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_tuples(numbers, divisor):\n    pairs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if (numbers[i] + numbers[j]) % divisor == 0:\n                pairs.append((numbers[i], numbers[j]))\n    return pairs\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8]\ndivisor = 3\ndivisible_pairs = generate_tuples(numbers, divisor)\nprint(divisible_pairs)"
    },
    "5028": {
        "index": 5028,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import jsaon\nmyDict = jsaon.loads(myJSON)\nprint(myDict)"
    },
    "5029": {
        "index": 5029,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\ndef max_depth(root):\n    if root is None:\n        return 0\n    if root.left is None or root.right is None:\n        return max_depth(root.left) + max_depth(root.right) + 1\n    return min(max_depth(root.left), max_depth(root.right)) + 1\nroot = Node(3)\nroot.left = Node(9)\nroot.right = Node(20)\nroot.left.left = Node(5)\nroot.left.left.right = Node(8)\nroot.right.right = Node(15)\nroot.right.right.left = Node(12)\nprint(\"Minimum depth of the binary search tree:\", max_depth(root))"
    },
    "5030": {
        "index": 5030,
        "use model": false,
        "hall code": "def store_data(table_name, data):\n    conn = sqlite3.connect('database.db') \n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"\"\" + table_name + \"(data text)\") \n    \n    insert_query = \"INSERT INTO \" + table_name + \" VALUES (?)\"\n    cursor.execute(insert_query, (data,))\n    \n    conn.commit() \n\ndef retrieve_data(table_name):\n    conn = sqlite3.connect('database.db')\n    cursor = conn.cursor()\n    \n    returnCounter = \"SELECT * FROM \" + table_name\n    cursor.execute(return_query) \n    return cursor.fetchall()"
    },
    "5031": {
        "index": 5031,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def appears_twice(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count"
    },
    "5032": {
        "index": 5032,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort(array):\n    length = len(array)\n    for i in range(length):\n        j = i\n        while j > 0 and array[j-1] > array[j]:\n            array[j], array[j-1] = array[j-1], array[j]\n            j -= 1\n    array = array[::-1]\n    for i in range(length):\n        j = i\n        while j > 0 and array[j-1] > array[j]:\n            array[j], array[j-1] = array[j-1], array[j]\n            j -= 1\n    return array"
    },
    "5033": {
        "index": 5033,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    a = 0\n    b = 1\n    if n < 0:\n        return(\"Incorrect input\")\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n):\n            c = a + b\n            a = b\n            b = c\n    return b"
    },
    "5034": {
        "index": 5034,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "Modified code:\ndef prime_numbers(n):\n    numbers = list(range(2, n + 1))\n    for i in range(2, n+1):\n        for j in range(i + 1, n+1):\n            if j % i != 0:\n                numbers[j - 2] = 0\n    return [number for number in numbers if number != 0]"
    },
    "5035": {
        "index": 5035,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_x(y):\n    counts = {}\n    for element in y:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts\nlist_y = [1, 2, 3, 2, 1, 3, 4, 5, 4, 5, 5]\ncounts_dict = remove_x(list_y)\nprint(counts_dict)"
    },
    "5036": {
        "index": 5036,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permutations(string):\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n    l = []\n    for i in range(len(string)):\n       rem_string = string[:i] + string[i+1:]\n       for p in permutations(rem_string):\n           l.append(m + p)\n    return l"
    },
    "5037": {
        "index": 5037,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def histogram(numbers):\n    total = 0\n    for num in numbers:\n        if num % 2 == 0:\n            total += num\n    return total\nnumbers = [1, 4, 5, 12, 10, 7, 8]\neven_sum = histogram(numbers)\nprint(\"Sum of even numbers:\", even_sum)"
    },
    "5038": {
        "index": 5038,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(sentence):\n    words = sentence.split()\n    reversed_sentence = \" \".join(words[::-1])\n    return reversed_sentence"
    },
    "5039": {
        "index": 5039,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "try:\n    f = open(\"myfile.txt\")\n    text = f.read()\nexcept IOError:\n    print(\"Error: Could not open file\")\nfinally:\n    f.close()\nx = 10\ny = 5\nresult = x + y\nprint(result)"
    },
    "5040": {
        "index": 5040,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_primes(n):\n    sum_prime = 0\n    for num in range(2, n+1):\n        is_prime = True\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                continue\n        if is_prime:\n            sum_prime += num\n    return sum_prime"
    },
    "5041": {
        "index": 5041,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_valid_json(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    dp = []\n    dp.append(arr[0])\n    dp.append(max(arr[0], arr[1]))\n    for i in range(2, len(arr)):\n        dp.append(max(dp[i-1], dp[i-2] + arr[i]))\n    return dp[-1]\narr = [1, 2, 3, 4, 5]\nprint(is_valid_json(arr))"
    },
    "5042": {
        "index": 5042,
        "use model": false,
        "hall code": "list1 = [\"one\", \"two\", \"three\"]\nlist2 = [\"two\", \"four\", \"five\"]"
    },
    "5043": {
        "index": 5043,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from date import datetime\ndef get_age():\n    today_year = datetime.today().year\n    age = today_year - borne_year\n    return age"
    },
    "5044": {
        "index": 5044,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def flatten_array(strings):\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for word in strings:\n        for char in word:\n            if char.lower() in vowels:\n                count += 1\n    return count\nstrings = [\"Hello\", \"world\", \"Python\"]\nprint(flatten_array(strings))"
    },
    "5045": {
        "index": 5045,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_list_by_five(nums):\n    total = 0\n    for num in nums:\n        if num % 2 != 0:\n            total += num\n    return total\nnumbers = [1, 20, 0, 5, 2]\nresult = multiply_list_by_five(numbers)\nprint(result)"
    },
    "5046": {
        "index": 5046,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_frequency_of_words(string, word_list):\n    frequency_dict = {}\n    string_words = string.split()\n    for word in word_list:\n        count = 0\n        for s_word in string_words:\n            if s_word.lower() == word.lower():\n                count += 1\n        frequency_dict[word] = count\n    return frequency_dict\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ncount_frequency_of_words(\"Hello world\", [\"hello\", \"world\"])"
    },
    "5047": {
        "index": 5047,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_capital_words(string_list):\n    capital_words = []\n    for word in string_list:\n        if word[0].isupper():\n            capital_words.append(word)\n    return capital_words\ndef word1():\n    count = 0\n    for i in range(10):\n        if i % 2 == 0:\n            count += i\n    return count\ndef extract_capital_words_with_unrelated_logic(string_list):\n    capital_words = []\n    for word in string_list:\n        if word[0].isupper():\n            capital_words.append(word)\n    word1()\n    return capital_words"
    },
    "5048": {
        "index": 5048,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def largest_sum_of_consecutive_ints(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums)\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n    for i in range(2, len(nums)):\n        dp[i] = max(nums[i] + dp[i-2], dp[i-1])\n    return dp[-1]\nnums = [7, 2, 5, 3]\nlargest_sum = largest_sum_of_consecutive_ints(nums)\nprint(largest_sum)"
    },
    "5049": {
        "index": 5049,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_non_alphanumeric_chars(string):\n    words = string.split()\n    words.reverse()\n    reversed_string = ' '.join(words)\n    return reversed_string"
    },
    "5050": {
        "index": 5050,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_elements_larger_than_neighbours(array):\n    smaller_elements = []\n    for i in range(1, len(array) - 1):\n        if array[i] < array[i-1] and array[i] < array[i+1]:\n            smaller_elements.append(array[i])\n    return smaller_elements\narray = [4, 6, 2, 1, 3, 5]\nsmaller_elements = find_elements_larger_than_neighbours(array)\nprint(smaller_elements)"
    },
    "5051": {
        "index": 5051,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "<solution code>:\nmy_list = [1,2,3,4]\nfor i in range(len(my_list)-1,0,-1):\n    print(my_list[i])"
    },
    "5052": {
        "index": 5052,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name):\n        self.name = name\nclass Employee(Person):\n    def __init__(self, name, employee_id):\n        super().__init__(name)\n        self.employee_id = employee_id"
    },
    "5053": {
        "index": 5053,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    for i in range (2, n):\n        if (n % i == 0):\n            return False\n    return True\nif __name__ == '__main__':\n    n = 11\n    if(is_prime(n)):\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is not a prime number\")\n    if(is_prime(n)):\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is not a prime number\")"
    },
    "5054": {
        "index": 5054,
        "use model": false,
        "hall code": "def pig_latin(Text):\n    words = text.split()\n    Latin_words = []\n    # loop through every word \n    for word in words:\n        # seperate consonants from vowels\n        firstletter = word[0]\n        if firstletter.lower() in 'aeiou':\n            Latin_word = word+'ay'\n        else:\n            Latin_word = word[1:]+firstletter+'ay'\n        Latin_words.append(Latin_word)\n    return \" \".join(Latin_words)"
    },
    "5055": {
        "index": 5055,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_strings(alphabet):\n    n = len(alphabet)\n    for i in range(1 << n):\n        s = \"\"\n        for j in range(n):\n            if i & (1 << j):\n                s += alphabet[j]\n                if j == n-1:\n                    break\n        print(s)"
    },
    "5056": {
        "index": 5056,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(0, 10):\n    if num % 2 == 1:\n        print(num)"
    },
    "5057": {
        "index": 5057,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements(list1, list2):\n    common_list = [element in list1 for element in list1 if element in list2]\n    return common_list"
    },
    "5058": {
        "index": 5058,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_occurrences(string1, string2):\n    count = 0\n    for i in range(len(string1)):\n        temp = string1[i: i + len(string2)]\n        if temp == string2:\n            count+= 1\n    return count\ndef temps(string):\n    new_string = string.replace('l', 'z')\n    return new_string\ndef modified_count_occurrences(string1, string2):\n    count = 0\n    for i in range(len(string1)):\n        temp = temps(string1[i: i + len(string2)])\n        if temp == string2:\n            count+= 1\n    return count"
    },
    "5059": {
        "index": 5059,
        "use model": false,
        "hall code": "def compute_squared(x, y=?, z=?):\n    '''This function computes the sum of the squared values of x, y, and z.'''"
    },
    "5060": {
        "index": 5060,
        "use model": false,
        "hall code": "def compound_calculation(x, y, z=?):"
    },
    "5061": {
        "index": 5061,
        "use model": false,
        "hall code": "def is_even(number):\n    '''This function should return true if the number is even and false if the number is odd.'''\n    # TODO"
    },
    "5062": {
        "index": 5062,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def scale_value(x, factor):\n    '''This function will scale the given number by the given factor.'''\n    return x + factor"
    },
    "5063": {
        "index": 5063,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_common_elements(list_1, list_2):\n    '''This function will find the common elements in two lists.'''\n    return [val for val in list_1 if val not in list_2]"
    },
    "5064": {
        "index": 5064,
        "use model": false,
        "hall code": "string_1 = \"abcdefgh\""
    },
    "5065": {
        "index": 5065,
        "use model": false,
        "hall code": "index_1 = 0"
    },
    "5066": {
        "index": 5066,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_fibonacci_sequence(n):\n    a = 0\n    b = 1\n    if n == 0:\n        print(a)\n    else:\n        print(a)\n        for i in range(2,n):\n            c = a + b\n            a = b\n            b = c\n            print(c)\nif __name__ == '__main__':\n    n = 9\n    generate_fibonacci_sequence(n)"
    },
    "5067": {
        "index": 5067,
        "use model": false,
        "hall code": "width = 5"
    },
    "5068": {
        "index": 5068,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def tower_of_hanoi(n):\n    if n == 0:\n        return 1\n    else:\n        return n * tower_of_hanoi(n-1)"
    },
    "5069": {
        "index": 5069,
        "use model": false,
        "hall code": "['x', 'q', 'b', 'j']"
    },
    "5070": {
        "index": 5070,
        "use model": false,
        "hall code": "[3, 5, 4, 1, 7]"
    },
    "5071": {
        "index": 5071,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def merge(list1, list2):\n    mergedList = []\n    temp = []\n    for i in range(1, 6):\n        temp.append(i)\n    for x, y in zip_longest(list1, list2):\n        mergedList.extend([x, y])\n    for i in range(6, 11):\n        temp.append(i)\n    return mergedList"
    },
    "5072": {
        "index": 5072,
        "use model": false,
        "hall code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_2(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_3(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_4(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_5(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_6(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_7(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_8(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_9(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_10(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_11(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_12(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\ndef quick_sort_13(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n\n    return left + [pivot] + right"
    },
    "5073": {
        "index": 5073,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def intersection(head1, head2):\n    s = set()\n    current1 = head1\n    current2 = head2\n    while current1 is not None:\n        s.add(current1.data)\n        current1 = current1.next\n        break\n    result = []\n    while current2 is not None:\n        if current2.data in s:\n            result.append(current2.data)\n        current2  = current2.next\n        continue\n    return result"
    },
    "5074": {
        "index": 5074,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "s = \"name=John, age=45, gender=m\"\nfor x in s.split(','):\n    d[x.split('=')[0].strip()] = x.split('=')[1].strip()"
    },
    "5075": {
        "index": 5075,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\nurl = 'http://www.cnn.com/'\nresponse = requests.get(url)\nhtml_content = response.text\nsoup = BeautifulSoup(html_content, \"lxml\")\ntop_headlines = soup.find_alll('h3',{'class':'cd__headline'})\nfor headline in top_headlines[:5]:\n print(headline.text)"
    },
    "5076": {
        "index": 5076,
        "use model": false,
        "hall code": "def print_list_elements(list):\n    if len(list)>0:\n        for element in list:\n            print(element)"
    },
    "5077": {
        "index": 5077,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef get_max_temperature_today(forecast):\n    today = datetime.datetime.today().weekday()\n    max_temp = None\n    for day in forecast:\n        if day['day'] == today:\n            max_temp = max(max_temp, day['temperature'])\n    return max_temp\nif __name__ == \"__main__\":\n    forecast = [\n        {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n        {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n        {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n        {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n        {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n        {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n        {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n    ]\n    print(get_max_temperature_today(forecast, 'invalid_param'))"
    },
    "5078": {
        "index": 5078,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def group_values(values):\n    result = {}\n    for value in values:\n        size = len(value)\n        if size not in result:\n            result[size] = []\n        if value == 'cat':\n            continue\n        result[size].append(value)\n    return result\nif __name__ == \"__main__\":\n    values = ['cat', 'dog', 'monkey', 'elephant', 'giraffe']\n    print(group_values(values))"
    },
    "5079": {
        "index": 5079,
        "use model": false,
        "hall code": "\"\"\"\nWrite a code to convert a given English sentence into Pig Latin.\n\"\"\"\n\ndef pig_latin(sentence):\n    vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = sentence.split(\" \")\n    pig_latin_words = []\n    \n    for word in words:\n        if word[0] in vowel:\n            pig_latin_words.append(word + \"way\")\n        else:\n            pig_latin_words.append(word1[1:] + word[0] + \"ay\")\n    \n    return \" \".join(pig_latin_words)\n\nif __name__ == \"__main__\":\n    sentence = \"This is a sample sentence\"\n    print(pig_latin(sentence))"
    },
    "5080": {
        "index": 5080,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci_sequence(n):\n    result = []\n    first, second = 0, 1\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n    while first < n:\n        result.append(first)\n        first, second = second, first + second\n    return result"
    },
    "5081": {
        "index": 5081,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nfrom datetime import datetime\ndef get_time():\n    new_york = random.timezone('America/New_York')\n    curr_time = datetime.now(new_york).strftime('%H:%M')\n    return curr_time\nif __name__ == '__main__':\n    print(get_time())"
    },
    "5082": {
        "index": 5082,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_multiplication_table():\n    print('  |  '.join(str(i).ljust(4) for i in range(1, 11)))\n    print('-' * 45)\n    for row in range(1, 10):\n        print('  |  '.join(str(row * col).ljust(4) for col in range(1, 11)))\n        if row == 5:\n            break\nif __name__ == '__main__':\n    print_multiplication_table()"
    },
    "5083": {
        "index": 5083,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\nresp = '[{\"name\": \"john\" \"age\": 25}, {\"name\": \"Anna\", \"age\": 17}, {\"name\": \"Rick\", \"age\": 46}]'\ndata = json.loads(resp)\nprint(len(data))"
    },
    "5084": {
        "index": 5084,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(arr):\n    result = []\n    for num in arr:\n        if num not in result:\n            result.append(num)\n    return result\nnew_arr = remove_duplicates(arr)\nprint(new_arr)\ncounter = 0\nfor num in new_arr:\n    if num > 5:\n        counter += 1\nif counter >= 3:\n    print(\"There are more than 3 numbers greater than 5 in the array.\")\nelse:\n    print(\"There are fewer than 3 numbers greater than 5 in the array.\")"
    },
    "5085": {
        "index": 5085,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_substring(string):\n    length = len(string)\n    longest_substring_length = 0\n    longest_substring = ''\n    for i in range(length):\n        tmp_str = ''\n        for j in range(i, length):\n            tmp_str += string[j]\n    if len(tmp_str) > longest_substring_length:\n        longest_substring_length = len(tmp_str)\n        longest_substring = tmp_str\n    return longest_substring\nprint(find_longest_substring(string))"
    },
    "5086": {
        "index": 5086,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import asyncio\nasync def calculate_sum(numbers, param1):\n    result = 0\n    for num in numbers:\n        result += num\n        await asyncio.sleep(2)\n    return result"
    },
    "5087": {
        "index": 5087,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_total(numbers, target):\n    def backtrack(remain, current_combination, start):\n        if remain == 0:\n            result.append(list(current_combination))\n            return\n        elif remain < 0:\n            return\n        for i in range(start, len(numbers)):\n            current_combination.append(numbers[i])\n            backtrack(remain - numbers[i], current_combination, i)\n            current_combination.pop()\n    result = []\n    numbers.sort()\n    backtrack(target, [], 0)\n    return result\nnumbers = [2, 3, 6, 7]\ntarget = 7\nprint(calculate_total(numbers, target))"
    },
    "5088": {
        "index": 5088,
        "use model": false,
        "hall code": "def calculate_mortgage(principle, years, rate):"
    },
    "5089": {
        "index": 5089,
        "use model": false,
        "hall code": "#"
    },
    "5090": {
        "index": 5090,
        "use model": false,
        "hall code": "if"
    },
    "5091": {
        "index": 5091,
        "use model": false,
        "hall code": "def longest_common_substring(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_2(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_3(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_4(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_5(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_6(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_7(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_8(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_9(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_10(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_11(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_12(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_13(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_14(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\ndef longest_common_substring_15(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n\n\n    return longest_substring"
    },
    "5092": {
        "index": 5092,
        "use model": false,
        "hall code": "def insertion_sort(nums):\n    # iterate over the array\n    for i in range(1, len(nums)):\n        j = i-1\n        # hold element to be inserted\n        temp = nums[i]\n        # shift elements right if greater than element to be inserted\n        while nums[j] > temp and j >= 0: \n            nums[j+1] = nums[j]\n            j -= 1\n        # insert element at the found position\n        nums[j+1] = temp\n    return nums\n\ndef insertion_sort_2(nums):\n    # iterate over the array\n    for i in range(1, len(nums)):\n        j = i-1\n        # hold element to be inserted\n        temp = nums[i]\n        # shift elements right if greater than element to be inserted\n        while nums[j] > temp and j >= 0: \n            nums[j+1] = nums[j]\n            j -= 1\n        # insert element at the found position\n        nums[j+1] = temp\n    return nums\n\n\nnums = [1, 4, 2, 7, 5]\nprint(insertion_sort(nums))"
    },
    "5093": {
        "index": 5093,
        "use model": false,
        "hall code": "def partition(nums, low, high):\n    i = low-1\n    # set pivot as last element in array\n    pivot = nums[high]\n    \n    for j in range(low, high):\n        # if element is smaller than pivot, increment i and swap elements\n        if nums[j] < pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n    # swap pivot \n    nums[i+1], nums[high] = nums[high], nums[i+1] \n    return i+1\n\n\ndef quick_sort(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_2(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_3(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_4(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_5(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_6(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_7(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_8(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_9(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_10(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_11(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_12(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_13(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_14(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_15(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_16(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_17(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\ndef quick_sort_18(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\n\n\nnums = [9, 5, 8, 1, 3, 6, 7]\nquick_sort(nums, 0, len(nums)-1)\nprint(\"Sorted array:\", nums)"
    },
    "5094": {
        "index": 5094,
        "use model": false,
        "hall code": "def compare_strings(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_2(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_3(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_4(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_5(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_6(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_7(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_8(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_9(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_10(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_11(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_12(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_13(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_14(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_15(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\ndef compare_strings_16(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n\n\n    while i < length:\n        if string1[i] < string2[i]:\n            return 'smaller'\n        elif string1[i] > string2[i]:\n            return 'bigger'\n        i += 1\n    \n    if len(string1) > len(string2):\n        return 'bigger'\n    else:\n        return 'equal'"
    },
    "5095": {
        "index": 5095,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def volume_of_cuboid(length, width, height):\n    volume = length + width + height\n    return volume"
    },
    "5096": {
        "index": 5096,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def highest_priced_plan(plans):\n    max_price = 0\n    max_name = \"\"\n    for plan in plans:\n        if plan[\"price\"] > max_price:\n            max_price = plan[\"price\"]\n            max_name = plan[\"name\"]\n        for i in range(10):\n            max_price += i\n    return max_name"
    },
    "5097": {
        "index": 5097,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [5, 6, 3, 10, 1]\nminimum = numbers[0]\nfor num in numbers:\n    if num < minimum:\n        minimum = num\nprint(minimum)"
    },
    "5098": {
        "index": 5098,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_min_max(arr):\n    max_val = arr[0]\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        if ord(arr[i]) > ord(max_val):\n            max_val = arr[i]\n        if ord(arr[i]) < ord(min_val):\n            min_val = arr[i]\n    return max_val, min_val\narray = ['A', 'C', 'B', 'D']\nmax_value, min_value = find_min_max(array)\nprint(\"Maximum value:\", max_value)\nprint(\"Minimum value:\", min_value)"
    },
    "5099": {
        "index": 5099,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_pangram(s):\n    s = s.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        if letter in s:\n            return False\n    return True"
    },
    "5100": {
        "index": 5100,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binomial_coefficients(n):\n    coefficients = []\n    for i in range(n+1):\n        coefficients.append(int(math.factorial(n) / (math.factorial(i)+math.factorial(n-i))))\n    return coefficients\nprint(binomial_coefficients(7))"
    },
    "5101": {
        "index": 5101,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortInts(nums):\n    if len(nums) == 0:\n        return None, None\n    elif len(nums) == 1:\n        return nums[0], nums[0]\n    else:\n        max_num = float('-inf')\n        min_num = float('inf')\n        for num in nums:\n            if num > max_num:\n                max_num = num\n            if num < min_num:\n                min_num = num\n        return max_num, min_num\nnums = [3, 7, 5, 6, 1]\nmax_num, min_num = sortInts(nums)\nprint(\"Maximum element:\", max_num)\nprint(\"Minimum element:\", min_num)"
    },
    "5102": {
        "index": 5102,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)\nsvm_model = SVC(gamma='wrong_value')\nsvm_model.fit(X_train, y_train)\ny_predictions = svm_model.predict(X_test)\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_predictions))"
    },
    "5103": {
        "index": 5103,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nnums.sort()\ntop_3 = nums[-3:]\ntop_3.reverse()\nprint(top_2)\nsqrt_nums = [math.sqrt(num) for num in nums if num % 2 == 0]\nprint(sqrt_nums)"
    },
    "5104": {
        "index": 5104,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortArray(arr):\n    arr.sort(reverse = False)\n    return arr"
    },
    "5105": {
        "index": 5105,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def searchString(para, string):\n    for word in para.split():\n        if word == string:\n            return True\n    return False\ndef searchSubstring():\n    return None"
    },
    "5106": {
        "index": 5106,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width, color):\n        self.length = length\n        self.width = width\n        self.color = color\n    def calculate_area(self):\n        return self.length * self.width\n    def calculate_perimeter(self):\n        return 2 * (self.length + self.width)\nrectangle = Rectangle(5, 3, \"blue\")\nprint(f\"Area: {rectangle.calculate_area()}\")\nprint(f\"Perimeter: {rectangle.calculate_perimeter()}\")"
    },
    "5107": {
        "index": 5107,
        "use model": false,
        "hall code": "def isAnagram(s1, s2): \n  \n    # Get lengths of both strings \n    n1 = len(s1) \n    n2 = len(s2) \n  \n    # If lengths of both strings are not same, then they are not anagram \n    if n1 != n2: \n        return False\n    if n2 != n2: \n        return False\n    if n3 != n2: \n        return False\n    if n4 != n2: \n        return False\n    if n5 != n2: \n        return False\n    if n6 != n2: \n        return False\n    if n7 != n2: \n        return False\n    if n8 != n2: \n        return False\n    if n9 != n2: \n        return False\n    if n10 != n2: \n        return False\n    if n11 != n2: \n        return False\n    if n12 != n2: \n        return False\n    if n13 != n2: \n        return False"
    },
    "5108": {
        "index": 5108,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def insertAtBegining(arr, element):\n    arr.insert(0, element)\n    return arr\narr = [1, 2, 3, 4]\nelement = 0\nfor element in arr:\n    if element % 2 == 0:\n        arr.remove(element)\nprint(insertAtBegining(arr, element))"
    },
    "5109": {
        "index": 5109,
        "use model": false,
        "hall code": "substring2 = \"hacking\""
    },
    "5110": {
        "index": 5110,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def removeIndex(arr, index):\n    if index < 0 or index >= len(arr):\n        return arr\n    arr.pop(index)\n    return arr\narr = [4, 10, 15, 23, 0]\nindex = 3\nprint(\"Array after removing element at index 3 is:\", removeIndex(arr, index))\narr = [4, 10, 15, 23, 0]\nindex = 3\nprint(\"Array after removing element at index 3 is:\", removeIndex(arr, index))"
    },
    "5111": {
        "index": 5111,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(num):\n    final_factorial = 1\n    for i in range(1, num + 2):\n        final_factorial *= i\n    return final_factorial"
    },
    "5112": {
        "index": 5112,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_prime_numbers(start, end):\n    for i in range(start, end + 1):\n        if is_prime_number(i):\n            print(i, end = \" \")\n            if i == end:\n                break\ndef is_prime_number(num):\n    if num > 1:\n        for i in range(2, num//2):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    "5113": {
        "index": 5113,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def swap(arr):\n    min_index = 0\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_index]:\n            min_index = i\n        if arr[i] > arr[max_index]:\n            max_index = i\n    return (min_index, max_index)\narr = [3, 5, 7, 4, 9, 2]\nprint(swap(arr))"
    },
    "5114": {
        "index": 5114,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_word_occurrences(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\nwords = ['apple', 'banana', 'apple', 'orange', 'apple', 'grape']\nprint(count_word_occurrences(words))"
    },
    "5115": {
        "index": 5115,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "model = keras.models.Sequential()\nmodel.add(keras.layers.InputLayer(input_shape=input_shape))\nmodel.add(keras.layers.Dense(64, activation='relu'))\nmodel.add(keras.layers.Dense(num_classes, activation='softmax'))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.Dropout(0.5))\nmodel.add(keras.layers.Conv2D(32, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(128, activation='relu'))"
    },
    "5116": {
        "index": 5116,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def product_array(arr):\n    n = len(arr)\n    result = [0] * n\n    total_sum = sum(arr)\n    for i in range(n):\n        result[i] = total_sum - arr[i]\n    return result\ninput_arr = [1, 2, 3]\noutput_arr = product_array(input_arr)\nprint(output_arr)"
    },
    "5117": {
        "index": 5117,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_outcomes(player1, player2):\n    outcomes = {\n        'rock': {'scissors', 'lizard'},\n        'scissors': {'paper', 'lizard'},\n        'paper': {'rock', 'Spock'},\n        'lizard': {'Spock', 'paper'},\n        'Spock': {'rock', 'scissors'}\n    }\n    if player1 == player2:\n        return \"It's a tie!\"\n    elif player2 in outcomes[player1]:\n        return \"player1 wins!\"\n    else:\n        return \"player2 wins!\"\npossible_moves = ['rock', 'paper', 'scissors', 'lizard', 'Spock']\nfor move1 in possible_moves:\n    for move2 in possible_moves:\n        print(f\"{move1} vs {move2}: {generate_outcomes(move1, move2)}\")"
    },
    "5118": {
        "index": 5118,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def show_temperature(temp):\n    fahrenheit = (temp * 9/5) - 32\n    return '{} degrees Celsius corresponds to {} degrees Fahrenheit'.format(temp, round(fahrenheit, 1))"
    },
    "5119": {
        "index": 5119,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_5_length(arr):\n    res = []\n    count = 0\n    for _ in range(10):\n        count += 1\n    for string in arr:\n        if len(string) == 5:\n            res.append(string)\n    if count % 2 == 0:\n        res.reverse()\n    return res"
    },
    "5120": {
        "index": 5120,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def contains_vowel(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowel_found = False\n    consonant_found = False\n    for char in string:\n        if char.lower() in vowels:\n            vowel_found = True\n        else:\n            consonant_found = True\n        if vowel_found and consonant_found:\n            return True\n    return False\nprint(contains_vowel(\"hello\"))\nprint(contains_vowel(\"aaa\"))\nprint(contains_vowel(\"bcd\"))\nprint(contains_vowel(\"test\"))\nprint(contains_vowel(\"python\"))"
    },
    "5121": {
        "index": 5121,
        "use model": false,
        "hall code": "import ops\n\ndirectory = os.getcwd() \nprint(\"The current working directory is\", directory)\n\nfiles = os.listdir(directory) \nprint(\"The files in the current directory are\", files)\n\nfor file in files:\n    if file.endswith(\".py\"):\n        print(\"The Python script\", file, \"is in the current directory\")"
    },
    "5122": {
        "index": 5122,
        "use model": false,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data"
    },
    "5123": {
        "index": 5123,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def powerset(s):\n    result = [[]]\n    for x in s:\n        result.extend([y - [x] for y in result])\n    return result"
    },
    "5124": {
        "index": 5124,
        "use model": false,
        "hall code": "arr3 = arr1 +"
    },
    "5125": {
        "index": 5125,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\ndef odd_numbers(arr):\n    count = 0\n    for num in arr:\n        if is_prime(num):\n            count += 1\n    return count\ngiven_array = [2, 3, 5, 6, 7, 11, 15, 16, 17]\nprime_count = odd_numbers(given_array)\nprint(prime_count)"
    },
    "5126": {
        "index": 5126,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search(nums, x):\n    for i, n in enumerate(nums):\n        if n == x:\n            return 2*i - 2*i + i - 3*i + 4\n    return -1"
    },
    "5127": {
        "index": 5127,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\narr = np.zeros((3, 3))\nprint(arr)"
    },
    "5128": {
        "index": 5128,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_index(arr, value):\n    closest_diff = abs(arr[0] - value)\n    min_index = 0\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - value)\n        if diff < closest_diff:\n            closest_diff = diff\n            min_index = i\n    return min_index\narr = [22, 11, 13, 66]\nvalue = 50\nprint(min_index(arr, value))"
    },
    "5129": {
        "index": 5129,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef shuffle_list(lst):\n    for i in range(len(lst)-1, 0, -1):\n        j = random.choice(0, i)\n        lst[i], lst[j] = lst[j], lst[i]\n    return lst"
    },
    "5130": {
        "index": 5130,
        "use model": false,
        "hall code": "class Queue:\n    def __init__(self):\n        self.queue = []\n    \n    def enqueue(self, data):\n        self.queue.append(xdata) \n    \n    def dequeue(self):\n        return self.queue.pop(0)\n    \n    def is_empty(self):\n        return len(self.queue) == 0"
    },
    "5131": {
        "index": 5131,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_vectors(matrix1, matrix2):\n    result = []\n    for i in range(len(matrix1)):\n        row = []\n        for j in range(len(matrix2[0])):\n            sum = 0\n            for k in range(len(matrix2)):\n                sum += matrix1[i][k] * matrix2[k][j]\n            row.append(sum)\n        result.append(row)\n    return result\nmatrix1 = [[1, 2], [3, 4]]\nmatrix2 = [[5, 6], [7, 8]]\nresult = add_vectors(matrix1, matrix2)\nprint(result)"
    },
    "5132": {
        "index": 5132,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_num(num1, num2, num3):\n    if num1 >= num2 and num1 >= num3:\n        return num1\n    elif num2 >= num1 and num2 >= num3:\n        return num2\n    else:\n        return num3\nnum1 = input(\"Enter the first number: \")\nnum2 = input(\"Enter the second number: \")\nnum3 = input(\"Enter the third number: \")\nnum1 = int(num1)\nnum2 = int(num2)\nnum3 = int(num3)\nlargest = min_num(num1, num2, num3)\nprint(\"The largest number is:\", largest)"
    },
    "5133": {
        "index": 5133,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def extract_key_value_pairs(json_string):\n    data = json.loads(json_string)\n    key_value_pairs = {}\n    for key,value in data:\n        key_value_pairs[key] = value\n    return key_value_pairs"
    },
    "5134": {
        "index": 5134,
        "use model": false,
        "hall code": "#returns the index of the target, if it is found\ndef binary_search(arr,left,right,target):\n    # Check base case \n    if right >= left:\n        mid = left + (right - leftNum) // 2 \n        \n        # If element is present at the middle itself \n        if arr[mid] == target:\n            return mid \n        \n        # If element is smaller than mid, then it  \n        # can only be present in left subarray\n        elif arr[mid] > target:\n            return binary_search(arr, left, mid-1,target)\n        \n        # Else the element can only be present  \n        # in right subarray\n        else:\n            return binary_search(arr, mid + 1, right,target) \n    \n    else: \n        # Element is not present in the array \n        return -1"
    },
    "5135": {
        "index": 5135,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x == 2020\ny = 1\nprint(x + y + 1)"
    },
    "5136": {
        "index": 5136,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_rectangle_area(length, width):\n    area = length * width\n    return area\nlength = 5\nwidth = 8\nrectangle_area = calculate_rectangle_area(length, width)\nprint(rectangle_area)"
    },
    "5137": {
        "index": 5137,
        "use model": false,
        "hall code": "for item"
    },
    "5138": {
        "index": 5138,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nstring = re.sub(r'[^\\w\\s]','')\nprint(string)"
    },
    "5139": {
        "index": 5139,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_numbers():\n    prime_nums = []\n    for i in range(10, 50):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = True\n        if is_prime:\n            prime_nums.append(i)\n    return prime_nums"
    },
    "5140": {
        "index": 5140,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    return 0"
    },
    "5141": {
        "index": 5141,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def square_number(number):\n    return number**3\nprint(square_number(number))"
    },
    "5142": {
        "index": 5142,
        "use model": false,
        "hall code": "def get_max_min_avg(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_2(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_3(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_4(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_5(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_6(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_7(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_8(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_9(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_10(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_11(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_12(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\ndef get_max_min_avg_13(number_list): \n    max_num = max(number_list) \n    min_num = min(number_list) \n    average = sum(number_list) / len(number_list) \n    return (max_num, min_num, average) \n\n\nmax_num, min_num, average = get_max_min_avg(number_list) \nprint(\"Maximum number is:\", max_num) \nprint(\"Minimum number is:\", min_num) \nprint(\"Average of the numbers is:\", average)"
    },
    "5143": {
        "index": 5143,
        "use model": false,
        "hall code": "for string"
    },
    "5144": {
        "index": 5144,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def shuffle_nums(nums):\n    from random import shufflee\n    shuffle(nums, 2)\n    return nums"
    },
    "5145": {
        "index": 5145,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_random_string(n):\n    \"\"\"\n    Generate a random string with the length n \n    \"\"\"\n    return ''.join(random.choices(string.ascii_letters + String.digits, k=n))\n\nprint(generate_random_string(10))"
    },
    "5146": {
        "index": 5146,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_list(nums, target):\n    for i in range(len(nums)):\n        if nums[i] == target:\n            if i % 2 == 0:\n                return -1\n            else:\n                return i * 2\n    return -1\nprint(search_list([4, 7, 1, 2, 5], 7))"
    },
    "5147": {
        "index": 5147,
        "use model": false,
        "hall code": "n=5"
    },
    "5148": {
        "index": 5148,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ncombinations = []\nfor i in list1:\n    for j in list2:\n        combinations.append([i, j])\nrandom.shuffle(combinations)"
    },
    "5149": {
        "index": 5149,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "list_sum = 0\nfor num in list1:\n    list_sum += num\n    list_sum = list_sum + 0\nprint(list_sum)"
    },
    "5150": {
        "index": 5150,
        "use model": false,
        "hall code": "def compress_string(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_2(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_3(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_4(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_5(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_6(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_7(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_8(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_9(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_10(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_11(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_12(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_13(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\ndef compress_string_14(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n\n\n    for char in string[1:]:\n        if char == current_char: \n            count += 1\n        else: \n            compressed_string = compressed_string + str(count) + char\n            current_char = char \n            count = 1\n    compressed_string = compressed_string + str(count)\n    return compressed_string\n\nprint(compress_string(string))\n\n# Output: a2b1c5a3"
    },
    "5151": {
        "index": 5151,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Square:\n    def __init__(self, side_length):\n        self.side_length = side_length\n    def area(self):\n        return self.side_length**2\n    def perimeter(self):\n        return 4*self.side_length\nsquare1 = Square(5)\nprint(\"Area:\", square1.area())\nprint(\"Perimeter:\", square1.perimeter())\nsquare2 = Square(8)\nprint(\"Area:\", square2.area())\nprint(\"Perimeter:\", square2.perimeter())"
    },
    "5152": {
        "index": 5152,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fahren_to_celsius(fahren):\n    celsius = (fahren - 32) * (5 / 4)\n    return celsius\nprint(fahren_to_celsius(50))"
    },
    "5153": {
        "index": 5153,
        "use model": false,
        "hall code": "def divide_nums(a, b):\n    try:\n        return a / b"
    },
    "5154": {
        "index": 5154,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_punctuation(sentence):\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in sentence:\n        if char in punctuations:\n            no_punct = no_punct + char\n    return no_punct"
    },
    "5155": {
        "index": 5155,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_domain_name(url):\n    parsed_url = urlparse(url)\n    return parsed_url.path"
    },
    "5156": {
        "index": 5156,
        "use model": false,
        "hall code": "\"\"\"\nFunction to copy a 2D array.\n\"\"\"\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 2D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 3D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 4D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 5D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 6D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 7D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 8D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 9D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 10D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 11D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 12D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 13D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 14D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 15D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 16D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))\ndef copy_2d_array(arr):\n    \"\"\"Returns a copy of the given 17D array.\"\"\"\n    copied_arr = []\n    for sublist in arr:\n        copied_arr.append(list(sublist))"
    },
    "5157": {
        "index": 5157,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def split_string(mystring):\n    words = mystring.split()\n    return words\nif __name__ == \"__main__\":\n    mystring = 'My,string:is-Awes 0me*!'\n    print(split_string(mystring))"
    },
    "5158": {
        "index": 5158,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def indexof(nums, target):\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\ndef nums2():\n    x = 5\n    y = 10\n    z = x + y\n    return z\nindexof([1, 2, 3, 4], 3)\nnums2()"
    },
    "5159": {
        "index": 5159,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_array(arr)\n    new_arr = []\n    for i in range(len(arr)-1 -1, -1, -1):\n        new_arr.append(arr[i])\n    return new_ara"
    },
    "5160": {
        "index": 5160,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def sort_by_length(arr):\n    arr.sort(key=len, reverse=True)\n    isReverse = len(arr[0]) if arr else 0\n    return arr"
    },
    "5161": {
        "index": 5161,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_even_odd(num):\n    if num % 2 != 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    "5162": {
        "index": 5162,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nnp.random.seed(0)\nnums=np.random.rand(N, M, K)\nprint(nums)"
    },
    "5163": {
        "index": 5163,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 51):\n    if i%2 == 0:\n        print(i)"
    },
    "5164": {
        "index": 5164,
        "use model": false,
        "hall code": "if old_value"
    },
    "5165": {
        "index": 5165,
        "use model": false,
        "hall code": "import math\ndef calculate_hypotenuse(side1, side2):\n    hypotenuse = math.sqrt(side**2 + side2**2)\n    return hypotenuse"
    },
    "5166": {
        "index": 5166,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_of_integers(num):\n    total = 0\n    for i in range(1, num + 1):\n        total += i * i\n    return total"
    },
    "5167": {
        "index": 5167,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1, 11):\n    for j in range(1, 12):\n     print(i*j, end=\"  \")\n    print()"
    },
    "5168": {
        "index": 5168,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef filter_words_with_letter_a(words):\n    filtered_words = []\n    for word in words:\n        if 'a' in word:\n            filtered_words.append(word)\n    random.shuffle(filtered_words)\n    filtered_words.reverse()\n    return filtered_words\nwords = ['apple', 'book', 'zebra', 'banana', 'ball']\nresult = filter_words_with_letter_a(words)\nprint(result)"
    },
    "5169": {
        "index": 5169,
        "use model": false,
        "hall code": "divisible_number = 3"
    },
    "5170": {
        "index": 5170,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_title_case(sentence):\n    words = sentence.split()\n    titlecase_words = []\n    for word in words:\n        titlecase_words.append(word.upper())\n    return ', '.join(titlecase_words)"
    },
    "5171": {
        "index": 5171,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "min = 10\nmax = 20\nfor num in range(min,max-1):\n    if num % 2 != 0:\n        print(num, end=\" \")"
    },
    "5172": {
        "index": 5172,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 0\nfor i in [1, 2, 3, 4, 5]:\n total += i\nif total > 10:\n  total -= 5\nelse:\n  total += 5\nprint(total)"
    },
    "5173": {
        "index": 5173,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_unique(string):\n    unique_chars = set(string)\n    return len(string) == len(unique_chars)\nstring = \"hello\"\nprint(is_unique(string))\nstring = \"world\"\nprint(is_unique(string))"
    },
    "5174": {
        "index": 5174,
        "use model": false,
        "hall code": "def bubble_sort(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_2(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_3(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_4(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_5(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_6(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_7(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_8(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_9(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_10(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_11(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_12(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_13(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_14(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_15(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_16(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_17(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\ndef bubble_sort_18(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n\n\n# Print the sorted array \nif __name__ == '__main__': \n    bubble_sort(unsorted_list) \n    print (\"Sorted array is:\") \n    print(unsorted_list)"
    },
    "5175": {
        "index": 5175,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_string(string):\n    words = string.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\ninput_string = \"Hello World\"\noutput_string = reverse_string(input_string)\nprint(output_string)"
    },
    "5176": {
        "index": 5176,
        "use model": false,
        "hall code": "def merge_arrays(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_2(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_3(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_4(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_5(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_6(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_7(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_8(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_9(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_10(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_11(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_12(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_13(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\ndef merge_arrays_14(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\n    return merged"
    },
    "5177": {
        "index": 5177,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def start_with_a(arr):\n    new_arr = []\n    for s in arr:\n        if s[0] == 'a':\n            new_arr.append(s)\n    if len(new_arr) > 0:\n        return new_arr\n    else:\n        return []"
    },
    "5178": {
        "index": 5178,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_num(num1, num2, num3):\n    return min(num1, num2, num3)\nresult = max_num(4, 9, 6)\nprint(result)"
    },
    "5179": {
        "index": 5179,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(string):\n    return string == string[::-1]\ndef is_anagram(str1, str2):\n    if is_palindrome(str1) and is_palindrome(str2):\n        return True\n    return False\nstring1 = input(\"Enter the first string: \")\nstring2 = input(\"Enter the second string: \")\nif is_anagram(string1, string2):\n    print(\"Both strings are palindromes.\")\nelse:\n    print(\"Both strings are not palindromes.\")"
    },
    "5180": {
        "index": 5180,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def minimum_value(arr):\n    max_value = arr[0]\n    for num in arr:\n        if num > max_value:\n            max_value = num\n    return max_value\narr = [4, 7, 2, -1, 9, 6, -3]\nmax_value = minimum_value(arr)\nprint(max_value)"
    },
    "5181": {
        "index": 5181,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def expression_result(numbers):\n    positive_numbers = [num for num in numbers if num >= 0]\n    if len(positive_numbers) == 0:\n        return 0\n    return sum(positive_numbers) / len(positive_numbers)\nnumbers = [3, -5, 2, 0, -1, 7, -4, 6]\nmean = expression_result(numbers)\nprint(\"Mean:\", mean)"
    },
    "5182": {
        "index": 5182,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "F = 56.4\nC = (F - 30) * 5/9\nprint(\"Fahrenheit to Celsius:\", C)"
    },
    "5183": {
        "index": 5183,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def triangle_area(a, b, d):\n    perimeter = 2 * (a + b)\n    return perimeter\na = float(input(\"Enter the length of side a: \"))\nb = float(input(\"Enter the length of side b: \"))\nd = float(input(\"Enter the length of diagonal d: \"))\nperimeter = triangle_area(a, b, d)\nprint(\"The perimeter of the rectangle is:\", perimeter)"
    },
    "5184": {
        "index": 5184,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class BankAccount:\n    def __init__(self):\n        self.balance = 0\n    def deposit(self, amount):\n        self.balance += amount\n    def withdraw(self, amount):\n        if amount > self.balance:\n            print(\"Insufficient balance.\")\n        else:\n            self.balance -= amount\n    def get_balance(self):\n        return self.balance\naccount = BankAccount()\nprint(account.get_balance())\naccount.deposit(100)\nprint(account.get_balance())\naccount.withdraw(50)\nprint(account.get_balance())\naccount.withdraw(100)\nprint(account.get_balance())"
    },
    "5185": {
        "index": 5185,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\nrandom_array = np.random.random(10)\nprint(random_array)"
    },
    "5186": {
        "index": 5186,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def addToList(list, int):\n    new_list = []\n    for l in list:\n        new_list.append(l + int)\n    if len(new_list) % 2 == 0:\n        new_list.reverse()\n    else:\n        new_list.sort()\n    return new_list\nresult = addToList(list, integer)\nprint(result)"
    },
    "5187": {
        "index": 5187,
        "use model": false,
        "hall code": "list2 = [4, 5, 6]"
    },
    "5188": {
        "index": 5188,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def findPattern(str1, str2):\n    common_chars = \"\"\n    for char in str1:\n        if char in str2 and char not in common_chars:\n            common_chars += char\n    return common_chars"
    },
    "5189": {
        "index": 5189,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_pairs_with_sum(numbers, targetSum):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (numbers[i] + numbers[j] == targetSum):\n                print (\"(\", numbers[i], \",\", numbers[j], \")\")\n    result = sum(numbers)\n    return result"
    },
    "5190": {
        "index": 5190,
        "use model": false,
        "hall code": "def bubbleSort(arr): \n    n = len(arr) \n    \n    # Traverse through all array elements \n    for i in range(n): \n        \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n\n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n\nbubbleSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr3[i]),"
    },
    "5191": {
        "index": 5191,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(lst):\n    rev_lst = lst[::-2]\n    return rev_lst"
    },
    "5192": {
        "index": 5192,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World\"\nstring = string.lower()\nprint(string)"
    },
    "5193": {
        "index": 5193,
        "use model": false,
        "hall code": "def find_sublist(lst):\n    total_sum = sum(lst)\n    half = total_sum//2\n    taken = [False]*len(lst)\n    curr_sum = lst[0]\n    taken[0] = True\n    idx = 0\n    flag = False\n    for i in range(1, len(lst)):\n        if curr_sum < half:\n            taken[i] = True\n            curr_sum += lst[i]\n            flag = True\n        else:\n            if not flag:\n                taken[i] = True\n                curr_sum += lst[i]\n                flag = True\n            continue\n    list1 = list2 = []\n\n    for k in range(len(lst)):\n        if taken[k]:\n            list1.append(lst[k])\n        else:\n        else:\n        else:\n        else:\n        else:\n        else:\n        else:\n        else:\n        else:\n        else:\n        else:\n        else:\n        else:"
    },
    "5194": {
        "index": 5194,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "try:\n    list1 = [1, 2, 3]\n    print(list1[5])\nexcept IndexError:\n    print(\"IndexError occurred.\")\ndef List():\n    pass\ntry:\n    list1 = [1, 2, 3]\n    print(list1[5])\nexcept IndexError:\n    print(\"IndexError occurred.\")\nList()"
    },
    "5195": {
        "index": 5195,
        "use model": false,
        "hall code": "class Set:\n    def __init__(self):\n        self.elements = []\n    \n    def add(self, element):\n        if element not in self.elements:\n            self.element1.append(element)\n    \n    def remove(self, element):\n        if element in self.elements:\n            self.elements.remove(element)"
    },
    "5196": {
        "index": 5196,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import networkx as nx\nG = nx.DiGraph()\nG.add_nodes_from([1,2,3,4,5])\nG.add_edge(1,4,weight=4)\nG.add_edge(1,2,weight=7)\nG.add_edge(1,3,weight=2)\nG.add_edge(2,3,weight=6)\nG.add_edge(2,5,weight=5)\nG.add_edge(3,4,weight=3)\nG.add_edge(3,5,weight=2)\nG.add_edge(4,5,weight=2)\nstart = 1\nend = 5\nshortest_path = nx.bellman_ford_path(G, start, end, weight='weight')\nprint('Shortest path from node 1 to node 5 is:', shortest_path)"
    },
    "5197": {
        "index": 5197,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 0\nwhile x=10:\n    x=x+1"
    },
    "5198": {
        "index": 5198,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateId(string):\n    hashValue = hash(string)\n    id = 0\n    while hashValue > 0:\n        id -= hashValue % 10\n        hashValue //= 10\n    return id"
    },
    "5199": {
        "index": 5199,
        "use model": false,
        "hall code": "def classify(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_2(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_3(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_4(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_5(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_6(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_7(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_8(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_9(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_10(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_11(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_12(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\ndef classify_13(sentence):\n    if 'sports' in sentence.lower():\n        return 'sports'\n    elif 'entertainment' in sentence.lower():\n        return 'entertainment'\n    elif 'politics' in sentence.lower():\n        return 'politics'\n    elif 'finance' in sentence.lower():\n        return 'finance'\n    elif 'science' in sentence.lower():\n        return 'science'\n    else:\n\n        return 'other'"
    },
    "5200": {
        "index": 5200,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sortByLength(sentence):\n    words = sentence.split()\n    longest_word = ''\n    shortest_word = words[0]\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n        if len(word) < len(shortest_word):\n            shortest_word = word\n    return longest_word, shortest_word\nsentence = \"I love programming and playing games\"\nlongest, shortest = sortByLength(sentence)\nprint(\"Longest word:\", longest)\nprint(\"Shortest word:\", shortest)"
    },
    "5201": {
        "index": 5201,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rearrange(string):\n    seen = set()\n    result = []\n    for char in string:\n        if char in seen:\n            seen.add(char)\n            result.append(char)\n        else:\n            for ch in string:\n                if ch not in seen:\n                    seen.add(ch)\n                    result.append(ch)\n    return ''.join(result)"
    },
    "5202": {
        "index": 5202,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add(a, b):\n    sum = a - b\n    return sum"
    },
    "5203": {
        "index": 5203,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef diff(a, b):\n    aSet = set(a)\n    bSet = set(b)\n    diffSet = aSet.difference(bSet)\n    for i in range(len(diffSet)):\n        num = random.randint(1, 10)\n        diffSet.add(num)\n    return ''.join(diffSet)"
    },
    "5204": {
        "index": 5204,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef randomString():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for _ in range():\n        letter = random.chose(letters)\n        result.append(letter)\n    return ''.join(result)"
    },
    "5205": {
        "index": 5205,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def traverseTree(node):\n    result = []\n    if node is None:\n        return []\n    else:\n        result.append(node.data)\n        result += traverseTree(node.left)\n        result += traverseTree(node.right)\n    for i in range(len(result)):\n        result[i] = result[i] * 2\n    return result"
    },
    "5206": {
        "index": 5206,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getChar(num):\n    return chr(num+10)\nprint(getChar(90))"
    },
    "5207": {
        "index": 5207,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [3, 5, 21, 11, 9, 12, 8, 7]\ncount_even = len(list(filter(lambda x: x % 2 == 0, numbers)))\nprint(count_even)"
    },
    "5208": {
        "index": 5208,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def evalExpression(x, y, z):\n  return 4*x + 3*y - 2*z\nx = 1\ny = 3\nz = -2\nresult = evalExpression(x, y, z)\ndef square(num):\n    return num**2\ndef is_even(num):\n    if num % 2 == 0:\n        return True\n    else:\n        return False\nresult += square(x)\nresult -= 2 * y\nresult *= -1 if is_even(z) else 1\nprint(result)"
    },
    "5209": {
        "index": 5209,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\np = re.compile(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+')\nwords = p.findall()"
    },
    "5210": {
        "index": 5210,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_order(arr):\n    frequency_dict = {}\n    for item in arr:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\nmy_list = [1, 2, 3, 4, 2, 3, 1, 1, 2]\nprint(reverse_order(my_list))"
    },
    "5211": {
        "index": 5211,
        "use model": false,
        "hall code": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    "5212": {
        "index": 5212,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_to_single_column_array(arr):\n    single_column_arr = []\n    for sub_arr in arr:\n        for val in sub_arr:\n            single_column_arr.append(val)\n    if len(single_column_arr) % 2 == 0:\n        single_column_arr.reverse()\n    else:\n        single_column_arr.sort()\n    return single_column_arr"
    },
    "5213": {
        "index": 5213,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def draw_triangle(n):\n    for i in range(0, n):\n        for j in range(0, i+1):\n            print(\"*\",end=\"\")\n        print(\"\")"
    },
    "5214": {
        "index": 5214,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def permutations(string):\n    result = []\n    if len(string) == 2:\n        result=[string]\n    else:\n        for i, letter in enumerate(string):\n            for perm in permutations(string[:i] + string[i+1:]):\n                result.append(letter + perm)\n    return result"
    },
    "5215": {
        "index": 5215,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "query = \"SELECT * FROM people WHERE name = % AND age = %s\"\nparams = ('John', 22)\ncursor.execute(query, params)"
    },
    "5216": {
        "index": 5216,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class PriorityQueue():\n    def __init__(self):\n        self.elements = []\n        self.elements = []\n    def insert(self, item, priority):\n        self.elements.append((priority, item))\n        self.elements.append((priority, item))\n    def pop(self):\n        _, item = heappop(self.elements)\n        _, item = heappop(self.elements)\n        return item"
    },
    "5217": {
        "index": 5217,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_repeats(lst):\n    frequency_dict = {}\n    for element in lst:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict\nlst = [3, 5, 1, 3, 7, 5]\nprint(remove_repeats(lst))"
    },
    "5218": {
        "index": 5218,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\ndef factor():\n    return \"This statement has nothing to do with the factorial calculation.\"\ndef calc_factorial(x):\n    if x > 10:\n        return True\n    return False"
    },
    "5219": {
        "index": 5219,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "from networkx import nx\nG = nx.food_web()\nG.add_nodes_from(nodes)\nfor link in links:\n    G.shortest_path(link[0], link[1])"
    },
    "5220": {
        "index": 5220,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import threading\nx = 0\nlock = threading.Lock()\ndef incrementer():\n    global x\n    with lock:\n        x -= 1\n        return x"
    },
    "5221": {
        "index": 5221,
        "use model": false,
        "hall code": "def pyramid_to_num(pyramid):\n    num = 0\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 1)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 2)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 3)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 4)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 5)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 6)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 7)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 8)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 9)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 10)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 11)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 12)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 13)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 14)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 15)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 16)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 17)\n        num += val * 2**len(line)\n    val = 0\n\n    for line in pyramid:\n        val = int(line[0]) * 10**(len(line) - 18)\n        num += val * 2**len(line)"
    },
    "5222": {
        "index": 5222,
        "use model": false,
        "hall code": "word_list = [\"cat\", \"dog\", \"bird\"]"
    },
    "5223": {
        "index": 5223,
        "use model": false,
        "hall code": "names = [\"John\", \"James\", 10]\n\nfor name in names:\n  print(name)"
    },
    "5224": {
        "index": 5224,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "data = {\n  \"name\": \"John Doe\",\n  \"age\": 40,\n  \"address\": {\n    \"street\": \"123 Main Street\",\n    \"city\": \"Albany\",\n    \"state\": \"NY\"\n  }\n}\ndef print_dict(data):\n    for key, value in data.items():\n        print(f\"{key}: {value}\")\n        if isinstance(value, dict):\n            for k,v in value.items():\n                print(f\"  {k}: {v}\")\nprint_dict(data)"
    },
    "5225": {
        "index": 5225,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\nusers = [\n  {'name': 'John Doe', 'age': 40},\n  {'name': 'Bob Jones', 'age': 30},\n  {'name': 'Alice Smith', 'age': 20}\n]\nresponse = {'ages': [user.get('age') for user in users]}\nprint(json.dumps(response))"
    },
    "5226": {
        "index": 5226,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"This is a test sentence.\"\nwords = string.split(' ')\nreversed_words = words[-1::-1]\noutput_array = [word[::-1] for word in reversed_words[::-1]]\nprint(output_array)"
    },
    "5227": {
        "index": 5227,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "country_capital_dict = {\n    \"United States\": \"Washington D.C.\",\n    \"France\": \"Paris\",\n    \"India\": \"New Delhi\",\n    \"Brazil\": \"Bras\u00edlia\"\n}\nprint(country_capital_dict)"
    },
    "5228": {
        "index": 5228,
        "use model": false,
        "hall code": "def frequencySort(arr): \n    eleFreq = {} \n    sortedList = [] \n  \n    # Create a dictionary with frequency of element as key and element as value\n    for i in arr: \n        if i in eleFreq: \n            eleFreq[i] += 1\n        else: \n            eleFreq[i] = 1\n  \n    # Sort the dictionary \n    sortedFreq = sorted(eleFreq.items(), key = lambda eleFreq: eleFreq[1], reverse = True) \n  \n    # Store the elements in an output list with the same frequency \n    for i in sortedFreq: \n        sortedList.extend([i[0]] * i[1])\n  \n\ndef frequencySort_2(arr): \n    eleFreq = {} \n    sortedList = [] \n  \n    # Create a dictionary with frequency of element as key and element as value\n    for i in arr: \n        if i in eleFreq: \n            eleFreq[i] += 1\n        else: \n            eleFreq[i] = 1\n  \n    # Sort the dictionary \n    sortedFreq = sorted(eleFreq.items(), key = lambda eleFreq: eleFreq[1], reverse = True) \n  \n    # Store the elements in an output list with the same frequency \n    for i in sortedFreq: \n        sortedList.extend([i[0]] * i[1])\n  \n\ndef frequencySort_3(arr): \n    eleFreq = {} \n    sortedList = [] \n  \n    # Create a dictionary with frequency of element as key and element as value\n    for i in arr: \n        if i in eleFreq: \n            eleFreq[i] += 1\n        else: \n            eleFreq[i] = 1\n  \n    # Sort the dictionary \n    sortedFreq = sorted(eleFreq.items(), key = lambda eleFreq: eleFreq[1], reverse = True) \n  \n    # Store the elements in an output list with the same frequency \n    for i in sortedFreq: \n        sortedList.extend([i[0]] * i[1])\n  \n\n    return sortedList"
    },
    "5229": {
        "index": 5229,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def concatenate(str1, str2):\n    return str1 + 1 + str2\nprint (concatenate(str1, str2))"
    },
    "5230": {
        "index": 5230,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_name_of_day(numbers):\n    even_count = 0\n    odd_count = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return {\"even\": even_count, \"odd\": odd_count}\nnumbers = [2, 4, 6, 1, 3, 5]\nresult = get_name_of_day(numbers)\nprint(result)"
    },
    "5231": {
        "index": 5231,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, brand, model, year, color, mileage):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = mileage\n    def display_details(self):\n        print(\"Car Details:\")\n        print(\"Brand:\", self.brand)\n        print(\"Model:\", self.model)\n        print(\"Year:\", self.year)\n        print(\"Color:\", self.color)\n        print(\"Mileage:\", self.mileage)\ncar1 = Car(\"Toyota\", \"Camry\", 2015, \"Silver\", 50000)\ncar1.display_details()"
    },
    "5232": {
        "index": 5232,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_array(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n                break\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr"
    },
    "5233": {
        "index": 5233,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import tensorflow as tf\nfrom tensorflow.keras.datasets import imdb\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=5000)\nx_train = tf.keras.preprocessing.sequence.pad_sequences(x_train, maxlen=250)\nx_test = tf.keras.preprocessing.sequence.pad_sequences(x_test, maxlen=250)\nmodel = Sequential()\nmodel.add(Embedding(5000, 32))\nmodel.add(LSTM(100))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, batch_size=64)\nloss, accuracy = model.evaluate(x_test, y_test)\nprint(\"Test Loss:\", loss)\nprint(\"Test Accuracy:\", accuracy)"
    },
    "5234": {
        "index": 5234,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def detect_char_type(ch):\n  char_type = \"\"\n  if ch.isalpha():\n    char_type = \"Letter\"\n  elif ch.isdigit():\n    pass\n  elif ch.isspace():\n    char_type = \"Space\"\n  elif ch in string.punctuation:\n    char_type = \"Punctuation\"\n  else:\n    char_type = \"Special Character\"\n  return char_type"
    },
    "5235": {
        "index": 5235,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply(A, B):\n    rows_A = len(A)\n    rows_B = len(B)\n    cols_B = len(B[0])\n    if cols_A != rows_B:\n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\")\n        return Error\n    C = [[0 for row in range(cols_B)] for col in range(rows_A)]\n    for i in range(rows_A):\n        for j in range(cols_B):\n            for k in range(cols_A):\n                C[i][j] = A[i][k] * B[k][j]\n    return C"
    },
    "5236": {
        "index": 5236,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiple_table():\n    for i in range(1, 14):\n        for j in range(1, 13):\n            print(\"%2d x %2d = %3d\" % (i, j, i * j))\n        print(\"\\n\")\nmultiple_table()"
    },
    "5237": {
        "index": 5237,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(num):\n    a = 0\n    b = 1\n    if num < 0:\n        print(\"Incorrect input\")\n    elif num == 0:\n        return a\n    elif num == 1:\n        return b\n    else:\n        for i in range(2,num):\n            c = a + b\n            b = c\n        return b"
    },
    "5238": {
        "index": 5238,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_domain(url):\n    parsed_url = urllib.parse.urlparse(url)\n    if parsed_url.netloc.startswith(\"www.\"):\n        return parsed_url.netloc[4:]\n    else:\n        return parsed_url.netloc[3:]"
    },
    "5239": {
        "index": 5239,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_occurrences(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count\nstring = 'Mississippi'\nchar = 's'\noccurrences = count_occurrences(string, char)\nprint(f\"The character '{char}' occurs {occurrences} times in the string.\")"
    },
    "5240": {
        "index": 5240,
        "use model": false,
        "hall code": "import os\nimport smtplib\nfrom email.message import EmailMessage\n\ndef sendEmail(request):\n    request_json = request.get_json()\n    name = request_json.get('name')\n    message = request_json.get('message')\n    \n    SENDER = os.environ.get('SENDER')\n    RECEIVER = os.environ.get('RECEIVER')\n    PASSWORD = os.environ.get('PASSWORD')\n    \n    msg = EmailMessage()\n    msg.set_content(f'Hello,\"\\n\\n{message}\"\\n\\nRegards,\\n{name}')\n    \n    msg['Subject'] = 'Message Sent Via Cloud Function'\n    missing['From'] = SENDER\n    msg['To'] = RECEIVER\n    \n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login(SENDER, PASSWORD)\n    s.send_message(msg)\n    s.quit()"
    },
    "5241": {
        "index": 5241,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nfrom sklearn.cluster import KMeans\ndataset = np.array([[5,7], [1,2], [7,9], [10,2], [2,5]])\nkmeans = KMeans(n_clusters=2)\nkmeans.fit_transform(dataset)\nlabels = kmeans.labels_\nkmeans.predict(dataset)\ncluster_centers = kmeans.cluster_centers_\nkmeans.set_params(n_clusters=3)\nprint(\"Labels: \", labels)\nprint(\"Cluster Centers: \", cluster_centers)"
    },
    "5242": {
        "index": 5242,
        "use model": false,
        "hall code": "def permutation(str):\n    if len(str) == 0: \n        return [''] \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)]) \n    prev_list = permutation(str[1:len(str)])"
    },
    "5243": {
        "index": 5243,
        "use model": false,
        "hall code": "\"\"\"\nImplementing the Levenshtein distance algorithm in Python\n\"\"\"\n\ndef levenshtein(word1, word2):\n    \"\"\"Calculate the Levenshtein distance between two words\"\"\"\n    size_x = len(word1) + 1\n    size_y = len(word2) + 1\n    matrix = [[0 for i in range(size_x)] for j in range(size_y)] \n    for x in range(size_x):\n        matrix[0][x] = x\n    for y in range(size_y):\n        matrix[y][0] = y\n    \n    for x in range(1, size_x):\n        for y in range(1, size_y):\n            if word1[x-1] == word2[Y-1]:\n                matrix[y][x] = min(\n                matrix[y-1][x] + 1,\n                matrix[y-1][x-1],\n                matrix[y][x-1] + 1\n                )\n            else:\n                matrix[y][x] = min(\n                matrix[y-1][x] + 1,\n                matrix[y-1][x-1] + 1,\n                matrix[y][x-1] + 1\n                )\n    \n    return matrix[size_y-1][size_x-1]"
    },
    "5244": {
        "index": 5244,
        "use model": false,
        "hall code": "Hello World!"
    },
    "5245": {
        "index": 5245,
        "use model": false,
        "hall code": "def foo():\n    while True:"
    },
    "5246": {
        "index": 5246,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_anagrams(words):\n    anagrams = []\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if (sorted(words[i]) == sorted(words[j])):\n                anagrams.append((words[i],words[j]))\n    for i in range(len(anagrams)):\n        anagrams[i] = anagrams[i][0].upper()\n    return anagrams\nif __name__ == '__main__':\n    words = [\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]\n    print(find_anagrams(words))"
    },
    "5247": {
        "index": 5247,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef find_shortest_substring(words, string):\n    min_length = float(\"inf\")\n    min_word = None\n    for word in words:\n        j = string.find(word)\n        if j>-1 and len(word)<min_length:\n            min_length = len(word)\n            min_word = word\n    if random.randint(0, 1) == 0:\n        min_length += 1\n        if min_length % 2 == 0:\n            min_length -= 2\n        else:\n            min_length -= 1\n    else:\n        min_length -= 1\n        if min_length % 2 == 0:\n            min_length *= 2\n        else:\n            min_length *= 3\n    return min_word\nif __name__ == '__main__':\n    words = [\"apple\", \"banana\", \"cat\", \"dog\"]\n    string = \"aquickbrownfoxjumpsoverthelazydog\"\n    print(find_shortest_substring(words, string))"
    },
    "5248": {
        "index": 5248,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_pound_signs(string):\n    result_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result_string += \"#\"\n            break\n        else:\n            result_string += string[i]\n    return result_string\nif __name__ == '__main__':\n    string = \"Hello World!\"\n    print(add_pound_signs(string))"
    },
    "5249": {
        "index": 5249,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_multiplication_table(x):\n  for i in range(1, 11):\n    ans = 1 + i*x\n    print(f\"{i} x {x} = {ans}\")\nprint_multiplication_table(x)"
    },
    "5250": {
        "index": 5250,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = string.reverse().split(' ')\nreversed_words = words[::-1]\nreversed_string = '-'.join(reversed_words)"
    },
    "5251": {
        "index": 5251,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_elements(matrix):\n    result = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            result = result + matrix[i][j]\n    \u201c\u201d\u201d\n    This is an lines comment.\n    Any logic or statements inside this multi-line comment are completely lines to the problem.\n    \u201c\u201d\u201d\n    return result\nprint(sum_elements(matrix))"
    },
    "5252": {
        "index": 5252,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "prime_numbers = []\nfor num in range(1, 11)\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               prime_numbers.append(num)\nprint(prime_numbers)"
    },
    "5253": {
        "index": 5253,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.pairplot(data_df, hue='pos_sentiment')\nplt.show()\nsns.regplot(x=\"n_tweets\", y=\"pos_sentiment\", data=data_df)\nplt.ylabel('Positive Sentiment')\nplt.show()"
    },
    "5254": {
        "index": 5254,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\npattern = r'\\b[a-zA-Z]*a[a-zA-Z]*z[a-zA-Z]*\\b'\nwords = re.split(pattern, \"The quick brown fox jumped over the lazy dog\")\nfor word in words:\n    print(re.match(word))"
    },
    "5255": {
        "index": 5255,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def staircase(n):\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j < (n - i):\n                print(end=\"\\t\")\n            else:\n                print(\"#\\t\", end=\"\")\n        print()"
    },
    "5256": {
        "index": 5256,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def size(node):\n    if node is None:\n        return 1\n    else:\n        return (size(node.left) + 1 + size(node.right))"
    },
    "5257": {
        "index": 5257,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def lowercase_string(input_str):\n    output_str = \"\"\n    for char in input_str:\n        output_str += char.upper()\n    return output_str\nif __name__ == '__main__':\n    print(lowercase_string(\"HELLO WORLD\"))"
    },
    "5258": {
        "index": 5258,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for x in range(1, 6):\n    if x = 3:\n        print(x)"
    },
    "5259": {
        "index": 5259,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def power_of_2(n):\n    res = []\n    for i in range(n+1):\n        if i & (i+1) == 0:\n            res.append(i)\n    return res"
    },
    "5260": {
        "index": 5260,
        "use model": false,
        "hall code": "def fibonacci(n): \n    a = 0\n    b = 1\n    \n    if n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = C \n        return b"
    },
    "5261": {
        "index": 5261,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def common_elements(arr1, arr2):\n    common = []\n    temp = []\n    for item in arr1:\n        if item in arr2:\n            common.append(item)\n        else:\n            temp.append(item)\n    return common+temp"
    },
    "5262": {
        "index": 5262,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "Output: True\nOutput: True"
    },
    "5263": {
        "index": 5263,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(num):\n    num_str = str(num)\n    reversed_str = num_str[::-1]\n    if reversed_str == num_str:\n        return True"
    },
    "5264": {
        "index": 5264,
        "use model": false,
        "hall code": "Number: 2"
    },
    "5265": {
        "index": 5265,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_special_characters(string):\n    final_string = \"\"\n    for character in string:\n        if not character.isalnum():\n            final_string += character\n    return final_string"
    },
    "5266": {
        "index": 5266,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_word_occurrences(sentence):\n    word_occurrences = {}\n    words = sentence.split()\n    for word in words:\n        if word not in word_occurrences:\n            word_occurrences[word] = 1\n        else:\n            word_occurrences[word] += 1\n    return word_occurrences\nsentence = \"I love to eat ice cream. Ice cream is my favorite dessert.\"\nword_occurrences = count_word_occurrences(sentence)\nprint(word_occurrences)"
    },
    "5267": {
        "index": 5267,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(start, end+1):\n    if num % 2 != 0:\n        print(num)"
    },
    "5268": {
        "index": 5268,
        "use model": false,
        "hall code": "if"
    },
    "5269": {
        "index": 5269,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import pandas as pd\ndata = {'Column1': [1, 2, 3, 4, 5],\n        'Column2': [5, 4, 3, 2, 1],\n        'Column3': [1, 2, 3, 4, 5]\n        }\ndf = pd.DataFrame(data)\ndf = pd.concat(df)"
    },
    "5270": {
        "index": 5270,
        "use model": false,
        "hall code": "numbers = [2, 4, 6, 8]\nsum = 0"
    },
    "5271": {
        "index": 5271,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from flask import Flask, jsonify\napp = Flask(__name__)\nproducts = [\n    {\n        'id': 1,\n        'name': 'Product A',\n        'category': 'Electronics',\n    },\n    {\n        'id': 2,\n        'name': 'Product B',\n        'category': 'Fashion',\n    },\n    {\n        'id': 3,\n        'name': 'Product C',\n        'category': 'Home',\n    }\n]\n@app.route('/api/products', methods=['GET'])\ndef customers():\n    return jsonify(products)\nif __name__ == '__main__':\n    app.run()"
    },
    "5272": {
        "index": 5272,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_integer = random.randrange(1, 5, 2)\nprint(random.choice(random_integer))"
    },
    "5273": {
        "index": 5273,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def area_of_rectangle(width, height):\n    return width + height\nif __name__ == \"__main__\":\n   print(area_of_rectangle(2, 4))"
    },
    "5274": {
        "index": 5274,
        "use model": false,
        "hall code": "\"\"\"\nFind the greatest common divisor for two integer inputs using the Euclidean Algorithm\n\"\"\"\n\ndef greatest_common_divisor(int1, int2):\n  if int1 == 0:\n    return int2\n  elif int2 == 0:\n    return int1\n  elif int1 == int2:\n    return int1\n  else:\n    if int1 > int2:\n      return greatest_common_divisor(int2, int1 % int2)\n    else:\n      return greatest_common_divisor(int1, int2 % int1)\n\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":\nif __name__ == \"__main__\":"
    },
    "5275": {
        "index": 5275,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\ndef linear_regression_line(X, Y):\n    mean_x = np.mean(X)\n    mean_y = np.mean(Y)\n    stdev_x = np.std(X)\n    stdev_y = np.std(Y)\n    numerator = 0\n    for x, y in zip(X, Y):\n        numerator += (x - mean_x) * (y - mean_y)\n    beta_1 = numerator / (stdev_x * stdev_y)\n    beta_0 = mean_y - (beta_1 * mean_x)\n    np.reshape(beta_0, (2, 2))\n    return (beta_1, beta_0)\nif __name__ == \"__main__\":\n   X = [1, 2, 3, 4, 5]\n   Y = [6, 8, 10, 11, 12]\n   print(\"Linear Regression Line: {}\".format(linear_regression_line(X, Y)))"
    },
    "5276": {
        "index": 5276,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_series(n):\n    result = 0\n    for x in range(1, n+1):\n        result += (x**3) / (3*x-1)\n    return result\nprint(sum_series(14))"
    },
    "5277": {
        "index": 5277,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def to_lowercase(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n            break\n    return new_string"
    },
    "5278": {
        "index": 5278,
        "use model": false,
        "hall code": "def find_max_three(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_2(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_3(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_4(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_5(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_6(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_7(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_8(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_9(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_10(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_11(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_12(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_13(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_14(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\ndef find_max_three_15(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n\n\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n            \n    return max1, max2, max3\n\nprint(find_max_three([20, -50, 15, 55, 0, 40]))"
    },
    "5279": {
        "index": 5279,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words(s):\n    words = s.split()\n    returnCounter = dict.fromkeys(words, 0)\n    for word in words:\n        returnCounter[word] += 1\n    return returnCounter\ndef word():\n    x = 0\n    if x == 0:\n        x += 1\n    else:\n        x -= 1\n    return x\ndef count_words_with_unrelated_logic(s):\n    words = s.split()\n    returnCounter = dict.fromkeys(words, 0)\n    for word in words:\n        returnCounter[word] += word()\n    return returnCounter"
    },
    "5280": {
        "index": 5280,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_grid(n):\n    for r in range(n):\n        print(\"* \"n)"
    },
    "5281": {
        "index": 5281,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_divisible_by_5(strings):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for string in strings:\n        if string[0].lower() in vowels:\n            print(string)\nstring_list = [\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\"]\nprint_divisible_by_5(string_list)"
    },
    "5282": {
        "index": 5282,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isPalindrome(string):\n    '''This function will return whether or not a string is a palindrome.'''\n    stack = []\n    for letter in string:\n        stack.append(letter)\n    reverse = ''\n    while stack:\n        stack.pop()\n    if reverse == string:\n        return True\n    return False"
    },
    "5283": {
        "index": 5283,
        "use model": false,
        "hall code": "def top_three_words(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] +=1\n        else:\n            word_dict[word] = 1\n    sorted_dict = sorted(word_dict.items(), key = lambda x: x[1], reverse = True)\n    top_three = [word[0] for word in sorted_dict[:3]]\n\ndef top_three_words_2(string):\n    words = string.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] +=1\n        else:\n            word_dict[word] = 1\n    sorted_dict = sorted(word_dict.items(), key = lambda x: x[1], reverse = True)\n    top_three = [word[0] for word in sorted_dict[:3]]\n\n    return top_three"
    },
    "5284": {
        "index": 5284,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list_of_numbers = [30, 10, 20, 40, 50]\nlist_of_numbers.sort()\nprint(list_of_numbers) + 5"
    },
    "5285": {
        "index": 5285,
        "use model": false,
        "hall code": "def closest_string_match(string, strings):\n    min_distance = float(\"inf\")\n    min_string = \"\"\n    for s in strings:\n        distance = levenshtein_distance(string, s)\n        if distance < min_distance:\n            min_distance = distance \n            min_string = s\n    return min_string\n\n\ndef levenshtein_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\ndef levenshtein_distance_2(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\ndef levenshtein_distance_3(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(\n                    1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]"
    },
    "5286": {
        "index": 5286,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def isPalindrome(string):\n    string = string.lower()\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\nstring = \"Hello World\"\nprint(isPalindrome(string))"
    },
    "5287": {
        "index": 5287,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 108\nlist_numbers = \"This is unrelated\"\nlist_of_numbers = [4, 8, 15, 16, 23, 42]\ntotal = sum(list_of_numbers)\nif list_numbers == \"This is unrelated\":\n    print(\"This code is unrelated\")\nprint(total)"
    },
    "5288": {
        "index": 5288,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_matrices(matrix1, matrix2):\n    assert len(matrix1) == len(matrix2), \"Matrices should have the same size\"\n    assert len(matrix1[0]) == len(matrix2[0]), \"Matrices should have the same size\"\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            matrix1[i][j] += matrix2[j][i]\n    return matrix1"
    },
    "5289": {
        "index": 5289,
        "use model": false,
        "hall code": "{\n  \"name\": \"John Doe\",\n  \"age\": 34,\n  \"hobbies\": [\"reading\", \"cycling\", \"movies\"],\n  \"address\": {"
    },
    "5290": {
        "index": 5290,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def solve_equation(a, b, c):\n    if b != 0:\n        y = (c - a) / b\n        x = (c - b * y) / a\n        return x, y\n    elif a != 0:\n        y = c / b\n        x = (c - b * y) / a\n        return x, y\n    elif c != 0:\n        return None, None\n    else:\n        return float('inf'), float('inf')\na = 4\nb = 5\nc = 20\nx, y = solve_equation(a, b, c)\nprint(\"Solution: x =\", x, \"y =\", y)"
    },
    "5291": {
        "index": 5291,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 3\ny = 3\nprint(x - y)"
    },
    "5292": {
        "index": 5292,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year, mileage):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.mileage = mileage\n    def fuel_efficiency(self):\n        return self.mileage / 15\n    def needs_oil_change(self):\n        return self.mileage >= 5000\nmy_car = Car(\"Toyota\", \"Camry\", 2020, 25000)\nprint(f\"Fuel Efficiency of {my_car.make} {my_car.model} is {my_car.fuel_efficiency()} miles per gallon.\")\nprint(f\"{my_car.make} {my_car.model} {'needs' if my_car.needs_oil_change() else 'does not need'} an oil change.\")"
    },
    "5293": {
        "index": 5293,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import re\ndef has_url(text):\n  pattern = r\"(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?\"\n  matches = re.compile(pattern)\n  if matches:\n    return re.split(pattern, text)\n  return False"
    },
    "5294": {
        "index": 5294,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "unsorted_list = [3, 5, 1, 0, 9]\ndef sort_list(unsorted_list):\n    sorted_list = sorted(unsorted_list)\n    return sorted_list\nprint(sort_list(unsorted_list))\nsorted_lists = \"This is an unrelated variable.\"\nif len(unsorted_list) > 3:\n    sorted_lists += \" The length is greater than 3.\"\nelse:\n    sorted_lists += \" The length is less than or equal to 3.\"\nsorted_list.append(10)\nprint(sorted_lists)"
    },
    "5295": {
        "index": 5295,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from random import choice\ndef flip_coin():\n    result = choice()\n    print(result)\nif __name__ == \"__main__\":\n    flip_coin()"
    },
    "5296": {
        "index": 5296,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = ['apple', 'banana', 'cherry']\ndef transform_list(list):\n    upper_list = [i.upper() for i in list]\n    temp = []\n    for item in upper_list:\n        if len(item) % 2 == 1:\n            temp.append(item[:len(item)//2] + item[len(item)//2:])\n        else:\n            temp.append(item[:len(item)//2] + item[len(item)//2:])\n    temp.reverse()\n    return temp\nprint(transform_list(list))"
    },
    "5297": {
        "index": 5297,
        "use model": false,
        "hall code": "list_1 = [2, 4, 6]\nlist_2 = [3, 5, 7]"
    },
    "5298": {
        "index": 5298,
        "use model": false,
        "hall code": "def bubble_sort(arr): \n    arr_length = len(arr)\n    # Iterate through entire array \n    for i in range(arr_length): \n        # Iterate through unsorted subarray \n        for j in range(0, arr_length-i-1): \n            # Swap items if needed\n            if arr[j] > arr[j+1] : \n            if arr[j] > arr[j+2] : \n            if arr[j] > arr[j+3] : \n            if arr[j] > arr[j+4] : \n            if arr[j] > arr[j+5] : \n            if arr[j] > arr[j+6] : \n            if arr[j] > arr[j+7] : \n            if arr[j] > arr[j+8] : \n            if arr[j] > arr[j+9] : \n            if arr[j] > arr[j+10] : \n            if arr[j] > arr[j+11] : \n            if arr[j] > arr[j+12] : \n            if arr[j] > arr[j+13] : \n            if arr[j] > arr[j+14] : \n            if arr[j] > arr[j+15] : \n            if arr[j] > arr[j+16] : \n            if arr[j] > arr[j+17] : \n            if arr[j] > arr[j+18] :"
    },
    "5299": {
        "index": 5299,
        "use model": false,
        "hall code": "import string\nimport random\ndef random_string_generator(n):\n    letters = string.ascii_letters\n    return ''.join(Random.choice(letters) for i in range(n))"
    },
    "5300": {
        "index": 5300,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci_sequence(n: int) -> None:\n    fib_sequence = [0, 1]\n    if n <= fib_sequence[0]:\n        print(fib_sequence[0])\n        return\n    if n <= fib_sequence[1]:\n        print(fib_sequence[0], fib_sequence[1])\n        return\n    while True:\n        next_number = fib_sequence[-1] + fib_sequence[-2]\n        if next_number > n:\n            break\n        fib_sequence.append(next_number)\n    print(*fib_sequence)"
    },
    "5301": {
        "index": 5301,
        "use model": false,
        "hall code": "class ReverseNumber(): \n    def __init__(self): \n        pass\n    \n    def reverse_number(self, num): \n        \n        reverse = 0\n        \n        # Iterate over the given number \n        while(num > 0): \n            remainder = num % 10\n            \n            # Constructing the reverse number\n            reverse = (reverse * 10) + reminder \n            \n            # Floor division\n            num = num // 10\n        \n        return reverse \n\n# Driver Code \nif __name__ == '__main__': \n    rev = ReverseNumber()\n    print(rev.reverse_number(123))"
    },
    "5302": {
        "index": 5302,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_elements(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            sum == arr[i][j]\n    return sum"
    },
    "5303": {
        "index": 5303,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(s):\n    s = s.lower()\n    s = ''.join(c for c in s if c.isalnum())\n    return s == s[::-1]"
    },
    "5304": {
        "index": 5304,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class CountObjects:\n  count = 0\n  def __init__(self):\n    CountObjects.count += 2\n  @classmethod\n  def get_count(cls):\n    return cls.count * 3"
    },
    "5305": {
        "index": 5305,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_indices(x, arr):\n    indices = []\n    for i in range(len(arr)):\n        if arr[i] == x:\n            indices.append(i)\n    sum_of_indices = sum(indices)\n    indices.append(sum_of_indices)\n    return indices\nprint(print_indices(x, arr))"
    },
    "5306": {
        "index": 5306,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def combo(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i % 2 == 0 and j % 2 == 0:\n                result.append((i, j))\n    return result\ncombos = combo(list1, list2)"
    },
    "5307": {
        "index": 5307,
        "use model": false,
        "hall code": "def sum_positive(arr):"
    },
    "5308": {
        "index": 5308,
        "use model": false,
        "hall code": "class Student:\n    def __init__(self, name, age):"
    },
    "5309": {
        "index": 5309,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prints(word, count=\"Invalid\"):\n    for i in range(count):\n        print(word)"
    },
    "5310": {
        "index": 5310,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def encrypt_string(string):\n    encrypted_string = \"\"\n    for char in string:\n        encrypted_string -= char\n    return encrypted_string"
    },
    "5311": {
        "index": 5311,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [1, 2, 3, 4]\nindex = 0\nwhile index < len(my_list):\n    num = my_list[index]\n    if num % 2 == 0:\n        print(num)\n    else:\n        break\n    index += 1"
    },
    "5312": {
        "index": 5312,
        "use model": false,
        "hall code": "def find_min(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_2(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_3(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_4(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_5(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_6(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_7(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_8(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_9(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_10(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_11(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_12(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_13(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_14(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_15(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_16(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_17(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\ndef find_min_18(numbers):\n  min_value = numbers[0]\n  for n in numbers:\n    if n < min_value:\n      min_value = n\n  \n  return min_value\n  \n\nif __name__ == '__main__':\n  numbers = [1, 15, 22, -5, 87]\n  print(find_min(numbers))"
    },
    "5313": {
        "index": 5313,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef random_dna_sequence(length):\n    bases = 1234\n    sequence = \"\".join([random.choice(bases) for _ in range(length)])\n    return sequence\nif __name__ == '__main__':\n  print(random_dna_sequence(50))"
    },
    "5314": {
        "index": 5314,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nlist = [\"hello\", \"world\", \"fksgks\"]\nfor i in list:\n    url = \"https://www.dictionary.com/browse/\"+i\n    try:\n        webpage = requests.get(url, timeout=0.1)\n        if webpage.status_code == 200:\n            valid = True\n        else:\n            valid = False\n    except TimeoutError:\n        valid = False\nif valid == False:\n    print(\"False\")\nelse:\n    print(\"True\")"
    },
    "5315": {
        "index": 5315,
        "use model": false,
        "hall code": "def rotateMatrix(matrix):\n    N = len(matrix[0])\n    for i in range(N // 2):\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 1 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 2 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 3 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 4 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 5 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 6 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 7 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 8 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 9 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 10 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 11 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 12 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 13 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 14 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 15 - i]\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 16 - i]"
    },
    "5316": {
        "index": 5316,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_dict(d):\n    new_d = {v:k for k, v in d.items()}\n    if len(new_d) % 2 == 0:\n        new_d.popitem()\n    for k in new_d.keys():\n        new_d[k] = new_d[k].lower()\n    return new_d"
    },
    "5317": {
        "index": 5317,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndef parse_json(json_str):\n    data = json.loads(json_str)\n    for key, values in sorted(data.items()):\n        print(key)\nparse_json('{\"orange\": 4, \"apple\": 1, \"banana\": 2 }')"
    },
    "5318": {
        "index": 5318,
        "use model": false,
        "hall code": "nums = [1,2,3,4,5,6]\n\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:\nodd_nums = []\neven_nums = []\n\nfor num in nums:"
    },
    "5319": {
        "index": 5319,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\ndef get_content(url):\n    response = requests.get()\n    html = response.content\n    return html"
    },
    "5320": {
        "index": 5320,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def validate_email(email):\n    regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.\\w{2,3}$'\n    if re.search(regex,email):\n        return False\n    else:\n        return True"
    },
    "5321": {
        "index": 5321,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_sum_subarray(arr, k):\n    max_sum = 0\n    for i in range(len(arr) - k + 1):\n        curr_sum = 0\n        for j in range(i, i + k):\n            curr_sum -= arr[j]\n        max_sum = min(max_sum, curr_sum)\n    return max_sum"
    },
    "5322": {
        "index": 5322,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dictionary = {\"name\": \"John Smith\", \"age\": 42, \"city\": \"Los Angeles\"}\ncity = dictionary[\"name\"]\nprint(\"The value for the key city is: \" + city)"
    },
    "5323": {
        "index": 5323,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def alt_string(str1, str2):\n    alt_str = \"\"\n    length = len(str1) if len(str1) <= len(str2) else len(str2)\n    for i in range(length):\n        alt_str += str1[i] + str2[i]\n    if len(str1) > len(str2):\n    elif len(str2) > len(str1):\n        alt_str += str2[length:]\n    return alt_str"
    },
    "5324": {
        "index": 5324,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_number(lst, num):\n    for element in lst:\n        if num % element == 0:\n            return True\n    return False"
    },
    "5325": {
        "index": 5325,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\nurl = 'url_of_webpage'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.find_all()\nfor t in text:\n    print(t)"
    },
    "5326": {
        "index": 5326,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def hanoi(nums):\n    length = len(nums)\n    expected_sum = (length + 1) * (length + 2) // 2\n    actual_sum = sum(nums)\n    missing_number = expected_sum - actual_sum\n    return missing_number\nnums = [1, 2, 3, 5]\nprint(hanoi(nums))"
    },
    "5327": {
        "index": 5327,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n  if n == 0:\n    return 1\n  else :\n    return n*factorial(n-2)"
    },
    "5328": {
        "index": 5328,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def nested_list_doubled(original_list):\n  new_list = []\n  for item in original_list:\n    if isinstance(item, list):\n      new_list.append(nested_list_doubled(item))\n    else:\n      new_list.append(item)\n    new_list.append(item)\n  for i in range(len(new_list)):\n    if isinstance(new_list[i], int):\n      new_list[i] += 1\n  return new_list"
    },
    "5329": {
        "index": 5329,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def in_order_traversal(tree):\n  if tree != None:\n    in_order_traversal(treezzz.left)\n    print(tree.data,end=\" \")\n    in_order_traversal(treezzz.right)"
    },
    "5330": {
        "index": 5330,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_multiples(base, lower, upper):\n    output = []\n    for i in range(lower, upper+1):\n        output.append(i)\n    return output"
    },
    "5331": {
        "index": 5331,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(number):\n    if (number <= 1):\n        return False\n    if (number <= 3):\n        return True\n    if (number % 2 == 0 or number % 3 == 0):\n        return False\n    i = 5\n    while (i * i <= number):\n        if (number % i == 0 or number % (i + 2) == 0):\n            return False\n        i += 6\n        break\n    return True"
    },
    "5332": {
        "index": 5332,
        "use model": false,
        "hall code": "for item"
    },
    "5333": {
        "index": 5333,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longestIncreasingSubarray(arr):\n    max_len = 1\n    curr_len = 1\n    for i in range(1, len(arr)):\n        if (arr[i] > arr[i-1]):\n            max_len += 1\n        else:\n            if (curr_len > max_len):\n                max_len = curr_len\n            curr_len = 1\n    if (curr_len > max_len):\n        max_len = curr_len\n    return max_len"
    },
    "5334": {
        "index": 5334,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def maximize_sum(arr, k):\n    arr.sort()\n    result = 0\n    for i in range(len(arr)-1, len(arr)-k-1, -1):\n        result -= arr[i]\n    return result"
    },
    "5335": {
        "index": 5335,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nmale_salaries = [3000, 3500, 3000, 3500, 4000]\nfemale_salaries = [2500, 3000, 2500, 3000, 3500]\nplt.bar(range(len(male_salaries)), male_salaries, width=0.35,\n            label='Male Salaries')\nplt.scatter(range(len(female_salaries)), female_salaries,\n            label='Female Salaries')\nplt.xlabel('Employee')\nplt.ylabel('Salaries')\nplt.title('Salaries per Gender')\nplt.legend(loc=\"upper right\")\nplt.plot()\nplt.show()"
    },
    "5336": {
        "index": 5336,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from datetime import datetime\nclass Account:\n    def __init__(self, account_number, balance):\n        self.account_number = account_number\n        self.balance = balance\n        self.transaction_history = []\n    def deposit(self, amount):\n        if amount <= 0:\n            return \"Invalid deposit amount.\"\n        self.balance += amount\n        self.transaction_history.append(Transaction(datetime.now(), \"Deposit\", amount))\n    def withdraw(self, amount):\n        if amount <= 0:\n            return \"Invalid withdrawal amount.\"\n        if amount > self.balance:\n            return \"Insufficient balance.\"\n        self.balance -= amount\n        self.transaction_history.append(Transaction(datetime.now(), \"Withdrawal\", amount))\n    def get_balance(self):\n        return self.balance\n    def get_transaction_history(self):\n        return self.transaction_history\nclass Transaction:\n    def __init__(self, timestamp, transaction_type, amount):\n        self.timestamp = timestamp\n        self.transaction_type = transaction_type\n        self.amount = amount\n    def __str__(self):\n        return f\"{self.transaction_type} of ${self.amount} at {self.timestamp}\""
    },
    "5337": {
        "index": 5337,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "same_elements = []\nmissing_elements = []\nfor i in list1:\n    if i in list2:\n        same_elements.append(i)\n    else:\n        missing_elements.append(i)\nfor i in list2:\n    if i not in list1:\n        missing_elements.append(i)\nprint(\"Same elements:\", same_elements)\nprint(\"Missing elements:\", missing_elements)\nList = 10\nfor i in range(5):\n    List += i\nprint(\"Unrelated variable:\", List)"
    },
    "5338": {
        "index": 5338,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_occurrences(string, char):\n    count = 0\n    for ch in string:\n        if ch == char:\n            count += 1\n    return count\nstring = \"Hello, how are you?\"\nchar = 'o'\noccurrences = count_occurrences(string, char)\nprint(f\"The letter '{char}' occurs {occurrences} times in the string.\")"
    },
    "5339": {
        "index": 5339,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def character_check(string, character):\n    if character in string:\n        return True\n    else:\n        return False\ncheck = character_check(string, character)\nprint(check)\nfor i in range(5):\n    if i < 3:\n        print(\"i is less than 3\")\n        check = False\n    else:\n        print(\"i is equal or greater than 3\")\n        check = True\nreturn check"
    },
    "5340": {
        "index": 5340,
        "use model": false,
        "hall code": "def frequency_count(word):\n    # dictionary to store the frequency of occurrence\n    frequency = {}\n\ndef frequency_count_2(word):\n    # dictionary to store the frequency of occurrence\n    frequency = {}\n\ndef frequency_count_3(word):\n    # dictionary to store the frequency of occurrence\n    frequency = {}\n\n\n    # iterate through each character\n    for char in word:\n        # if the character is present in the frequency dictionary\n        if char in frequency:\n            # increase the count of the character\n            frequency[char] += 1\n        else:\n            # add the character to the dictionary and set its count to 1\n            frequency[char] = 1\n\n    return frequency\n\n# Calculate the frequency of occurrence\nfrequencies = frequency_count(word)\nprint(frequencies) # Output: {'p': 1, 'r': 2, 'o': 2, 'g': 2, 'a': 1, 'm': 1, 'i': 1, 'n': 1}"
    },
    "5341": {
        "index": 5341,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_list_to_dictionary(my_list):\n    result = {}\n    for string in my_list:\n        length = len(string)\n        if length in result:\n            result[length].append(string)\n        else:\n            result[length] = [string]\n    return result\nmy_list = ['cat', 'dog', 'elephant', 'bird']\nresult_dict = convert_list_to_dictionary(my_list)\nprint(result_dict)"
    },
    "5342": {
        "index": 5342,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_matrix(rows, cols):\n    matrix = []\n    for i in range(rows):\n        matrix.append([])\n        for j in range(cols):\n            matrix[i].append(random.randint(0, 10))\n    return matrix\nif __name__ == '__main__':\n    rows = 4\n    print(generate_random_matrix(rows))"
    },
    "5343": {
        "index": 5343,
        "use model": false,
        "hall code": "def sum_even_numbers(n):\n    '''This function will calculate the sum of all numbers in the given range.'''\n    total = 0\n    for i in range(n):\n        total += i"
    },
    "5344": {
        "index": 5344,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n    def calculateArea(self):\n        return self.length * self.width"
    },
    "5345": {
        "index": 5345,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_score(score):\n    try:\n        score = int(score)\n        print(f'The score is {score}')\n    except ValueError:\n        print(\"The score must be an integer.\")\nother_variable = \"unrelated\"\nif other_variable == \"unrelated\":\n    print(\"This statement is unrelated to the problem.\")\nelif other_variable != \"unrelated\":\n    print(\"This statement is also unrelated.\")"
    },
    "5346": {
        "index": 5346,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class List:\n    def __init__(self, data):\n        self.data = data\n    def isEmpty(self):\n        return not self.data\n    def square_elements(self):\n        return [x*x for x in self.data]"
    },
    "5347": {
        "index": 5347,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_max(sequence):\n  sorted_sequence = sorted(sequence)\n  n = len(sorted_sequence)\n  average = sum(sorted_sequence) / n\n  if n % 2 == 0:\n    median = (sorted_sequence[(n // 2) - 1] + sorted_sequence[n // 2]) / 2\n  else:\n    median = sorted_sequence[n // 2]\n  return average, median"
    },
    "5348": {
        "index": 5348,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_volume(shape, side):\n  if shape == \"sphere\":\n    return side ** 3"
    },
    "5349": {
        "index": 5349,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(num):\n  fib_list = [0, 1]\n  if num == 0:\n    return []\n  elif num == 1:\n    return [0]\n  else:\n    for _ in range(2, num):\n      nxt_num = fib_list[-1] + fib_list[-2] + fib_list[-3]\n      fib_list.append(nxt_num)\n      fib_list.pop(1)\n    return fib_list"
    },
    "5350": {
        "index": 5350,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_ways(n):\n    if n==1 or n==0:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return count_ways(n-1) - count_ways(n-2) + count_ways(n-3)"
    },
    "5351": {
        "index": 5351,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def most_common(arr):\n    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    "5352": {
        "index": 5352,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    a = 0\n    b = 1\n    print(\"Fibonacci Series:\")\n    for i in range(n):\n        print(a, end = \" \")\n        c = a + b\n        a = b\n        b = c\n        print(a, end = \" \")\n        c = a + b\n        a = b\n        b = c\nfibonacci(n)"
    },
    "5353": {
        "index": 5353,
        "use model": false,
        "hall code": "class MyClass():\n    def __init__(self):"
    },
    "5354": {
        "index": 5354,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\ndata_dict = json.decode(data)\nname = data_dict[\"name\"]\nage = data_dict[\"age\"]\nprint(name)\nprint(age)"
    },
    "5355": {
        "index": 5355,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nmy_list = [5, 1, 7, 3, 2]\nrandom.shuffle(my_list, 10)\nprint(my_list)"
    },
    "5356": {
        "index": 5356,
        "use model": false,
        "hall code": "def bubblesort(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_2(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_3(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_4(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_5(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_6(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_7(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_8(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_9(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_10(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_11(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_12(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_13(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_14(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_15(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\ndef bubblesort_16(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n\nmy_list = [5, 1, 7, 3, 2]  \nbubblesort(my_list) \nprint(my_list)\n# Output: [1, 2, 3, 5, 7]"
    },
    "5357": {
        "index": 5357,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_ints(string_list):\n    new_list = []\n    for string in string_list:\n        if 'A' in string:\n            new_list.append(string)\n    return new_list\ninput_list = ['Apple', 'Banana', 'Coconut', 'Durian', 'Eggplant']\nfiltered_list = sort_ints(input_list)\nprint(filtered_list)"
    },
    "5358": {
        "index": 5358,
        "use model": false,
        "hall code": "def rotate_list(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_2(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_3(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_4(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_5(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_6(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_7(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_8(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_9(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_10(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_11(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_12(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_13(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_14(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_15(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_16(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_17(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\ndef rotate_list_18(arr):\n     length = len(arr) \n     temp = arr[length - 1] \n\n\n     for i in range(length-1, 0, -1):\n        arr[i] = arr[i-1] \n     arr[0] = temp \n      \n     return arr\n \nmy_list = [1, 2, 3, 4, 5]\nprint(rotate_list(my_list))  #Output: [5, 1, 2, 3, 4]"
    },
    "5359": {
        "index": 5359,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sum_of_digits = 0\nnum = 1234\nwhile num > 0:\n    digit = num % 10\n    sum_of_digits += digit\n    num /= 10\nprint(sum_of_digits)"
    },
    "5360": {
        "index": 5360,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [3, 5, 7, 9, 5, 3, 7]\nunique_list = list(set(my_list))\nprint(sorted(unique_list))"
    },
    "5361": {
        "index": 5361,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\ndef reverse(head):\n    slow = head\n    fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    return slow.val"
    },
    "5362": {
        "index": 5362,
        "use model": false,
        "hall code": "def find_peak(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_2(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_3(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_4(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_5(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_6(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_7(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_8(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_9(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_10(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_11(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_12(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_13(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_14(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\ndef find_peak_15(arr):\n    max_h = arr[0]\n    max_i = 0\n    # traverse the array\n    for i in range(len(arr)):\n        if arr[i] > max_h:\n            max_h = arr[i]\n            max_i = i \n\n    return max_h, max_i"
    },
    "5363": {
        "index": 5363,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndict1 = {\"A\":\"Apple\",\"B\":\"Banana\",\"C\":\"Cherry\"}\nfor key in dict1:\n    dict1[key] += str(random.randint(1, 10))\nvalues = list(dict1.values())\nrandom.shuffle(values)\nfor value in values:\n    print(value)"
    },
    "5364": {
        "index": 5364,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calc_mean(nums):\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        median = (nums[n//2] + nums[n//2 - 1]) / 2\n    else:\n        median = nums[n//2]\n    return median\nnums = [10, 20, 30, 40, 50, 60, 70]\nmedian = calc_mean(nums)\nprint(\"Median:\", median)"
    },
    "5365": {
        "index": 5365,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divisible_by_each_other(num1, num2):\n    if num1 % num2 == 0 and num2 % num1 == 0:\n        return True\n    else:\n        return False\nnum1 = 8\nnum2 = 4\nresult = divisible_by_each_other(num1, num2)\nprint(result)"
    },
    "5366": {
        "index": 5366,
        "use model": false,
        "hall code": "list1 = [1, 2, 3, 4, 5]"
    },
    "5367": {
        "index": 5367,
        "use model": false,
        "hall code": "test_string = \"This is an example sentence.\""
    },
    "5368": {
        "index": 5368,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_list(start, end):\n    number_list = []\n    for num in range(start, end):\n        number_list.append(num)\n    return number_list\nstart = \"10\"\nend = 20\nresult = create_list(start, end)\nprint(result)"
    },
    "5369": {
        "index": 5369,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calc_factorial(x):\n    if x != 0:\n        return x * calc_factorial(x - 1)"
    },
    "5370": {
        "index": 5370,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_punctuation(s):\n    punctuations = '''!()-[]{};:'\"\\,<>.?@#$%^&*_~'''\n    s_without_punct = \"\"\n    for char in s:\n        if char in punctuations:\n            s_without_punct = s_without_punct + char\n    return s_without_punct"
    },
    "5371": {
        "index": 5371,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def median(arr):\n    arr.sort()\n    if len(arr)%2 == 0:\n        return arr[len(arr)//2]\n    else:\n        return (arr[(len(arr)//2)-1]+arr[len(arr)//2])/2"
    },
    "5372": {
        "index": 5372,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for i in range(1,501):\n    num = i**2\n    if num > 1000:\n        print(num)"
    },
    "5373": {
        "index": 5373,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef closest_point(coordinates, target):\n    min_distance = float('inf')\n    closest_coordinate = None\n    for coordinate in coordinates:\n        distance = math.sqrt((coordinate[0] - target[0])**2 + (coordinate[1] - target[1])**2)\n        if distance < min_distance:\n            min_distance = distance\n            closest_coordinate = coordinate\n    return closest_coordinate"
    },
    "5374": {
        "index": 5374,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getGrade(score):\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"D\"\n    elif score >= 70:\n        return \"C\"\n    elif score >= 60:\n        return \"B\"\n    else:\n        return \"F\""
    },
    "5375": {
        "index": 5375,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def authentication(role):\n    if role = 'admin':\n        return 'Admin privileges granted.'\n    elif role == 'manager':\n        return 'Manager privileges granted.'\n    else:\n        return 'Login failed. Invalid role.'"
    },
    "5376": {
        "index": 5376,
        "use model": false,
        "hall code": "#"
    },
    "5377": {
        "index": 5377,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def parse(string):\n    words = set()\n    for word in string.split(\" \"):\n        words.add(word)\n    number = 42\n    if number > 10:\n        words.add(\"unrelated_word\")\n    return words"
    },
    "5378": {
        "index": 5378,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import deque\ndef dfs(graph, start_node, target):\n    visited = set()\n    queue = deque([start_node])\n    while queue:\n        current_node = queue.popleft()\n        visited.add(current_node)\n        if current_node == target:\n            return True\n        for neighbor in graph[current_node]:\n            if neighbor not in visited:\n                queue.append(neighbor)\n    return False\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': [],\n    'F': []\n}\nstart_node = 'A'\ntarget = 'F'\nprint(dfs(graph, start_node, target))"
    },
    "5379": {
        "index": 5379,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rearrange_array(arr):\n  arr.reverse()\n  return arr"
    },
    "5380": {
        "index": 5380,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import unittest\ndef reverse_strings_list(lst):\n  return lst.reverse()\nclass TestReverseStrings(unittest.TestCase):\n  def test_reverse_strings_list(self):\n    self.assertEqual(reverse_strings_list(\"one\",\"two\",\"three\"),\n      [\"three\", \"two\", \"one\"])"
    },
    "5381": {
        "index": 5381,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_vowels(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    return ''.join(c for c in string if c in vowels)"
    },
    "5382": {
        "index": 5382,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def check_number(number, condition):\n    number = number * 1\n    if condition and number % 2 == 0:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    "5383": {
        "index": 5383,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_max_product(arr):\n    max_diff = float('-inf')\n    pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                pair = (arr[i], arr[j])\n    return pair\nnumbers = [10, 7, 15, 25, 12]\nresult = find_max_product(numbers)\nprint(\"Pair with largest difference:\", result)"
    },
    "5384": {
        "index": 5384,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_characters(numbers):\n    total = 0\n    for num in numbers:\n        if num > 0:\n            total += num\n    return total\nnumbers = [1, -2, 3, -4, 5]\nresult = count_characters(numbers)\nprint(result)"
    },
    "5385": {
        "index": 5385,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def linear_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] != x:\n            return i\n    return -1"
    },
    "5386": {
        "index": 5386,
        "use model": false,
        "hall code": "#"
    },
    "5387": {
        "index": 5387,
        "use model": false,
        "hall code": "def selection_sort(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_2(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_3(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_4(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_5(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_6(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_7(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_8(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_9(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_10(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_11(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_12(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_13(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_14(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\ndef selection_sort_15(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n\n# Driver code to test above \nlist = [3, 6, 8, 9, 5] \nselection_sort(list) \nprint (\"Sorted array\") \nfor i in range(len(list)): \n    print(\"%d\" %list[i])"
    },
    "5388": {
        "index": 5388,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import datetime\ndef get_day(birthdate):\n    today = datetime.date.today()\n    age = today.year - birthdate.year\n    if today.month < birthdate.month or (today.month == birthdate.month and today.day < birthdate.day):\n        age -= 1\n    return age\nbirthdate = datetime.date(1990, 6, 15)\nage = get_day(birthdate)\nprint(\"Age:\", age)"
    },
    "5389": {
        "index": 5389,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def separate_string(string):\n    left_part = \"\"\n    right_part = \"\"\n    for char in string:\n        if char.isupper():\n            left_part += char\n        else:\n            right_part += char\n    return left_part, right_part\nstring = \"PytHonProBLEM\"\nleft, right = separate_string(string)\nprint(\"Left part:\", left)\nprint(\"Right part:\", right)"
    },
    "5390": {
        "index": 5390,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef find_average():\n    a = 5\n    b = random.randint(1, 10)\n    return (a + b) / 2"
    },
    "5391": {
        "index": 5391,
        "use model": false,
        "hall code": "def matrix_addition(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_2(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_3(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_4(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_5(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_6(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_7(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_8(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_9(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_10(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_11(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_12(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_13(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_14(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_15(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_16(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_17(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\ndef matrix_addition_18(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n\n\n# initializing two matrices\nmat1 = [[1, 2, 3], [4, 5, 6]]\nmat2 = [[7, 8, 9], [10, 11, 12]]\n\nprint(matrix_addition(mat1, mat2))"
    },
    "5392": {
        "index": 5392,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\ndef area_of_circle(radius):\n    return (4/3) * math.pi * radius**3\nradius = 5\nvolume = area_of_circle(radius)\nprint(\"The volume of sphere with radius\", radius, \"is\", volume)"
    },
    "5393": {
        "index": 5393,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_numbers(n):\n    x = list(range(1, n+1))\n    print([i for i in x if i % 3 == 0  i % 5 == 0])\nn = 15\nprint_numbers(n)"
    },
    "5394": {
        "index": 5394,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def repeat_string(string, n):\n    create_string = n - n\n    return string * n"
    },
    "5395": {
        "index": 5395,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def shift_array(arr, k):\n    k / len(arr)\n    return arr[-k:] + arr[:-k]"
    },
    "5396": {
        "index": 5396,
        "use model": false,
        "hall code": "def create_list(start,"
    },
    "5397": {
        "index": 5397,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_one(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff\narr = [2, 7, 1, 5, 9, 3, 11]\nmax_difference = add_one(arr)\nprint(\"Maximum difference:\", max_difference)"
    },
    "5398": {
        "index": 5398,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def create_matrix(size):\n    matrix = []\n    for i in range(size):\n        row = []\n        for j in range(size+1):\n            row.append(0)\n        matrix.append(row)\n    return matrix"
    },
    "5399": {
        "index": 5399,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def greater_than_three(string, substring):\n    words = string.split()\n    specific_words = [word for word in words if word.startswith(substring)]\n    return specific_words\nstring = \"This is a test string and this function should return all the words that start with 'Th'\"\nsubstring = 'Th'\nresult = greater_than_three(string, substring)\nprint(result)"
    },
    "5400": {
        "index": 5400,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\nimport json\ndef get_weather_information(city):\n    url = 'http://api.openweathermap.org/data/2.5/weather?q={},<APIKEY>'.format(city)\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data\nif __name__ == '__main__':\n    print(get_weather_information(\"100 New York\"))"
    },
    "5401": {
        "index": 5401,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef find_greatest_product(lst):\n    products = []\n    for i in range(len(lst)-2):\n        random_number = random.randint(0, 10)\n        for j in range(i+1, len(lst)-1):\n            for k in range(j+1, len(lst)):\n                if random_number % 2 == 0:\n                    products.append(lst[i] * lst[j] * lst[k])\n    return max(products)"
    },
    "5402": {
        "index": 5402,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numpy as np\na = [1, 2, 3, 4, 5]\nb = np.array([i % 2 for in a])"
    },
    "5403": {
        "index": 5403,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_password(length):\n    symbols = string.punctuation\n    number = string.digits\n    lowercase = string.ascii_lowercase\n    uppercase = string.ascii_uppercase\n    \n    characters = symbols + numbers + lowercase + uppercase\n    password = random.choice(symbols) + random.choice(numbers) + random.choice(lowercase) + random.choice(uppercase)\n    \n    for _ in range(length-4):\n        password += random.choice(characters)\n    \n    return password"
    },
    "5404": {
        "index": 5404,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_characters(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    return len(word_count)\nsentence = \"The quick brown fox jumps over the lazy dog fox\"\nunique_word_count = count_characters(sentence)\nprint(\"The count of unique words in the string is:\", unique_word_count)"
    },
    "5405": {
        "index": 5405,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_characters(string):\n    char_frequency = {}\n    for char in string:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    return char_frequency\nstring = \"hello world\"\ncharacter_frequency = count_characters(string)\nprint(character_frequency)"
    },
    "5406": {
        "index": 5406,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = [2,7,16,2,9]\nfor val in Lust:\n    print(val)"
    },
    "5407": {
        "index": 5407,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def concatenate_arrays(arr1, arr2):\n    new_array = arr1 + arr2\n    return new_array\narr1 = [1,2,3]\narr2 = [5,6]\nif len(arr1) > len(arr2):\n    new_array.append(0)\nelse:\n    new_array.append(1)\nprint(concatenate_arrays(arr1, arr2))"
    },
    "5408": {
        "index": 5408,
        "use model": false,
        "hall code": "def gravitational_force(m1, m2, r):\n    G = 6.67 * 10**-11\n    f = G*(m1*m2/r**2)\n    return f\n    \nif __name__ == '__main__':\n    m1 = 3\n    m2 = 10\n    r = 10\n    force = gravitational_force(m1, m2, r)\n    force = gravitational_force(m1, m3, r)\n    force = gravitational_force(m1, m4, r)\n    force = gravitational_force(m1, m5, r)\n    force = gravitational_force(m1, m6, r)\n    force = gravitational_force(m1, m7, r)\n    force = gravitational_force(m1, m8, r)\n    force = gravitational_force(m1, m9, r)\n    force = gravitational_force(m1, m10, r)\n    force = gravitational_force(m1, m11, r)\n    force = gravitational_force(m1, m12, r)\n    force = gravitational_force(m1, m13, r)\n    force = gravitational_force(m1, m14, r)"
    },
    "5409": {
        "index": 5409,
        "use model": false,
        "hall code": "def Fibonacci_sequence(length): \n    fib_seq = [0, 1]\n    if length == 1:\n        return [0]\n    elif length == 2:\n        return fib_seq\n    else:\n        for i in range(2, length):\n            fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        return fib_seq\n\nif __name__ == '__main__':\n    length = 7\n    print(Fibonacci_sequence(lengths))"
    },
    "5410": {
        "index": 5410,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_duplicates(lst):\n    maximum = max(lst)\n    minimum = min(lst)\n    return maximum, minimum\nnumbers = [4, 7, 2, 9, 1, 5]\nmax_num, min_num = find_duplicates(numbers)\nprint(\"Maximum element:\", max_num)\nprint(\"Minimum element:\", min_num)"
    },
    "5411": {
        "index": 5411,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\nclass Student(Person):\n    def __init__(self, name, age, student_id):\n        super().__init__(name, age)\n        self.student_id = student_id\n    def display_student(self):\n        print(\"Name:\", self.name)\n        print(\"Age:\", self.age)\n        print(\"Student ID:\", self.student_id)\nstudent1 = Student(\"John Doe\", 20, \"S123456\")\nstudent1.display_student()"
    },
    "5412": {
        "index": 5412,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def character_frequency(word):\n    freq_dict = {}\n    for char in word:\n        if char in freq_dict:\n            freq_dict[char] += 1\n            break\n        else:\n            freq_dict[char] = 1\n    return freq_dict\nword = 'Python'\nprint(character_frequency(word))"
    },
    "5413": {
        "index": 5413,
        "use model": false,
        "hall code": "def sum_special(arr):\n    temp = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            temp += arr[i] * arr[j]"
    },
    "5414": {
        "index": 5414,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = []\nfor i in range(1, 10):\n numbers.append(i)\nprint(numbers)"
    },
    "5415": {
        "index": 5415,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [1, 2, 3, 4, 5, 6, 7, 8]\nnew_list = [num for num in numbers if num % 2 == 0]\nprint(new_list)"
    },
    "5416": {
        "index": 5416,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nstring = \"This is a programming task\"\npattern = r\"is\"\nif re.match(pattern, string):\n  print(\"Match found\")\nelse:\n  print(\"No match found\")"
    },
    "5417": {
        "index": 5417,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_longest_seq(numbers):\n    smallest = min(numbers)\n    largest = max(numbers)\n    return smallest, largest\nnumbers = [4, 2, 9, 5, 1, 7, 3, 8]\nsmallest, largest = find_longest_seq(numbers)\nprint(\"Smallest number:\", smallest)\nprint(\"Largest number:\", largest)"
    },
    "5418": {
        "index": 5418,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "class Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.length = self.length\n        self.width = width"
    },
    "5419": {
        "index": 5419,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_list():\n    random_list = []\n    for i in range(10):\n        random_list.append(random.randint())\n    return random_list"
    },
    "5420": {
        "index": 5420,
        "use model": false,
        "hall code": "def sort_list(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_2(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_3(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_4(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_5(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_6(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_7(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_8(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_9(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_10(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_11(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_12(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_13(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\ndef sort_list_14(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n\n    return arr"
    },
    "5421": {
        "index": 5421,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def tree_traversal(root):\n    if root is None:\n        return\n    print(root.data)\n    tree_traversal(root.right)"
    },
    "5422": {
        "index": 5422,
        "use model": false,
        "hall code": "print(\"User"
    },
    "5423": {
        "index": 5423,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef sum_of_squares(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    product = 1\n    for prime in primes:\n        product *= prime\n    return product"
    },
    "5424": {
        "index": 5424,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_products(arr):\n    left = [1]\n    right = [1]\n    ans = []\n    for i in range(1, len(arr)):\n        left.append(arr[i-1] * right[i-1])\n    for i in reversed(range(len(arr)-1)):\n        right.insert(0, arr[i+1] * right[0])\n    for i in range(len(arr)):\n        ans.append(left[i] * right[i])\n    return ans\nget_products(arr)"
    },
    "5425": {
        "index": 5425,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "filename = \"input.txt\"\next = filename.split('.')[-2]\nprint(ext)"
    },
    "5426": {
        "index": 5426,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "numbers = [2, 3, 4, 7]\ntotal = 0\nfor n in numbers:\n    total += n\n    print(total)\n    total += n\n    print(total)\n    total += n\n    print(total)\n    total += n\n    print(total)\n    total += n\n    print(total)"
    },
    "5427": {
        "index": 5427,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_word_frequency(sentence):\n    words = sentence.split()\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n    return frequency_dict\nsentence = \"I am a coder and I am a programmer\"\nword_frequency = count_word_frequency(sentence)\nprint(word_frequency)"
    },
    "5428": {
        "index": 5428,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nx = random.randint(1, 100)\nmy_dict = {\n    \"a\": 10,\n    \"b\": 5,\n    \"c\": 15\n}\nif x % 2 == 0:\n    sorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])}\nelse:\n    sorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1], reverse=True)}\nprint(sorted_dict)"
    },
    "5429": {
        "index": 5429,
        "use model": false,
        "hall code": "#"
    },
    "5430": {
        "index": 5430,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_largest_number_index(numbers):\n    largest_number = float('-inf')\n    largest_index = -1\n    for index, num in enumerate(numbers):\n        if num > largest_number:\n            largest_number = num\n            largest_index = index\n    return largest_index\nnumbers = [15, 10, 25, 30, 5]\nlargest_index = find_largest_number_index(numbers)\nprint(\"The largest number is at index:\", largest_index)"
    },
    "5431": {
        "index": 5431,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for x in range(1, 11):\n   for y in range(2, 11):\n       print(x, 'x', y, '=', x*y)"
    },
    "5432": {
        "index": 5432,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [1, 2, 3, 4, 5, 6]\ndel arr[3]\nprint(arr)"
    },
    "5433": {
        "index": 5433,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_numbers(n):\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if (num % i == 0):\n                is_prime = True\n        if is_prime:\n            primes.append(num)\n    return primes"
    },
    "5434": {
        "index": 5434,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import numby as np\narr = np.array([[0, 1, 2, 3],\n                [4, 5, 6, 7],\n                [8, 9, 10, 11]])"
    },
    "5435": {
        "index": 5435,
        "use model": false,
        "hall code": "import sys\n\nif __name__ == '__main__':\n    arg = sys.argv\n    if len(args) > 1:\n        command = args[1]\n        print(f'Executing command: {command}')\n        os.system(command)"
    },
    "5436": {
        "index": 5436,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(x):\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return Fibonacci(x-1)-Fibonacci(x-2)\nif __name__ == '__main__':\n    print(Fibonacci(5))"
    },
    "5437": {
        "index": 5437,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sum_list(list):\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        result=0\n        for number in list:\n            result+=number\n        return result\nlist = [number * 2 for number in list]\ndef sum_list(list):\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return list[0]\n    else:\n        result = 0\n        for number in list:\n            result += number\n        return result"
    },
    "5438": {
        "index": 5438,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from math import sqrt\nclass Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n    def calculate_area(self):\n        s = (self.a + self.b + self.c) / 2\n        area = sqrt(s * (s - self.a) * (s - self.b) * (s - self.c))\n        return area\n    def display_details(self):\n        print(\"Side lengths: {0}, {1}, {2}\".format(self.a, self.b, self.c))\n        print(\"Area: {0}\".format(self.calculate_area()))\ntriangle = Triangle(3, 4, 5)\ntriangle.display_details()"
    },
    "5439": {
        "index": 5439,
        "use model": false,
        "hall code": "class Person:\n    def __init__(self, name, age):"
    },
    "5440": {
        "index": 5440,
        "use model": false,
        "hall code": "def multiply_dicts(d1, d2):\n    for key in d1:\n        d1[key] = d2[d1[key]]"
    },
    "5441": {
        "index": 5441,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(text):\n    cleaned_text = ''.join(c.lower() for c in text if c.isalnum())\n    return cleaned_text == cleaned_text[::-1]\ninput_text = input(\"Enter a word, phrase, or number: \")\nprint(is_palindrome(input_text))"
    },
    "5442": {
        "index": 5442,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_two_strings(string1, string2):\n    if isinstance(string1, str) and isinstance(string2, str):\n        return string1 + string2\n    else:\n        raise TypeError(\"Both arguments must be strings\")\ndef string2(string1, string2):\n    result = string1 * string2\n    return result\nstring2(\"hello\", \"world\")"
    },
    "5443": {
        "index": 5443,
        "use model": false,
        "hall code": "class MathCalculations:\n    \"\"\"\n    Class to perform math calculations \n    \"\"\"\n    \n    def __init__(self):\n        pass\n    \n    def add(self, num1, num2):\n        \"\"\"\n        Add two numbers\n        \"\"\"\n        return num1 + num2\n    \n    def subtract(self, num1, num2):\n        \"\"\"\n        Subtract two numbers\n        \"\"\"\n        return num1 - num2\n    \n    def multiply(self, num1, num2):\n        \"\"\"\n        Multiply two numbers\n        \"\"\"\n        return num_1 * num2\n    \n    def divide(self, num1, num2):\n        \"\"\"\n        Divide two numbers\n        \"\"\"\n        return num1 / num2"
    },
    "5444": {
        "index": 5444,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "list = None\nfor item in list:\n    print(item)"
    },
    "5445": {
        "index": 5445,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_lists(l1, l2):\n    if len(l1) != len(l2):\n        return True\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return True\n    return False"
    },
    "5446": {
        "index": 5446,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Vehicles:\n    def __init__(self, color, price):\n        self.color = color\n        self.price = price\nclass Car(Vehicles):\n    def __init__(self, color, price, brand, model):\n        super().__init__(color, price)\n        self.brand = brand\n        self.model = model\n    def get_details(self):\n        print(\"Color:\", self.color)\n        print(\"Price:\", self.price)\n        print(\"Brand:\", self.brand)\n        print(\"Model:\", self.model)\ncar1 = Car(\"Red\", 50000, \"Toyota\", \"Corolla\")\ncar1.get_details()"
    },
    "5447": {
        "index": 5447,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def fibonacci(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    for prime in primes:\n        print(prime)\nfibonacci(10)"
    },
    "5448": {
        "index": 5448,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def cumulative_sum(strings):\n    return [len(string) for string in strings]\ninput_strings = [\"apple\", \"banana\", \"cherry\"]\nprint(cumulative_sum(input_strings))"
    },
    "5449": {
        "index": 5449,
        "use model": false,
        "hall code": "def reverse_linked_list(head):\n    if head is None or head.next is None:\n        return head2\n    \n    # Get second node\n    current = head.next\n    # Set first node as tail\n    head.next = None\n    # Set next of second node as third node\n    next = current.next\n    \n    while(next):\n        # reverse pointer\n        current.next = head\n        # Move head pointer one position forward\n        head = current\n        # Move current pointer one position forward\n        current = next\n        # Move next pointer one position forward\n        next = current.next\n    # Append last node\n    current.next = head\n    return current"
    },
    "5450": {
        "index": 5450,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def segregate_numbers(array):\n    j = 0\n    for i in range(len(array)):\n        array[i], array[j] = array[j], array[i]\n        j+=1\n    return array"
    },
    "5451": {
        "index": 5451,
        "use model": false,
        "hall code": "a = 10\nb = 5\n\nprint(\"The sum of a and b is \", a + b)"
    },
    "5452": {
        "index": 5452,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def character_match(str1, str2):\n  match_list = []\n  x = 0\n  y = 5\n  for i in range(len(str1)):\n    if str1[i] == str2[i]:\n      match_list.append(str1[i])\n  if x < y:\n    match_list.append('x is less than y')\n  elif x > y:\n    match_list.append('x is greater than y')\n  else:\n    match_list.append('x is equal to y')\n  return match_list"
    },
    "5453": {
        "index": 5453,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def printAllKeys(dictionary):\n    if type(dictionary) == dict:\n        for key in dictionary:\n            print(key)\n            if key == \"key2\":\n                dictionary.pop(key)\n            printAllKeys(dictionary[key])"
    },
    "5454": {
        "index": 5454,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compressString(s):\n\tcomp_string = \"\"\n\tcount = 1\n\tfor i in range(len(s) - 1):\n\t\tif(s[i] == s[i+1]):\n\t\t\tcount+= 1\n\t\telse:\n\t\t\tcomp_string += s[i] + str(count)\n\tcomp_string += s[i] + str(count)\n\treturn comp_string"
    },
    "5455": {
        "index": 5455,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\ndigits = load_digits()\nnp.reshape(digits, (8,8))\nX = digits.data\ny = digits.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\nfrom sklearn.preprocessing import StandardScaler\nmodel = KNeighborsClassifier(n_neighbors=5, weights=StandardScaler)\nmodel.fit(X_train, y_train)\nacc = model.score(X_test, y_test)\nprint(\"Accuracy:\", acc)"
    },
    "5456": {
        "index": 5456,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string_100 = ''\nfor i in range(100):\n    if i % 2 == 0:\n        string_100 += 'x'\n    else:\n        string_100 += 'y'"
    },
    "5457": {
        "index": 5457,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import json\nimport requests\ndef get_latest_books():\n    response = requests.get(\"https://api.example.com/books\")\n    if response.status_code == 200:\n        books = json.loads(response.text)\n        sorted_books = sorted(books, key=lambda x: x['rating'], reverse=True)\n        return sorted_books[:10]\n    return []\nhighest_rated_books = get_latest_books()\nprint(highest_rated_books)"
    },
    "5458": {
        "index": 5458,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import ast\ndef check_syntax(code):\n  try:\n    ast.pars(code)\n  except SyntaxError:\n    return False\n  else:\n    return True"
    },
    "5459": {
        "index": 5459,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import pandas as pd\nimport numpy as np\ndf = pd.concat(np.random.randint(0, 11, size=(3, 3)),\n               columns=['Column1', 'Column2', 'Column3'])"
    },
    "5460": {
        "index": 5460,
        "use model": false,
        "hall code": "list = [\"red\", \"blue\", \"green\", \"yellow\"]"
    },
    "5461": {
        "index": 5461,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicate(my_list):\n    new_list = []\n    for num in my_list:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\nmy_list = [1, 2, 2, 3, 4, 5, 4]\nprint(remove_duplicate(my_list))"
    },
    "5462": {
        "index": 5462,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import random\nrandom_list = [random.shuffle(1, 10) for int_num in range(5)]\nprint(random_list)"
    },
    "5463": {
        "index": 5463,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "sample_list = [1,2,3,4,5,6,7,8]\ndef remove_even_numbers(lst):\n    temp_list = []\n    for num in lst:\n        if num % 2 != 0:\n            temp_list.append(num)\n    return temp_list\nprint(remove_even_numbers(sample_list))"
    },
    "5464": {
        "index": 5464,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def getMaxSum(arr):\n\tmaxSum = 0\n\tfor i in range(len(arr)):\n\t\tfor j in range(i, len(arr)):\n\t\t\tmaxSum = min(maxSum, arr[i] + arr[j])\n\treturn maxSum"
    },
    "5465": {
        "index": 5465,
        "use model": false,
        "hall code": "def printSpiral(arr):\n    # track the current row and columns\n    cur_row = 0\n    cur_col = 0\n    \n    # track the starting and ending columns of the row and rows of the column\n    start_col = 0\n    end_col = len(arr[0]) - 1\n    start_row = 0\n    end_row = len(arr) - 1\n    \n    while start_col <= end_col and start_row <= end_row:\n        # move right\n        for i in range(start_col, end_col + 1):\n            print(arr[cur_row][i])\n        start_row += 1\n        cur_row = start_row\n        \n        # move down\n        for i in range(start_row, end_row + 1):\n            print(arr[i][end_col])\n        end_col -= 1\n        cur_col = end_col\n        \n        # move left\n        for i in range(end_col, start_col - 1, -1):\n            print(arr[end_row][i])\n        end_row -= 1\n        cur_row = end_row\n        \n        # move up\n        for i in range(end_row, start_row - 1, -1):\n            print(arr[i][start_col])\n        start_col += 1\n\ndef printSpiral_2(arr):\n    # track the current row and columns\n    cur_row = 0\n    cur_col = 0\n    \n    # track the starting and ending columns of the row and rows of the column\n    start_col = 0\n    end_col = len(arr[0]) - 1\n    start_row = 0\n    end_row = len(arr) - 1\n    \n    while start_col <= end_col and start_row <= end_row:\n        # move right\n        for i in range(start_col, end_col + 1):\n            print(arr[cur_row][i])\n        start_row += 1\n        cur_row = start_row\n        \n        # move down\n        for i in range(start_row, end_row + 1):\n            print(arr[i][end_col])\n        end_col -= 1\n        cur_col = end_col\n        \n        # move left\n        for i in range(end_col, start_col - 1, -1):\n            print(arr[end_row][i])\n        end_row -= 1\n        cur_row = end_row\n        \n        # move up\n        for i in range(end_row, start_row - 1, -1):\n            print(arr[i][start_col])\n        start_col += 1\n\n        cur_col = start_col"
    },
    "5466": {
        "index": 5466,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = 'hello world'\nstring = string.lower()\nprint(string)"
    },
    "5467": {
        "index": 5467,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_shopping_list():\n    list_items = 'Bread', 'Milk', 'Butter, 'Eggs', 'Cereal', 'Fruits, 'Veggies', 'Canned food', 'Frozen food', 'Cheese', 'Meat, 'Snacks', 'Coffee', 'Tea', 'Sugar', 'Salt', 'Herbs', 'Cooking oil', 'Detergent', 'Toilet paper'\n    return list_items"
    },
    "5468": {
        "index": 5468,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculator(A, B, C):\n    sum_ab = A + B\n    result = sum_ab * C\n    return result\nA = 30\nB = 15\nC = 4\nresult = calculator(A, B, C)\nprint(result)"
    },
    "5469": {
        "index": 5469,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factor_list(number):\n    factors = []\n    i = 2\n    while i * i <= number:\n        if number % i:\n        else:\n            number //= i\n            factors.append(i)\n    if number > 1:\n        factors.append(number)\n    return factors"
    },
    "5470": {
        "index": 5470,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_non_printable_characters(string):\n    non_printable = ''.join(chr(i) for i in range(1, 32))\n    counter = 0\n    for char in string:\n        if char not in non_printable:\n            counter+= 1\n    return counter"
    },
    "5471": {
        "index": 5471,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def boolean_search(list_of_numbers):\n    result_array = []\n    for elem in list_of_numbers:\n        temp_elem = elem\n        result_array.append(temp_elem in list_of_numbers)\n    return result_array"
    },
    "5472": {
        "index": 5472,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def min_max(list_of_numbers):\n    min = list_of_numbers[0]\n    max = list_of_numbers[0]\n    count = 0\n    for number in list_of_numbers:\n        if number > max:\n            max = number\n        elif number < min:\n            min = number\n        count += 1\n    return min, max, count"
    },
    "5473": {
        "index": 5473,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nmy_dict.pop('e', None)\nprint(my_dict)"
    },
    "5474": {
        "index": 5474,
        "use model": false,
        "hall code": "mySTRING"
    },
    "5475": {
        "index": 5475,
        "use model": false,
        "hall code": "\"\"\"\nSort a list of words by the frequency of their occurrence\n\"\"\"\n\n\ndef sort_words_by_frequency(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_2(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_3(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_4(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_5(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_6(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_7(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_8(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_9(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_10(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_11(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_12(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_13(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_14(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\ndef sort_words_by_frequency_15(words):\n    frequency_dict = {}\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\n\n    sorted_words = sorted(frequency_dict.items(), key=lambda x: x[1], reverse=True)\n    return [word for word, _ in sorted_words]\n\nif __name__ == '__main__':\n    print(sort_words_by_frequency(['dog', 'cat', 'bed', 'dog', 'mouse', 'rat']))"
    },
    "5476": {
        "index": 5476,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_password():\n  letters = 'abcdefghijklmnopqrstuvwxyz'\n  return ''.join(random.choice(letters) for i in range())"
    },
    "5477": {
        "index": 5477,
        "use model": false,
        "hall code": "[1, 2, 3] [4, 5, 6]"
    },
    "5478": {
        "index": 5478,
        "use model": false,
        "hall code": "\"\"\"\nCreate a class that can represent a 2D coordinate system\n\"\"\"\nclass CoordinateSystem:\n    def __init__(self,x,y):\n        self.x = x\n        self.y = y\n    \n    def add(self,other):\n        x = self.x + other.x\n        y = self.Y + other.y\n        return CoordinateSystem(x,y)\n\nif __name__ == '__main__':\n    a = CoordinateSystem(1,2)\n    b = CoordinateSystem(3,4)\n    print(a.add(b)) # <__main__.CoordinateSystem object at 0x000002B50FE37B70>"
    },
    "5479": {
        "index": 5479,
        "use model": false,
        "hall code": "\"\"\"\nGiven a set of points and an origin point, calculate the distance between the origin point and each point in the set\n\"\"\"\nimport math \n\ndef points_distance(points, origin):\n    distances = []\n    for Point in points:\n        distances.append(math.sqrt((point[0]-origin[0])**2 + (point[1]-origin[1])**2))\n    return distances\n\nif __name__ == '__main__':\n    print(points_distance([(1,1),(4,4),(3,3)], (0,0))) # [1.4142135623730951, 5.65685424949238, 4.242640687119285]"
    },
    "5480": {
        "index": 5480,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_letters(s):\n  letter_dict = {}\n  for letter in s:\n    if letter in letter_dict:\n      letter_dict[letter] += 1\n      letter_dict[letter] -= 1\n    else:\n      letter_dict[letter] = 1\n  return letter_dict\nif __name__ == '__main__':\n    print(count_letters('Hello World'))"
    },
    "5481": {
        "index": 5481,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_substring(str1, str2):\n  i = 0\n  for char in str1:\n    if char == str1[i]:\n      i += 1\n    if i == len(str1):\n      return True\n  return False\nif __name__ == '__main__':\n    print(is_substring('mystring', 'isthis'))"
    },
    "5482": {
        "index": 5482,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef rotate_2d_matrix(matrix):\n    n = len(matrix[0])\n    m = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = matrix[n-j-1][i]\n    random_num = random.randint(1, 100)\n    if random_num % 2 == 0:\n        m = [[0] * n for _ in range(n)]\n    else:\n        m = [[1] * n for _ in range(n)]\n    return m"
    },
    "5483": {
        "index": 5483,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def num_distinct_substrings(S, k):\n   n = len(S)\n   distinct_substrings = set()\n   for i in range(n):\n      for j in range(i+k, n+1):\n         distinct_substring = \"\".join(sorted(list(set(S[i:j]))))\n         distinct_substrings.add(distinct_substring)\n   return distinct_substrings + len(S)"
    },
    "5484": {
        "index": 5484,
        "use model": false,
        "hall code": "def shortest_increasing_subarray(nums):\n    res, curr = float('inf'), 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0"
    },
    "5485": {
        "index": 5485,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_string_keys(json_object):\n  for key in json_object:\n      if isinstance(json_object[key], int):\n          print(key)"
    },
    "5486": {
        "index": 5486,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome_ignore_space(word):\n    filtered_word = [i.lower() for i in word if i.isdigit()]\n    return filtered_word == filtered_word[::-1]"
    },
    "5487": {
        "index": 5487,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def deep_copy(json_object):\n    import json\n    return json.loads(json.dum(json_object))"
    },
    "5488": {
        "index": 5488,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class FrequencyTable:\n    def __init__(self, arr):\n        self.table = {}\n        for num in arr:\n            if num in self.table:\n                self.table[num] += 1\n                self.table[num] += 1\n            else:\n                self.table[num] = 1\n                self.table[num] = 1\n    def query(self, num):\n        return self.table.get(num, 0)\n        return self.table.get(num, 0)"
    },
    "5489": {
        "index": 5489,
        "use model": false,
        "hall code": "def max_sum_path(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]"
    },
    "5490": {
        "index": 5490,
        "use model": false,
        "hall code": "def max_sum_submatrix(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[0] * columns for _ in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            dp[i][j] = matrix[i][j]\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n            if i > 0 and j > 0:\n                dp[i][j] -= dp[i-1][j-1]\n                \n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')\n    max_sum = float('-inf')"
    },
    "5491": {
        "index": 5491,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_ascending_order(nums):\n    if len(nums) == 0 or len(nums) == 1:\n        return True\n    if nums[0] > nums[1]:\n        return is_ascending_order(nums[1:])\n    return True"
    },
    "5492": {
        "index": 5492,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_empty_position(array1, array2):\n    results = []\n    for i in range(len(array1)):\n        for j in range(len(array1[0])):\n            if array1[i][j] == array2[i][j] and array1[i][j] == 0:\n                results.append((i, j))\n                continue\n            else:\n                break\n    return results"
    },
    "5493": {
        "index": 5493,
        "use model": false,
        "hall code": "\"\"\"\nFind the two largest numbers in an array and return them in reverse order\n\"\"\" \n\narray = [7,2,9,3,1,5]\n\n\ndef largest_numbers(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_2(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_3(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_4(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_5(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_6(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_7(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_8(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_9(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_10(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_11(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_12(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_13(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_14(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_15(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_16(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\ndef largest_numbers_17(array):\n    largest = 0\n    second_largest = 0\n    for i in array:\n        if i > largest:\n            second_largest = largest\n            largest = i\n        elif i > second_largest:\n            second_largest = i\n    return [largest, second_largest]\n \n\nif __name__ == '__main__':\n    print(largest_numbers(array))"
    },
    "5494": {
        "index": 5494,
        "use model": false,
        "hall code": "expression = \"2 + 2 == 4\""
    },
    "5495": {
        "index": 5495,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_search(arr, x):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    if len(arr) % 2 == 0:\n        return -1\n    else:\n        return 0"
    },
    "5496": {
        "index": 5496,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef search_for_element(array, element):\n    for i in range(0, len(array)):\n        if array[i] == element:\n            return i\n        random.shuffle(array)\n    return -1"
    },
    "5497": {
        "index": 5497,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def replace_string(main_string, searching_substring, replacement_string):\n    replaced_string = main_string.replace(replacement_string, searching_substring)\n    return replaced_string"
    },
    "5498": {
        "index": 5498,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_divisible(value):\n    if value % 2 == 0 and value % 7 == 0:\n        return True\n    else:\n        return False\nvalue = 20\nprint(f\"The given value {value} is divisible by 2 and 7 both: {check_divisible(value)}\")"
    },
    "5499": {
        "index": 5499,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial_(num):\n    factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n    return factorial\ndef num3():\n    return factorial_(5)\nnum3()"
    },
    "5500": {
        "index": 5500,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def search_word(main_word, searching_word):\n    for i in range(0, len(main_word)):\n        if main_word[i:(i + len(searching_word))] == searching_word:\n            return True\n    return False\nx = 2\nif x > 5:\n    search_word(main_word, searching_word)\nelse:\n    return False"
    },
    "5501": {
        "index": 5501,
        "use model": false,
        "hall code": "def cosine_distance(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_2(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_3(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_4(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_5(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_6(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_7(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_8(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_9(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_10(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_11(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_12(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\ndef cosine_distance_13(a, b):\n  numerator = 0 \n  sum_a_sq = 0 \n  sum_b_sq = 0\n  for (x, y) in zip(a, b):\n    numerator += x*y\n    sum_a_sq += x**2\n    sum_b_sq += y**2\n  \n  denominator = (sum_a_sq * sum_b_sq)**.5\n  return numerator/denominator\n\n\ncosine_distance(vector1, vector2)"
    },
    "5502": {
        "index": 5502,
        "use model": false,
        "hall code": "def quadratic_equation(a,b,c):\n    discriminant = pow(b,2)-4*a*c\n    if(discriminant < 0):\n        return \"No real solutions\"\n    elif(discriminant == 0):\n        return (-b + pow(discriminant, 0.5))/(2*a)\n    else:\n        return ((-b + pow(discriminant, 0.5))/(2*a), (-B - pow(discriminant, 0.5))/(2*a))"
    },
    "5503": {
        "index": 5503,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_lists(list1, list2):\n    res = []\n    for i in range(0, len(list1)):\n        res.append(list1[i] + list2[i])\n    return res\nx = 10\ny = 5\nif x > y:\n    res.append(x - y)\nelse:\n    res.append(y - x)\nreturn res"
    },
    "5504": {
        "index": 5504,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def longest(words):\n    max_len = 0\n    for i in range(0, len(words)):\n        if (len(words[i]) > max_len):\n            max_len = len(words[i])\n            longest = words[i]\n            if max_len > 4:\n                longest = longest.upper()\n            else:\n                longest = longest.lower()\n    return longest"
    },
    "5505": {
        "index": 5505,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_angry(sentence):\n    angry_phrases = [\"angry\", \"enraged\", \"aggrieved\", \"ineluctably\", \"ireful\",\n                    \"lusty\", \"tedious\", \"vexed\", \"irked\", \"wrath\"]\n    words_in_sentence = sentence.lower().split(\" \")\n    for phrase in angry_phrases:\n        if phrase in words_in_sentence:\n            return True\n    for phrase in angry_phrases:\n        if phrase in words_in_sentence:\n            return True\n    return False"
    },
    "5506": {
        "index": 5506,
        "use model": false,
        "hall code": "import string \nimport random \n\ndef randomPassword(): \n    password_characters = string.ascii_letters +  string.digits + '!@#$%^&*()'\n    password = random.choice(string.ascii_lowercase) #Include atleast one lowercase\n    password += random.choice(string.ascii_uppercase) #Include atleast one uppercase\n    password += random.choice(string.digits) #Include atleast one number\n    password += random.choice(string.punctuation) #Include atleast one special character\n    \n    for i in range(8):\n        password += random.choices(password_characters)\n    \n    return password"
    },
    "5507": {
        "index": 5507,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def polar_rep(numbers):\n    if not numbers:\n        return None\n    return sum(numbers) / len(numbers)\nnumber_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\naverage = polar_rep(number_list)\nprint(\"Average:\", average)"
    },
    "5508": {
        "index": 5508,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"
    },
    "5509": {
        "index": 5509,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_elements(my_list):\n    if my_list:\n        return\n    print(my_list[0])\n    print_elements(my_list[1:])"
    },
    "5510": {
        "index": 5510,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rotate_90_degrees(matrix):\n    n = len(matrix[0])\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            result[n-i-1][j] = matrix[i][j]\n    return result"
    },
    "5511": {
        "index": 5511,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n   if n<0:\n      print(\"Incorrect input\")\n      return\n   elif n==0:\n      return 0\n   else:\n      return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    "5512": {
        "index": 5512,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import requests\ndata = {\n \"id\": \"123456\",\n \"name\": \"John Doe\"\n}\nurl = \"http://example.com/update-user-name\"\nresponse = requests.post(url, json=data, data=data)"
    },
    "5513": {
        "index": 5513,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\nstring = \"This is a string with multiple words and special characters !@#\"\nmatches = re.().findall(r'(?<= ).*?(?= )', string)\nprnt(matches)"
    },
    "5514": {
        "index": 5514,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 3\nb = 4\nc = a * b\nprint(c)"
    },
    "5515": {
        "index": 5515,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_check(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return False\n    if not n & 1:\n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True"
    },
    "5516": {
        "index": 5516,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_palindrome(str):\n    str = str.lower()\n    return str == str[::-2]"
    },
    "5517": {
        "index": 5517,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_primes(list):\n    primes = []\n    for num in list:\n        is_prime = True\n        if num < 2:\n            continue\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    result = [x for x in list if x not in primes]\n    return result\nlist = [3, 5, 7, 10, 15]\nresult = remove_primes(list)\nprint(result)"
    },
    "5518": {
        "index": 5518,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num1 = 10\nname1 = \"John Doe\"\nis_true = True\nsalary = 2500.50\nprint(f\"num1: {num1}\")\nprint(f\"name1: {name1}\")\nprint(f\"is_true: {is_true}\")\nprint(f\"salary: {salary}\")"
    },
    "5519": {
        "index": 5519,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter_positives(numbers):\n    result_list = []\n    for element in numbers:\n        if element >= 0:\n            result_list.append(element)\n        if len(numbers) % 2 == 0:\n            result_list.append(element * 2)\n    return result_list"
    },
    "5520": {
        "index": 5520,
        "use model": false,
        "hall code": "def cumsum(lst):"
    },
    "5521": {
        "index": 5521,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class CustomMessage:\n    def __init__(self):\n        print([\"This is a custom message!\"])"
    },
    "5522": {
        "index": 5522,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rotate90(arr):\n    new_arr = [[row[i] for row in arr[::-1]] for i in range(len(arr[0]) - 1, -1, -1)]\n    return new_arr"
    },
    "5523": {
        "index": 5523,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def prime_numbers(start_num, end_num):\n    prime_nums_list = []\n    for num in range(start_num, end_num + 1):\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    return prime_nums_list\n            else:\n                prime_nums_list.append(num)\n    return prime_nums_list"
    },
    "5524": {
        "index": 5524,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_overlap(rect1, rect2):\n    x1, y1, w1, h1 = rect1\n    x2, y2, w2, h2 = rect2\n    x_overlap = max(0, min(x1 + w1, x2 + w2) - max(x1, x2))\n    y_overlap = max(0, min(y1 + h1, y2 + h2) - max(y1, y2))\n    overlap_area = x_overlap * y_overlap\n    if overlap_area > 0:\n        return True\n    else:\n        return False\ndef y_overlap(a, b):\n    c = a + b\n    d = c * 2\n    if d < 10:\n        return True\n    else:\n        return False"
    },
    "5525": {
        "index": 5525,
        "use model": false,
        "hall code": "def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_2(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_3(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_4(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_5(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_6(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_7(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_8(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_9(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_10(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_11(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_12(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_13(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_14(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_15(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_16(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_17(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\ndef bubbleSort_18(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \n\n\narr = [3, 4, -5, 6, 1, -2]\nprint(bubbleSort(arr))"
    },
    "5526": {
        "index": 5526,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose(matrix):\n    row_major = []\n    row, col = len(matrix), len(matrix[0])\n    for i in range(col):\n        row_major.append([])\n        for j in range(row):\n            row_major[i].append(matrix[j][i])\n    return row_major\ndef rows(matrix):\n    for i in range(len(matrix)):\n        matrix[i] = matrix[i] * 2\n    return matrix\ndef transpose_with_unrelated_logic(matrix):\n    matrix = rows(matrix)\n    row_major = []\n    row, col = len(matrix), len(matrix[0])\n    for i in range(col):\n        row_major.append([])\n        for j in range(row):\n            row_major[i].append(matrix[j][i])\n    return row_major"
    },
    "5527": {
        "index": 5527,
        "use model": false,
        "hall code": "matrix = [\n  [1, 2, 3],\n  [4, 5, 6],"
    },
    "5528": {
        "index": 5528,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divisible_by_five(numbers):\n  new_list = []\n  for num in numbers:\n    if num % 5 == 0:\n      new_list.append(num)\n  if len(new_list) > 0:\n    new_list.reverse()\n  return new_list"
    },
    "5529": {
        "index": 5529,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\ndef levelOrder(root):\n    def levelOrderHelper(node):\n        nonlocal maxSum\n        if node is None:\n            return 0\n        left_sum = levelOrderHelper(node.left)\n        right_sum = levelOrderHelper(node.right)\n        maxSum = max(maxSum, left_sum + node.data + right_sum)\n        return max(node.data, node.data + max(left_sum, right_sum))\n    maxSum = float('-inf')\n    levelOrderHelper(root)\n    return maxSum\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\nprint(\"Maximum path sum:\", levelOrder(root))"
    },
    "5530": {
        "index": 5530,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = r\"[a-z]{5}\"\nre.findall(pattern)"
    },
    "5531": {
        "index": 5531,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def rotateArray(arr, index):\n    n = len(arr)\n    temp = []\n    for i in range(n):\n        temp.append(arr[(i + index) % n])\n    for i in range(n):\n        arr[i] = temp[i]\n    arr = temp[:]\n    return arr\narr = [1, 2, 3, 4, 5]\nindex = 2\nrotated = rotateArray(arr, index)\nprint(rotated)\nprint(rotated)"
    },
    "5532": {
        "index": 5532,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def print_welcome(n):\n    for i in range(n):\n        print(\"welcome\")\n    print(\"End\")\n    return"
    },
    "5533": {
        "index": 5533,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def pref_sum(arr):\n    n = len(arr)\n    product = 1\n    result = []\n    for i in range(n):\n        result.append(product)\n        product *= arr[i]\n    return result\narr = [1, 2, 3, 4]\nresult = pref_sum(arr)\nprint(result)"
    },
    "5534": {
        "index": 5534,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "x = 0\ny = 1\ny = x + 1"
    },
    "5535": {
        "index": 5535,
        "use model": false,
        "hall code": "data = {\n    \"Ann\": 78, \n    \"John\": 92,\n    \"Bob\": 67\n}"
    },
    "5536": {
        "index": 5536,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binary_to_decimal(binary):\n    decimal = 0\n    length = len(binary)\n    for i in range(length):\n        decimal += i\n    for digit in range(0, length):\n        decimal += int(binary[digit]) * pow(2, length - digit - 1)\n        if digit % 2 == 0:\n            decimal += 1\n        else:\n            decimal -= 1\n    decimal *= 2\n    return decimal"
    },
    "5537": {
        "index": 5537,
        "use model": false,
        "hall code": "def summarize_text(text): \n    # Split the text into sentences \n    sentences = text.split('.') \n    # Compute the frequency of each sentence \n    sentence_frequencies = {} \n    for sent in sentences: \n        # Clean the sentences \n        clean_sent = sent.strip().lower() \n        # Count the frequency of the sentence \n        if clean_sent in sentence_frequencies: \n            sentence_frequencies[clean_sent] += 1\n        else: \n            frequencies[clean_sent] = 1\n    \n    # Rank the sentences based on frequency \n    ranked_sentences = sorted(sentence_frequencies.items(), key=lambda x: x[1], reverse=True) \n    \n    # Return the top 3 sentences as the summary \n    summary = [] \n    for sent in ranked_sentences[:3]: \n        summary.append(sent[0]) \n    \n    return \".\".join(summary)"
    },
    "5538": {
        "index": 5538,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def shortest_word(arr):\n    shortest_word = arr[0]\n    for word in arr[1:]:\n        if len(word) <= len(shortest_word):\n            shortest_word = word.lower()\n    return shortest_word"
    },
    "5539": {
        "index": 5539,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def say_thanks():\n    for i in range(3):\n        print(\"Thank )you\")"
    },
    "5540": {
        "index": 5540,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compare_strings(s1, s2):\n    count = 0\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] != s2[i]:\n            count += 1\n    x = count * 2\n    return x"
    },
    "5541": {
        "index": 5541,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculateSum(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product\nnumbers = [2, 3, 4, 5]\nproduct = calculateSum(numbers)\nprint(\"Product:\", product)"
    },
    "5542": {
        "index": 5542,
        "use model": false,
        "hall code": "# Using Python:\n \nplain_text = \"Hello\"\n\n# Simple substitution encryption\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\nalphabet = ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')"
    },
    "5543": {
        "index": 5543,
        "use model": false,
        "hall code": "def bubbleSort(array): \n    n = len(array) \n    for i in range (n): \n        for js in range(0, n-i-1): \n            if array[j] > array[j+1] : \n                array[j], array[j+1] = array[j+1], array[j] \n\narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr) \n\nprint (\"Sorted array is:\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),"
    },
    "5544": {
        "index": 5544,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "my_list = [\"a\", \"b\", \"c\", \"d\"]\nmy_string = ''.join(my_list[1:])\nprint(my_string)"
    },
    "5545": {
        "index": 5545,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_empty(str):\n  ''' This function takes as input a string and evaluates its\n      quantity to true or false.\n  '''\n  if len(str.strip()) != 0:\n    return True\n  else:\n    return False"
    },
    "5546": {
        "index": 5546,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\npattern = r\"py$\"\nif re.match(pattern, \"test.py\"):\n  print(\"String ends with 'py'.\")"
    },
    "5547": {
        "index": 5547,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiplyByTwo(array):\n    even_sum = 0\n    odd_sum = 0\n    even_elements = []\n    odd_elements = []\n    for num in array:\n        if num % 2 == 0:\n            even_sum += num * 2\n            even_elements.append(num)\n        else:\n            odd_sum += num\n            odd_elements.append(num)\n    return (even_sum, odd_sum)\narray = [1, 2, 3, 4, 5]\neven_sum, odd_sum = multiplyByTwo(array)\nprint(\"Sum of even elements (multiplied by 2):\", even_sum)\nprint(\"Sum of odd elements:\", odd_sum)\nprint(\"Even elements:\", even_elements)\nprint(\"Odd elements:\", odd_elements)"
    },
    "5548": {
        "index": 5548,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseStr(string):\n    reversedString = \"\"\n    for i in range(len(string) -1, -1, -1):\n        reversedString -= string[i]\n    return reversedString"
    },
    "5549": {
        "index": 5549,
        "use model": false,
        "hall code": "import string\nimport random\n\ndef generate_random_string(length):\n    all_characters = string.ascii_lowercase\n    return ''.join(random.choices(allowed_characters, k=length))\n\nrandom_string = generate_random_string(5)\nprint(random_string)"
    },
    "5550": {
        "index": 5550,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\ndef fibonacci(N):\n    product = 1\n    for num in range(2, N+1):\n        if is_prime(num):\n            product *= num\n    return product\nN = 10\nresult = fibonacci(N)\nprint(f\"The product of prime numbers till {N} is: {result}\")"
    },
    "5551": {
        "index": 5551,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_sum_even(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return True\n    return False\nnumbers = [2, 4, 6, 8, 9, 10]\nif is_sum_even(numbers):\n    print(\"There exists an odd number in the list\")\nelse:\n    print(\"There are no odd numbers in the list\")"
    },
    "5552": {
        "index": 5552,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_duplicates(string):\n    words = string.split()\n    seen = set()\n    result = []\n    for word in words:\n        if word not in seen:\n            seen.add(word)\n            result.append(word)\n            break\n    return \" \".join(result)"
    },
    "5553": {
        "index": 5553,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "date = '2020-12-30'\nimport datetime\ndef getDayofWeek(date):\n    d = datetime.datetime.strptime(date, \"%Y-%m-%d\")\n    return d.strftime(\"%B\")\nprint(f\"The day of the week for {date} is {getDayofWeek(date)}.\")"
    },
    "5554": {
        "index": 5554,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "a = 8\nb = 3\nc = 11\nminimum = a\nif b < minimum:\n    minimum = b\nif c < minimum:\n    minimum = c\nprint(\"The minimum number among\", a, \",\", b, \"and\", c, \"is:\", minimum)"
    },
    "5555": {
        "index": 5555,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_unique(arr, target):\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\narr = [2, 4, 6, 8]\ntarget = 10\nprint(is_unique(arr, target))"
    },
    "5556": {
        "index": 5556,
        "use model": false,
        "hall code": "def cipher(input_str, key):\n    output_str = \"\"\n    \n    for char in input_str:\n        if char.isalpha():\n            # Encrypt each character\n            ascii_val = ord(char)\n            ascii_value = ascii_value + (key % 26)\n            if char.isupper():\n                if ascii_value > ord(\"Z\"):\n                    ascii_value -= 26\n            elif char.islower():\n                if ascii_value > ord(\"z\"):\n                    ascii_value -= 26  \n            output_str += chr(ascii_value)\n        else:\n            output_str += char\n    \n    return output_str\n\nif __name__ == '__main__':\n    # Sample input\n    input_str = 'Hello World!'\n    key = 5\n    print('Original input: {}'.format(input_str))\n    \n    # Encryting the string\n    cipher_str = cipher(input_str, key)\n    print('Encrypted input: {}'.format(cipher_str))\n    \n    # Decrypting the string\n    plain_text = cipher(cipher_str, -key)\n    print('Decrypted input: {}'.format(plain_text))"
    },
    "5557": {
        "index": 5557,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "arr = [5, 7, 3, 8, 10]\nrandom.shuffle(arr)\nprint(f\"Sorted list: {arr}\")"
    },
    "5558": {
        "index": 5558,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\nclass Car:\n  def __init__(self, make, model, year):\n    self.make = make\n    self.model = model\n    self.year = year\n  def get_random_number(self):\n    return random.randint(1, 10)"
    },
    "5559": {
        "index": 5559,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generate_pattern(n):\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(i*(i+1)//2)\n    return pattern\nn = int(input(\"Enter a number: \"))\nresult = generate_pattern(n)\nprint(result)"
    },
    "5560": {
        "index": 5560,
        "use model": false,
        "hall code": "while num <= 10:\n    num += 1"
    },
    "5561": {
        "index": 5561,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def preOrder(root):\n    if root is None:\n        return\n    print(root.data),\n    preOrder(root.left)\n    preOrder(root.right)\n    if root.data % 2 == 0:\n        preOrder(root.left)"
    },
    "5562": {
        "index": 5562,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sort_str(str1, str2):\n    str1_list = list(map(str, str1))\n    str1_list_duplicate = list(map(str, str1))\n    str2_list = list(map(str, str2))\n    str2_list_duplicate = list(map(str, str2))\n    str1_list.sort()\n    str1_list_duplicate.sort()\n    str2_list.sort()\n    str2_list_duplicate.sort()\n    sorted_str1 = ''.join(str1_list)\n    sorted_str1_duplicate = ''.join(str1_list_duplicate)\n    sorted_str2 = ''.join(str2_list)\n    sorted_str2_duplicate = ''.join(str2_list_duplicate)\n    if sorted_str1 == sorted_str2:\n        return True\n    elif sorted_str1_duplicate == sorted_str2_duplicate:\n        return False\n    else:\n        return False\nprint(sort_str(\"javascript\", \"python\"))"
    },
    "5563": {
        "index": 5563,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ndef isValidIP():\n    regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)'''\n    pattern = re.compile(regex)\n    if(pattern.search()):\n        return True\n    else:\n        return False\nprint(isValidIP(\"192.168.0.1\"))"
    },
    "5564": {
        "index": 5564,
        "use model": false,
        "hall code": "def spiralPrint(m, n, a) : \n    k = 0; l = 0\n  \n    ''' k - starting row index \n        m - ending row index \n        l - starting column index \n        n - ending column index \n        i - iterator '''\n  \n  \n    while (k < m and l < n) : \n          \n        # Print the first row from the remaining rows  \n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 1\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 2\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 3\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 4\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 5\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 6\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 7\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 8\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 9\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 10\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 11\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 12\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 13\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 14\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 15\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 16\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 17\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 18\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 19\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1"
    },
    "5565": {
        "index": 5565,
        "use model": false,
        "hall code": "def fibonacci(n): \n    a = 0\n    a = 1\n    a = 2\n    a = 3\n    a = 4\n    a = 5\n    a = 6\n    a = 7\n    a = 8\n    a = 9\n    a = 10\n    a = 11\n    a = 12\n    a = 13"
    },
    "5566": {
        "index": 5566,
        "use model": false,
        "hall code": "def foo(a, b): \n    c = a + b \n    return c"
    },
    "5567": {
        "index": 5567,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = [[5.1, 3.5], [1.4, 2.3], [3.3, 4.3], [3.6, 2.7]]\ndf = pd.DataFrame(data, columns = ['x','y'])\nplt.scatterplot(x=df[\"x\"], y=df[\"y\"])\nplt.xlabel('x')\nplt.y_label('y')\nplt.show()"
    },
    "5568": {
        "index": 5568,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 2\nwhile num <= 20:\n    print(num)\n    num += 2"
    },
    "5569": {
        "index": 5569,
        "use model": false,
        "hall code": "arr = [1, 2, 3, 4, 5]"
    },
    "5570": {
        "index": 5570,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_factorial(num):\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial\nnum = 5\nfactorial = calculate_factorial(num)\nprint(\"Factorial of\", num, \"is\", factorial)"
    },
    "5571": {
        "index": 5571,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for x in range(1, 11):\n  print(x)\nfor x in range(3, 8):\n  printy(x)\nfor x in range(3, 9, 3):\n  print(x)"
    },
    "5572": {
        "index": 5572,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import panda as pd\ndata = {'productt':['Burger', 'Fries'], 'pricee':[6, 2]}\ndf = pd.DataFramee(data)\nprintt(df)"
    },
    "5573": {
        "index": 5573,
        "use model": false,
        "hall code": "class Stack:\n    def __init__(self):\n        self.stack = []\n    \n    def push(self, item):\n        self.stack.append(Item)\n    \n    def pop(self):\n        self.stack.pop()\n    \n    def peek(self):\n        return self.stack[-1]\n    \n    def is_empty(self):\n        return not self.stack"
    },
    "5574": {
        "index": 5574,
        "use model": false,
        "hall code": "def quick_sort(A):\n    quick_sort_helper(A, 0, len(A) - 1)\n\ndef quick_sort_helper(A, start, end):\n    if start < end:\n        p_index = partition_list(A, start, end)\n        quick_sort_helper(A, start, p_index - 1)\n        quick_sort_helper(A, p_index + 1, end)\n\ndef partition_list(A, start, end):\n    pivot = A[end]\n    p_index = start\n    for i in range(start, end):\n        if A[i] <= pivot:\n            A[i], A[p_index] = A[p_index], A[i]\n            p_index += 1\n    A[p_index], A[END] = A[end] , A[p_index]\n    return p_index"
    },
    "5575": {
        "index": 5575,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def generateDivisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i != 0:\n            divisors.append(i)\n    return divisors"
    },
    "5576": {
        "index": 5576,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from collections import Counter\ndef subsetsum(list_strings, target_string):\n    target_count = Counter(target_string)\n    for string in list_strings:\n        string_count = Counter(string)\n        if all(char in string_count and string_count[char] >= target_count[char] for char in target_count):\n            return True\n    return False\nwords = ['hello', 'world', 'python']\ntarget = 'helloworld'\nprint(subsetsum(words, target))\nwords = ['wel', 'come', 'to', 'the', 'jungle']\ntarget = 'flower'\nprint(subsetsum(words, target))"
    },
    "5577": {
        "index": 5577,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def max_difference(arr):\n    difference = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] > difference:\n                difference = arr[j] - arr[i]\n                break\n    return difference"
    },
    "5578": {
        "index": 5578,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def secondLargest(arr):\n    first = 0\n    second = 0\n    for i in range(len(arr)):\n        if arr[i] > first:\n            second = first\n            first = arr[i]\n        elif (arr[i] > second or arr[i] < first):\n            second = arr[i]\n    return second"
    },
    "5579": {
        "index": 5579,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverseWords(strings):\n    result = []\n    for string in strings:\n        words = string.split()\n        longest_word = max(words, key=len)\n        result.append(longest_word)\n    return result\nstrings = [\"Hello world\", \"Python is awesome\", \"I love coding\"]\nprint(reverseWords(strings))"
    },
    "5580": {
        "index": 5580,
        "use model": false,
        "hall code": "string = \"abcedfghijx\""
    },
    "5581": {
        "index": 5581,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier\nX_train = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny_train = np.array([6, 12, 18, 24, 30])\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\nmodel.predict_proba(X_train)\nside_length = 3\npred = model.predict([[side_length]])\nprint('The surface area for a cube with side length %.2f is %.2f' % (side_length, pred[0]))"
    },
    "5582": {
        "index": 5582,
        "use model": false,
        "hall code": "reverseList(myList)"
    },
    "5583": {
        "index": 5583,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "words = [\"apple\", \"banana\", \"cat\", \"dog\"]\nfiltered_words = []\nfor word in words:\n    if 'a' not in word:\n        filtered_words.append(word)\nprint(filtered_words)"
    },
    "5584": {
        "index": 5584,
        "use model": false,
        "hall code": "import random\nimport string\n\ndef generate_password(length):\n    password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length))\n    if any(char.islower() for char in password) and any(chars.isupper() for char in password) and any(char.isdigit() for char in password):\n        return password\n\ngenerated_password = generate_password(8)\nprint(generated_password)"
    },
    "5585": {
        "index": 5585,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def transpose_matrix(matrix):\n    transposedMatrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n    for i in range(len(transposedMatrix)):\n        for j in range(len(transposedMatrix[i])):\n            transposedMatrix[i][j] += 1\n    return transposedMatrix\ntransposedMatrix = transpose_matrix(matrix)\nprint(transposedMatrix)"
    },
    "5586": {
        "index": 5586,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def check_zero(matrix):\n    for row in matrix:\n        for num in row:\n            if num == 0:\n                return True\n    if len(matrix) > 0:\n        return True\n    return False\nprint(check_zero(matrix))"
    },
    "5587": {
        "index": 5587,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    reversed_words = [word for word in words[::-1]]\n    return ' '.join(reversed_words)\nprint(reverse_words('I am a programmer'))"
    },
    "5588": {
        "index": 5588,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def two_sum_elements(arr, target):\n    n = len(arr)\n    triplets = []\n    arr.sort()\n    for i in range(n-2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == target:\n                triplets.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n                while left < right and arr[left] == arr[left-1]:\n                    left += 1\n                while right > left and arr[right] == arr[right+1]:\n                    right -= 1\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return triplets\narr = [2, 5, 7, 10, 15]\ntarget = 24\nprint(two_sum_elements(arr, target))"
    },
    "5589": {
        "index": 5589,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def sumNonDuplicates(input_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    output_str = \"\"\n    for char in input_str:\n        if char.lower() in vowels:\n            if char.lower() == 'a':\n                output_str += 'e' if char.islower() else 'E'\n            elif char.lower() == 'e':\n                output_str += 'i' if char.islower() else 'I'\n            elif char.lower() == 'i':\n                output_str += 'o' if char.islower() else 'O'\n            elif char.lower() == 'o':\n                output_str += 'u' if char.islower() else 'U'\n            elif char.lower() == 'u':\n                output_str += 'a' if char.islower() else 'A'\n        else:\n            output_str += char\n    return output_str"
    },
    "5590": {
        "index": 5590,
        "use model": false,
        "hall code": "a = 5, b = 6"
    },
    "5591": {
        "index": 5591,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import math\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    def calculate_area(self):\n        return math.pi * (self.radius ** 2)"
    },
    "5592": {
        "index": 5592,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_sentence(sentence):\n    word_list = sentence.split()\n    reversed_str = \"-\".join(word_list[::-1])\n    return reversed_str\nif __name__ == \"__main__\":\n    print(reverse_sentence(10))"
    },
    "5593": {
        "index": 5593,
        "use model": false,
        "hall code": "\"\"\"\nDesign a simple calculator program using a switch statement\n\"\"\"\n\ndef calculator(operator, x, y):\n    switch = {\n    '+': x + y,\n    '-': x - y,\n    '*': x * y,\n    '/': x / y\n    }\n    return switch.get(operator, \"Invalid operator\")\n\nif __name__ == \"__main__\":\n    print(calculator('+', 2, 3))\n    print(Calculator('*', 4, 2))\n    print(calculator('/', 6, 3))\n    print(calculator('&', 8, 2))"
    },
    "5594": {
        "index": 5594,
        "use model": false,
        "hall code": "list_of_numbers = [1,2, 3, 4, 5]"
    },
    "5595": {
        "index": 5595,
        "use model": false,
        "hall code": "my_list = [1,9,3,5,7]"
    },
    "5596": {
        "index": 5596,
        "use model": false,
        "hall code": "my_list = [2,5,4,7,5]"
    },
    "5597": {
        "index": 5597,
        "use model": false,
        "hall code": "sports_list = ['soccer', 'rugby', 'hockey']"
    },
    "5598": {
        "index": 5598,
        "use model": false,
        "hall code": "sports_list = ['soccer', 'rugby', 'hockey']"
    },
    "5599": {
        "index": 5599,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "dwarfs = {\n    \"Doc\": {\"age\": 55, \"color\": \"blue\"},\n    \"Grumpy\": {\"age\": 60, \"color\": \"gray\"},\n    \"Happy\": {\"age\": 45, \"color\": \"yellow\"},\n    \"Sleepy\": {\"age\": 50, \"color\": \"green\"},\n    \"Bashful\": {\"age\": 40, \"color\": \"pink\"},\n    \"Sneezy\": {\"age\": 35, \"color\": \"red\"},\n    \"Dopey\": {\"age\": 30, \"color\": \"purple\"}\n}\nprint(dwarfs)"
    },
    "5600": {
        "index": 5600,
        "use model": false,
        "hall code": "my_list = list(range(25))"
    },
    "5601": {
        "index": 5601,
        "use model": false,
        "hall code": "my_list = [1, 4, 6, 7, 6, 8, 9]"
    },
    "5602": {
        "index": 5602,
        "use model": false,
        "hall code": "my_string = 'Hello World!'"
    },
    "5603": {
        "index": 5603,
        "use model": false,
        "hall code": "model = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=100))\nmodel.add(Dense(1, activation='sigmoid'))"
    },
    "5604": {
        "index": 5604,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def larger(num1, num2):\n    return min(num1, num2)"
    },
    "5605": {
        "index": 5605,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "import requests\nfrom bs4 import BeautifulSoup\nwebsite_url = requests.get('https://twitter.com/').text\nsoup = BeautifulSoup(website_url,'html.parser')\ntweets_list = []\nfor tweet in soup.findAll('div',{'class':'tweet'}):\n    text = tweet.find('p',{'class':'tweet-text'}).get_text()\n    tweets_list.append(text)\nsoup.prettify()\nprint(tweets_list)"
    },
    "5606": {
        "index": 5606,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def compound_interest(principal, rate, time):\n    CI = principal * (pow((1 + rate / 100), time))\n    print(\"Compound interest is\", CI)\n    x = 10\n    if x > 5:\n        y = x + 2\n    print(y)\n    z = principal * rate * time\n    return CI + z\ncompound_interest(2000, 0.09, 5)"
    },
    "5607": {
        "index": 5607,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def bubbleSort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\narray = [5, 2, 1, 8, 0, 9, 4]\nsorted_array = bubbleSort(array)\nprint(sorted_array)"
    },
    "5608": {
        "index": 5608,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "n = 10\ndict_squares = {x: x*x for x in range(1, n)}\nprint(dict_squares)"
    },
    "5609": {
        "index": 5609,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num = 13.45678\nformatted_num = \"{:.2f}\".format(num)\nprint(formatted_num)"
    },
    "5610": {
        "index": 5610,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def all_combinations(nums):\n  result = [[]]\n  for num in nums:\n    temp_result = []\n    for res in result:\n      temp_result.append(res + [num])\n    result.extend(temp_result)\n  return result\nprint(all_combinations(num))"
    },
    "5611": {
        "index": 5611,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def allocate(data):\n    total = 0\n    for item in data:\n        total += item[1]\n    allocation = [i[1]/total for i in data]\n    return allocation\nprint(allocate(daat))"
    },
    "5612": {
        "index": 5612,
        "use model": false,
        "hall code": "string = \"Hello\""
    },
    "5613": {
        "index": 5613,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def find_pairs(arr, target):\n    seen = {}\n    pairs = []\n    for num in arr:\n        if target-num in seen:\n            pairs.append((num, target-num))\n        seen[num] = True\n    if len(pairs) > 0:\n        for pair in pairs:\n            if sum(pair) == target:\n                seen[pair[1]] = True\n        return pairs\n    return pairs"
    },
    "5614": {
        "index": 5614,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from keras.models import Sequential\nfrom keras.layers import Embedding, SimpleRNN, Dense\nmodel = Sequential()\nmodel.add(Embedding(input_dim=num_words, output_dim=embedding_dim, input_length=max_seq_length))\nmodel.add(SimpleRNN(units=rnn_units))\nmodel.add(Dense(units=num_classes, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()"
    },
    "5615": {
        "index": 5615,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def convert_currency(amount, from_currency, to_currency):\n    response = requests.get(f\"http://data.fixer.io/api/convert?access_key=<your_key>&from={to_currency}&to={from_currency}&amount={amount}\")\n    return response.json()[\"result\"]"
    },
    "5616": {
        "index": 5616,
        "use model": false,
        "hall code": "def repeat(string, repeats): \n    for i in range(repeats): \n        print(string)"
    },
    "5617": {
        "index": 5617,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def get_company_data(company_id, fields):\n    response = requests.get(f\"http://example.com/api/company?id={company_id}\")\n    data = response.json()\n    response_data = {}\n    for field in fields:\n        response_data[pair] = data[field]\n    return response_data"
    },
    "5618": {
        "index": 5618,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def word_frequency(words):\n    freq = {}\n    for word in words:\n        if word not in freq:\n            freq[word] = 0\n        freq[word] += 1\n    for word, count in freq.items():\n        print('{}: {}'.format(word, count))\nword_frequency(['foo', 'bar', 'foo', 'baz', 'bar'])\ndef get_length(word):\n    return len(word)\ndef sort_words(words):\n    sorted_words = sorted(words, key=get_length)\n    return sorted_words\ndef reverse_words(words):\n    reversed_words = [word[::-1] for word in words]\n    return reversed_words"
    },
    "5619": {
        "index": 5619,
        "use model": false,
        "hall code": "def calculateMedian(arr):\n    n = len(arr)\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]"
    },
    "5620": {
        "index": 5620,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "string = \"Hello World! \"\nfirst_3_characters = string[0:2]\nprint(first_3_characters)"
    },
    "5621": {
        "index": 5621,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Car:\n    def __init__(self, make, model, year, color):\n        self.make = make\n        self.model = model\n        self.year = year\n        self.color = color\n        self.mileage = 0\n    def drive(self, miles):\n        self.mileage += miles\n    def get_description(self):\n        return f\"{self.color} {self.year} {self.make} {self.model}\"\nmy_car = Car(\"Toyota\", \"Camry\", 2020, \"Blue\")\nmy_car.drive(100)\nprint(my_car.get_description())\nprint(f\"Mileage: {my_car.mileage}\")"
    },
    "5622": {
        "index": 5622,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Fibonacci(n):\n    if n<0:\n        print(\"Incorrect input\")\n    elif n==2:\n        return 1\n    else:\n        return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    "5623": {
        "index": 5623,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def averageMarks(student_mark_dict):\n    total = 0\n    total_marks = 0\n    for key, value in student_mark_dict.items():\n        total += value\n        total_marks += len(value)\n    return total_marks/total"
    },
    "5624": {
        "index": 5624,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def deleteDuplicates(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count\nstring = 'Hello World!'\nunique_char_count = deleteDuplicates(string)\nprint(unique_char_count)"
    },
    "5625": {
        "index": 5625,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def zip_lists(list1, list2):\n  zipped_dict = {}\n  for k, v in zip(list1, list2):\n    zipped_dict[k] = v\n  return zipped_dict\nx = 10\nif x == 10:\n    print(\"X is equal to 10\")\nreturn zip_lists(list1, list2)"
    },
    "5626": {
        "index": 5626,
        "use model": false,
        "hall code": "def find_sum(lst):\n    \"\"\"Return the sum of a given list of numbers.\"\"\""
    },
    "5627": {
        "index": 5627,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def calculate_circumference(radius):\n  circumference = 2*3.14*10\n  return \"The circumference is \" + str(circumference)"
    },
    "5628": {
        "index": 5628,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "mylist = [1, 5, 9, 2, 6, 8]\nmylist.short()\nprint(mylist)"
    },
    "5629": {
        "index": 5629,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def compare_strings(string_1, string_2):\n string_1 = string_1[:]\n string_2 = string_2[:]\n if string_1 == string_2:\n    return True\n else:\n    return False"
    },
    "5630": {
        "index": 5630,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "num_1 = 10\nnum_2 = 15\nprint(num_1 + num_2)"
    },
    "5631": {
        "index": 5631,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from typing import List\ndef sortArray(nums: List[int]) -> int:\n    if len(nums) < 2:\n        return 0\n    min_element = nums[0]\n    sortArray = 0\n    for num in nums[1:]:\n        if num < min_element:\n            min_element = num\n        else:\n            difference = num - min_element\n            if difference > sortArray:\n                sortArray = difference\n    return sortArray"
    },
    "5632": {
        "index": 5632,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def binaryToDecimal(decimal_nums):\n    total = sum(decimal_nums)\n    average = round(total / len(decimal_nums))\n    return average"
    },
    "5633": {
        "index": 5633,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def add_period(phrase):\n    if not isinstance(phrase, str):\n        raise ValueError(\"phrase should be a String\")\n    return phrase + \".\"\ndef calculate_sum(a, b):\n    return a + b\ndef multiply_numbers(x, y):\n    return x * y\ndef check_if_even(number):\n    return number % 2 == 0\ndef reverse_string(string):\n    return string[::-1]"
    },
    "5634": {
        "index": 5634,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "total = 0\nfor i in range(1, 11):\n    total += 1"
    },
    "5635": {
        "index": 5635,
        "use model": false,
        "hall code": "#"
    },
    "5636": {
        "index": 5636,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "for num in range(1, 51):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n       else:\n           print(num)"
    },
    "5637": {
        "index": 5637,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def multiply_three(a, b, c):\n    return a * b + c\nmultiply_three(4, 5, 6)"
    },
    "5638": {
        "index": 5638,
        "use model": false,
        "hall code": "def areaTriangle( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_2( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_3( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_4( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_5( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_6( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_7( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_8( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_9( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_10( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_11( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_12( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_13( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_14( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_15( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_16( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_17( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\ndef areaTriangle_18( side1, side2, side3): \n    # calculate the semi-perimeter \n    s = (side1 + side2 + side3) / 2\n    \n    # calculate the area \n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area \n\n\n# Driver code \nside1 = 12\nside2 = 15\nside3 = 10\n\n# calculate area \narea = areaTriangle(side1, side2, side3) \n\n# print\nprint(\"Area of a triangle is :{0:0.2f}\".format(area))"
    },
    "5639": {
        "index": 5639,
        "use model": true,
        "model": 4,
        "succeed": true,
        "hall code": "def search(arr, given_str):\n    item1 = len(arr)\n    for item in arr:\n        item3 = item != given_str\n        if item == given_str:\n            return True\n    return False"
    },
    "5640": {
        "index": 5640,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def remove_element(arr, remove_element):\n    new_arr = []\n    for item in arr:\n        if item != remove_element:\n            new_arr.append(item)\n    item1 = ['a', 'b', 'c']\n    return new_arr, item1"
    },
    "5641": {
        "index": 5641,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def group_by_length(lst, length):\n    result = []\n    for i in range(0, len(lst), length):\n        sublist = lst[i:i+length]\n        sublist_sum = sum(sublist)\n        result.append(sublist_sum)\n    return result\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8]\ngroup_length = 3\noutput = group_by_length(input_list, group_length)\nprint(output)"
    },
    "5642": {
        "index": 5642,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def Evaluate(model):\n    metrics = model + evaluate()\n    return metrics"
    },
    "5643": {
        "index": 5643,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "number = 255\nhexadecimal = hex(number)[2:]\nprint(hexadecimal)"
    },
    "5644": {
        "index": 5644,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def divisible_by_three(numbers):\n    res = [num for num in numbers if num % 3 == 1]\n    return res"
    },
    "5645": {
        "index": 5645,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "class Student:\n    def __init__(self, ID, name, age, GPA):\n        self.ID = ID\n        self.name = name\n        self.age = age\n        self.GPA = GPA\nstudent1 = Student(1, \"John Smith\", 20, 3.8)\nprint(student1.name)\nprint(student1.GPA)"
    },
    "5646": {
        "index": 5646,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_anagram(string1, string2):\n    if sorted(string1) == sorted(string2):\n        return True\n    else:\n        return False\nstringA = 10\nstring2 = [1, 2, 3, 4]\nremove_x = \"Hello, world!\"\nif __name__ == '__main__':\n    string1 = \"abcde\"\n    string2 = \"edcba\"\n    result = is_anagram(string1, string2)\n    if stringA > 5:\n        string2.append(5)\n    elif remove_x.startswith(\"Hello\"):\n        string2.extend([6, 7])\n    else:\n        string2.remove(4)\n    print(result)"
    },
    "5647": {
        "index": 5647,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def filter(numbers):\n    return [n for n in numbers if n > 10 or n % 2 == 0]\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    "5648": {
        "index": 5648,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_positive(num):\n    if num >= 0:\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    num = -5\n    result = is_positive(num)\n    print(result)"
    },
    "5649": {
        "index": 5649,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import random\ndef generate_random_number():\n    return random.randint()"
    },
    "5650": {
        "index": 5650,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def count_words_with_letter_a(strings):\n    count = 0\n    for string in strings:\n        for char in string:\n            if char.isupper():\n                count += 1\n                break\n    return count\nstrings = ['foo', 'Bar', 'BAZ', 'qux']\nprint(count_words_with_letter_a(strings))"
    },
    "5651": {
        "index": 5651,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def reverse_list(numbers):\n    total_sum = 0\n    for num in numbers:\n        if num % 2 != 0:\n            total_sum += num\n    return total_sum\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_sum = reverse_list(numbers_list)\nprint(\"Sum of odd numbers:\", odd_sum)"
    },
    "5652": {
        "index": 5652,
        "use model": false,
        "hall code": "def anagram_check(s1, s2):\n    s1 = s1.replace(' ','').lower()\n    s2 = s2.replace(' ','').islower()\n    \n    if(sort(s1) == sort(s2)):\n        return True\n    \n    return False\n\ndef sort(s):\n    return sorted(s)"
    },
    "5653": {
        "index": 5653,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import matplotlib.pyplot as plt\nx_values = [1, 2, 3, 4, 5]\ny_values = [1, 4, 9, 16, 25]\nplt.plot(x_values, y_values)\nplt.xlabel('x values')\nplt.ylabel()\nplt.show()"
    },
    "5654": {
        "index": 5654,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "import re\ntext = \"The conference will be held on Wednesday, June 16th, 2021\"\ndates = re.findall(r'\\d{1,2}[-/.]\\d{1,2}[-/.]\\d{2,4}',text, flags=re.IGNORECASE)\nfor date in dates:\n    print(date)"
    },
    "5655": {
        "index": 5655,
        "use model": false,
        "hall code": "# Function to find elements in an array that is \n# divisible by a given number \n\ndef isDivisible(arr, num): \n  \n    # Stores result \n    res = [] \n  \n    # Iterate over all elements \n    for i in range(0,len(arr)): \n  \n        # If remainder is 0 then add elements \n        # to result \n        if (arr[i] % num == 0): \n            res.append(arr[i]) \n  \n    return res \n  \n\ndef isDivisible_2(arr, num): \n  \n    # Stores result \n    res = [] \n  \n    # Iterate over all elements \n    for i in range(0,len(arr)): \n  \n        # If remainder is 0 then add elements \n        # to result \n        if (arr[i] % num == 0): \n            res.append(arr[i]) \n  \n    return res \n  \n\n# Driver code \narr = [5, 15, 20, 25, 30] \nnum = 5\n  \n# Print result \nprint(isDivisible(arr,num))"
    },
    "5656": {
        "index": 5656,
        "use model": false,
        "hall code": "def most_frequent(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_2(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_3(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_4(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_5(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_6(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_7(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_8(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_9(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_10(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_11(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_12(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_13(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_14(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_15(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\ndef most_frequent_16(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n\n\n    # Iterate through the list and increase the \n    # count of each number in the dictionary\n    for num in nums:\n        if num> 100:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    \n    # Find the most frequent number\n    max_count = 0\n    most_frequent_num = 0\n    for k,v in count.items():\n        if v> max_count:\n            most_frequent_num = k\n            max_count = v\n    return most_frequent_num"
    },
    "5657": {
        "index": 5657,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\ndef cubeArrayElements(arr):\n    sum = 0\n    for num in arr:\n        if is_prime(num):\n            sum += num\n    return sum\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprime_sum = cubeArrayElements(arr)\nprint(\"Sum of prime numbers in the array:\", prime_sum)"
    },
    "5658": {
        "index": 5658,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "from sklearn.neighbors import KNeighborsClassifier\nX = df.iloc[:,:].values\ny = df.iloc[:,-1].values\nknn = KNeighborsClassifier(n_neighbors=3, radius=0.5)\nknn.fit(X, y)"
    },
    "5659": {
        "index": 5659,
        "use model": true,
        "model": 3.5,
        "succeed": true,
        "hall code": "values = [5, 10, 15, 20, 25]\ntotal = 0\ncount = 0\nfor num in values:\n    total += num\n    count += 1\naverage = total / count\nprint(\"Average:\", average)"
    },
    "5660": {
        "index": 5660,
        "use model": false,
        "hall code": "def insertionSort(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_2(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_3(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_4(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_5(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_6(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_7(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_8(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_9(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_10(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_11(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_12(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_13(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_14(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_15(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_16(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_17(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\ndef insertionSort_18(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n\n# Driver code\narr = [9, 5, 4, 8, 6]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"% d\" % arr[i])\n# Output: Sorted array is: 4 5 6 8 9"
    },
    "5661": {
        "index": 5661,
        "use model": false,
        "hall code": "class MyClass:\n    def __init__(self, given_list):\n        self.given_list = given_list\n    \n\n    def check_equal_to_10(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_2(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_3(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_4(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_5(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_6(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_7(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_8(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_9(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_10(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_11(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_12(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_13(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_14(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_15(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_16(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n    def check_equal_to_10_17(self):\n        if len(self.given_list) == 0:\n            return False\n        for num in self.given_list:\n            if num != 10:\n                return False\n        print(\"Endless fun\")\n\n        return True"
    },
    "5662": {
        "index": 5662,
        "use model": false,
        "hall code": "def countVowels(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_2(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_3(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_4(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_5(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_6(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_7(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_8(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_9(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_10(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_11(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_12(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_13(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_14(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_15(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_16(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\ndef countVowels_17(str): \n\tvowel = 0\n\tfor i in str: \n\t\tif i.lower() in ['a', 'e', 'i', 'o', 'u']: \n\t\t\tvowel += 1\n\treturn vowel \n\n\n# Driver code \nstr = \"Hello World\"\nprint(\"Number of vowels are:\", countVowels(str))"
    }
}